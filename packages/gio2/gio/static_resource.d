/// Module for [StaticResource] class
module gio.static_resource;

import gid.gid;
import gio.c.functions;
import gio.c.types;
import gio.resource;
import gio.types;

/**
    #GStaticResource is an opaque data structure and can only be accessed
    using the following functions.
*/
class StaticResource
{
  GStaticResource cInstance;

  /** */
  this(void* ptr, Flag!"Take" take = No.Take)
  {
    if (!ptr)
      throw new GidConstructException("Null instance pointer for Gio.StaticResource");

    cInstance = *cast(GStaticResource*)ptr;

    if (take)
      gFree(ptr);
  }

  /** */
  void* cPtr()
  {
    return cast(void*)&cInstance;
  }

  /**
      Finalized a GResource initialized by [gio.static_resource.StaticResource.init_].
      
      This is normally used by code generated by
      [glib-compile-resources][glib-compile-resources]
      and is not typically used by other code.
  */
  void fini()
  {
    g_static_resource_fini(cast(GStaticResource*)cPtr);
  }

  /**
      Gets the GResource that was registered by a call to [gio.static_resource.StaticResource.init_].
      
      This is normally used by code generated by
      [glib-compile-resources][glib-compile-resources]
      and is not typically used by other code.
      Returns: a #GResource
  */
  gio.resource.Resource getResource()
  {
    GResource* _cretval;
    _cretval = g_static_resource_get_resource(cast(GStaticResource*)cPtr);
    auto _retval = _cretval ? new gio.resource.Resource(cast(void*)_cretval, No.Take) : null;
    return _retval;
  }

  /**
      Initializes a GResource from static data using a
      GStaticResource.
      
      This is normally used by code generated by
      [glib-compile-resources][glib-compile-resources]
      and is not typically used by other code.
  */
  void init_()
  {
    g_static_resource_init(cast(GStaticResource*)cPtr);
  }
}
