/// C functions for gtk3 library
module gtk.c.functions;

public import gid.basictypes;
import gid.loader;
import gtk.c.types;
public import atk.c.types;
public import gdk.c.types;
public import xlib.c.types;

version(Windows)
  private immutable LIBS = ["libgtk-3-0.dll;gtk-3-0.dll;gtk-3.dll"];
else version(OSX)
  private immutable LIBS = ["libgtk-3.0.dylib"];
else
  private immutable LIBS = ["libgtk-3.so.0"];

__gshared extern(C)
{
  // AboutDialog
  GType function() c_gtk_about_dialog_get_type; ///
  GtkWidget* function() c_gtk_about_dialog_new; ///
  void function(GtkAboutDialog* about, const(char)* sectionName, const(char*)* people) c_gtk_about_dialog_add_credit_section; ///
  const(char*)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_artists; ///
  const(char*)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_authors; ///
  const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_comments; ///
  const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_copyright; ///
  const(char*)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_documenters; ///
  const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_license; ///
  GtkLicense function(GtkAboutDialog* about) c_gtk_about_dialog_get_license_type; ///
  PixbufC* function(GtkAboutDialog* about) c_gtk_about_dialog_get_logo; ///
  const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_logo_icon_name; ///
  const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_program_name; ///
  const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_translator_credits; ///
  const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_version; ///
  const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_website; ///
  const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_website_label; ///
  bool function(GtkAboutDialog* about) c_gtk_about_dialog_get_wrap_license; ///
  void function(GtkAboutDialog* about, const(char*)* artists) c_gtk_about_dialog_set_artists; ///
  void function(GtkAboutDialog* about, const(char*)* authors) c_gtk_about_dialog_set_authors; ///
  void function(GtkAboutDialog* about, const(char)* comments) c_gtk_about_dialog_set_comments; ///
  void function(GtkAboutDialog* about, const(char)* copyright) c_gtk_about_dialog_set_copyright; ///
  void function(GtkAboutDialog* about, const(char*)* documenters) c_gtk_about_dialog_set_documenters; ///
  void function(GtkAboutDialog* about, const(char)* license) c_gtk_about_dialog_set_license; ///
  void function(GtkAboutDialog* about, GtkLicense licenseType) c_gtk_about_dialog_set_license_type; ///
  void function(GtkAboutDialog* about, PixbufC* logo) c_gtk_about_dialog_set_logo; ///
  void function(GtkAboutDialog* about, const(char)* iconName) c_gtk_about_dialog_set_logo_icon_name; ///
  void function(GtkAboutDialog* about, const(char)* name) c_gtk_about_dialog_set_program_name; ///
  void function(GtkAboutDialog* about, const(char)* translatorCredits) c_gtk_about_dialog_set_translator_credits; ///
  void function(GtkAboutDialog* about, const(char)* version_) c_gtk_about_dialog_set_version; ///
  void function(GtkAboutDialog* about, const(char)* website) c_gtk_about_dialog_set_website; ///
  void function(GtkAboutDialog* about, const(char)* websiteLabel) c_gtk_about_dialog_set_website_label; ///
  void function(GtkAboutDialog* about, bool wrapLicense) c_gtk_about_dialog_set_wrap_license; ///

  // AccelGroup
  GType function() c_gtk_accel_group_get_type; ///
  GtkAccelGroup* function() c_gtk_accel_group_new; ///
  GtkAccelGroup* function(GClosure* closure) c_gtk_accel_group_from_accel_closure; ///
  bool function(GtkAccelGroup* accelGroup, GQuark accelQuark, ObjectC* acceleratable, uint accelKey, GdkModifierType accelMods) c_gtk_accel_group_activate; ///
  void function(GtkAccelGroup* accelGroup, uint accelKey, GdkModifierType accelMods, GtkAccelFlags accelFlags, GClosure* closure) c_gtk_accel_group_connect; ///
  void function(GtkAccelGroup* accelGroup, const(char)* accelPath, GClosure* closure) c_gtk_accel_group_connect_by_path; ///
  bool function(GtkAccelGroup* accelGroup, GClosure* closure) c_gtk_accel_group_disconnect; ///
  bool function(GtkAccelGroup* accelGroup, uint accelKey, GdkModifierType accelMods) c_gtk_accel_group_disconnect_key; ///
  GtkAccelKey* function(GtkAccelGroup* accelGroup, GtkAccelGroupFindFunc findFunc, void* data) c_gtk_accel_group_find; ///
  bool function(GtkAccelGroup* accelGroup) c_gtk_accel_group_get_is_locked; ///
  GdkModifierType function(GtkAccelGroup* accelGroup) c_gtk_accel_group_get_modifier_mask; ///
  void function(GtkAccelGroup* accelGroup) c_gtk_accel_group_lock; ///
  GtkAccelGroupEntry* function(GtkAccelGroup* accelGroup, uint accelKey, GdkModifierType accelMods, uint* nEntries) c_gtk_accel_group_query; ///
  void function(GtkAccelGroup* accelGroup) c_gtk_accel_group_unlock; ///

  // AccelLabel
  GType function() c_gtk_accel_label_get_type; ///
  GtkWidget* function(const(char)* string_) c_gtk_accel_label_new; ///
  void function(GtkAccelLabel* accelLabel, uint* acceleratorKey, GdkModifierType* acceleratorMods) c_gtk_accel_label_get_accel; ///
  GtkWidget* function(GtkAccelLabel* accelLabel) c_gtk_accel_label_get_accel_widget; ///
  uint function(GtkAccelLabel* accelLabel) c_gtk_accel_label_get_accel_width; ///
  bool function(GtkAccelLabel* accelLabel) c_gtk_accel_label_refetch; ///
  void function(GtkAccelLabel* accelLabel, uint acceleratorKey, GdkModifierType acceleratorMods) c_gtk_accel_label_set_accel; ///
  void function(GtkAccelLabel* accelLabel, GClosure* accelClosure) c_gtk_accel_label_set_accel_closure; ///
  void function(GtkAccelLabel* accelLabel, GtkWidget* accelWidget) c_gtk_accel_label_set_accel_widget; ///

  // AccelMap
  GType function() c_gtk_accel_map_get_type; ///
  void function(const(char)* accelPath, uint accelKey, GdkModifierType accelMods) c_gtk_accel_map_add_entry; ///
  void function(const(char)* filterPattern) c_gtk_accel_map_add_filter; ///
  bool function(const(char)* accelPath, uint accelKey, GdkModifierType accelMods, bool replace) c_gtk_accel_map_change_entry; ///
  void function(void* data, GtkAccelMapForeach foreachFunc) c_gtk_accel_map_foreach; ///
  void function(void* data, GtkAccelMapForeach foreachFunc) c_gtk_accel_map_foreach_unfiltered; ///
  GtkAccelMap* function() c_gtk_accel_map_get; ///
  void function(const(char)* fileName) c_gtk_accel_map_load; ///
  void function(int fd) c_gtk_accel_map_load_fd; ///
  void function(GScanner* scanner) c_gtk_accel_map_load_scanner; ///
  void function(const(char)* accelPath) c_gtk_accel_map_lock_path; ///
  bool function(const(char)* accelPath, GtkAccelKey* key) c_gtk_accel_map_lookup_entry; ///
  void function(const(char)* fileName) c_gtk_accel_map_save; ///
  void function(int fd) c_gtk_accel_map_save_fd; ///
  void function(const(char)* accelPath) c_gtk_accel_map_unlock_path; ///

  // Accessible
  GType function() c_gtk_accessible_get_type; ///
  void function(GtkAccessible* accessible) c_gtk_accessible_connect_widget_destroyed; ///
  GtkWidget* function(GtkAccessible* accessible) c_gtk_accessible_get_widget; ///
  void function(GtkAccessible* accessible, GtkWidget* widget) c_gtk_accessible_set_widget; ///

  // Action
  GType function() c_gtk_action_get_type; ///
  GtkAction* function(const(char)* name, const(char)* label, const(char)* tooltip, const(char)* stockId) c_gtk_action_new; ///
  void function(GtkAction* action) c_gtk_action_activate; ///
  void function(GtkAction* action) c_gtk_action_block_activate; ///
  void function(GtkAction* action) c_gtk_action_connect_accelerator; ///
  GtkWidget* function(GtkAction* action, GtkIconSize iconSize) c_gtk_action_create_icon; ///
  GtkWidget* function(GtkAction* action) c_gtk_action_create_menu; ///
  GtkWidget* function(GtkAction* action) c_gtk_action_create_menu_item; ///
  GtkWidget* function(GtkAction* action) c_gtk_action_create_tool_item; ///
  void function(GtkAction* action) c_gtk_action_disconnect_accelerator; ///
  GClosure* function(GtkAction* action) c_gtk_action_get_accel_closure; ///
  const(char)* function(GtkAction* action) c_gtk_action_get_accel_path; ///
  bool function(GtkAction* action) c_gtk_action_get_always_show_image; ///
  GIcon* function(GtkAction* action) c_gtk_action_get_gicon; ///
  const(char)* function(GtkAction* action) c_gtk_action_get_icon_name; ///
  bool function(GtkAction* action) c_gtk_action_get_is_important; ///
  const(char)* function(GtkAction* action) c_gtk_action_get_label; ///
  const(char)* function(GtkAction* action) c_gtk_action_get_name; ///
  GSList* function(GtkAction* action) c_gtk_action_get_proxies; ///
  bool function(GtkAction* action) c_gtk_action_get_sensitive; ///
  const(char)* function(GtkAction* action) c_gtk_action_get_short_label; ///
  const(char)* function(GtkAction* action) c_gtk_action_get_stock_id; ///
  const(char)* function(GtkAction* action) c_gtk_action_get_tooltip; ///
  bool function(GtkAction* action) c_gtk_action_get_visible; ///
  bool function(GtkAction* action) c_gtk_action_get_visible_horizontal; ///
  bool function(GtkAction* action) c_gtk_action_get_visible_vertical; ///
  bool function(GtkAction* action) c_gtk_action_is_sensitive; ///
  bool function(GtkAction* action) c_gtk_action_is_visible; ///
  void function(GtkAction* action, GtkAccelGroup* accelGroup) c_gtk_action_set_accel_group; ///
  void function(GtkAction* action, const(char)* accelPath) c_gtk_action_set_accel_path; ///
  void function(GtkAction* action, bool alwaysShow) c_gtk_action_set_always_show_image; ///
  void function(GtkAction* action, GIcon* icon) c_gtk_action_set_gicon; ///
  void function(GtkAction* action, const(char)* iconName) c_gtk_action_set_icon_name; ///
  void function(GtkAction* action, bool isImportant) c_gtk_action_set_is_important; ///
  void function(GtkAction* action, const(char)* label) c_gtk_action_set_label; ///
  void function(GtkAction* action, bool sensitive) c_gtk_action_set_sensitive; ///
  void function(GtkAction* action, const(char)* shortLabel) c_gtk_action_set_short_label; ///
  void function(GtkAction* action, const(char)* stockId) c_gtk_action_set_stock_id; ///
  void function(GtkAction* action, const(char)* tooltip) c_gtk_action_set_tooltip; ///
  void function(GtkAction* action, bool visible) c_gtk_action_set_visible; ///
  void function(GtkAction* action, bool visibleHorizontal) c_gtk_action_set_visible_horizontal; ///
  void function(GtkAction* action, bool visibleVertical) c_gtk_action_set_visible_vertical; ///
  void function(GtkAction* action) c_gtk_action_unblock_activate; ///

  // ActionBar
  GType function() c_gtk_action_bar_get_type; ///
  GtkWidget* function() c_gtk_action_bar_new; ///
  GtkWidget* function(GtkActionBar* actionBar) c_gtk_action_bar_get_center_widget; ///
  void function(GtkActionBar* actionBar, GtkWidget* child) c_gtk_action_bar_pack_end; ///
  void function(GtkActionBar* actionBar, GtkWidget* child) c_gtk_action_bar_pack_start; ///
  void function(GtkActionBar* actionBar, GtkWidget* centerWidget) c_gtk_action_bar_set_center_widget; ///

  // ActionGroup
  GType function() c_gtk_action_group_get_type; ///
  GtkActionGroup* function(const(char)* name) c_gtk_action_group_new; ///
  void function(GtkActionGroup* actionGroup, GtkAction* action) c_gtk_action_group_add_action; ///
  void function(GtkActionGroup* actionGroup, GtkAction* action, const(char)* accelerator) c_gtk_action_group_add_action_with_accel; ///
  void function(GtkActionGroup* actionGroup, const(GtkActionEntry)* entries, uint nEntries, void* userData) c_gtk_action_group_add_actions; ///
  void function(GtkActionGroup* actionGroup, const(GtkActionEntry)* entries, uint nEntries, void* userData, GDestroyNotify destroy) c_gtk_action_group_add_actions_full; ///
  void function(GtkActionGroup* actionGroup, const(GtkRadioActionEntry)* entries, uint nEntries, int value, GCallback onChange, void* userData) c_gtk_action_group_add_radio_actions; ///
  void function(GtkActionGroup* actionGroup, const(GtkRadioActionEntry)* entries, uint nEntries, int value, GCallback onChange, void* userData, GDestroyNotify destroy) c_gtk_action_group_add_radio_actions_full; ///
  void function(GtkActionGroup* actionGroup, const(GtkToggleActionEntry)* entries, uint nEntries, void* userData) c_gtk_action_group_add_toggle_actions; ///
  void function(GtkActionGroup* actionGroup, const(GtkToggleActionEntry)* entries, uint nEntries, void* userData, GDestroyNotify destroy) c_gtk_action_group_add_toggle_actions_full; ///
  GtkAccelGroup* function(GtkActionGroup* actionGroup) c_gtk_action_group_get_accel_group; ///
  GtkAction* function(GtkActionGroup* actionGroup, const(char)* actionName) c_gtk_action_group_get_action; ///
  const(char)* function(GtkActionGroup* actionGroup) c_gtk_action_group_get_name; ///
  bool function(GtkActionGroup* actionGroup) c_gtk_action_group_get_sensitive; ///
  bool function(GtkActionGroup* actionGroup) c_gtk_action_group_get_visible; ///
  GList* function(GtkActionGroup* actionGroup) c_gtk_action_group_list_actions; ///
  void function(GtkActionGroup* actionGroup, GtkAction* action) c_gtk_action_group_remove_action; ///
  void function(GtkActionGroup* actionGroup, GtkAccelGroup* accelGroup) c_gtk_action_group_set_accel_group; ///
  void function(GtkActionGroup* actionGroup, bool sensitive) c_gtk_action_group_set_sensitive; ///
  void function(GtkActionGroup* actionGroup, GtkTranslateFunc func, void* data, GDestroyNotify notify) c_gtk_action_group_set_translate_func; ///
  void function(GtkActionGroup* actionGroup, const(char)* domain) c_gtk_action_group_set_translation_domain; ///
  void function(GtkActionGroup* actionGroup, bool visible) c_gtk_action_group_set_visible; ///
  const(char)* function(GtkActionGroup* actionGroup, const(char)* string_) c_gtk_action_group_translate_string; ///

  // Actionable
  GType function() c_gtk_actionable_get_type; ///
  const(char)* function(GtkActionable* actionable) c_gtk_actionable_get_action_name; ///
  VariantC* function(GtkActionable* actionable) c_gtk_actionable_get_action_target_value; ///
  void function(GtkActionable* actionable, const(char)* actionName) c_gtk_actionable_set_action_name; ///
  void function(GtkActionable* actionable, const(char)* formatString,  ...) c_gtk_actionable_set_action_target; ///
  void function(GtkActionable* actionable, VariantC* targetValue) c_gtk_actionable_set_action_target_value; ///
  void function(GtkActionable* actionable, const(char)* detailedActionName) c_gtk_actionable_set_detailed_action_name; ///

  // Activatable
  GType function() c_gtk_activatable_get_type; ///
  void function(GtkActivatable* activatable, GtkAction* action) c_gtk_activatable_do_set_related_action; ///
  GtkAction* function(GtkActivatable* activatable) c_gtk_activatable_get_related_action; ///
  bool function(GtkActivatable* activatable) c_gtk_activatable_get_use_action_appearance; ///
  void function(GtkActivatable* activatable, GtkAction* action) c_gtk_activatable_set_related_action; ///
  void function(GtkActivatable* activatable, bool useAppearance) c_gtk_activatable_set_use_action_appearance; ///
  void function(GtkActivatable* activatable, GtkAction* action) c_gtk_activatable_sync_action_properties; ///

  // Adjustment
  GType function() c_gtk_adjustment_get_type; ///
  GtkAdjustment* function(double value, double lower, double upper, double stepIncrement, double pageIncrement, double pageSize) c_gtk_adjustment_new; ///
  void function(GtkAdjustment* adjustment) c_gtk_adjustment_changed; ///
  void function(GtkAdjustment* adjustment, double lower, double upper) c_gtk_adjustment_clamp_page; ///
  void function(GtkAdjustment* adjustment, double value, double lower, double upper, double stepIncrement, double pageIncrement, double pageSize) c_gtk_adjustment_configure; ///
  double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_lower; ///
  double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_minimum_increment; ///
  double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_page_increment; ///
  double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_page_size; ///
  double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_step_increment; ///
  double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_upper; ///
  double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_value; ///
  void function(GtkAdjustment* adjustment, double lower) c_gtk_adjustment_set_lower; ///
  void function(GtkAdjustment* adjustment, double pageIncrement) c_gtk_adjustment_set_page_increment; ///
  void function(GtkAdjustment* adjustment, double pageSize) c_gtk_adjustment_set_page_size; ///
  void function(GtkAdjustment* adjustment, double stepIncrement) c_gtk_adjustment_set_step_increment; ///
  void function(GtkAdjustment* adjustment, double upper) c_gtk_adjustment_set_upper; ///
  void function(GtkAdjustment* adjustment, double value) c_gtk_adjustment_set_value; ///
  void function(GtkAdjustment* adjustment) c_gtk_adjustment_value_changed; ///

  // Alignment
  GType function() c_gtk_alignment_get_type; ///
  GtkWidget* function(float xalign, float yalign, float xscale, float yscale) c_gtk_alignment_new; ///
  void function(GtkAlignment* alignment, uint* paddingTop, uint* paddingBottom, uint* paddingLeft, uint* paddingRight) c_gtk_alignment_get_padding; ///
  void function(GtkAlignment* alignment, float xalign, float yalign, float xscale, float yscale) c_gtk_alignment_set; ///
  void function(GtkAlignment* alignment, uint paddingTop, uint paddingBottom, uint paddingLeft, uint paddingRight) c_gtk_alignment_set_padding; ///

  // AppChooser
  GType function() c_gtk_app_chooser_get_type; ///
  GAppInfo* function(GtkAppChooser* self) c_gtk_app_chooser_get_app_info; ///
  char* function(GtkAppChooser* self) c_gtk_app_chooser_get_content_type; ///
  void function(GtkAppChooser* self) c_gtk_app_chooser_refresh; ///

  // AppChooserButton
  GType function() c_gtk_app_chooser_button_get_type; ///
  GtkWidget* function(const(char)* contentType) c_gtk_app_chooser_button_new; ///
  void function(GtkAppChooserButton* self, const(char)* name, const(char)* label, GIcon* icon) c_gtk_app_chooser_button_append_custom_item; ///
  void function(GtkAppChooserButton* self) c_gtk_app_chooser_button_append_separator; ///
  const(char)* function(GtkAppChooserButton* self) c_gtk_app_chooser_button_get_heading; ///
  bool function(GtkAppChooserButton* self) c_gtk_app_chooser_button_get_show_default_item; ///
  bool function(GtkAppChooserButton* self) c_gtk_app_chooser_button_get_show_dialog_item; ///
  void function(GtkAppChooserButton* self, const(char)* name) c_gtk_app_chooser_button_set_active_custom_item; ///
  void function(GtkAppChooserButton* self, const(char)* heading) c_gtk_app_chooser_button_set_heading; ///
  void function(GtkAppChooserButton* self, bool setting) c_gtk_app_chooser_button_set_show_default_item; ///
  void function(GtkAppChooserButton* self, bool setting) c_gtk_app_chooser_button_set_show_dialog_item; ///

  // AppChooserDialog
  GType function() c_gtk_app_chooser_dialog_get_type; ///
  GtkWidget* function(GtkWindow* parent, GtkDialogFlags flags, GFile* file) c_gtk_app_chooser_dialog_new; ///
  GtkWidget* function(GtkWindow* parent, GtkDialogFlags flags, const(char)* contentType) c_gtk_app_chooser_dialog_new_for_content_type; ///
  const(char)* function(GtkAppChooserDialog* self) c_gtk_app_chooser_dialog_get_heading; ///
  GtkWidget* function(GtkAppChooserDialog* self) c_gtk_app_chooser_dialog_get_widget; ///
  void function(GtkAppChooserDialog* self, const(char)* heading) c_gtk_app_chooser_dialog_set_heading; ///

  // AppChooserWidget
  GType function() c_gtk_app_chooser_widget_get_type; ///
  GtkWidget* function(const(char)* contentType) c_gtk_app_chooser_widget_new; ///
  const(char)* function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_default_text; ///
  bool function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_show_all; ///
  bool function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_show_default; ///
  bool function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_show_fallback; ///
  bool function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_show_other; ///
  bool function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_show_recommended; ///
  void function(GtkAppChooserWidget* self, const(char)* text) c_gtk_app_chooser_widget_set_default_text; ///
  void function(GtkAppChooserWidget* self, bool setting) c_gtk_app_chooser_widget_set_show_all; ///
  void function(GtkAppChooserWidget* self, bool setting) c_gtk_app_chooser_widget_set_show_default; ///
  void function(GtkAppChooserWidget* self, bool setting) c_gtk_app_chooser_widget_set_show_fallback; ///
  void function(GtkAppChooserWidget* self, bool setting) c_gtk_app_chooser_widget_set_show_other; ///
  void function(GtkAppChooserWidget* self, bool setting) c_gtk_app_chooser_widget_set_show_recommended; ///

  // Application
  GType function() c_gtk_application_get_type; ///
  GtkApplication* function(const(char)* applicationId, GApplicationFlags flags) c_gtk_application_new; ///
  void function(GtkApplication* application, const(char)* accelerator, const(char)* actionName, VariantC* parameter) c_gtk_application_add_accelerator; ///
  void function(GtkApplication* application, GtkWindow* window) c_gtk_application_add_window; ///
  char** function(GtkApplication* application, const(char)* detailedActionName) c_gtk_application_get_accels_for_action; ///
  char** function(GtkApplication* application, const(char)* accel) c_gtk_application_get_actions_for_accel; ///
  GtkWindow* function(GtkApplication* application) c_gtk_application_get_active_window; ///
  GMenuModel* function(GtkApplication* application) c_gtk_application_get_app_menu; ///
  GMenu* function(GtkApplication* application, const(char)* id) c_gtk_application_get_menu_by_id; ///
  GMenuModel* function(GtkApplication* application) c_gtk_application_get_menubar; ///
  GtkWindow* function(GtkApplication* application, uint id) c_gtk_application_get_window_by_id; ///
  GList* function(GtkApplication* application) c_gtk_application_get_windows; ///
  uint function(GtkApplication* application, GtkWindow* window, GtkApplicationInhibitFlags flags, const(char)* reason) c_gtk_application_inhibit; ///
  bool function(GtkApplication* application, GtkApplicationInhibitFlags flags) c_gtk_application_is_inhibited; ///
  char** function(GtkApplication* application) c_gtk_application_list_action_descriptions; ///
  bool function(GtkApplication* application) c_gtk_application_prefers_app_menu; ///
  void function(GtkApplication* application, const(char)* actionName, VariantC* parameter) c_gtk_application_remove_accelerator; ///
  void function(GtkApplication* application, GtkWindow* window) c_gtk_application_remove_window; ///
  void function(GtkApplication* application, const(char)* detailedActionName, const(char*)* accels) c_gtk_application_set_accels_for_action; ///
  void function(GtkApplication* application, GMenuModel* appMenu) c_gtk_application_set_app_menu; ///
  void function(GtkApplication* application, GMenuModel* menubar) c_gtk_application_set_menubar; ///
  void function(GtkApplication* application, uint cookie) c_gtk_application_uninhibit; ///

  // ApplicationWindow
  GType function() c_gtk_application_window_get_type; ///
  GtkWidget* function(GtkApplication* application) c_gtk_application_window_new; ///
  GtkShortcutsWindow* function(GtkApplicationWindow* window) c_gtk_application_window_get_help_overlay; ///
  uint function(GtkApplicationWindow* window) c_gtk_application_window_get_id; ///
  bool function(GtkApplicationWindow* window) c_gtk_application_window_get_show_menubar; ///
  void function(GtkApplicationWindow* window, GtkShortcutsWindow* helpOverlay) c_gtk_application_window_set_help_overlay; ///
  void function(GtkApplicationWindow* window, bool showMenubar) c_gtk_application_window_set_show_menubar; ///

  // Arrow
  GType function() c_gtk_arrow_get_type; ///
  GtkWidget* function(GtkArrowType arrowType, GtkShadowType shadowType) c_gtk_arrow_new; ///
  void function(GtkArrow* arrow, GtkArrowType arrowType, GtkShadowType shadowType) c_gtk_arrow_set; ///

  // ArrowAccessible
  GType function() c_gtk_arrow_accessible_get_type; ///

  // AspectFrame
  GType function() c_gtk_aspect_frame_get_type; ///
  GtkWidget* function(const(char)* label, float xalign, float yalign, float ratio, bool obeyChild) c_gtk_aspect_frame_new; ///
  void function(GtkAspectFrame* aspectFrame, float xalign, float yalign, float ratio, bool obeyChild) c_gtk_aspect_frame_set; ///

  // Assistant
  GType function() c_gtk_assistant_get_type; ///
  GtkWidget* function() c_gtk_assistant_new; ///
  void function(GtkAssistant* assistant, GtkWidget* child) c_gtk_assistant_add_action_widget; ///
  int function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_append_page; ///
  void function(GtkAssistant* assistant) c_gtk_assistant_commit; ///
  int function(GtkAssistant* assistant) c_gtk_assistant_get_current_page; ///
  int function(GtkAssistant* assistant) c_gtk_assistant_get_n_pages; ///
  GtkWidget* function(GtkAssistant* assistant, int pageNum) c_gtk_assistant_get_nth_page; ///
  bool function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_complete; ///
  bool function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_has_padding; ///
  PixbufC* function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_header_image; ///
  PixbufC* function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_side_image; ///
  const(char)* function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_title; ///
  GtkAssistantPageType function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_type; ///
  int function(GtkAssistant* assistant, GtkWidget* page, int position) c_gtk_assistant_insert_page; ///
  void function(GtkAssistant* assistant) c_gtk_assistant_next_page; ///
  int function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_prepend_page; ///
  void function(GtkAssistant* assistant) c_gtk_assistant_previous_page; ///
  void function(GtkAssistant* assistant, GtkWidget* child) c_gtk_assistant_remove_action_widget; ///
  void function(GtkAssistant* assistant, int pageNum) c_gtk_assistant_remove_page; ///
  void function(GtkAssistant* assistant, int pageNum) c_gtk_assistant_set_current_page; ///
  void function(GtkAssistant* assistant, GtkAssistantPageFunc pageFunc, void* data, GDestroyNotify destroy) c_gtk_assistant_set_forward_page_func; ///
  void function(GtkAssistant* assistant, GtkWidget* page, bool complete) c_gtk_assistant_set_page_complete; ///
  void function(GtkAssistant* assistant, GtkWidget* page, bool hasPadding) c_gtk_assistant_set_page_has_padding; ///
  void function(GtkAssistant* assistant, GtkWidget* page, PixbufC* pixbuf) c_gtk_assistant_set_page_header_image; ///
  void function(GtkAssistant* assistant, GtkWidget* page, PixbufC* pixbuf) c_gtk_assistant_set_page_side_image; ///
  void function(GtkAssistant* assistant, GtkWidget* page, const(char)* title) c_gtk_assistant_set_page_title; ///
  void function(GtkAssistant* assistant, GtkWidget* page, GtkAssistantPageType type) c_gtk_assistant_set_page_type; ///
  void function(GtkAssistant* assistant) c_gtk_assistant_update_buttons_state; ///

  // Bin
  GType function() c_gtk_bin_get_type; ///
  GtkWidget* function(GtkBin* bin) c_gtk_bin_get_child; ///

  // BindingEntry
  void function(GtkBindingSet* bindingSet, uint keyval, GdkModifierType modifiers, const(char)* signalName, uint nArgs,  ...) c_gtk_binding_entry_add_signal; ///
  GTokenType function(GtkBindingSet* bindingSet, const(char)* signalDesc) c_gtk_binding_entry_add_signal_from_string; ///
  void function(GtkBindingSet* bindingSet, uint keyval, GdkModifierType modifiers, const(char)* signalName, GSList* bindingArgs) c_gtk_binding_entry_add_signall; ///
  void function(GtkBindingSet* bindingSet, uint keyval, GdkModifierType modifiers) c_gtk_binding_entry_remove; ///
  void function(GtkBindingSet* bindingSet, uint keyval, GdkModifierType modifiers) c_gtk_binding_entry_skip; ///

  // BindingSet
  bool function(GtkBindingSet* bindingSet, uint keyval, GdkModifierType modifiers, ObjectC* object) c_gtk_binding_set_activate; ///
  void function(GtkBindingSet* bindingSet, GtkPathType pathType, const(char)* pathPattern, GtkPathPriorityType priority) c_gtk_binding_set_add_path; ///
  GtkBindingSet* function(void* objectClass) c_gtk_binding_set_by_class; ///
  GtkBindingSet* function(const(char)* setName) c_gtk_binding_set_find; ///
  GtkBindingSet* function(const(char)* setName) c_gtk_binding_set_new; ///

  // BooleanCellAccessible
  GType function() c_gtk_boolean_cell_accessible_get_type; ///

  // Border
  GType function() c_gtk_border_get_type; ///
  GtkBorder* function() c_gtk_border_new; ///
  GtkBorder* function(const(GtkBorder)* border) c_gtk_border_copy; ///
  void function(GtkBorder* border) c_gtk_border_free; ///

  // Box
  GType function() c_gtk_box_get_type; ///
  GtkWidget* function(GtkOrientation orientation, int spacing) c_gtk_box_new; ///
  GtkBaselinePosition function(GtkBox* box) c_gtk_box_get_baseline_position; ///
  GtkWidget* function(GtkBox* box) c_gtk_box_get_center_widget; ///
  bool function(GtkBox* box) c_gtk_box_get_homogeneous; ///
  int function(GtkBox* box) c_gtk_box_get_spacing; ///
  void function(GtkBox* box, GtkWidget* child, bool expand, bool fill, uint padding) c_gtk_box_pack_end; ///
  void function(GtkBox* box, GtkWidget* child, bool expand, bool fill, uint padding) c_gtk_box_pack_start; ///
  void function(GtkBox* box, GtkWidget* child, bool* expand, bool* fill, uint* padding, GtkPackType* packType) c_gtk_box_query_child_packing; ///
  void function(GtkBox* box, GtkWidget* child, int position) c_gtk_box_reorder_child; ///
  void function(GtkBox* box, GtkBaselinePosition position) c_gtk_box_set_baseline_position; ///
  void function(GtkBox* box, GtkWidget* widget) c_gtk_box_set_center_widget; ///
  void function(GtkBox* box, GtkWidget* child, bool expand, bool fill, uint padding, GtkPackType packType) c_gtk_box_set_child_packing; ///
  void function(GtkBox* box, bool homogeneous) c_gtk_box_set_homogeneous; ///
  void function(GtkBox* box, int spacing) c_gtk_box_set_spacing; ///

  // Buildable
  GType function() c_gtk_buildable_get_type; ///
  void function(GtkBuildable* buildable, GtkBuilder* builder, ObjectC* child, const(char)* type) c_gtk_buildable_add_child; ///
  ObjectC* function(GtkBuildable* buildable, GtkBuilder* builder, const(char)* name) c_gtk_buildable_construct_child; ///
  void function(GtkBuildable* buildable, GtkBuilder* builder, ObjectC* child, const(char)* tagname, void* data) c_gtk_buildable_custom_finished; ///
  void function(GtkBuildable* buildable, GtkBuilder* builder, ObjectC* child, const(char)* tagname, void** data) c_gtk_buildable_custom_tag_end; ///
  bool function(GtkBuildable* buildable, GtkBuilder* builder, ObjectC* child, const(char)* tagname, GMarkupParser* parser, void** data) c_gtk_buildable_custom_tag_start; ///
  ObjectC* function(GtkBuildable* buildable, GtkBuilder* builder, const(char)* childname) c_gtk_buildable_get_internal_child; ///
  const(char)* function(GtkBuildable* buildable) c_gtk_buildable_get_name; ///
  void function(GtkBuildable* buildable, GtkBuilder* builder) c_gtk_buildable_parser_finished; ///
  void function(GtkBuildable* buildable, GtkBuilder* builder, const(char)* name, const(GValue)* value) c_gtk_buildable_set_buildable_property; ///
  void function(GtkBuildable* buildable, const(char)* name) c_gtk_buildable_set_name; ///

  // Builder
  GType function() c_gtk_builder_get_type; ///
  GtkBuilder* function() c_gtk_builder_new; ///
  GtkBuilder* function(const(char)* filename) c_gtk_builder_new_from_file; ///
  GtkBuilder* function(const(char)* resourcePath) c_gtk_builder_new_from_resource; ///
  GtkBuilder* function(const(char)* string_, ptrdiff_t length) c_gtk_builder_new_from_string; ///
  void function(GtkBuilder* builder, const(char)* callbackName, GCallback callbackSymbol) c_gtk_builder_add_callback_symbol; ///
  void function(GtkBuilder* builder, const(char)* firstCallbackName, GCallback firstCallbackSymbol,  ...) c_gtk_builder_add_callback_symbols; ///
  uint function(GtkBuilder* builder, const(char)* filename, GError** _err) c_gtk_builder_add_from_file; ///
  uint function(GtkBuilder* builder, const(char)* resourcePath, GError** _err) c_gtk_builder_add_from_resource; ///
  uint function(GtkBuilder* builder, const(char)* buffer, size_t length, GError** _err) c_gtk_builder_add_from_string; ///
  uint function(GtkBuilder* builder, const(char)* filename, char** objectIds, GError** _err) c_gtk_builder_add_objects_from_file; ///
  uint function(GtkBuilder* builder, const(char)* resourcePath, char** objectIds, GError** _err) c_gtk_builder_add_objects_from_resource; ///
  uint function(GtkBuilder* builder, const(char)* buffer, size_t length, char** objectIds, GError** _err) c_gtk_builder_add_objects_from_string; ///
  void function(GtkBuilder* builder, void* userData) c_gtk_builder_connect_signals; ///
  void function(GtkBuilder* builder, GtkBuilderConnectFunc func, void* userData) c_gtk_builder_connect_signals_full; ///
  void function(GtkBuilder* builder, const(char)* name, ObjectC* object) c_gtk_builder_expose_object; ///
  uint function(GtkBuilder* builder, GtkWidget* widget, GType templateType, const(char)* buffer, size_t length, GError** _err) c_gtk_builder_extend_with_template; ///
  GtkApplication* function(GtkBuilder* builder) c_gtk_builder_get_application; ///
  ObjectC* function(GtkBuilder* builder, const(char)* name) c_gtk_builder_get_object; ///
  GSList* function(GtkBuilder* builder) c_gtk_builder_get_objects; ///
  const(char)* function(GtkBuilder* builder) c_gtk_builder_get_translation_domain; ///
  GType function(GtkBuilder* builder, const(char)* typeName) c_gtk_builder_get_type_from_name; ///
  GCallback function(GtkBuilder* builder, const(char)* callbackName) c_gtk_builder_lookup_callback_symbol; ///
  void function(GtkBuilder* builder, GtkApplication* application) c_gtk_builder_set_application; ///
  void function(GtkBuilder* builder, const(char)* domain) c_gtk_builder_set_translation_domain; ///
  bool function(GtkBuilder* builder, GParamSpec* pspec, const(char)* string_, GValue* value, GError** _err) c_gtk_builder_value_from_string; ///
  bool function(GtkBuilder* builder, GType type, const(char)* string_, GValue* value, GError** _err) c_gtk_builder_value_from_string_type; ///

  // Button
  GType function() c_gtk_button_get_type; ///
  GtkWidget* function() c_gtk_button_new; ///
  GtkWidget* function(const(char)* iconName, GtkIconSize size) c_gtk_button_new_from_icon_name; ///
  GtkWidget* function(const(char)* stockId) c_gtk_button_new_from_stock; ///
  GtkWidget* function(const(char)* label) c_gtk_button_new_with_label; ///
  GtkWidget* function(const(char)* label) c_gtk_button_new_with_mnemonic; ///
  void function(GtkButton* button) c_gtk_button_clicked; ///
  void function(GtkButton* button) c_gtk_button_enter; ///
  void function(GtkButton* button, float* xalign, float* yalign) c_gtk_button_get_alignment; ///
  bool function(GtkButton* button) c_gtk_button_get_always_show_image; ///
  GdkWindow* function(GtkButton* button) c_gtk_button_get_event_window; ///
  bool function(GtkButton* button) c_gtk_button_get_focus_on_click; ///
  GtkWidget* function(GtkButton* button) c_gtk_button_get_image; ///
  GtkPositionType function(GtkButton* button) c_gtk_button_get_image_position; ///
  const(char)* function(GtkButton* button) c_gtk_button_get_label; ///
  GtkReliefStyle function(GtkButton* button) c_gtk_button_get_relief; ///
  bool function(GtkButton* button) c_gtk_button_get_use_stock; ///
  bool function(GtkButton* button) c_gtk_button_get_use_underline; ///
  void function(GtkButton* button) c_gtk_button_leave; ///
  void function(GtkButton* button) c_gtk_button_pressed; ///
  void function(GtkButton* button) c_gtk_button_released; ///
  void function(GtkButton* button, float xalign, float yalign) c_gtk_button_set_alignment; ///
  void function(GtkButton* button, bool alwaysShow) c_gtk_button_set_always_show_image; ///
  void function(GtkButton* button, bool focusOnClick) c_gtk_button_set_focus_on_click; ///
  void function(GtkButton* button, GtkWidget* image) c_gtk_button_set_image; ///
  void function(GtkButton* button, GtkPositionType position) c_gtk_button_set_image_position; ///
  void function(GtkButton* button, const(char)* label) c_gtk_button_set_label; ///
  void function(GtkButton* button, GtkReliefStyle relief) c_gtk_button_set_relief; ///
  void function(GtkButton* button, bool useStock) c_gtk_button_set_use_stock; ///
  void function(GtkButton* button, bool useUnderline) c_gtk_button_set_use_underline; ///

  // ButtonAccessible
  GType function() c_gtk_button_accessible_get_type; ///

  // ButtonBox
  GType function() c_gtk_button_box_get_type; ///
  GtkWidget* function(GtkOrientation orientation) c_gtk_button_box_new; ///
  bool function(GtkButtonBox* widget, GtkWidget* child) c_gtk_button_box_get_child_non_homogeneous; ///
  bool function(GtkButtonBox* widget, GtkWidget* child) c_gtk_button_box_get_child_secondary; ///
  GtkButtonBoxStyle function(GtkButtonBox* widget) c_gtk_button_box_get_layout; ///
  void function(GtkButtonBox* widget, GtkWidget* child, bool nonHomogeneous) c_gtk_button_box_set_child_non_homogeneous; ///
  void function(GtkButtonBox* widget, GtkWidget* child, bool isSecondary) c_gtk_button_box_set_child_secondary; ///
  void function(GtkButtonBox* widget, GtkButtonBoxStyle layoutStyle) c_gtk_button_box_set_layout; ///

  // Calendar
  GType function() c_gtk_calendar_get_type; ///
  GtkWidget* function() c_gtk_calendar_new; ///
  void function(GtkCalendar* calendar) c_gtk_calendar_clear_marks; ///
  void function(GtkCalendar* calendar, uint* year, uint* month, uint* day) c_gtk_calendar_get_date; ///
  bool function(GtkCalendar* calendar, uint day) c_gtk_calendar_get_day_is_marked; ///
  int function(GtkCalendar* calendar) c_gtk_calendar_get_detail_height_rows; ///
  int function(GtkCalendar* calendar) c_gtk_calendar_get_detail_width_chars; ///
  GtkCalendarDisplayOptions function(GtkCalendar* calendar) c_gtk_calendar_get_display_options; ///
  void function(GtkCalendar* calendar, uint day) c_gtk_calendar_mark_day; ///
  void function(GtkCalendar* calendar, uint day) c_gtk_calendar_select_day; ///
  void function(GtkCalendar* calendar, uint month, uint year) c_gtk_calendar_select_month; ///
  void function(GtkCalendar* calendar, GtkCalendarDetailFunc func, void* data, GDestroyNotify destroy) c_gtk_calendar_set_detail_func; ///
  void function(GtkCalendar* calendar, int rows) c_gtk_calendar_set_detail_height_rows; ///
  void function(GtkCalendar* calendar, int chars) c_gtk_calendar_set_detail_width_chars; ///
  void function(GtkCalendar* calendar, GtkCalendarDisplayOptions flags) c_gtk_calendar_set_display_options; ///
  void function(GtkCalendar* calendar, uint day) c_gtk_calendar_unmark_day; ///

  // CellAccessible
  GType function() c_gtk_cell_accessible_get_type; ///

  // CellAccessibleParent
  GType function() c_gtk_cell_accessible_parent_get_type; ///
  void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_activate; ///
  void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_edit; ///
  void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_expand_collapse; ///
  void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell, GdkRectangle* cellRect) c_gtk_cell_accessible_parent_get_cell_area; ///
  void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell, int* x, int* y, int* width, int* height, AtkCoordType coordType) c_gtk_cell_accessible_parent_get_cell_extents; ///
  void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell, int* row, int* column) c_gtk_cell_accessible_parent_get_cell_position; ///
  int function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_get_child_index; ///
  GPtrArray* function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_get_column_header_cells; ///
  GtkCellRendererState function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_get_renderer_state; ///
  GPtrArray* function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_get_row_header_cells; ///
  bool function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_grab_focus; ///
  void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell, AtkRelationSet* relationset) c_gtk_cell_accessible_parent_update_relationset; ///

  // CellArea
  GType function() c_gtk_cell_area_get_type; ///
  bool function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, const(GdkRectangle)* cellArea, GtkCellRendererState flags, bool editOnly) c_gtk_cell_area_activate; ///
  bool function(GtkCellArea* area, GtkWidget* widget, GtkCellRenderer* renderer, GdkEvent* event, const(GdkRectangle)* cellArea, GtkCellRendererState flags) c_gtk_cell_area_activate_cell; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_add; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling) c_gtk_cell_area_add_focus_sibling; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* firstPropName,  ...) c_gtk_cell_area_add_with_properties; ///
  void function(GtkCellArea* area, GtkTreeModel* treeModel, GtkTreeIter* iter, bool isExpander, bool isExpanded) c_gtk_cell_area_apply_attributes; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* attribute, int column) c_gtk_cell_area_attribute_connect; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* attribute) c_gtk_cell_area_attribute_disconnect; ///
  int function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* attribute) c_gtk_cell_area_attribute_get_column; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* firstPropName,  ...) c_gtk_cell_area_cell_get; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* propertyName, GValue* value) c_gtk_cell_area_cell_get_property; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* firstPropertyName, void* varArgs) c_gtk_cell_area_cell_get_valist; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* firstPropName,  ...) c_gtk_cell_area_cell_set; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* propertyName, const(GValue)* value) c_gtk_cell_area_cell_set_property; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* firstPropertyName, void* varArgs) c_gtk_cell_area_cell_set_valist; ///
  GtkCellAreaContext* function(GtkCellArea* area, GtkCellAreaContext* context) c_gtk_cell_area_copy_context; ///
  GtkCellAreaContext* function(GtkCellArea* area) c_gtk_cell_area_create_context; ///
  int function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GdkEvent* event, const(GdkRectangle)* cellArea, GtkCellRendererState flags) c_gtk_cell_area_event; ///
  bool function(GtkCellArea* area, GtkDirectionType direction) c_gtk_cell_area_focus; ///
  void function(GtkCellArea* area, GtkCellCallback callback, void* callbackData) c_gtk_cell_area_foreach; ///
  void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, const(GdkRectangle)* cellArea, const(GdkRectangle)* backgroundArea, GtkCellAllocCallback callback, void* callbackData) c_gtk_cell_area_foreach_alloc; ///
  void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GtkCellRenderer* renderer, const(GdkRectangle)* cellArea, GdkRectangle* allocation) c_gtk_cell_area_get_cell_allocation; ///
  GtkCellRenderer* function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, const(GdkRectangle)* cellArea, int x, int y, GdkRectangle* allocArea) c_gtk_cell_area_get_cell_at_position; ///
  const(char)* function(GtkCellArea* area) c_gtk_cell_area_get_current_path_string; ///
  GtkCellEditable* function(GtkCellArea* area) c_gtk_cell_area_get_edit_widget; ///
  GtkCellRenderer* function(GtkCellArea* area) c_gtk_cell_area_get_edited_cell; ///
  GtkCellRenderer* function(GtkCellArea* area) c_gtk_cell_area_get_focus_cell; ///
  GtkCellRenderer* function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_get_focus_from_sibling; ///
  const(GList)* function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_get_focus_siblings; ///
  void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int* minimumHeight, int* naturalHeight) c_gtk_cell_area_get_preferred_height; ///
  void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int width, int* minimumHeight, int* naturalHeight) c_gtk_cell_area_get_preferred_height_for_width; ///
  void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int* minimumWidth, int* naturalWidth) c_gtk_cell_area_get_preferred_width; ///
  void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int height, int* minimumWidth, int* naturalWidth) c_gtk_cell_area_get_preferred_width_for_height; ///
  GtkSizeRequestMode function(GtkCellArea* area) c_gtk_cell_area_get_request_mode; ///
  bool function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_has_renderer; ///
  void function(GtkCellArea* area, GtkWidget* widget, const(GdkRectangle)* cellArea, GdkRectangle* innerArea) c_gtk_cell_area_inner_cell_area; ///
  bool function(GtkCellArea* area) c_gtk_cell_area_is_activatable; ///
  bool function(GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling) c_gtk_cell_area_is_focus_sibling; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_remove; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling) c_gtk_cell_area_remove_focus_sibling; ///
  void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, cairo_t* cr, const(GdkRectangle)* backgroundArea, const(GdkRectangle)* cellArea, GtkCellRendererState flags, bool paintFocus) c_gtk_cell_area_render; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer, GtkOrientation orientation, GtkWidget* widget, int forSize, int* minimumSize, int* naturalSize) c_gtk_cell_area_request_renderer; ///
  void function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_set_focus_cell; ///
  void function(GtkCellArea* area, bool canceled) c_gtk_cell_area_stop_editing; ///

  // CellAreaBox
  GType function() c_gtk_cell_area_box_get_type; ///
  GtkCellArea* function() c_gtk_cell_area_box_new; ///
  int function(GtkCellAreaBox* box) c_gtk_cell_area_box_get_spacing; ///
  void function(GtkCellAreaBox* box, GtkCellRenderer* renderer, bool expand, bool align_, bool fixed) c_gtk_cell_area_box_pack_end; ///
  void function(GtkCellAreaBox* box, GtkCellRenderer* renderer, bool expand, bool align_, bool fixed) c_gtk_cell_area_box_pack_start; ///
  void function(GtkCellAreaBox* box, int spacing) c_gtk_cell_area_box_set_spacing; ///

  // CellAreaClass
  GParamSpec* function(GtkCellAreaClass* aclass, const(char)* propertyName) c_gtk_cell_area_class_find_cell_property; ///
  void function(GtkCellAreaClass* aclass, uint propertyId, GParamSpec* pspec) c_gtk_cell_area_class_install_cell_property; ///
  GParamSpec** function(GtkCellAreaClass* aclass, uint* nProperties) c_gtk_cell_area_class_list_cell_properties; ///

  // CellAreaContext
  GType function() c_gtk_cell_area_context_get_type; ///
  void function(GtkCellAreaContext* context, int width, int height) c_gtk_cell_area_context_allocate; ///
  void function(GtkCellAreaContext* context, int* width, int* height) c_gtk_cell_area_context_get_allocation; ///
  GtkCellArea* function(GtkCellAreaContext* context) c_gtk_cell_area_context_get_area; ///
  void function(GtkCellAreaContext* context, int* minimumHeight, int* naturalHeight) c_gtk_cell_area_context_get_preferred_height; ///
  void function(GtkCellAreaContext* context, int width, int* minimumHeight, int* naturalHeight) c_gtk_cell_area_context_get_preferred_height_for_width; ///
  void function(GtkCellAreaContext* context, int* minimumWidth, int* naturalWidth) c_gtk_cell_area_context_get_preferred_width; ///
  void function(GtkCellAreaContext* context, int height, int* minimumWidth, int* naturalWidth) c_gtk_cell_area_context_get_preferred_width_for_height; ///
  void function(GtkCellAreaContext* context, int minimumHeight, int naturalHeight) c_gtk_cell_area_context_push_preferred_height; ///
  void function(GtkCellAreaContext* context, int minimumWidth, int naturalWidth) c_gtk_cell_area_context_push_preferred_width; ///
  void function(GtkCellAreaContext* context) c_gtk_cell_area_context_reset; ///

  // CellEditable
  GType function() c_gtk_cell_editable_get_type; ///
  void function(GtkCellEditable* cellEditable) c_gtk_cell_editable_editing_done; ///
  void function(GtkCellEditable* cellEditable) c_gtk_cell_editable_remove_widget; ///
  void function(GtkCellEditable* cellEditable, GdkEvent* event) c_gtk_cell_editable_start_editing; ///

  // CellLayout
  GType function() c_gtk_cell_layout_get_type; ///
  void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, const(char)* attribute, int column) c_gtk_cell_layout_add_attribute; ///
  void function(GtkCellLayout* cellLayout) c_gtk_cell_layout_clear; ///
  void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell) c_gtk_cell_layout_clear_attributes; ///
  GtkCellArea* function(GtkCellLayout* cellLayout) c_gtk_cell_layout_get_area; ///
  GList* function(GtkCellLayout* cellLayout) c_gtk_cell_layout_get_cells; ///
  void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, bool expand) c_gtk_cell_layout_pack_end; ///
  void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, bool expand) c_gtk_cell_layout_pack_start; ///
  void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, int position) c_gtk_cell_layout_reorder; ///
  void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell,  ...) c_gtk_cell_layout_set_attributes; ///
  void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, GtkCellLayoutDataFunc func, void* funcData, GDestroyNotify destroy) c_gtk_cell_layout_set_cell_data_func; ///

  // CellRenderer
  GType function() c_gtk_cell_renderer_get_type; ///
  bool function(GtkCellRenderer* cell, GdkEvent* event, GtkWidget* widget, const(char)* path, const(GdkRectangle)* backgroundArea, const(GdkRectangle)* cellArea, GtkCellRendererState flags) c_gtk_cell_renderer_activate; ///
  void function(GtkCellRenderer* cell, GtkWidget* widget, GtkCellRendererState flags, const(GdkRectangle)* cellArea, GdkRectangle* alignedArea) c_gtk_cell_renderer_get_aligned_area; ///
  void function(GtkCellRenderer* cell, float* xalign, float* yalign) c_gtk_cell_renderer_get_alignment; ///
  void function(GtkCellRenderer* cell, int* width, int* height) c_gtk_cell_renderer_get_fixed_size; ///
  void function(GtkCellRenderer* cell, int* xpad, int* ypad) c_gtk_cell_renderer_get_padding; ///
  void function(GtkCellRenderer* cell, GtkWidget* widget, int* minimumSize, int* naturalSize) c_gtk_cell_renderer_get_preferred_height; ///
  void function(GtkCellRenderer* cell, GtkWidget* widget, int width, int* minimumHeight, int* naturalHeight) c_gtk_cell_renderer_get_preferred_height_for_width; ///
  void function(GtkCellRenderer* cell, GtkWidget* widget, GtkRequisition* minimumSize, GtkRequisition* naturalSize) c_gtk_cell_renderer_get_preferred_size; ///
  void function(GtkCellRenderer* cell, GtkWidget* widget, int* minimumSize, int* naturalSize) c_gtk_cell_renderer_get_preferred_width; ///
  void function(GtkCellRenderer* cell, GtkWidget* widget, int height, int* minimumWidth, int* naturalWidth) c_gtk_cell_renderer_get_preferred_width_for_height; ///
  GtkSizeRequestMode function(GtkCellRenderer* cell) c_gtk_cell_renderer_get_request_mode; ///
  bool function(GtkCellRenderer* cell) c_gtk_cell_renderer_get_sensitive; ///
  void function(GtkCellRenderer* cell, GtkWidget* widget, const(GdkRectangle)* cellArea, int* xOffset, int* yOffset, int* width, int* height) c_gtk_cell_renderer_get_size; ///
  GtkStateFlags function(GtkCellRenderer* cell, GtkWidget* widget, GtkCellRendererState cellState) c_gtk_cell_renderer_get_state; ///
  bool function(GtkCellRenderer* cell) c_gtk_cell_renderer_get_visible; ///
  bool function(GtkCellRenderer* cell) c_gtk_cell_renderer_is_activatable; ///
  void function(GtkCellRenderer* cell, cairo_t* cr, GtkWidget* widget, const(GdkRectangle)* backgroundArea, const(GdkRectangle)* cellArea, GtkCellRendererState flags) c_gtk_cell_renderer_render; ///
  void function(GtkCellRenderer* cell, float xalign, float yalign) c_gtk_cell_renderer_set_alignment; ///
  void function(GtkCellRenderer* cell, int width, int height) c_gtk_cell_renderer_set_fixed_size; ///
  void function(GtkCellRenderer* cell, int xpad, int ypad) c_gtk_cell_renderer_set_padding; ///
  void function(GtkCellRenderer* cell, bool sensitive) c_gtk_cell_renderer_set_sensitive; ///
  void function(GtkCellRenderer* cell, bool visible) c_gtk_cell_renderer_set_visible; ///
  GtkCellEditable* function(GtkCellRenderer* cell, GdkEvent* event, GtkWidget* widget, const(char)* path, const(GdkRectangle)* backgroundArea, const(GdkRectangle)* cellArea, GtkCellRendererState flags) c_gtk_cell_renderer_start_editing; ///
  void function(GtkCellRenderer* cell, bool canceled) c_gtk_cell_renderer_stop_editing; ///

  // CellRendererAccel
  GType function() c_gtk_cell_renderer_accel_get_type; ///
  GtkCellRenderer* function() c_gtk_cell_renderer_accel_new; ///

  // CellRendererClass
  void function(GtkCellRendererClass* rendererClass, GType type) c_gtk_cell_renderer_class_set_accessible_type; ///

  // CellRendererCombo
  GType function() c_gtk_cell_renderer_combo_get_type; ///
  GtkCellRenderer* function() c_gtk_cell_renderer_combo_new; ///

  // CellRendererPixbuf
  GType function() c_gtk_cell_renderer_pixbuf_get_type; ///
  GtkCellRenderer* function() c_gtk_cell_renderer_pixbuf_new; ///

  // CellRendererProgress
  GType function() c_gtk_cell_renderer_progress_get_type; ///
  GtkCellRenderer* function() c_gtk_cell_renderer_progress_new; ///

  // CellRendererSpin
  GType function() c_gtk_cell_renderer_spin_get_type; ///
  GtkCellRenderer* function() c_gtk_cell_renderer_spin_new; ///

  // CellRendererSpinner
  GType function() c_gtk_cell_renderer_spinner_get_type; ///
  GtkCellRenderer* function() c_gtk_cell_renderer_spinner_new; ///

  // CellRendererText
  GType function() c_gtk_cell_renderer_text_get_type; ///
  GtkCellRenderer* function() c_gtk_cell_renderer_text_new; ///
  void function(GtkCellRendererText* renderer, int numberOfRows) c_gtk_cell_renderer_text_set_fixed_height_from_font; ///

  // CellRendererToggle
  GType function() c_gtk_cell_renderer_toggle_get_type; ///
  GtkCellRenderer* function() c_gtk_cell_renderer_toggle_new; ///
  bool function(GtkCellRendererToggle* toggle) c_gtk_cell_renderer_toggle_get_activatable; ///
  bool function(GtkCellRendererToggle* toggle) c_gtk_cell_renderer_toggle_get_active; ///
  bool function(GtkCellRendererToggle* toggle) c_gtk_cell_renderer_toggle_get_radio; ///
  void function(GtkCellRendererToggle* toggle, bool setting) c_gtk_cell_renderer_toggle_set_activatable; ///
  void function(GtkCellRendererToggle* toggle, bool setting) c_gtk_cell_renderer_toggle_set_active; ///
  void function(GtkCellRendererToggle* toggle, bool radio) c_gtk_cell_renderer_toggle_set_radio; ///

  // CellView
  GType function() c_gtk_cell_view_get_type; ///
  GtkWidget* function() c_gtk_cell_view_new; ///
  GtkWidget* function(GtkCellArea* area, GtkCellAreaContext* context) c_gtk_cell_view_new_with_context; ///
  GtkWidget* function(const(char)* markup) c_gtk_cell_view_new_with_markup; ///
  GtkWidget* function(PixbufC* pixbuf) c_gtk_cell_view_new_with_pixbuf; ///
  GtkWidget* function(const(char)* text) c_gtk_cell_view_new_with_text; ///
  GtkTreePath* function(GtkCellView* cellView) c_gtk_cell_view_get_displayed_row; ///
  bool function(GtkCellView* cellView) c_gtk_cell_view_get_draw_sensitive; ///
  bool function(GtkCellView* cellView) c_gtk_cell_view_get_fit_model; ///
  GtkTreeModel* function(GtkCellView* cellView) c_gtk_cell_view_get_model; ///
  bool function(GtkCellView* cellView, GtkTreePath* path, GtkRequisition* requisition) c_gtk_cell_view_get_size_of_row; ///
  void function(GtkCellView* cellView, const(GdkColor)* color) c_gtk_cell_view_set_background_color; ///
  void function(GtkCellView* cellView, const(GdkRGBA)* rgba) c_gtk_cell_view_set_background_rgba; ///
  void function(GtkCellView* cellView, GtkTreePath* path) c_gtk_cell_view_set_displayed_row; ///
  void function(GtkCellView* cellView, bool drawSensitive) c_gtk_cell_view_set_draw_sensitive; ///
  void function(GtkCellView* cellView, bool fitModel) c_gtk_cell_view_set_fit_model; ///
  void function(GtkCellView* cellView, GtkTreeModel* model) c_gtk_cell_view_set_model; ///

  // CheckButton
  GType function() c_gtk_check_button_get_type; ///
  GtkWidget* function() c_gtk_check_button_new; ///
  GtkWidget* function(const(char)* label) c_gtk_check_button_new_with_label; ///
  GtkWidget* function(const(char)* label) c_gtk_check_button_new_with_mnemonic; ///

  // CheckMenuItem
  GType function() c_gtk_check_menu_item_get_type; ///
  GtkWidget* function() c_gtk_check_menu_item_new; ///
  GtkWidget* function(const(char)* label) c_gtk_check_menu_item_new_with_label; ///
  GtkWidget* function(const(char)* label) c_gtk_check_menu_item_new_with_mnemonic; ///
  bool function(GtkCheckMenuItem* checkMenuItem) c_gtk_check_menu_item_get_active; ///
  bool function(GtkCheckMenuItem* checkMenuItem) c_gtk_check_menu_item_get_draw_as_radio; ///
  bool function(GtkCheckMenuItem* checkMenuItem) c_gtk_check_menu_item_get_inconsistent; ///
  void function(GtkCheckMenuItem* checkMenuItem, bool isActive) c_gtk_check_menu_item_set_active; ///
  void function(GtkCheckMenuItem* checkMenuItem, bool drawAsRadio) c_gtk_check_menu_item_set_draw_as_radio; ///
  void function(GtkCheckMenuItem* checkMenuItem, bool setting) c_gtk_check_menu_item_set_inconsistent; ///
  void function(GtkCheckMenuItem* checkMenuItem) c_gtk_check_menu_item_toggled; ///

  // CheckMenuItemAccessible
  GType function() c_gtk_check_menu_item_accessible_get_type; ///

  // Clipboard
  GType function() c_gtk_clipboard_get_type; ///
  GtkClipboard* function(GdkAtom selection) c_gtk_clipboard_get; ///
  GtkClipboard* function(GdkDisplay* display) c_gtk_clipboard_get_default; ///
  GtkClipboard* function(GdkDisplay* display, GdkAtom selection) c_gtk_clipboard_get_for_display; ///
  void function(GtkClipboard* clipboard) c_gtk_clipboard_clear; ///
  GdkDisplay* function(GtkClipboard* clipboard) c_gtk_clipboard_get_display; ///
  ObjectC* function(GtkClipboard* clipboard) c_gtk_clipboard_get_owner; ///
  GdkAtom function(GtkClipboard* clipboard) c_gtk_clipboard_get_selection; ///
  void function(GtkClipboard* clipboard, GdkAtom target, GtkClipboardReceivedFunc callback, void* userData) c_gtk_clipboard_request_contents; ///
  void function(GtkClipboard* clipboard, GtkClipboardImageReceivedFunc callback, void* userData) c_gtk_clipboard_request_image; ///
  void function(GtkClipboard* clipboard, GtkTextBuffer* buffer, GtkClipboardRichTextReceivedFunc callback, void* userData) c_gtk_clipboard_request_rich_text; ///
  void function(GtkClipboard* clipboard, GtkClipboardTargetsReceivedFunc callback, void* userData) c_gtk_clipboard_request_targets; ///
  void function(GtkClipboard* clipboard, GtkClipboardTextReceivedFunc callback, void* userData) c_gtk_clipboard_request_text; ///
  void function(GtkClipboard* clipboard, GtkClipboardURIReceivedFunc callback, void* userData) c_gtk_clipboard_request_uris; ///
  void function(GtkClipboard* clipboard, const(GtkTargetEntry)* targets, int nTargets) c_gtk_clipboard_set_can_store; ///
  void function(GtkClipboard* clipboard, PixbufC* pixbuf) c_gtk_clipboard_set_image; ///
  void function(GtkClipboard* clipboard, const(char)* text, int len) c_gtk_clipboard_set_text; ///
  bool function(GtkClipboard* clipboard, const(GtkTargetEntry)* targets, uint nTargets, GtkClipboardGetFunc getFunc, GtkClipboardClearFunc clearFunc, void* userData) c_gtk_clipboard_set_with_data; ///
  bool function(GtkClipboard* clipboard, const(GtkTargetEntry)* targets, uint nTargets, GtkClipboardGetFunc getFunc, GtkClipboardClearFunc clearFunc, ObjectC* owner) c_gtk_clipboard_set_with_owner; ///
  void function(GtkClipboard* clipboard) c_gtk_clipboard_store; ///
  GtkSelectionData* function(GtkClipboard* clipboard, GdkAtom target) c_gtk_clipboard_wait_for_contents; ///
  PixbufC* function(GtkClipboard* clipboard) c_gtk_clipboard_wait_for_image; ///
  ubyte* function(GtkClipboard* clipboard, GtkTextBuffer* buffer, GdkAtom* format, size_t* length) c_gtk_clipboard_wait_for_rich_text; ///
  bool function(GtkClipboard* clipboard, GdkAtom** targets, int* nTargets) c_gtk_clipboard_wait_for_targets; ///
  char* function(GtkClipboard* clipboard) c_gtk_clipboard_wait_for_text; ///
  char** function(GtkClipboard* clipboard) c_gtk_clipboard_wait_for_uris; ///
  bool function(GtkClipboard* clipboard) c_gtk_clipboard_wait_is_image_available; ///
  bool function(GtkClipboard* clipboard, GtkTextBuffer* buffer) c_gtk_clipboard_wait_is_rich_text_available; ///
  bool function(GtkClipboard* clipboard, GdkAtom target) c_gtk_clipboard_wait_is_target_available; ///
  bool function(GtkClipboard* clipboard) c_gtk_clipboard_wait_is_text_available; ///
  bool function(GtkClipboard* clipboard) c_gtk_clipboard_wait_is_uris_available; ///

  // ColorButton
  GType function() c_gtk_color_button_get_type; ///
  GtkWidget* function() c_gtk_color_button_new; ///
  GtkWidget* function(const(GdkColor)* color) c_gtk_color_button_new_with_color; ///
  GtkWidget* function(const(GdkRGBA)* rgba) c_gtk_color_button_new_with_rgba; ///
  ushort function(GtkColorButton* button) c_gtk_color_button_get_alpha; ///
  void function(GtkColorButton* button, GdkColor* color) c_gtk_color_button_get_color; ///
  void function(GtkColorButton* button, GdkRGBA* rgba) c_gtk_color_button_get_rgba; ///
  const(char)* function(GtkColorButton* button) c_gtk_color_button_get_title; ///
  bool function(GtkColorButton* button) c_gtk_color_button_get_use_alpha; ///
  void function(GtkColorButton* button, ushort alpha) c_gtk_color_button_set_alpha; ///
  void function(GtkColorButton* button, const(GdkColor)* color) c_gtk_color_button_set_color; ///
  void function(GtkColorButton* button, const(GdkRGBA)* rgba) c_gtk_color_button_set_rgba; ///
  void function(GtkColorButton* button, const(char)* title) c_gtk_color_button_set_title; ///
  void function(GtkColorButton* button, bool useAlpha) c_gtk_color_button_set_use_alpha; ///

  // ColorChooser
  GType function() c_gtk_color_chooser_get_type; ///
  void function(GtkColorChooser* chooser, GtkOrientation orientation, int colorsPerLine, int nColors, GdkRGBA* colors) c_gtk_color_chooser_add_palette; ///
  void function(GtkColorChooser* chooser, GdkRGBA* color) c_gtk_color_chooser_get_rgba; ///
  bool function(GtkColorChooser* chooser) c_gtk_color_chooser_get_use_alpha; ///
  void function(GtkColorChooser* chooser, const(GdkRGBA)* color) c_gtk_color_chooser_set_rgba; ///
  void function(GtkColorChooser* chooser, bool useAlpha) c_gtk_color_chooser_set_use_alpha; ///

  // ColorChooserDialog
  GType function() c_gtk_color_chooser_dialog_get_type; ///
  GtkWidget* function(const(char)* title, GtkWindow* parent) c_gtk_color_chooser_dialog_new; ///

  // ColorChooserWidget
  GType function() c_gtk_color_chooser_widget_get_type; ///
  GtkWidget* function() c_gtk_color_chooser_widget_new; ///

  // ColorSelection
  GType function() c_gtk_color_selection_get_type; ///
  GtkWidget* function() c_gtk_color_selection_new; ///
  bool function(const(char)* str, GdkColor** colors, int* nColors) c_gtk_color_selection_palette_from_string; ///
  char* function(const(GdkColor)* colors, int nColors) c_gtk_color_selection_palette_to_string; ///
  GtkColorSelectionChangePaletteWithScreenFunc function(GtkColorSelectionChangePaletteWithScreenFunc func) c_gtk_color_selection_set_change_palette_with_screen_hook; ///
  ushort function(GtkColorSelection* colorsel) c_gtk_color_selection_get_current_alpha; ///
  void function(GtkColorSelection* colorsel, GdkColor* color) c_gtk_color_selection_get_current_color; ///
  void function(GtkColorSelection* colorsel, GdkRGBA* rgba) c_gtk_color_selection_get_current_rgba; ///
  bool function(GtkColorSelection* colorsel) c_gtk_color_selection_get_has_opacity_control; ///
  bool function(GtkColorSelection* colorsel) c_gtk_color_selection_get_has_palette; ///
  ushort function(GtkColorSelection* colorsel) c_gtk_color_selection_get_previous_alpha; ///
  void function(GtkColorSelection* colorsel, GdkColor* color) c_gtk_color_selection_get_previous_color; ///
  void function(GtkColorSelection* colorsel, GdkRGBA* rgba) c_gtk_color_selection_get_previous_rgba; ///
  bool function(GtkColorSelection* colorsel) c_gtk_color_selection_is_adjusting; ///
  void function(GtkColorSelection* colorsel, ushort alpha) c_gtk_color_selection_set_current_alpha; ///
  void function(GtkColorSelection* colorsel, const(GdkColor)* color) c_gtk_color_selection_set_current_color; ///
  void function(GtkColorSelection* colorsel, const(GdkRGBA)* rgba) c_gtk_color_selection_set_current_rgba; ///
  void function(GtkColorSelection* colorsel, bool hasOpacity) c_gtk_color_selection_set_has_opacity_control; ///
  void function(GtkColorSelection* colorsel, bool hasPalette) c_gtk_color_selection_set_has_palette; ///
  void function(GtkColorSelection* colorsel, ushort alpha) c_gtk_color_selection_set_previous_alpha; ///
  void function(GtkColorSelection* colorsel, const(GdkColor)* color) c_gtk_color_selection_set_previous_color; ///
  void function(GtkColorSelection* colorsel, const(GdkRGBA)* rgba) c_gtk_color_selection_set_previous_rgba; ///

  // ColorSelectionDialog
  GType function() c_gtk_color_selection_dialog_get_type; ///
  GtkWidget* function(const(char)* title) c_gtk_color_selection_dialog_new; ///
  GtkWidget* function(GtkColorSelectionDialog* colorsel) c_gtk_color_selection_dialog_get_color_selection; ///

  // ComboBox
  GType function() c_gtk_combo_box_get_type; ///
  GtkWidget* function() c_gtk_combo_box_new; ///
  GtkWidget* function(GtkCellArea* area) c_gtk_combo_box_new_with_area; ///
  GtkWidget* function(GtkCellArea* area) c_gtk_combo_box_new_with_area_and_entry; ///
  GtkWidget* function() c_gtk_combo_box_new_with_entry; ///
  GtkWidget* function(GtkTreeModel* model) c_gtk_combo_box_new_with_model; ///
  GtkWidget* function(GtkTreeModel* model) c_gtk_combo_box_new_with_model_and_entry; ///
  int function(GtkComboBox* comboBox) c_gtk_combo_box_get_active; ///
  const(char)* function(GtkComboBox* comboBox) c_gtk_combo_box_get_active_id; ///
  bool function(GtkComboBox* comboBox, GtkTreeIter* iter) c_gtk_combo_box_get_active_iter; ///
  bool function(GtkComboBox* comboBox) c_gtk_combo_box_get_add_tearoffs; ///
  GtkSensitivityType function(GtkComboBox* comboBox) c_gtk_combo_box_get_button_sensitivity; ///
  int function(GtkComboBox* comboBox) c_gtk_combo_box_get_column_span_column; ///
  int function(GtkComboBox* comboBox) c_gtk_combo_box_get_entry_text_column; ///
  bool function(GtkComboBox* combo) c_gtk_combo_box_get_focus_on_click; ///
  bool function(GtkComboBox* comboBox) c_gtk_combo_box_get_has_entry; ///
  int function(GtkComboBox* comboBox) c_gtk_combo_box_get_id_column; ///
  GtkTreeModel* function(GtkComboBox* comboBox) c_gtk_combo_box_get_model; ///
  AtkObject* function(GtkComboBox* comboBox) c_gtk_combo_box_get_popup_accessible; ///
  bool function(GtkComboBox* comboBox) c_gtk_combo_box_get_popup_fixed_width; ///
  GtkTreeViewRowSeparatorFunc function(GtkComboBox* comboBox) c_gtk_combo_box_get_row_separator_func; ///
  int function(GtkComboBox* comboBox) c_gtk_combo_box_get_row_span_column; ///
  const(char)* function(GtkComboBox* comboBox) c_gtk_combo_box_get_title; ///
  int function(GtkComboBox* comboBox) c_gtk_combo_box_get_wrap_width; ///
  void function(GtkComboBox* comboBox) c_gtk_combo_box_popdown; ///
  void function(GtkComboBox* comboBox) c_gtk_combo_box_popup; ///
  void function(GtkComboBox* comboBox, GdkDevice* device) c_gtk_combo_box_popup_for_device; ///
  void function(GtkComboBox* comboBox, int index) c_gtk_combo_box_set_active; ///
  bool function(GtkComboBox* comboBox, const(char)* activeId) c_gtk_combo_box_set_active_id; ///
  void function(GtkComboBox* comboBox, GtkTreeIter* iter) c_gtk_combo_box_set_active_iter; ///
  void function(GtkComboBox* comboBox, bool addTearoffs) c_gtk_combo_box_set_add_tearoffs; ///
  void function(GtkComboBox* comboBox, GtkSensitivityType sensitivity) c_gtk_combo_box_set_button_sensitivity; ///
  void function(GtkComboBox* comboBox, int columnSpan) c_gtk_combo_box_set_column_span_column; ///
  void function(GtkComboBox* comboBox, int textColumn) c_gtk_combo_box_set_entry_text_column; ///
  void function(GtkComboBox* combo, bool focusOnClick) c_gtk_combo_box_set_focus_on_click; ///
  void function(GtkComboBox* comboBox, int idColumn) c_gtk_combo_box_set_id_column; ///
  void function(GtkComboBox* comboBox, GtkTreeModel* model) c_gtk_combo_box_set_model; ///
  void function(GtkComboBox* comboBox, bool fixed) c_gtk_combo_box_set_popup_fixed_width; ///
  void function(GtkComboBox* comboBox, GtkTreeViewRowSeparatorFunc func, void* data, GDestroyNotify destroy) c_gtk_combo_box_set_row_separator_func; ///
  void function(GtkComboBox* comboBox, int rowSpan) c_gtk_combo_box_set_row_span_column; ///
  void function(GtkComboBox* comboBox, const(char)* title) c_gtk_combo_box_set_title; ///
  void function(GtkComboBox* comboBox, int width) c_gtk_combo_box_set_wrap_width; ///

  // ComboBoxAccessible
  GType function() c_gtk_combo_box_accessible_get_type; ///

  // ComboBoxText
  GType function() c_gtk_combo_box_text_get_type; ///
  GtkWidget* function() c_gtk_combo_box_text_new; ///
  GtkWidget* function() c_gtk_combo_box_text_new_with_entry; ///
  void function(GtkComboBoxText* comboBox, const(char)* id, const(char)* text) c_gtk_combo_box_text_append; ///
  void function(GtkComboBoxText* comboBox, const(char)* text) c_gtk_combo_box_text_append_text; ///
  char* function(GtkComboBoxText* comboBox) c_gtk_combo_box_text_get_active_text; ///
  void function(GtkComboBoxText* comboBox, int position, const(char)* id, const(char)* text) c_gtk_combo_box_text_insert; ///
  void function(GtkComboBoxText* comboBox, int position, const(char)* text) c_gtk_combo_box_text_insert_text; ///
  void function(GtkComboBoxText* comboBox, const(char)* id, const(char)* text) c_gtk_combo_box_text_prepend; ///
  void function(GtkComboBoxText* comboBox, const(char)* text) c_gtk_combo_box_text_prepend_text; ///
  void function(GtkComboBoxText* comboBox, int position) c_gtk_combo_box_text_remove; ///
  void function(GtkComboBoxText* comboBox) c_gtk_combo_box_text_remove_all; ///

  // Container
  GType function() c_gtk_container_get_type; ///
  void function(GtkContainer* container, GtkWidget* widget) c_gtk_container_add; ///
  void function(GtkContainer* container, GtkWidget* widget, const(char)* firstPropName,  ...) c_gtk_container_add_with_properties; ///
  void function(GtkContainer* container) c_gtk_container_check_resize; ///
  void function(GtkContainer* container, GtkWidget* child, const(char)* firstPropName,  ...) c_gtk_container_child_get; ///
  void function(GtkContainer* container, GtkWidget* child, const(char)* propertyName, GValue* value) c_gtk_container_child_get_property; ///
  void function(GtkContainer* container, GtkWidget* child, const(char)* firstPropertyName, void* varArgs) c_gtk_container_child_get_valist; ///
  void function(GtkContainer* container, GtkWidget* child, const(char)* childProperty) c_gtk_container_child_notify; ///
  void function(GtkContainer* container, GtkWidget* child, GParamSpec* pspec) c_gtk_container_child_notify_by_pspec; ///
  void function(GtkContainer* container, GtkWidget* child, const(char)* firstPropName,  ...) c_gtk_container_child_set; ///
  void function(GtkContainer* container, GtkWidget* child, const(char)* propertyName, const(GValue)* value) c_gtk_container_child_set_property; ///
  void function(GtkContainer* container, GtkWidget* child, const(char)* firstPropertyName, void* varArgs) c_gtk_container_child_set_valist; ///
  GType function(GtkContainer* container) c_gtk_container_child_type; ///
  void function(GtkContainer* container, GtkCallback callback, void* callbackData) c_gtk_container_forall; ///
  void function(GtkContainer* container, GtkCallback callback, void* callbackData) c_gtk_container_foreach; ///
  uint function(GtkContainer* container) c_gtk_container_get_border_width; ///
  GList* function(GtkContainer* container) c_gtk_container_get_children; ///
  bool function(GtkContainer* container, GList** focusableWidgets) c_gtk_container_get_focus_chain; ///
  GtkWidget* function(GtkContainer* container) c_gtk_container_get_focus_child; ///
  GtkAdjustment* function(GtkContainer* container) c_gtk_container_get_focus_hadjustment; ///
  GtkAdjustment* function(GtkContainer* container) c_gtk_container_get_focus_vadjustment; ///
  GtkWidgetPath* function(GtkContainer* container, GtkWidget* child) c_gtk_container_get_path_for_child; ///
  GtkResizeMode function(GtkContainer* container) c_gtk_container_get_resize_mode; ///
  void function(GtkContainer* container, GtkWidget* child, cairo_t* cr) c_gtk_container_propagate_draw; ///
  void function(GtkContainer* container, GtkWidget* widget) c_gtk_container_remove; ///
  void function(GtkContainer* container) c_gtk_container_resize_children; ///
  void function(GtkContainer* container, uint borderWidth) c_gtk_container_set_border_width; ///
  void function(GtkContainer* container, GList* focusableWidgets) c_gtk_container_set_focus_chain; ///
  void function(GtkContainer* container, GtkWidget* child) c_gtk_container_set_focus_child; ///
  void function(GtkContainer* container, GtkAdjustment* adjustment) c_gtk_container_set_focus_hadjustment; ///
  void function(GtkContainer* container, GtkAdjustment* adjustment) c_gtk_container_set_focus_vadjustment; ///
  void function(GtkContainer* container, bool needsRedraws) c_gtk_container_set_reallocate_redraws; ///
  void function(GtkContainer* container, GtkResizeMode resizeMode) c_gtk_container_set_resize_mode; ///
  void function(GtkContainer* container) c_gtk_container_unset_focus_chain; ///

  // ContainerAccessible
  GType function() c_gtk_container_accessible_get_type; ///

  // ContainerCellAccessible
  GType function() c_gtk_container_cell_accessible_get_type; ///
  GtkContainerCellAccessible* function() c_gtk_container_cell_accessible_new; ///
  void function(GtkContainerCellAccessible* container, GtkCellAccessible* child) c_gtk_container_cell_accessible_add_child; ///
  GList* function(GtkContainerCellAccessible* container) c_gtk_container_cell_accessible_get_children; ///
  void function(GtkContainerCellAccessible* container, GtkCellAccessible* child) c_gtk_container_cell_accessible_remove_child; ///

  // ContainerClass
  GParamSpec* function(GObjectClass* cclass, const(char)* propertyName) c_gtk_container_class_find_child_property; ///
  void function(GtkContainerClass* klass) c_gtk_container_class_handle_border_width; ///
  void function(GtkContainerClass* cclass, uint nPspecs, GParamSpec** pspecs) c_gtk_container_class_install_child_properties; ///
  void function(GtkContainerClass* cclass, uint propertyId, GParamSpec* pspec) c_gtk_container_class_install_child_property; ///
  GParamSpec** function(GObjectClass* cclass, uint* nProperties) c_gtk_container_class_list_child_properties; ///

  // CssProvider
  GType function() c_gtk_css_provider_get_type; ///
  GtkCssProvider* function() c_gtk_css_provider_new; ///
  GtkCssProvider* function() c_gtk_css_provider_get_default; ///
  GtkCssProvider* function(const(char)* name, const(char)* variant) c_gtk_css_provider_get_named; ///
  bool function(GtkCssProvider* cssProvider, const(ubyte)* data, ptrdiff_t length, GError** _err) c_gtk_css_provider_load_from_data; ///
  bool function(GtkCssProvider* cssProvider, GFile* file, GError** _err) c_gtk_css_provider_load_from_file; ///
  bool function(GtkCssProvider* cssProvider, const(char)* path, GError** _err) c_gtk_css_provider_load_from_path; ///
  void function(GtkCssProvider* cssProvider, const(char)* resourcePath) c_gtk_css_provider_load_from_resource; ///
  char* function(GtkCssProvider* provider) c_gtk_css_provider_to_string; ///

  // CssSection
  GType function() c_gtk_css_section_get_type; ///
  uint function(const(GtkCssSection)* section) c_gtk_css_section_get_end_line; ///
  uint function(const(GtkCssSection)* section) c_gtk_css_section_get_end_position; ///
  GFile* function(const(GtkCssSection)* section) c_gtk_css_section_get_file; ///
  GtkCssSection* function(const(GtkCssSection)* section) c_gtk_css_section_get_parent; ///
  GtkCssSectionType function(const(GtkCssSection)* section) c_gtk_css_section_get_section_type; ///
  uint function(const(GtkCssSection)* section) c_gtk_css_section_get_start_line; ///
  uint function(const(GtkCssSection)* section) c_gtk_css_section_get_start_position; ///
  GtkCssSection* function(GtkCssSection* section) c_gtk_css_section_ref; ///
  void function(GtkCssSection* section) c_gtk_css_section_unref; ///

  // Dialog
  GType function() c_gtk_dialog_get_type; ///
  GtkWidget* function() c_gtk_dialog_new; ///
  GtkWidget* function(const(char)* title, GtkWindow* parent, GtkDialogFlags flags, const(char)* firstButtonText,  ...) c_gtk_dialog_new_with_buttons; ///
  void function(GtkDialog* dialog, GtkWidget* child, int responseId) c_gtk_dialog_add_action_widget; ///
  GtkWidget* function(GtkDialog* dialog, const(char)* buttonText, int responseId) c_gtk_dialog_add_button; ///
  void function(GtkDialog* dialog, const(char)* firstButtonText,  ...) c_gtk_dialog_add_buttons; ///
  GtkWidget* function(GtkDialog* dialog) c_gtk_dialog_get_action_area; ///
  GtkWidget* function(GtkDialog* dialog) c_gtk_dialog_get_content_area; ///
  GtkWidget* function(GtkDialog* dialog) c_gtk_dialog_get_header_bar; ///
  int function(GtkDialog* dialog, GtkWidget* widget) c_gtk_dialog_get_response_for_widget; ///
  GtkWidget* function(GtkDialog* dialog, int responseId) c_gtk_dialog_get_widget_for_response; ///
  void function(GtkDialog* dialog, int responseId) c_gtk_dialog_response; ///
  int function(GtkDialog* dialog) c_gtk_dialog_run; ///
  void function(GtkDialog* dialog, int firstResponseId,  ...) c_gtk_dialog_set_alternative_button_order; ///
  void function(GtkDialog* dialog, int nParams, int* newOrder) c_gtk_dialog_set_alternative_button_order_from_array; ///
  void function(GtkDialog* dialog, int responseId) c_gtk_dialog_set_default_response; ///
  void function(GtkDialog* dialog, int responseId, bool setting) c_gtk_dialog_set_response_sensitive; ///

  // DrawingArea
  GType function() c_gtk_drawing_area_get_type; ///
  GtkWidget* function() c_gtk_drawing_area_new; ///

  // Editable
  GType function() c_gtk_editable_get_type; ///
  void function(GtkEditable* editable) c_gtk_editable_copy_clipboard; ///
  void function(GtkEditable* editable) c_gtk_editable_cut_clipboard; ///
  void function(GtkEditable* editable) c_gtk_editable_delete_selection; ///
  void function(GtkEditable* editable, int startPos, int endPos) c_gtk_editable_delete_text; ///
  char* function(GtkEditable* editable, int startPos, int endPos) c_gtk_editable_get_chars; ///
  bool function(GtkEditable* editable) c_gtk_editable_get_editable; ///
  int function(GtkEditable* editable) c_gtk_editable_get_position; ///
  bool function(GtkEditable* editable, int* startPos, int* endPos) c_gtk_editable_get_selection_bounds; ///
  void function(GtkEditable* editable, const(char)* newText, int newTextLength, int* position) c_gtk_editable_insert_text; ///
  void function(GtkEditable* editable) c_gtk_editable_paste_clipboard; ///
  void function(GtkEditable* editable, int startPos, int endPos) c_gtk_editable_select_region; ///
  void function(GtkEditable* editable, bool isEditable) c_gtk_editable_set_editable; ///
  void function(GtkEditable* editable, int position) c_gtk_editable_set_position; ///

  // Entry
  GType function() c_gtk_entry_get_type; ///
  GtkWidget* function() c_gtk_entry_new; ///
  GtkWidget* function(GtkEntryBuffer* buffer) c_gtk_entry_new_with_buffer; ///
  bool function(GtkEntry* entry) c_gtk_entry_get_activates_default; ///
  float function(GtkEntry* entry) c_gtk_entry_get_alignment; ///
  PangoAttrList* function(GtkEntry* entry) c_gtk_entry_get_attributes; ///
  GtkEntryBuffer* function(GtkEntry* entry) c_gtk_entry_get_buffer; ///
  GtkEntryCompletion* function(GtkEntry* entry) c_gtk_entry_get_completion; ///
  int function(GtkEntry* entry) c_gtk_entry_get_current_icon_drag_source; ///
  GtkAdjustment* function(GtkEntry* entry) c_gtk_entry_get_cursor_hadjustment; ///
  bool function(GtkEntry* entry) c_gtk_entry_get_has_frame; ///
  bool function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_activatable; ///
  void function(GtkEntry* entry, GtkEntryIconPosition iconPos, GdkRectangle* iconArea) c_gtk_entry_get_icon_area; ///
  int function(GtkEntry* entry, int x, int y) c_gtk_entry_get_icon_at_pos; ///
  GIcon* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_gicon; ///
  const(char)* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_name; ///
  PixbufC* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_pixbuf; ///
  bool function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_sensitive; ///
  const(char)* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_stock; ///
  GtkImageType function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_storage_type; ///
  char* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_tooltip_markup; ///
  char* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_tooltip_text; ///
  const(GtkBorder)* function(GtkEntry* entry) c_gtk_entry_get_inner_border; ///
  GtkInputHints function(GtkEntry* entry) c_gtk_entry_get_input_hints; ///
  GtkInputPurpose function(GtkEntry* entry) c_gtk_entry_get_input_purpose; ///
  dchar function(GtkEntry* entry) c_gtk_entry_get_invisible_char; ///
  PangoLayout* function(GtkEntry* entry) c_gtk_entry_get_layout; ///
  void function(GtkEntry* entry, int* x, int* y) c_gtk_entry_get_layout_offsets; ///
  int function(GtkEntry* entry) c_gtk_entry_get_max_length; ///
  int function(GtkEntry* entry) c_gtk_entry_get_max_width_chars; ///
  bool function(GtkEntry* entry) c_gtk_entry_get_overwrite_mode; ///
  const(char)* function(GtkEntry* entry) c_gtk_entry_get_placeholder_text; ///
  double function(GtkEntry* entry) c_gtk_entry_get_progress_fraction; ///
  double function(GtkEntry* entry) c_gtk_entry_get_progress_pulse_step; ///
  PangoTabArray* function(GtkEntry* entry) c_gtk_entry_get_tabs; ///
  const(char)* function(GtkEntry* entry) c_gtk_entry_get_text; ///
  void function(GtkEntry* entry, GdkRectangle* textArea) c_gtk_entry_get_text_area; ///
  ushort function(GtkEntry* entry) c_gtk_entry_get_text_length; ///
  bool function(GtkEntry* entry) c_gtk_entry_get_visibility; ///
  int function(GtkEntry* entry) c_gtk_entry_get_width_chars; ///
  void function(GtkEntry* entry) c_gtk_entry_grab_focus_without_selecting; ///
  bool function(GtkEntry* entry, GdkEventKey* event) c_gtk_entry_im_context_filter_keypress; ///
  int function(GtkEntry* entry, int layoutIndex) c_gtk_entry_layout_index_to_text_index; ///
  void function(GtkEntry* entry) c_gtk_entry_progress_pulse; ///
  void function(GtkEntry* entry) c_gtk_entry_reset_im_context; ///
  void function(GtkEntry* entry, bool setting) c_gtk_entry_set_activates_default; ///
  void function(GtkEntry* entry, float xalign) c_gtk_entry_set_alignment; ///
  void function(GtkEntry* entry, PangoAttrList* attrs) c_gtk_entry_set_attributes; ///
  void function(GtkEntry* entry, GtkEntryBuffer* buffer) c_gtk_entry_set_buffer; ///
  void function(GtkEntry* entry, GtkEntryCompletion* completion) c_gtk_entry_set_completion; ///
  void function(GtkEntry* entry, GtkAdjustment* adjustment) c_gtk_entry_set_cursor_hadjustment; ///
  void function(GtkEntry* entry, bool setting) c_gtk_entry_set_has_frame; ///
  void function(GtkEntry* entry, GtkEntryIconPosition iconPos, bool activatable) c_gtk_entry_set_icon_activatable; ///
  void function(GtkEntry* entry, GtkEntryIconPosition iconPos, GtkTargetList* targetList, GdkDragAction actions) c_gtk_entry_set_icon_drag_source; ///
  void function(GtkEntry* entry, GtkEntryIconPosition iconPos, GIcon* icon) c_gtk_entry_set_icon_from_gicon; ///
  void function(GtkEntry* entry, GtkEntryIconPosition iconPos, const(char)* iconName) c_gtk_entry_set_icon_from_icon_name; ///
  void function(GtkEntry* entry, GtkEntryIconPosition iconPos, PixbufC* pixbuf) c_gtk_entry_set_icon_from_pixbuf; ///
  void function(GtkEntry* entry, GtkEntryIconPosition iconPos, const(char)* stockId) c_gtk_entry_set_icon_from_stock; ///
  void function(GtkEntry* entry, GtkEntryIconPosition iconPos, bool sensitive) c_gtk_entry_set_icon_sensitive; ///
  void function(GtkEntry* entry, GtkEntryIconPosition iconPos, const(char)* tooltip) c_gtk_entry_set_icon_tooltip_markup; ///
  void function(GtkEntry* entry, GtkEntryIconPosition iconPos, const(char)* tooltip) c_gtk_entry_set_icon_tooltip_text; ///
  void function(GtkEntry* entry, const(GtkBorder)* border) c_gtk_entry_set_inner_border; ///
  void function(GtkEntry* entry, GtkInputHints hints) c_gtk_entry_set_input_hints; ///
  void function(GtkEntry* entry, GtkInputPurpose purpose) c_gtk_entry_set_input_purpose; ///
  void function(GtkEntry* entry, dchar ch) c_gtk_entry_set_invisible_char; ///
  void function(GtkEntry* entry, int max) c_gtk_entry_set_max_length; ///
  void function(GtkEntry* entry, int nChars) c_gtk_entry_set_max_width_chars; ///
  void function(GtkEntry* entry, bool overwrite) c_gtk_entry_set_overwrite_mode; ///
  void function(GtkEntry* entry, const(char)* text) c_gtk_entry_set_placeholder_text; ///
  void function(GtkEntry* entry, double fraction) c_gtk_entry_set_progress_fraction; ///
  void function(GtkEntry* entry, double fraction) c_gtk_entry_set_progress_pulse_step; ///
  void function(GtkEntry* entry, PangoTabArray* tabs) c_gtk_entry_set_tabs; ///
  void function(GtkEntry* entry, const(char)* text) c_gtk_entry_set_text; ///
  void function(GtkEntry* entry, bool visible) c_gtk_entry_set_visibility; ///
  void function(GtkEntry* entry, int nChars) c_gtk_entry_set_width_chars; ///
  int function(GtkEntry* entry, int textIndex) c_gtk_entry_text_index_to_layout_index; ///
  void function(GtkEntry* entry) c_gtk_entry_unset_invisible_char; ///

  // EntryAccessible
  GType function() c_gtk_entry_accessible_get_type; ///

  // EntryBuffer
  GType function() c_gtk_entry_buffer_get_type; ///
  GtkEntryBuffer* function(const(char)* initialChars, int nInitialChars) c_gtk_entry_buffer_new; ///
  uint function(GtkEntryBuffer* buffer, uint position, int nChars) c_gtk_entry_buffer_delete_text; ///
  void function(GtkEntryBuffer* buffer, uint position, uint nChars) c_gtk_entry_buffer_emit_deleted_text; ///
  void function(GtkEntryBuffer* buffer, uint position, const(char)* chars, uint nChars) c_gtk_entry_buffer_emit_inserted_text; ///
  size_t function(GtkEntryBuffer* buffer) c_gtk_entry_buffer_get_bytes; ///
  uint function(GtkEntryBuffer* buffer) c_gtk_entry_buffer_get_length; ///
  int function(GtkEntryBuffer* buffer) c_gtk_entry_buffer_get_max_length; ///
  const(char)* function(GtkEntryBuffer* buffer) c_gtk_entry_buffer_get_text; ///
  uint function(GtkEntryBuffer* buffer, uint position, const(char)* chars, int nChars) c_gtk_entry_buffer_insert_text; ///
  void function(GtkEntryBuffer* buffer, int maxLength) c_gtk_entry_buffer_set_max_length; ///
  void function(GtkEntryBuffer* buffer, const(char)* chars, int nChars) c_gtk_entry_buffer_set_text; ///

  // EntryCompletion
  GType function() c_gtk_entry_completion_get_type; ///
  GtkEntryCompletion* function() c_gtk_entry_completion_new; ///
  GtkEntryCompletion* function(GtkCellArea* area) c_gtk_entry_completion_new_with_area; ///
  void function(GtkEntryCompletion* completion) c_gtk_entry_completion_complete; ///
  char* function(GtkEntryCompletion* completion, const(char)* key) c_gtk_entry_completion_compute_prefix; ///
  void function(GtkEntryCompletion* completion, int index) c_gtk_entry_completion_delete_action; ///
  const(char)* function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_completion_prefix; ///
  GtkWidget* function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_entry; ///
  bool function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_inline_completion; ///
  bool function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_inline_selection; ///
  int function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_minimum_key_length; ///
  GtkTreeModel* function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_model; ///
  bool function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_popup_completion; ///
  bool function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_popup_set_width; ///
  bool function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_popup_single_match; ///
  int function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_text_column; ///
  void function(GtkEntryCompletion* completion, int index, const(char)* markup) c_gtk_entry_completion_insert_action_markup; ///
  void function(GtkEntryCompletion* completion, int index, const(char)* text) c_gtk_entry_completion_insert_action_text; ///
  void function(GtkEntryCompletion* completion) c_gtk_entry_completion_insert_prefix; ///
  void function(GtkEntryCompletion* completion, bool inlineCompletion) c_gtk_entry_completion_set_inline_completion; ///
  void function(GtkEntryCompletion* completion, bool inlineSelection) c_gtk_entry_completion_set_inline_selection; ///
  void function(GtkEntryCompletion* completion, GtkEntryCompletionMatchFunc func, void* funcData, GDestroyNotify funcNotify) c_gtk_entry_completion_set_match_func; ///
  void function(GtkEntryCompletion* completion, int length) c_gtk_entry_completion_set_minimum_key_length; ///
  void function(GtkEntryCompletion* completion, GtkTreeModel* model) c_gtk_entry_completion_set_model; ///
  void function(GtkEntryCompletion* completion, bool popupCompletion) c_gtk_entry_completion_set_popup_completion; ///
  void function(GtkEntryCompletion* completion, bool popupSetWidth) c_gtk_entry_completion_set_popup_set_width; ///
  void function(GtkEntryCompletion* completion, bool popupSingleMatch) c_gtk_entry_completion_set_popup_single_match; ///
  void function(GtkEntryCompletion* completion, int column) c_gtk_entry_completion_set_text_column; ///

  // EntryIconAccessible
  GType function() c_gtk_entry_icon_accessible_get_type; ///

  // EventBox
  GType function() c_gtk_event_box_get_type; ///
  GtkWidget* function() c_gtk_event_box_new; ///
  bool function(GtkEventBox* eventBox) c_gtk_event_box_get_above_child; ///
  bool function(GtkEventBox* eventBox) c_gtk_event_box_get_visible_window; ///
  void function(GtkEventBox* eventBox, bool aboveChild) c_gtk_event_box_set_above_child; ///
  void function(GtkEventBox* eventBox, bool visibleWindow) c_gtk_event_box_set_visible_window; ///

  // EventController
  GType function() c_gtk_event_controller_get_type; ///
  GtkPropagationPhase function(GtkEventController* controller) c_gtk_event_controller_get_propagation_phase; ///
  GtkWidget* function(GtkEventController* controller) c_gtk_event_controller_get_widget; ///
  bool function(GtkEventController* controller, const(GdkEvent)* event) c_gtk_event_controller_handle_event; ///
  void function(GtkEventController* controller) c_gtk_event_controller_reset; ///
  void function(GtkEventController* controller, GtkPropagationPhase phase) c_gtk_event_controller_set_propagation_phase; ///

  // EventControllerKey
  GType function() c_gtk_event_controller_key_get_type; ///
  GtkEventController* function(GtkWidget* widget) c_gtk_event_controller_key_new; ///
  bool function(GtkEventControllerKey* controller, GtkWidget* widget) c_gtk_event_controller_key_forward; ///
  uint function(GtkEventControllerKey* controller) c_gtk_event_controller_key_get_group; ///
  GtkIMContext* function(GtkEventControllerKey* controller) c_gtk_event_controller_key_get_im_context; ///
  void function(GtkEventControllerKey* controller, GtkIMContext* imContext) c_gtk_event_controller_key_set_im_context; ///

  // EventControllerMotion
  GType function() c_gtk_event_controller_motion_get_type; ///
  GtkEventController* function(GtkWidget* widget) c_gtk_event_controller_motion_new; ///

  // EventControllerScroll
  GType function() c_gtk_event_controller_scroll_get_type; ///
  GtkEventController* function(GtkWidget* widget, GtkEventControllerScrollFlags flags) c_gtk_event_controller_scroll_new; ///
  GtkEventControllerScrollFlags function(GtkEventControllerScroll* scroll) c_gtk_event_controller_scroll_get_flags; ///
  void function(GtkEventControllerScroll* scroll, GtkEventControllerScrollFlags flags) c_gtk_event_controller_scroll_set_flags; ///

  // Expander
  GType function() c_gtk_expander_get_type; ///
  GtkWidget* function(const(char)* label) c_gtk_expander_new; ///
  GtkWidget* function(const(char)* label) c_gtk_expander_new_with_mnemonic; ///
  bool function(GtkExpander* expander) c_gtk_expander_get_expanded; ///
  const(char)* function(GtkExpander* expander) c_gtk_expander_get_label; ///
  bool function(GtkExpander* expander) c_gtk_expander_get_label_fill; ///
  GtkWidget* function(GtkExpander* expander) c_gtk_expander_get_label_widget; ///
  bool function(GtkExpander* expander) c_gtk_expander_get_resize_toplevel; ///
  int function(GtkExpander* expander) c_gtk_expander_get_spacing; ///
  bool function(GtkExpander* expander) c_gtk_expander_get_use_markup; ///
  bool function(GtkExpander* expander) c_gtk_expander_get_use_underline; ///
  void function(GtkExpander* expander, bool expanded) c_gtk_expander_set_expanded; ///
  void function(GtkExpander* expander, const(char)* label) c_gtk_expander_set_label; ///
  void function(GtkExpander* expander, bool labelFill) c_gtk_expander_set_label_fill; ///
  void function(GtkExpander* expander, GtkWidget* labelWidget) c_gtk_expander_set_label_widget; ///
  void function(GtkExpander* expander, bool resizeToplevel) c_gtk_expander_set_resize_toplevel; ///
  void function(GtkExpander* expander, int spacing) c_gtk_expander_set_spacing; ///
  void function(GtkExpander* expander, bool useMarkup) c_gtk_expander_set_use_markup; ///
  void function(GtkExpander* expander, bool useUnderline) c_gtk_expander_set_use_underline; ///

  // ExpanderAccessible
  GType function() c_gtk_expander_accessible_get_type; ///

  // FileChooser
  GType function() c_gtk_file_chooser_get_type; ///
  void function(GtkFileChooser* chooser, const(char)* id, const(char)* label, const(char*)* options, const(char*)* optionLabels) c_gtk_file_chooser_add_choice; ///
  void function(GtkFileChooser* chooser, GtkFileFilter* filter) c_gtk_file_chooser_add_filter; ///
  bool function(GtkFileChooser* chooser, const(char)* folder, GError** _err) c_gtk_file_chooser_add_shortcut_folder; ///
  bool function(GtkFileChooser* chooser, const(char)* uri, GError** _err) c_gtk_file_chooser_add_shortcut_folder_uri; ///
  GtkFileChooserAction function(GtkFileChooser* chooser) c_gtk_file_chooser_get_action; ///
  const(char)* function(GtkFileChooser* chooser, const(char)* id) c_gtk_file_chooser_get_choice; ///
  bool function(GtkFileChooser* chooser) c_gtk_file_chooser_get_create_folders; ///
  char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_current_folder; ///
  GFile* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_current_folder_file; ///
  char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_current_folder_uri; ///
  char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_current_name; ///
  bool function(GtkFileChooser* chooser) c_gtk_file_chooser_get_do_overwrite_confirmation; ///
  GtkWidget* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_extra_widget; ///
  GFile* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_file; ///
  char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_filename; ///
  GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_filenames; ///
  GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_files; ///
  GtkFileFilter* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_filter; ///
  bool function(GtkFileChooser* chooser) c_gtk_file_chooser_get_local_only; ///
  GFile* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_preview_file; ///
  char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_preview_filename; ///
  char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_preview_uri; ///
  GtkWidget* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_preview_widget; ///
  bool function(GtkFileChooser* chooser) c_gtk_file_chooser_get_preview_widget_active; ///
  bool function(GtkFileChooser* chooser) c_gtk_file_chooser_get_select_multiple; ///
  bool function(GtkFileChooser* chooser) c_gtk_file_chooser_get_show_hidden; ///
  char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_uri; ///
  GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_uris; ///
  bool function(GtkFileChooser* chooser) c_gtk_file_chooser_get_use_preview_label; ///
  GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_list_filters; ///
  GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_list_shortcut_folder_uris; ///
  GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_list_shortcut_folders; ///
  void function(GtkFileChooser* chooser, const(char)* id) c_gtk_file_chooser_remove_choice; ///
  void function(GtkFileChooser* chooser, GtkFileFilter* filter) c_gtk_file_chooser_remove_filter; ///
  bool function(GtkFileChooser* chooser, const(char)* folder, GError** _err) c_gtk_file_chooser_remove_shortcut_folder; ///
  bool function(GtkFileChooser* chooser, const(char)* uri, GError** _err) c_gtk_file_chooser_remove_shortcut_folder_uri; ///
  void function(GtkFileChooser* chooser) c_gtk_file_chooser_select_all; ///
  bool function(GtkFileChooser* chooser, GFile* file, GError** _err) c_gtk_file_chooser_select_file; ///
  bool function(GtkFileChooser* chooser, const(char)* filename) c_gtk_file_chooser_select_filename; ///
  bool function(GtkFileChooser* chooser, const(char)* uri) c_gtk_file_chooser_select_uri; ///
  void function(GtkFileChooser* chooser, GtkFileChooserAction action) c_gtk_file_chooser_set_action; ///
  void function(GtkFileChooser* chooser, const(char)* id, const(char)* option) c_gtk_file_chooser_set_choice; ///
  void function(GtkFileChooser* chooser, bool createFolders) c_gtk_file_chooser_set_create_folders; ///
  bool function(GtkFileChooser* chooser, const(char)* filename) c_gtk_file_chooser_set_current_folder; ///
  bool function(GtkFileChooser* chooser, GFile* file, GError** _err) c_gtk_file_chooser_set_current_folder_file; ///
  bool function(GtkFileChooser* chooser, const(char)* uri) c_gtk_file_chooser_set_current_folder_uri; ///
  void function(GtkFileChooser* chooser, const(char)* name) c_gtk_file_chooser_set_current_name; ///
  void function(GtkFileChooser* chooser, bool doOverwriteConfirmation) c_gtk_file_chooser_set_do_overwrite_confirmation; ///
  void function(GtkFileChooser* chooser, GtkWidget* extraWidget) c_gtk_file_chooser_set_extra_widget; ///
  bool function(GtkFileChooser* chooser, GFile* file, GError** _err) c_gtk_file_chooser_set_file; ///
  bool function(GtkFileChooser* chooser, const(char)* filename) c_gtk_file_chooser_set_filename; ///
  void function(GtkFileChooser* chooser, GtkFileFilter* filter) c_gtk_file_chooser_set_filter; ///
  void function(GtkFileChooser* chooser, bool localOnly) c_gtk_file_chooser_set_local_only; ///
  void function(GtkFileChooser* chooser, GtkWidget* previewWidget) c_gtk_file_chooser_set_preview_widget; ///
  void function(GtkFileChooser* chooser, bool active) c_gtk_file_chooser_set_preview_widget_active; ///
  void function(GtkFileChooser* chooser, bool selectMultiple) c_gtk_file_chooser_set_select_multiple; ///
  void function(GtkFileChooser* chooser, bool showHidden) c_gtk_file_chooser_set_show_hidden; ///
  bool function(GtkFileChooser* chooser, const(char)* uri) c_gtk_file_chooser_set_uri; ///
  void function(GtkFileChooser* chooser, bool useLabel) c_gtk_file_chooser_set_use_preview_label; ///
  void function(GtkFileChooser* chooser) c_gtk_file_chooser_unselect_all; ///
  void function(GtkFileChooser* chooser, GFile* file) c_gtk_file_chooser_unselect_file; ///
  void function(GtkFileChooser* chooser, const(char)* filename) c_gtk_file_chooser_unselect_filename; ///
  void function(GtkFileChooser* chooser, const(char)* uri) c_gtk_file_chooser_unselect_uri; ///

  // FileChooserButton
  GType function() c_gtk_file_chooser_button_get_type; ///
  GtkWidget* function(const(char)* title, GtkFileChooserAction action) c_gtk_file_chooser_button_new; ///
  GtkWidget* function(GtkWidget* dialog) c_gtk_file_chooser_button_new_with_dialog; ///
  bool function(GtkFileChooserButton* button) c_gtk_file_chooser_button_get_focus_on_click; ///
  const(char)* function(GtkFileChooserButton* button) c_gtk_file_chooser_button_get_title; ///
  int function(GtkFileChooserButton* button) c_gtk_file_chooser_button_get_width_chars; ///
  void function(GtkFileChooserButton* button, bool focusOnClick) c_gtk_file_chooser_button_set_focus_on_click; ///
  void function(GtkFileChooserButton* button, const(char)* title) c_gtk_file_chooser_button_set_title; ///
  void function(GtkFileChooserButton* button, int nChars) c_gtk_file_chooser_button_set_width_chars; ///

  // FileChooserDialog
  GType function() c_gtk_file_chooser_dialog_get_type; ///
  GtkWidget* function(const(char)* title, GtkWindow* parent, GtkFileChooserAction action, const(char)* firstButtonText,  ...) c_gtk_file_chooser_dialog_new; ///

  // FileChooserNative
  GType function() c_gtk_file_chooser_native_get_type; ///
  GtkFileChooserNative* function(const(char)* title, GtkWindow* parent, GtkFileChooserAction action, const(char)* acceptLabel, const(char)* cancelLabel) c_gtk_file_chooser_native_new; ///
  const(char)* function(GtkFileChooserNative* self) c_gtk_file_chooser_native_get_accept_label; ///
  const(char)* function(GtkFileChooserNative* self) c_gtk_file_chooser_native_get_cancel_label; ///
  void function(GtkFileChooserNative* self, const(char)* acceptLabel) c_gtk_file_chooser_native_set_accept_label; ///
  void function(GtkFileChooserNative* self, const(char)* cancelLabel) c_gtk_file_chooser_native_set_cancel_label; ///

  // FileChooserWidget
  GType function() c_gtk_file_chooser_widget_get_type; ///
  GtkWidget* function(GtkFileChooserAction action) c_gtk_file_chooser_widget_new; ///

  // FileChooserWidgetAccessible
  GType function() c_gtk_file_chooser_widget_accessible_get_type; ///

  // FileFilter
  GType function() c_gtk_file_filter_get_type; ///
  GtkFileFilter* function() c_gtk_file_filter_new; ///
  GtkFileFilter* function(VariantC* variant) c_gtk_file_filter_new_from_gvariant; ///
  void function(GtkFileFilter* filter, GtkFileFilterFlags needed, GtkFileFilterFunc func, void* data, GDestroyNotify notify) c_gtk_file_filter_add_custom; ///
  void function(GtkFileFilter* filter, const(char)* mimeType) c_gtk_file_filter_add_mime_type; ///
  void function(GtkFileFilter* filter, const(char)* pattern) c_gtk_file_filter_add_pattern; ///
  void function(GtkFileFilter* filter) c_gtk_file_filter_add_pixbuf_formats; ///
  bool function(GtkFileFilter* filter, const(GtkFileFilterInfo)* filterInfo) c_gtk_file_filter_filter; ///
  const(char)* function(GtkFileFilter* filter) c_gtk_file_filter_get_name; ///
  GtkFileFilterFlags function(GtkFileFilter* filter) c_gtk_file_filter_get_needed; ///
  void function(GtkFileFilter* filter, const(char)* name) c_gtk_file_filter_set_name; ///
  VariantC* function(GtkFileFilter* filter) c_gtk_file_filter_to_gvariant; ///

  // Fixed
  GType function() c_gtk_fixed_get_type; ///
  GtkWidget* function() c_gtk_fixed_new; ///
  void function(GtkFixed* fixed, GtkWidget* widget, int x, int y) c_gtk_fixed_move; ///
  void function(GtkFixed* fixed, GtkWidget* widget, int x, int y) c_gtk_fixed_put; ///

  // FlowBox
  GType function() c_gtk_flow_box_get_type; ///
  GtkWidget* function() c_gtk_flow_box_new; ///
  void function(GtkFlowBox* box, GListModel* model, GtkFlowBoxCreateWidgetFunc createWidgetFunc, void* userData, GDestroyNotify userDataFreeFunc) c_gtk_flow_box_bind_model; ///
  bool function(GtkFlowBox* box) c_gtk_flow_box_get_activate_on_single_click; ///
  GtkFlowBoxChild* function(GtkFlowBox* box, int idx) c_gtk_flow_box_get_child_at_index; ///
  GtkFlowBoxChild* function(GtkFlowBox* box, int x, int y) c_gtk_flow_box_get_child_at_pos; ///
  uint function(GtkFlowBox* box) c_gtk_flow_box_get_column_spacing; ///
  bool function(GtkFlowBox* box) c_gtk_flow_box_get_homogeneous; ///
  uint function(GtkFlowBox* box) c_gtk_flow_box_get_max_children_per_line; ///
  uint function(GtkFlowBox* box) c_gtk_flow_box_get_min_children_per_line; ///
  uint function(GtkFlowBox* box) c_gtk_flow_box_get_row_spacing; ///
  GList* function(GtkFlowBox* box) c_gtk_flow_box_get_selected_children; ///
  GtkSelectionMode function(GtkFlowBox* box) c_gtk_flow_box_get_selection_mode; ///
  void function(GtkFlowBox* box, GtkWidget* widget, int position) c_gtk_flow_box_insert; ///
  void function(GtkFlowBox* box) c_gtk_flow_box_invalidate_filter; ///
  void function(GtkFlowBox* box) c_gtk_flow_box_invalidate_sort; ///
  void function(GtkFlowBox* box) c_gtk_flow_box_select_all; ///
  void function(GtkFlowBox* box, GtkFlowBoxChild* child) c_gtk_flow_box_select_child; ///
  void function(GtkFlowBox* box, GtkFlowBoxForeachFunc func, void* data) c_gtk_flow_box_selected_foreach; ///
  void function(GtkFlowBox* box, bool single) c_gtk_flow_box_set_activate_on_single_click; ///
  void function(GtkFlowBox* box, uint spacing) c_gtk_flow_box_set_column_spacing; ///
  void function(GtkFlowBox* box, GtkFlowBoxFilterFunc filterFunc, void* userData, GDestroyNotify destroy) c_gtk_flow_box_set_filter_func; ///
  void function(GtkFlowBox* box, GtkAdjustment* adjustment) c_gtk_flow_box_set_hadjustment; ///
  void function(GtkFlowBox* box, bool homogeneous) c_gtk_flow_box_set_homogeneous; ///
  void function(GtkFlowBox* box, uint nChildren) c_gtk_flow_box_set_max_children_per_line; ///
  void function(GtkFlowBox* box, uint nChildren) c_gtk_flow_box_set_min_children_per_line; ///
  void function(GtkFlowBox* box, uint spacing) c_gtk_flow_box_set_row_spacing; ///
  void function(GtkFlowBox* box, GtkSelectionMode mode) c_gtk_flow_box_set_selection_mode; ///
  void function(GtkFlowBox* box, GtkFlowBoxSortFunc sortFunc, void* userData, GDestroyNotify destroy) c_gtk_flow_box_set_sort_func; ///
  void function(GtkFlowBox* box, GtkAdjustment* adjustment) c_gtk_flow_box_set_vadjustment; ///
  void function(GtkFlowBox* box) c_gtk_flow_box_unselect_all; ///
  void function(GtkFlowBox* box, GtkFlowBoxChild* child) c_gtk_flow_box_unselect_child; ///

  // FlowBoxAccessible
  GType function() c_gtk_flow_box_accessible_get_type; ///

  // FlowBoxChild
  GType function() c_gtk_flow_box_child_get_type; ///
  GtkWidget* function() c_gtk_flow_box_child_new; ///
  void function(GtkFlowBoxChild* child) c_gtk_flow_box_child_changed; ///
  int function(GtkFlowBoxChild* child) c_gtk_flow_box_child_get_index; ///
  bool function(GtkFlowBoxChild* child) c_gtk_flow_box_child_is_selected; ///

  // FlowBoxChildAccessible
  GType function() c_gtk_flow_box_child_accessible_get_type; ///

  // FontButton
  GType function() c_gtk_font_button_get_type; ///
  GtkWidget* function() c_gtk_font_button_new; ///
  GtkWidget* function(const(char)* fontname) c_gtk_font_button_new_with_font; ///
  const(char)* function(GtkFontButton* fontButton) c_gtk_font_button_get_font_name; ///
  bool function(GtkFontButton* fontButton) c_gtk_font_button_get_show_size; ///
  bool function(GtkFontButton* fontButton) c_gtk_font_button_get_show_style; ///
  const(char)* function(GtkFontButton* fontButton) c_gtk_font_button_get_title; ///
  bool function(GtkFontButton* fontButton) c_gtk_font_button_get_use_font; ///
  bool function(GtkFontButton* fontButton) c_gtk_font_button_get_use_size; ///
  bool function(GtkFontButton* fontButton, const(char)* fontname) c_gtk_font_button_set_font_name; ///
  void function(GtkFontButton* fontButton, bool showSize) c_gtk_font_button_set_show_size; ///
  void function(GtkFontButton* fontButton, bool showStyle) c_gtk_font_button_set_show_style; ///
  void function(GtkFontButton* fontButton, const(char)* title) c_gtk_font_button_set_title; ///
  void function(GtkFontButton* fontButton, bool useFont) c_gtk_font_button_set_use_font; ///
  void function(GtkFontButton* fontButton, bool useSize) c_gtk_font_button_set_use_size; ///

  // FontChooser
  GType function() c_gtk_font_chooser_get_type; ///
  char* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font; ///
  PangoFontDescription* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_desc; ///
  PangoFontFace* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_face; ///
  PangoFontFamily* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_family; ///
  char* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_features; ///
  PangoFontMap* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_map; ///
  int function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_size; ///
  char* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_language; ///
  GtkFontChooserLevel function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_level; ///
  char* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_preview_text; ///
  bool function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_show_preview_entry; ///
  void function(GtkFontChooser* fontchooser, GtkFontFilterFunc filter, void* userData, GDestroyNotify destroy) c_gtk_font_chooser_set_filter_func; ///
  void function(GtkFontChooser* fontchooser, const(char)* fontname) c_gtk_font_chooser_set_font; ///
  void function(GtkFontChooser* fontchooser, const(PangoFontDescription)* fontDesc) c_gtk_font_chooser_set_font_desc; ///
  void function(GtkFontChooser* fontchooser, PangoFontMap* fontmap) c_gtk_font_chooser_set_font_map; ///
  void function(GtkFontChooser* fontchooser, const(char)* language) c_gtk_font_chooser_set_language; ///
  void function(GtkFontChooser* fontchooser, GtkFontChooserLevel level) c_gtk_font_chooser_set_level; ///
  void function(GtkFontChooser* fontchooser, const(char)* text) c_gtk_font_chooser_set_preview_text; ///
  void function(GtkFontChooser* fontchooser, bool showPreviewEntry) c_gtk_font_chooser_set_show_preview_entry; ///

  // FontChooserDialog
  GType function() c_gtk_font_chooser_dialog_get_type; ///
  GtkWidget* function(const(char)* title, GtkWindow* parent) c_gtk_font_chooser_dialog_new; ///

  // FontChooserWidget
  GType function() c_gtk_font_chooser_widget_get_type; ///
  GtkWidget* function() c_gtk_font_chooser_widget_new; ///

  // FontSelection
  GType function() c_gtk_font_selection_get_type; ///
  GtkWidget* function() c_gtk_font_selection_new; ///
  PangoFontFace* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_face; ///
  GtkWidget* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_face_list; ///
  PangoFontFamily* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_family; ///
  GtkWidget* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_family_list; ///
  char* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_font_name; ///
  GtkWidget* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_preview_entry; ///
  const(char)* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_preview_text; ///
  int function(GtkFontSelection* fontsel) c_gtk_font_selection_get_size; ///
  GtkWidget* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_size_entry; ///
  GtkWidget* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_size_list; ///
  bool function(GtkFontSelection* fontsel, const(char)* fontname) c_gtk_font_selection_set_font_name; ///
  void function(GtkFontSelection* fontsel, const(char)* text) c_gtk_font_selection_set_preview_text; ///

  // FontSelectionDialog
  GType function() c_gtk_font_selection_dialog_get_type; ///
  GtkWidget* function(const(char)* title) c_gtk_font_selection_dialog_new; ///
  GtkWidget* function(GtkFontSelectionDialog* fsd) c_gtk_font_selection_dialog_get_cancel_button; ///
  char* function(GtkFontSelectionDialog* fsd) c_gtk_font_selection_dialog_get_font_name; ///
  GtkWidget* function(GtkFontSelectionDialog* fsd) c_gtk_font_selection_dialog_get_font_selection; ///
  GtkWidget* function(GtkFontSelectionDialog* fsd) c_gtk_font_selection_dialog_get_ok_button; ///
  const(char)* function(GtkFontSelectionDialog* fsd) c_gtk_font_selection_dialog_get_preview_text; ///
  bool function(GtkFontSelectionDialog* fsd, const(char)* fontname) c_gtk_font_selection_dialog_set_font_name; ///
  void function(GtkFontSelectionDialog* fsd, const(char)* text) c_gtk_font_selection_dialog_set_preview_text; ///

  // Frame
  GType function() c_gtk_frame_get_type; ///
  GtkWidget* function(const(char)* label) c_gtk_frame_new; ///
  const(char)* function(GtkFrame* frame) c_gtk_frame_get_label; ///
  void function(GtkFrame* frame, float* xalign, float* yalign) c_gtk_frame_get_label_align; ///
  GtkWidget* function(GtkFrame* frame) c_gtk_frame_get_label_widget; ///
  GtkShadowType function(GtkFrame* frame) c_gtk_frame_get_shadow_type; ///
  void function(GtkFrame* frame, const(char)* label) c_gtk_frame_set_label; ///
  void function(GtkFrame* frame, float xalign, float yalign) c_gtk_frame_set_label_align; ///
  void function(GtkFrame* frame, GtkWidget* labelWidget) c_gtk_frame_set_label_widget; ///
  void function(GtkFrame* frame, GtkShadowType type) c_gtk_frame_set_shadow_type; ///

  // FrameAccessible
  GType function() c_gtk_frame_accessible_get_type; ///

  // GLArea
  GType function() c_gtk_gl_area_get_type; ///
  GtkWidget* function() c_gtk_gl_area_new; ///
  void function(GtkGLArea* area) c_gtk_gl_area_attach_buffers; ///
  bool function(GtkGLArea* area) c_gtk_gl_area_get_auto_render; ///
  GdkGLContext* function(GtkGLArea* area) c_gtk_gl_area_get_context; ///
  GError* function(GtkGLArea* area) c_gtk_gl_area_get_error; ///
  bool function(GtkGLArea* area) c_gtk_gl_area_get_has_alpha; ///
  bool function(GtkGLArea* area) c_gtk_gl_area_get_has_depth_buffer; ///
  bool function(GtkGLArea* area) c_gtk_gl_area_get_has_stencil_buffer; ///
  void function(GtkGLArea* area, int* major, int* minor) c_gtk_gl_area_get_required_version; ///
  bool function(GtkGLArea* area) c_gtk_gl_area_get_use_es; ///
  void function(GtkGLArea* area) c_gtk_gl_area_make_current; ///
  void function(GtkGLArea* area) c_gtk_gl_area_queue_render; ///
  void function(GtkGLArea* area, bool autoRender) c_gtk_gl_area_set_auto_render; ///
  void function(GtkGLArea* area, const(GError)* error) c_gtk_gl_area_set_error; ///
  void function(GtkGLArea* area, bool hasAlpha) c_gtk_gl_area_set_has_alpha; ///
  void function(GtkGLArea* area, bool hasDepthBuffer) c_gtk_gl_area_set_has_depth_buffer; ///
  void function(GtkGLArea* area, bool hasStencilBuffer) c_gtk_gl_area_set_has_stencil_buffer; ///
  void function(GtkGLArea* area, int major, int minor) c_gtk_gl_area_set_required_version; ///
  void function(GtkGLArea* area, bool useEs) c_gtk_gl_area_set_use_es; ///

  // Gesture
  GType function() c_gtk_gesture_get_type; ///
  bool function(GtkGesture* gesture, GdkRectangle* rect) c_gtk_gesture_get_bounding_box; ///
  bool function(GtkGesture* gesture, double* x, double* y) c_gtk_gesture_get_bounding_box_center; ///
  GdkDevice* function(GtkGesture* gesture) c_gtk_gesture_get_device; ///
  GList* function(GtkGesture* gesture) c_gtk_gesture_get_group; ///
  const(GdkEvent)* function(GtkGesture* gesture, GdkEventSequence* sequence) c_gtk_gesture_get_last_event; ///
  GdkEventSequence* function(GtkGesture* gesture) c_gtk_gesture_get_last_updated_sequence; ///
  bool function(GtkGesture* gesture, GdkEventSequence* sequence, double* x, double* y) c_gtk_gesture_get_point; ///
  GtkEventSequenceState function(GtkGesture* gesture, GdkEventSequence* sequence) c_gtk_gesture_get_sequence_state; ///
  GList* function(GtkGesture* gesture) c_gtk_gesture_get_sequences; ///
  GdkWindow* function(GtkGesture* gesture) c_gtk_gesture_get_window; ///
  void function(GtkGesture* groupGesture, GtkGesture* gesture) c_gtk_gesture_group; ///
  bool function(GtkGesture* gesture, GdkEventSequence* sequence) c_gtk_gesture_handles_sequence; ///
  bool function(GtkGesture* gesture) c_gtk_gesture_is_active; ///
  bool function(GtkGesture* gesture, GtkGesture* other) c_gtk_gesture_is_grouped_with; ///
  bool function(GtkGesture* gesture) c_gtk_gesture_is_recognized; ///
  bool function(GtkGesture* gesture, GdkEventSequence* sequence, GtkEventSequenceState state) c_gtk_gesture_set_sequence_state; ///
  bool function(GtkGesture* gesture, GtkEventSequenceState state) c_gtk_gesture_set_state; ///
  void function(GtkGesture* gesture, GdkWindow* window) c_gtk_gesture_set_window; ///
  void function(GtkGesture* gesture) c_gtk_gesture_ungroup; ///

  // GestureDrag
  GType function() c_gtk_gesture_drag_get_type; ///
  GtkGesture* function(GtkWidget* widget) c_gtk_gesture_drag_new; ///
  bool function(GtkGestureDrag* gesture, double* x, double* y) c_gtk_gesture_drag_get_offset; ///
  bool function(GtkGestureDrag* gesture, double* x, double* y) c_gtk_gesture_drag_get_start_point; ///

  // GestureLongPress
  GType function() c_gtk_gesture_long_press_get_type; ///
  GtkGesture* function(GtkWidget* widget) c_gtk_gesture_long_press_new; ///

  // GestureMultiPress
  GType function() c_gtk_gesture_multi_press_get_type; ///
  GtkGesture* function(GtkWidget* widget) c_gtk_gesture_multi_press_new; ///
  bool function(GtkGestureMultiPress* gesture, GdkRectangle* rect) c_gtk_gesture_multi_press_get_area; ///
  void function(GtkGestureMultiPress* gesture, const(GdkRectangle)* rect) c_gtk_gesture_multi_press_set_area; ///

  // GesturePan
  GType function() c_gtk_gesture_pan_get_type; ///
  GtkGesture* function(GtkWidget* widget, GtkOrientation orientation) c_gtk_gesture_pan_new; ///
  GtkOrientation function(GtkGesturePan* gesture) c_gtk_gesture_pan_get_orientation; ///
  void function(GtkGesturePan* gesture, GtkOrientation orientation) c_gtk_gesture_pan_set_orientation; ///

  // GestureRotate
  GType function() c_gtk_gesture_rotate_get_type; ///
  GtkGesture* function(GtkWidget* widget) c_gtk_gesture_rotate_new; ///
  double function(GtkGestureRotate* gesture) c_gtk_gesture_rotate_get_angle_delta; ///

  // GestureSingle
  GType function() c_gtk_gesture_single_get_type; ///
  uint function(GtkGestureSingle* gesture) c_gtk_gesture_single_get_button; ///
  uint function(GtkGestureSingle* gesture) c_gtk_gesture_single_get_current_button; ///
  GdkEventSequence* function(GtkGestureSingle* gesture) c_gtk_gesture_single_get_current_sequence; ///
  bool function(GtkGestureSingle* gesture) c_gtk_gesture_single_get_exclusive; ///
  bool function(GtkGestureSingle* gesture) c_gtk_gesture_single_get_touch_only; ///
  void function(GtkGestureSingle* gesture, uint button) c_gtk_gesture_single_set_button; ///
  void function(GtkGestureSingle* gesture, bool exclusive) c_gtk_gesture_single_set_exclusive; ///
  void function(GtkGestureSingle* gesture, bool touchOnly) c_gtk_gesture_single_set_touch_only; ///

  // GestureStylus
  GType function() c_gtk_gesture_stylus_get_type; ///
  GtkGesture* function(GtkWidget* widget) c_gtk_gesture_stylus_new; ///
  bool function(GtkGestureStylus* gesture, GdkAxisUse* axes, double** values) c_gtk_gesture_stylus_get_axes; ///
  bool function(GtkGestureStylus* gesture, GdkAxisUse axis, double* value) c_gtk_gesture_stylus_get_axis; ///
  GdkDeviceTool* function(GtkGestureStylus* gesture) c_gtk_gesture_stylus_get_device_tool; ///

  // GestureSwipe
  GType function() c_gtk_gesture_swipe_get_type; ///
  GtkGesture* function(GtkWidget* widget) c_gtk_gesture_swipe_new; ///
  bool function(GtkGestureSwipe* gesture, double* velocityX, double* velocityY) c_gtk_gesture_swipe_get_velocity; ///

  // GestureZoom
  GType function() c_gtk_gesture_zoom_get_type; ///
  GtkGesture* function(GtkWidget* widget) c_gtk_gesture_zoom_new; ///
  double function(GtkGestureZoom* gesture) c_gtk_gesture_zoom_get_scale_delta; ///

  // Gradient
  GType function() c_gtk_gradient_get_type; ///
  GtkGradient* function(double x0, double y0, double x1, double y1) c_gtk_gradient_new_linear; ///
  GtkGradient* function(double x0, double y0, double radius0, double x1, double y1, double radius1) c_gtk_gradient_new_radial; ///
  void function(GtkGradient* gradient, double offset, GtkSymbolicColor* color) c_gtk_gradient_add_color_stop; ///
  GtkGradient* function(GtkGradient* gradient) c_gtk_gradient_ref; ///
  bool function(GtkGradient* gradient, GtkStyleProperties* props, cairo_pattern_t** resolvedGradient) c_gtk_gradient_resolve; ///
  cairo_pattern_t* function(GtkGradient* gradient, GtkStyleContext* context) c_gtk_gradient_resolve_for_context; ///
  char* function(GtkGradient* gradient) c_gtk_gradient_to_string; ///
  void function(GtkGradient* gradient) c_gtk_gradient_unref; ///

  // Grid
  GType function() c_gtk_grid_get_type; ///
  GtkWidget* function() c_gtk_grid_new; ///
  void function(GtkGrid* grid, GtkWidget* child, int left, int top, int width, int height) c_gtk_grid_attach; ///
  void function(GtkGrid* grid, GtkWidget* child, GtkWidget* sibling, GtkPositionType side, int width, int height) c_gtk_grid_attach_next_to; ///
  int function(GtkGrid* grid) c_gtk_grid_get_baseline_row; ///
  GtkWidget* function(GtkGrid* grid, int left, int top) c_gtk_grid_get_child_at; ///
  bool function(GtkGrid* grid) c_gtk_grid_get_column_homogeneous; ///
  uint function(GtkGrid* grid) c_gtk_grid_get_column_spacing; ///
  GtkBaselinePosition function(GtkGrid* grid, int row) c_gtk_grid_get_row_baseline_position; ///
  bool function(GtkGrid* grid) c_gtk_grid_get_row_homogeneous; ///
  uint function(GtkGrid* grid) c_gtk_grid_get_row_spacing; ///
  void function(GtkGrid* grid, int position) c_gtk_grid_insert_column; ///
  void function(GtkGrid* grid, GtkWidget* sibling, GtkPositionType side) c_gtk_grid_insert_next_to; ///
  void function(GtkGrid* grid, int position) c_gtk_grid_insert_row; ///
  void function(GtkGrid* grid, int position) c_gtk_grid_remove_column; ///
  void function(GtkGrid* grid, int position) c_gtk_grid_remove_row; ///
  void function(GtkGrid* grid, int row) c_gtk_grid_set_baseline_row; ///
  void function(GtkGrid* grid, bool homogeneous) c_gtk_grid_set_column_homogeneous; ///
  void function(GtkGrid* grid, uint spacing) c_gtk_grid_set_column_spacing; ///
  void function(GtkGrid* grid, int row, GtkBaselinePosition pos) c_gtk_grid_set_row_baseline_position; ///
  void function(GtkGrid* grid, bool homogeneous) c_gtk_grid_set_row_homogeneous; ///
  void function(GtkGrid* grid, uint spacing) c_gtk_grid_set_row_spacing; ///

  // HBox
  GType function() c_gtk_hbox_get_type; ///
  GtkWidget* function(bool homogeneous, int spacing) c_gtk_hbox_new; ///

  // HButtonBox
  GType function() c_gtk_hbutton_box_get_type; ///
  GtkWidget* function() c_gtk_hbutton_box_new; ///

  // HPaned
  GType function() c_gtk_hpaned_get_type; ///
  GtkWidget* function() c_gtk_hpaned_new; ///

  // HSV
  GType function() c_gtk_hsv_get_type; ///
  GtkWidget* function() c_gtk_hsv_new; ///
  void function(double h, double s, double v, double* r, double* g, double* b) c_gtk_hsv_to_rgb; ///
  void function(GtkHSV* hsv, double* h, double* s, double* v) c_gtk_hsv_get_color; ///
  void function(GtkHSV* hsv, int* size, int* ringWidth) c_gtk_hsv_get_metrics; ///
  bool function(GtkHSV* hsv) c_gtk_hsv_is_adjusting; ///
  void function(GtkHSV* hsv, double h, double s, double v) c_gtk_hsv_set_color; ///
  void function(GtkHSV* hsv, int size, int ringWidth) c_gtk_hsv_set_metrics; ///

  // HScale
  GType function() c_gtk_hscale_get_type; ///
  GtkWidget* function(GtkAdjustment* adjustment) c_gtk_hscale_new; ///
  GtkWidget* function(double min, double max, double step) c_gtk_hscale_new_with_range; ///

  // HScrollbar
  GType function() c_gtk_hscrollbar_get_type; ///
  GtkWidget* function(GtkAdjustment* adjustment) c_gtk_hscrollbar_new; ///

  // HSeparator
  GType function() c_gtk_hseparator_get_type; ///
  GtkWidget* function() c_gtk_hseparator_new; ///

  // HandleBox
  GType function() c_gtk_handle_box_get_type; ///
  GtkWidget* function() c_gtk_handle_box_new; ///
  bool function(GtkHandleBox* handleBox) c_gtk_handle_box_get_child_detached; ///
  GtkPositionType function(GtkHandleBox* handleBox) c_gtk_handle_box_get_handle_position; ///
  GtkShadowType function(GtkHandleBox* handleBox) c_gtk_handle_box_get_shadow_type; ///
  GtkPositionType function(GtkHandleBox* handleBox) c_gtk_handle_box_get_snap_edge; ///
  void function(GtkHandleBox* handleBox, GtkPositionType position) c_gtk_handle_box_set_handle_position; ///
  void function(GtkHandleBox* handleBox, GtkShadowType type) c_gtk_handle_box_set_shadow_type; ///
  void function(GtkHandleBox* handleBox, GtkPositionType edge) c_gtk_handle_box_set_snap_edge; ///

  // HeaderBar
  GType function() c_gtk_header_bar_get_type; ///
  GtkWidget* function() c_gtk_header_bar_new; ///
  GtkWidget* function(GtkHeaderBar* bar) c_gtk_header_bar_get_custom_title; ///
  const(char)* function(GtkHeaderBar* bar) c_gtk_header_bar_get_decoration_layout; ///
  bool function(GtkHeaderBar* bar) c_gtk_header_bar_get_has_subtitle; ///
  bool function(GtkHeaderBar* bar) c_gtk_header_bar_get_show_close_button; ///
  const(char)* function(GtkHeaderBar* bar) c_gtk_header_bar_get_subtitle; ///
  const(char)* function(GtkHeaderBar* bar) c_gtk_header_bar_get_title; ///
  void function(GtkHeaderBar* bar, GtkWidget* child) c_gtk_header_bar_pack_end; ///
  void function(GtkHeaderBar* bar, GtkWidget* child) c_gtk_header_bar_pack_start; ///
  void function(GtkHeaderBar* bar, GtkWidget* titleWidget) c_gtk_header_bar_set_custom_title; ///
  void function(GtkHeaderBar* bar, const(char)* layout) c_gtk_header_bar_set_decoration_layout; ///
  void function(GtkHeaderBar* bar, bool setting) c_gtk_header_bar_set_has_subtitle; ///
  void function(GtkHeaderBar* bar, bool setting) c_gtk_header_bar_set_show_close_button; ///
  void function(GtkHeaderBar* bar, const(char)* subtitle) c_gtk_header_bar_set_subtitle; ///
  void function(GtkHeaderBar* bar, const(char)* title) c_gtk_header_bar_set_title; ///

  // HeaderBarAccessible
  GType function() c_gtk_header_bar_accessible_get_type; ///

  // IMContext
  GType function() c_gtk_im_context_get_type; ///
  bool function(GtkIMContext* context, int offset, int nChars) c_gtk_im_context_delete_surrounding; ///
  bool function(GtkIMContext* context, GdkEventKey* event) c_gtk_im_context_filter_keypress; ///
  void function(GtkIMContext* context) c_gtk_im_context_focus_in; ///
  void function(GtkIMContext* context) c_gtk_im_context_focus_out; ///
  void function(GtkIMContext* context, char** str, PangoAttrList** attrs, int* cursorPos) c_gtk_im_context_get_preedit_string; ///
  bool function(GtkIMContext* context, char** text, int* cursorIndex) c_gtk_im_context_get_surrounding; ///
  void function(GtkIMContext* context) c_gtk_im_context_reset; ///
  void function(GtkIMContext* context, GdkWindow* window) c_gtk_im_context_set_client_window; ///
  void function(GtkIMContext* context, const(GdkRectangle)* area) c_gtk_im_context_set_cursor_location; ///
  void function(GtkIMContext* context, const(char)* text, int len, int cursorIndex) c_gtk_im_context_set_surrounding; ///
  void function(GtkIMContext* context, bool usePreedit) c_gtk_im_context_set_use_preedit; ///

  // IMContextSimple
  GType function() c_gtk_im_context_simple_get_type; ///
  GtkIMContext* function() c_gtk_im_context_simple_new; ///
  void function(GtkIMContextSimple* contextSimple, const(char)* composeFile) c_gtk_im_context_simple_add_compose_file; ///
  void function(GtkIMContextSimple* contextSimple, ushort* data, int maxSeqLen, int nSeqs) c_gtk_im_context_simple_add_table; ///

  // IMMulticontext
  GType function() c_gtk_im_multicontext_get_type; ///
  GtkIMContext* function() c_gtk_im_multicontext_new; ///
  void function(GtkIMMulticontext* context, GtkMenuShell* menushell) c_gtk_im_multicontext_append_menuitems; ///
  const(char)* function(GtkIMMulticontext* context) c_gtk_im_multicontext_get_context_id; ///
  void function(GtkIMMulticontext* context, const(char)* contextId) c_gtk_im_multicontext_set_context_id; ///

  // IconFactory
  GType function() c_gtk_icon_factory_get_type; ///
  GtkIconFactory* function() c_gtk_icon_factory_new; ///
  GtkIconSet* function(const(char)* stockId) c_gtk_icon_factory_lookup_default; ///
  void function(GtkIconFactory* factory, const(char)* stockId, GtkIconSet* iconSet) c_gtk_icon_factory_add; ///
  void function(GtkIconFactory* factory) c_gtk_icon_factory_add_default; ///
  GtkIconSet* function(GtkIconFactory* factory, const(char)* stockId) c_gtk_icon_factory_lookup; ///
  void function(GtkIconFactory* factory) c_gtk_icon_factory_remove_default; ///

  // IconInfo
  GType function() c_gtk_icon_info_get_type; ///
  GtkIconInfo* function(GtkIconTheme* iconTheme, PixbufC* pixbuf) c_gtk_icon_info_new_for_pixbuf; ///
  GtkIconInfo* function(GtkIconInfo* iconInfo) c_gtk_icon_info_copy; ///
  void function(GtkIconInfo* iconInfo) c_gtk_icon_info_free; ///
  bool function(GtkIconInfo* iconInfo, GdkPoint** points, int* nPoints) c_gtk_icon_info_get_attach_points; ///
  int function(GtkIconInfo* iconInfo) c_gtk_icon_info_get_base_scale; ///
  int function(GtkIconInfo* iconInfo) c_gtk_icon_info_get_base_size; ///
  PixbufC* function(GtkIconInfo* iconInfo) c_gtk_icon_info_get_builtin_pixbuf; ///
  const(char)* function(GtkIconInfo* iconInfo) c_gtk_icon_info_get_display_name; ///
  bool function(GtkIconInfo* iconInfo, GdkRectangle* rectangle) c_gtk_icon_info_get_embedded_rect; ///
  const(char)* function(GtkIconInfo* iconInfo) c_gtk_icon_info_get_filename; ///
  bool function(GtkIconInfo* iconInfo) c_gtk_icon_info_is_symbolic; ///
  PixbufC* function(GtkIconInfo* iconInfo, GError** _err) c_gtk_icon_info_load_icon; ///
  void function(GtkIconInfo* iconInfo, GCancellable* cancellable, GAsyncReadyCallback callback, void* userData) c_gtk_icon_info_load_icon_async; ///
  PixbufC* function(GtkIconInfo* iconInfo, GAsyncResult* res, GError** _err) c_gtk_icon_info_load_icon_finish; ///
  cairo_surface_t* function(GtkIconInfo* iconInfo, GdkWindow* forWindow, GError** _err) c_gtk_icon_info_load_surface; ///
  PixbufC* function(GtkIconInfo* iconInfo, const(GdkRGBA)* fg, const(GdkRGBA)* successColor, const(GdkRGBA)* warningColor, const(GdkRGBA)* errorColor, bool* wasSymbolic, GError** _err) c_gtk_icon_info_load_symbolic; ///
  void function(GtkIconInfo* iconInfo, const(GdkRGBA)* fg, const(GdkRGBA)* successColor, const(GdkRGBA)* warningColor, const(GdkRGBA)* errorColor, GCancellable* cancellable, GAsyncReadyCallback callback, void* userData) c_gtk_icon_info_load_symbolic_async; ///
  PixbufC* function(GtkIconInfo* iconInfo, GAsyncResult* res, bool* wasSymbolic, GError** _err) c_gtk_icon_info_load_symbolic_finish; ///
  PixbufC* function(GtkIconInfo* iconInfo, GtkStyleContext* context, bool* wasSymbolic, GError** _err) c_gtk_icon_info_load_symbolic_for_context; ///
  void function(GtkIconInfo* iconInfo, GtkStyleContext* context, GCancellable* cancellable, GAsyncReadyCallback callback, void* userData) c_gtk_icon_info_load_symbolic_for_context_async; ///
  PixbufC* function(GtkIconInfo* iconInfo, GAsyncResult* res, bool* wasSymbolic, GError** _err) c_gtk_icon_info_load_symbolic_for_context_finish; ///
  PixbufC* function(GtkIconInfo* iconInfo, GtkStyle* style, GtkStateType state, bool* wasSymbolic, GError** _err) c_gtk_icon_info_load_symbolic_for_style; ///
  void function(GtkIconInfo* iconInfo, bool rawCoordinates) c_gtk_icon_info_set_raw_coordinates; ///

  // IconSet
  GType function() c_gtk_icon_set_get_type; ///
  GtkIconSet* function() c_gtk_icon_set_new; ///
  GtkIconSet* function(PixbufC* pixbuf) c_gtk_icon_set_new_from_pixbuf; ///
  void function(GtkIconSet* iconSet, const(GtkIconSource)* source) c_gtk_icon_set_add_source; ///
  GtkIconSet* function(GtkIconSet* iconSet) c_gtk_icon_set_copy; ///
  void function(GtkIconSet* iconSet, GtkIconSize** sizes, int* nSizes) c_gtk_icon_set_get_sizes; ///
  GtkIconSet* function(GtkIconSet* iconSet) c_gtk_icon_set_ref; ///
  PixbufC* function(GtkIconSet* iconSet, GtkStyle* style, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget* widget, const(char)* detail) c_gtk_icon_set_render_icon; ///
  PixbufC* function(GtkIconSet* iconSet, GtkStyleContext* context, GtkIconSize size) c_gtk_icon_set_render_icon_pixbuf; ///
  cairo_surface_t* function(GtkIconSet* iconSet, GtkStyleContext* context, GtkIconSize size, int scale, GdkWindow* forWindow) c_gtk_icon_set_render_icon_surface; ///
  void function(GtkIconSet* iconSet) c_gtk_icon_set_unref; ///

  // IconSource
  GType function() c_gtk_icon_source_get_type; ///
  GtkIconSource* function() c_gtk_icon_source_new; ///
  GtkIconSource* function(const(GtkIconSource)* source) c_gtk_icon_source_copy; ///
  void function(GtkIconSource* source) c_gtk_icon_source_free; ///
  GtkTextDirection function(const(GtkIconSource)* source) c_gtk_icon_source_get_direction; ///
  bool function(const(GtkIconSource)* source) c_gtk_icon_source_get_direction_wildcarded; ///
  const(char)* function(const(GtkIconSource)* source) c_gtk_icon_source_get_filename; ///
  const(char)* function(const(GtkIconSource)* source) c_gtk_icon_source_get_icon_name; ///
  PixbufC* function(const(GtkIconSource)* source) c_gtk_icon_source_get_pixbuf; ///
  GtkIconSize function(const(GtkIconSource)* source) c_gtk_icon_source_get_size; ///
  bool function(const(GtkIconSource)* source) c_gtk_icon_source_get_size_wildcarded; ///
  GtkStateType function(const(GtkIconSource)* source) c_gtk_icon_source_get_state; ///
  bool function(const(GtkIconSource)* source) c_gtk_icon_source_get_state_wildcarded; ///
  void function(GtkIconSource* source, GtkTextDirection direction) c_gtk_icon_source_set_direction; ///
  void function(GtkIconSource* source, bool setting) c_gtk_icon_source_set_direction_wildcarded; ///
  void function(GtkIconSource* source, const(char)* filename) c_gtk_icon_source_set_filename; ///
  void function(GtkIconSource* source, const(char)* iconName) c_gtk_icon_source_set_icon_name; ///
  void function(GtkIconSource* source, PixbufC* pixbuf) c_gtk_icon_source_set_pixbuf; ///
  void function(GtkIconSource* source, GtkIconSize size) c_gtk_icon_source_set_size; ///
  void function(GtkIconSource* source, bool setting) c_gtk_icon_source_set_size_wildcarded; ///
  void function(GtkIconSource* source, GtkStateType state) c_gtk_icon_source_set_state; ///
  void function(GtkIconSource* source, bool setting) c_gtk_icon_source_set_state_wildcarded; ///

  // IconTheme
  GType function() c_gtk_icon_theme_get_type; ///
  GtkIconTheme* function() c_gtk_icon_theme_new; ///
  void function(const(char)* iconName, int size, PixbufC* pixbuf) c_gtk_icon_theme_add_builtin_icon; ///
  GtkIconTheme* function() c_gtk_icon_theme_get_default; ///
  GtkIconTheme* function(GdkScreen* screen) c_gtk_icon_theme_get_for_screen; ///
  void function(GtkIconTheme* iconTheme, const(char)* path) c_gtk_icon_theme_add_resource_path; ///
  void function(GtkIconTheme* iconTheme, const(char)* path) c_gtk_icon_theme_append_search_path; ///
  GtkIconInfo* function(GtkIconTheme* iconTheme, const(char*)* iconNames, int size, GtkIconLookupFlags flags) c_gtk_icon_theme_choose_icon; ///
  GtkIconInfo* function(GtkIconTheme* iconTheme, const(char*)* iconNames, int size, int scale, GtkIconLookupFlags flags) c_gtk_icon_theme_choose_icon_for_scale; ///
  char* function(GtkIconTheme* iconTheme) c_gtk_icon_theme_get_example_icon_name; ///
  int* function(GtkIconTheme* iconTheme, const(char)* iconName) c_gtk_icon_theme_get_icon_sizes; ///
  void function(GtkIconTheme* iconTheme, char*** path, int* nElements) c_gtk_icon_theme_get_search_path; ///
  bool function(GtkIconTheme* iconTheme, const(char)* iconName) c_gtk_icon_theme_has_icon; ///
  GList* function(GtkIconTheme* iconTheme) c_gtk_icon_theme_list_contexts; ///
  GList* function(GtkIconTheme* iconTheme, const(char)* context) c_gtk_icon_theme_list_icons; ///
  PixbufC* function(GtkIconTheme* iconTheme, const(char)* iconName, int size, GtkIconLookupFlags flags, GError** _err) c_gtk_icon_theme_load_icon; ///
  PixbufC* function(GtkIconTheme* iconTheme, const(char)* iconName, int size, int scale, GtkIconLookupFlags flags, GError** _err) c_gtk_icon_theme_load_icon_for_scale; ///
  cairo_surface_t* function(GtkIconTheme* iconTheme, const(char)* iconName, int size, int scale, GdkWindow* forWindow, GtkIconLookupFlags flags, GError** _err) c_gtk_icon_theme_load_surface; ///
  GtkIconInfo* function(GtkIconTheme* iconTheme, GIcon* icon, int size, GtkIconLookupFlags flags) c_gtk_icon_theme_lookup_by_gicon; ///
  GtkIconInfo* function(GtkIconTheme* iconTheme, GIcon* icon, int size, int scale, GtkIconLookupFlags flags) c_gtk_icon_theme_lookup_by_gicon_for_scale; ///
  GtkIconInfo* function(GtkIconTheme* iconTheme, const(char)* iconName, int size, GtkIconLookupFlags flags) c_gtk_icon_theme_lookup_icon; ///
  GtkIconInfo* function(GtkIconTheme* iconTheme, const(char)* iconName, int size, int scale, GtkIconLookupFlags flags) c_gtk_icon_theme_lookup_icon_for_scale; ///
  void function(GtkIconTheme* iconTheme, const(char)* path) c_gtk_icon_theme_prepend_search_path; ///
  bool function(GtkIconTheme* iconTheme) c_gtk_icon_theme_rescan_if_needed; ///
  void function(GtkIconTheme* iconTheme, const(char)* themeName) c_gtk_icon_theme_set_custom_theme; ///
  void function(GtkIconTheme* iconTheme, GdkScreen* screen) c_gtk_icon_theme_set_screen; ///
  void function(GtkIconTheme* iconTheme, const(char*)* path, int nElements) c_gtk_icon_theme_set_search_path; ///

  // IconView
  GType function() c_gtk_icon_view_get_type; ///
  GtkWidget* function() c_gtk_icon_view_new; ///
  GtkWidget* function(GtkCellArea* area) c_gtk_icon_view_new_with_area; ///
  GtkWidget* function(GtkTreeModel* model) c_gtk_icon_view_new_with_model; ///
  void function(GtkIconView* iconView, int wx, int wy, int* bx, int* by) c_gtk_icon_view_convert_widget_to_bin_window_coords; ///
  cairo_surface_t* function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_create_drag_icon; ///
  void function(GtkIconView* iconView, const(GtkTargetEntry)* targets, int nTargets, GdkDragAction actions) c_gtk_icon_view_enable_model_drag_dest; ///
  void function(GtkIconView* iconView, GdkModifierType startButtonMask, const(GtkTargetEntry)* targets, int nTargets, GdkDragAction actions) c_gtk_icon_view_enable_model_drag_source; ///
  bool function(GtkIconView* iconView) c_gtk_icon_view_get_activate_on_single_click; ///
  bool function(GtkIconView* iconView, GtkTreePath* path, GtkCellRenderer* cell, GdkRectangle* rect) c_gtk_icon_view_get_cell_rect; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_column_spacing; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_columns; ///
  bool function(GtkIconView* iconView, GtkTreePath** path, GtkCellRenderer** cell) c_gtk_icon_view_get_cursor; ///
  bool function(GtkIconView* iconView, int dragX, int dragY, GtkTreePath** path, GtkIconViewDropPosition* pos) c_gtk_icon_view_get_dest_item_at_pos; ///
  void function(GtkIconView* iconView, GtkTreePath** path, GtkIconViewDropPosition* pos) c_gtk_icon_view_get_drag_dest_item; ///
  bool function(GtkIconView* iconView, int x, int y, GtkTreePath** path, GtkCellRenderer** cell) c_gtk_icon_view_get_item_at_pos; ///
  int function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_get_item_column; ///
  GtkOrientation function(GtkIconView* iconView) c_gtk_icon_view_get_item_orientation; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_item_padding; ///
  int function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_get_item_row; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_item_width; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_margin; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_markup_column; ///
  GtkTreeModel* function(GtkIconView* iconView) c_gtk_icon_view_get_model; ///
  GtkTreePath* function(GtkIconView* iconView, int x, int y) c_gtk_icon_view_get_path_at_pos; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_pixbuf_column; ///
  bool function(GtkIconView* iconView) c_gtk_icon_view_get_reorderable; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_row_spacing; ///
  GList* function(GtkIconView* iconView) c_gtk_icon_view_get_selected_items; ///
  GtkSelectionMode function(GtkIconView* iconView) c_gtk_icon_view_get_selection_mode; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_spacing; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_text_column; ///
  int function(GtkIconView* iconView) c_gtk_icon_view_get_tooltip_column; ///
  bool function(GtkIconView* iconView, int* x, int* y, bool keyboardTip, GtkTreeModel** model, GtkTreePath** path, GtkTreeIter* iter) c_gtk_icon_view_get_tooltip_context; ///
  bool function(GtkIconView* iconView, GtkTreePath** startPath, GtkTreePath** endPath) c_gtk_icon_view_get_visible_range; ///
  void function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_item_activated; ///
  bool function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_path_is_selected; ///
  void function(GtkIconView* iconView, GtkTreePath* path, bool useAlign, float rowAlign, float colAlign) c_gtk_icon_view_scroll_to_path; ///
  void function(GtkIconView* iconView) c_gtk_icon_view_select_all; ///
  void function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_select_path; ///
  void function(GtkIconView* iconView, GtkIconViewForeachFunc func, void* data) c_gtk_icon_view_selected_foreach; ///
  void function(GtkIconView* iconView, bool single) c_gtk_icon_view_set_activate_on_single_click; ///
  void function(GtkIconView* iconView, int columnSpacing) c_gtk_icon_view_set_column_spacing; ///
  void function(GtkIconView* iconView, int columns) c_gtk_icon_view_set_columns; ///
  void function(GtkIconView* iconView, GtkTreePath* path, GtkCellRenderer* cell, bool startEditing) c_gtk_icon_view_set_cursor; ///
  void function(GtkIconView* iconView, GtkTreePath* path, GtkIconViewDropPosition pos) c_gtk_icon_view_set_drag_dest_item; ///
  void function(GtkIconView* iconView, GtkOrientation orientation) c_gtk_icon_view_set_item_orientation; ///
  void function(GtkIconView* iconView, int itemPadding) c_gtk_icon_view_set_item_padding; ///
  void function(GtkIconView* iconView, int itemWidth) c_gtk_icon_view_set_item_width; ///
  void function(GtkIconView* iconView, int margin) c_gtk_icon_view_set_margin; ///
  void function(GtkIconView* iconView, int column) c_gtk_icon_view_set_markup_column; ///
  void function(GtkIconView* iconView, GtkTreeModel* model) c_gtk_icon_view_set_model; ///
  void function(GtkIconView* iconView, int column) c_gtk_icon_view_set_pixbuf_column; ///
  void function(GtkIconView* iconView, bool reorderable) c_gtk_icon_view_set_reorderable; ///
  void function(GtkIconView* iconView, int rowSpacing) c_gtk_icon_view_set_row_spacing; ///
  void function(GtkIconView* iconView, GtkSelectionMode mode) c_gtk_icon_view_set_selection_mode; ///
  void function(GtkIconView* iconView, int spacing) c_gtk_icon_view_set_spacing; ///
  void function(GtkIconView* iconView, int column) c_gtk_icon_view_set_text_column; ///
  void function(GtkIconView* iconView, GtkTooltip* tooltip, GtkTreePath* path, GtkCellRenderer* cell) c_gtk_icon_view_set_tooltip_cell; ///
  void function(GtkIconView* iconView, int column) c_gtk_icon_view_set_tooltip_column; ///
  void function(GtkIconView* iconView, GtkTooltip* tooltip, GtkTreePath* path) c_gtk_icon_view_set_tooltip_item; ///
  void function(GtkIconView* iconView) c_gtk_icon_view_unselect_all; ///
  void function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_unselect_path; ///
  void function(GtkIconView* iconView) c_gtk_icon_view_unset_model_drag_dest; ///
  void function(GtkIconView* iconView) c_gtk_icon_view_unset_model_drag_source; ///

  // IconViewAccessible
  GType function() c_gtk_icon_view_accessible_get_type; ///

  // Image
  GType function() c_gtk_image_get_type; ///
  GtkWidget* function() c_gtk_image_new; ///
  GtkWidget* function(GdkPixbufAnimation* animation) c_gtk_image_new_from_animation; ///
  GtkWidget* function(const(char)* filename) c_gtk_image_new_from_file; ///
  GtkWidget* function(GIcon* icon, GtkIconSize size) c_gtk_image_new_from_gicon; ///
  GtkWidget* function(const(char)* iconName, GtkIconSize size) c_gtk_image_new_from_icon_name; ///
  GtkWidget* function(GtkIconSet* iconSet, GtkIconSize size) c_gtk_image_new_from_icon_set; ///
  GtkWidget* function(PixbufC* pixbuf) c_gtk_image_new_from_pixbuf; ///
  GtkWidget* function(const(char)* resourcePath) c_gtk_image_new_from_resource; ///
  GtkWidget* function(const(char)* stockId, GtkIconSize size) c_gtk_image_new_from_stock; ///
  GtkWidget* function(cairo_surface_t* surface) c_gtk_image_new_from_surface; ///
  void function(GtkImage* image) c_gtk_image_clear; ///
  GdkPixbufAnimation* function(GtkImage* image) c_gtk_image_get_animation; ///
  void function(GtkImage* image, GIcon** gicon, GtkIconSize* size) c_gtk_image_get_gicon; ///
  void function(GtkImage* image, const(char*)* iconName, GtkIconSize* size) c_gtk_image_get_icon_name; ///
  void function(GtkImage* image, GtkIconSet** iconSet, GtkIconSize* size) c_gtk_image_get_icon_set; ///
  PixbufC* function(GtkImage* image) c_gtk_image_get_pixbuf; ///
  int function(GtkImage* image) c_gtk_image_get_pixel_size; ///
  void function(GtkImage* image, char** stockId, GtkIconSize* size) c_gtk_image_get_stock; ///
  GtkImageType function(GtkImage* image) c_gtk_image_get_storage_type; ///
  void function(GtkImage* image, GdkPixbufAnimation* animation) c_gtk_image_set_from_animation; ///
  void function(GtkImage* image, const(char)* filename) c_gtk_image_set_from_file; ///
  void function(GtkImage* image, GIcon* icon, GtkIconSize size) c_gtk_image_set_from_gicon; ///
  void function(GtkImage* image, const(char)* iconName, GtkIconSize size) c_gtk_image_set_from_icon_name; ///
  void function(GtkImage* image, GtkIconSet* iconSet, GtkIconSize size) c_gtk_image_set_from_icon_set; ///
  void function(GtkImage* image, PixbufC* pixbuf) c_gtk_image_set_from_pixbuf; ///
  void function(GtkImage* image, const(char)* resourcePath) c_gtk_image_set_from_resource; ///
  void function(GtkImage* image, const(char)* stockId, GtkIconSize size) c_gtk_image_set_from_stock; ///
  void function(GtkImage* image, cairo_surface_t* surface) c_gtk_image_set_from_surface; ///
  void function(GtkImage* image, int pixelSize) c_gtk_image_set_pixel_size; ///

  // ImageAccessible
  GType function() c_gtk_image_accessible_get_type; ///

  // ImageCellAccessible
  GType function() c_gtk_image_cell_accessible_get_type; ///

  // ImageMenuItem
  GType function() c_gtk_image_menu_item_get_type; ///
  GtkWidget* function() c_gtk_image_menu_item_new; ///
  GtkWidget* function(const(char)* stockId, GtkAccelGroup* accelGroup) c_gtk_image_menu_item_new_from_stock; ///
  GtkWidget* function(const(char)* label) c_gtk_image_menu_item_new_with_label; ///
  GtkWidget* function(const(char)* label) c_gtk_image_menu_item_new_with_mnemonic; ///
  bool function(GtkImageMenuItem* imageMenuItem) c_gtk_image_menu_item_get_always_show_image; ///
  GtkWidget* function(GtkImageMenuItem* imageMenuItem) c_gtk_image_menu_item_get_image; ///
  bool function(GtkImageMenuItem* imageMenuItem) c_gtk_image_menu_item_get_use_stock; ///
  void function(GtkImageMenuItem* imageMenuItem, GtkAccelGroup* accelGroup) c_gtk_image_menu_item_set_accel_group; ///
  void function(GtkImageMenuItem* imageMenuItem, bool alwaysShow) c_gtk_image_menu_item_set_always_show_image; ///
  void function(GtkImageMenuItem* imageMenuItem, GtkWidget* image) c_gtk_image_menu_item_set_image; ///
  void function(GtkImageMenuItem* imageMenuItem, bool useStock) c_gtk_image_menu_item_set_use_stock; ///

  // InfoBar
  GType function() c_gtk_info_bar_get_type; ///
  GtkWidget* function() c_gtk_info_bar_new; ///
  GtkWidget* function(const(char)* firstButtonText,  ...) c_gtk_info_bar_new_with_buttons; ///
  void function(GtkInfoBar* infoBar, GtkWidget* child, int responseId) c_gtk_info_bar_add_action_widget; ///
  GtkWidget* function(GtkInfoBar* infoBar, const(char)* buttonText, int responseId) c_gtk_info_bar_add_button; ///
  void function(GtkInfoBar* infoBar, const(char)* firstButtonText,  ...) c_gtk_info_bar_add_buttons; ///
  GtkWidget* function(GtkInfoBar* infoBar) c_gtk_info_bar_get_action_area; ///
  GtkWidget* function(GtkInfoBar* infoBar) c_gtk_info_bar_get_content_area; ///
  GtkMessageType function(GtkInfoBar* infoBar) c_gtk_info_bar_get_message_type; ///
  bool function(GtkInfoBar* infoBar) c_gtk_info_bar_get_revealed; ///
  bool function(GtkInfoBar* infoBar) c_gtk_info_bar_get_show_close_button; ///
  void function(GtkInfoBar* infoBar, int responseId) c_gtk_info_bar_response; ///
  void function(GtkInfoBar* infoBar, int responseId) c_gtk_info_bar_set_default_response; ///
  void function(GtkInfoBar* infoBar, GtkMessageType messageType) c_gtk_info_bar_set_message_type; ///
  void function(GtkInfoBar* infoBar, int responseId, bool setting) c_gtk_info_bar_set_response_sensitive; ///
  void function(GtkInfoBar* infoBar, bool revealed) c_gtk_info_bar_set_revealed; ///
  void function(GtkInfoBar* infoBar, bool setting) c_gtk_info_bar_set_show_close_button; ///

  // Invisible
  GType function() c_gtk_invisible_get_type; ///
  GtkWidget* function() c_gtk_invisible_new; ///
  GtkWidget* function(GdkScreen* screen) c_gtk_invisible_new_for_screen; ///
  GdkScreen* function(GtkInvisible* invisible) c_gtk_invisible_get_screen; ///
  void function(GtkInvisible* invisible, GdkScreen* screen) c_gtk_invisible_set_screen; ///

  // Label
  GType function() c_gtk_label_get_type; ///
  GtkWidget* function(const(char)* str) c_gtk_label_new; ///
  GtkWidget* function(const(char)* str) c_gtk_label_new_with_mnemonic; ///
  double function(GtkLabel* label) c_gtk_label_get_angle; ///
  PangoAttrList* function(GtkLabel* label) c_gtk_label_get_attributes; ///
  const(char)* function(GtkLabel* label) c_gtk_label_get_current_uri; ///
  PangoEllipsizeMode function(GtkLabel* label) c_gtk_label_get_ellipsize; ///
  GtkJustification function(GtkLabel* label) c_gtk_label_get_justify; ///
  const(char)* function(GtkLabel* label) c_gtk_label_get_label; ///
  PangoLayout* function(GtkLabel* label) c_gtk_label_get_layout; ///
  void function(GtkLabel* label, int* x, int* y) c_gtk_label_get_layout_offsets; ///
  bool function(GtkLabel* label) c_gtk_label_get_line_wrap; ///
  PangoWrapMode function(GtkLabel* label) c_gtk_label_get_line_wrap_mode; ///
  int function(GtkLabel* label) c_gtk_label_get_lines; ///
  int function(GtkLabel* label) c_gtk_label_get_max_width_chars; ///
  uint function(GtkLabel* label) c_gtk_label_get_mnemonic_keyval; ///
  GtkWidget* function(GtkLabel* label) c_gtk_label_get_mnemonic_widget; ///
  bool function(GtkLabel* label) c_gtk_label_get_selectable; ///
  bool function(GtkLabel* label, int* start, int* end) c_gtk_label_get_selection_bounds; ///
  bool function(GtkLabel* label) c_gtk_label_get_single_line_mode; ///
  const(char)* function(GtkLabel* label) c_gtk_label_get_text; ///
  bool function(GtkLabel* label) c_gtk_label_get_track_visited_links; ///
  bool function(GtkLabel* label) c_gtk_label_get_use_markup; ///
  bool function(GtkLabel* label) c_gtk_label_get_use_underline; ///
  int function(GtkLabel* label) c_gtk_label_get_width_chars; ///
  float function(GtkLabel* label) c_gtk_label_get_xalign; ///
  float function(GtkLabel* label) c_gtk_label_get_yalign; ///
  void function(GtkLabel* label, int startOffset, int endOffset) c_gtk_label_select_region; ///
  void function(GtkLabel* label, double angle) c_gtk_label_set_angle; ///
  void function(GtkLabel* label, PangoAttrList* attrs) c_gtk_label_set_attributes; ///
  void function(GtkLabel* label, PangoEllipsizeMode mode) c_gtk_label_set_ellipsize; ///
  void function(GtkLabel* label, GtkJustification jtype) c_gtk_label_set_justify; ///
  void function(GtkLabel* label, const(char)* str) c_gtk_label_set_label; ///
  void function(GtkLabel* label, bool wrap) c_gtk_label_set_line_wrap; ///
  void function(GtkLabel* label, PangoWrapMode wrapMode) c_gtk_label_set_line_wrap_mode; ///
  void function(GtkLabel* label, int lines) c_gtk_label_set_lines; ///
  void function(GtkLabel* label, const(char)* str) c_gtk_label_set_markup; ///
  void function(GtkLabel* label, const(char)* str) c_gtk_label_set_markup_with_mnemonic; ///
  void function(GtkLabel* label, int nChars) c_gtk_label_set_max_width_chars; ///
  void function(GtkLabel* label, GtkWidget* widget) c_gtk_label_set_mnemonic_widget; ///
  void function(GtkLabel* label, const(char)* pattern) c_gtk_label_set_pattern; ///
  void function(GtkLabel* label, bool setting) c_gtk_label_set_selectable; ///
  void function(GtkLabel* label, bool singleLineMode) c_gtk_label_set_single_line_mode; ///
  void function(GtkLabel* label, const(char)* str) c_gtk_label_set_text; ///
  void function(GtkLabel* label, const(char)* str) c_gtk_label_set_text_with_mnemonic; ///
  void function(GtkLabel* label, bool trackLinks) c_gtk_label_set_track_visited_links; ///
  void function(GtkLabel* label, bool setting) c_gtk_label_set_use_markup; ///
  void function(GtkLabel* label, bool setting) c_gtk_label_set_use_underline; ///
  void function(GtkLabel* label, int nChars) c_gtk_label_set_width_chars; ///
  void function(GtkLabel* label, float xalign) c_gtk_label_set_xalign; ///
  void function(GtkLabel* label, float yalign) c_gtk_label_set_yalign; ///

  // LabelAccessible
  GType function() c_gtk_label_accessible_get_type; ///

  // Layout
  GType function() c_gtk_layout_get_type; ///
  GtkWidget* function(GtkAdjustment* hadjustment, GtkAdjustment* vadjustment) c_gtk_layout_new; ///
  GdkWindow* function(GtkLayout* layout) c_gtk_layout_get_bin_window; ///
  GtkAdjustment* function(GtkLayout* layout) c_gtk_layout_get_hadjustment; ///
  void function(GtkLayout* layout, uint* width, uint* height) c_gtk_layout_get_size; ///
  GtkAdjustment* function(GtkLayout* layout) c_gtk_layout_get_vadjustment; ///
  void function(GtkLayout* layout, GtkWidget* childWidget, int x, int y) c_gtk_layout_move; ///
  void function(GtkLayout* layout, GtkWidget* childWidget, int x, int y) c_gtk_layout_put; ///
  void function(GtkLayout* layout, GtkAdjustment* adjustment) c_gtk_layout_set_hadjustment; ///
  void function(GtkLayout* layout, uint width, uint height) c_gtk_layout_set_size; ///
  void function(GtkLayout* layout, GtkAdjustment* adjustment) c_gtk_layout_set_vadjustment; ///

  // LevelBar
  GType function() c_gtk_level_bar_get_type; ///
  GtkWidget* function() c_gtk_level_bar_new; ///
  GtkWidget* function(double minValue, double maxValue) c_gtk_level_bar_new_for_interval; ///
  void function(GtkLevelBar* self, const(char)* name, double value) c_gtk_level_bar_add_offset_value; ///
  bool function(GtkLevelBar* self) c_gtk_level_bar_get_inverted; ///
  double function(GtkLevelBar* self) c_gtk_level_bar_get_max_value; ///
  double function(GtkLevelBar* self) c_gtk_level_bar_get_min_value; ///
  GtkLevelBarMode function(GtkLevelBar* self) c_gtk_level_bar_get_mode; ///
  bool function(GtkLevelBar* self, const(char)* name, double* value) c_gtk_level_bar_get_offset_value; ///
  double function(GtkLevelBar* self) c_gtk_level_bar_get_value; ///
  void function(GtkLevelBar* self, const(char)* name) c_gtk_level_bar_remove_offset_value; ///
  void function(GtkLevelBar* self, bool inverted) c_gtk_level_bar_set_inverted; ///
  void function(GtkLevelBar* self, double value) c_gtk_level_bar_set_max_value; ///
  void function(GtkLevelBar* self, double value) c_gtk_level_bar_set_min_value; ///
  void function(GtkLevelBar* self, GtkLevelBarMode mode) c_gtk_level_bar_set_mode; ///
  void function(GtkLevelBar* self, double value) c_gtk_level_bar_set_value; ///

  // LevelBarAccessible
  GType function() c_gtk_level_bar_accessible_get_type; ///

  // LinkButton
  GType function() c_gtk_link_button_get_type; ///
  GtkWidget* function(const(char)* uri) c_gtk_link_button_new; ///
  GtkWidget* function(const(char)* uri, const(char)* label) c_gtk_link_button_new_with_label; ///
  const(char)* function(GtkLinkButton* linkButton) c_gtk_link_button_get_uri; ///
  bool function(GtkLinkButton* linkButton) c_gtk_link_button_get_visited; ///
  void function(GtkLinkButton* linkButton, const(char)* uri) c_gtk_link_button_set_uri; ///
  void function(GtkLinkButton* linkButton, bool visited) c_gtk_link_button_set_visited; ///

  // LinkButtonAccessible
  GType function() c_gtk_link_button_accessible_get_type; ///

  // ListBox
  GType function() c_gtk_list_box_get_type; ///
  GtkWidget* function() c_gtk_list_box_new; ///
  void function(GtkListBox* box, GListModel* model, GtkListBoxCreateWidgetFunc createWidgetFunc, void* userData, GDestroyNotify userDataFreeFunc) c_gtk_list_box_bind_model; ///
  void function(GtkListBox* box, GtkListBoxRow* row) c_gtk_list_box_drag_highlight_row; ///
  void function(GtkListBox* box) c_gtk_list_box_drag_unhighlight_row; ///
  bool function(GtkListBox* box) c_gtk_list_box_get_activate_on_single_click; ///
  GtkAdjustment* function(GtkListBox* box) c_gtk_list_box_get_adjustment; ///
  GtkListBoxRow* function(GtkListBox* box, int index) c_gtk_list_box_get_row_at_index; ///
  GtkListBoxRow* function(GtkListBox* box, int y) c_gtk_list_box_get_row_at_y; ///
  GtkListBoxRow* function(GtkListBox* box) c_gtk_list_box_get_selected_row; ///
  GList* function(GtkListBox* box) c_gtk_list_box_get_selected_rows; ///
  GtkSelectionMode function(GtkListBox* box) c_gtk_list_box_get_selection_mode; ///
  void function(GtkListBox* box, GtkWidget* child, int position) c_gtk_list_box_insert; ///
  void function(GtkListBox* box) c_gtk_list_box_invalidate_filter; ///
  void function(GtkListBox* box) c_gtk_list_box_invalidate_headers; ///
  void function(GtkListBox* box) c_gtk_list_box_invalidate_sort; ///
  void function(GtkListBox* box, GtkWidget* child) c_gtk_list_box_prepend; ///
  void function(GtkListBox* box) c_gtk_list_box_select_all; ///
  void function(GtkListBox* box, GtkListBoxRow* row) c_gtk_list_box_select_row; ///
  void function(GtkListBox* box, GtkListBoxForeachFunc func, void* data) c_gtk_list_box_selected_foreach; ///
  void function(GtkListBox* box, bool single) c_gtk_list_box_set_activate_on_single_click; ///
  void function(GtkListBox* box, GtkAdjustment* adjustment) c_gtk_list_box_set_adjustment; ///
  void function(GtkListBox* box, GtkListBoxFilterFunc filterFunc, void* userData, GDestroyNotify destroy) c_gtk_list_box_set_filter_func; ///
  void function(GtkListBox* box, GtkListBoxUpdateHeaderFunc updateHeader, void* userData, GDestroyNotify destroy) c_gtk_list_box_set_header_func; ///
  void function(GtkListBox* box, GtkWidget* placeholder) c_gtk_list_box_set_placeholder; ///
  void function(GtkListBox* box, GtkSelectionMode mode) c_gtk_list_box_set_selection_mode; ///
  void function(GtkListBox* box, GtkListBoxSortFunc sortFunc, void* userData, GDestroyNotify destroy) c_gtk_list_box_set_sort_func; ///
  void function(GtkListBox* box) c_gtk_list_box_unselect_all; ///
  void function(GtkListBox* box, GtkListBoxRow* row) c_gtk_list_box_unselect_row; ///

  // ListBoxAccessible
  GType function() c_gtk_list_box_accessible_get_type; ///

  // ListBoxRow
  GType function() c_gtk_list_box_row_get_type; ///
  GtkWidget* function() c_gtk_list_box_row_new; ///
  void function(GtkListBoxRow* row) c_gtk_list_box_row_changed; ///
  bool function(GtkListBoxRow* row) c_gtk_list_box_row_get_activatable; ///
  GtkWidget* function(GtkListBoxRow* row) c_gtk_list_box_row_get_header; ///
  int function(GtkListBoxRow* row) c_gtk_list_box_row_get_index; ///
  bool function(GtkListBoxRow* row) c_gtk_list_box_row_get_selectable; ///
  bool function(GtkListBoxRow* row) c_gtk_list_box_row_is_selected; ///
  void function(GtkListBoxRow* row, bool activatable) c_gtk_list_box_row_set_activatable; ///
  void function(GtkListBoxRow* row, GtkWidget* header) c_gtk_list_box_row_set_header; ///
  void function(GtkListBoxRow* row, bool selectable) c_gtk_list_box_row_set_selectable; ///

  // ListBoxRowAccessible
  GType function() c_gtk_list_box_row_accessible_get_type; ///

  // ListStore
  GType function() c_gtk_list_store_get_type; ///
  GtkListStore* function(int nColumns,  ...) c_gtk_list_store_new; ///
  GtkListStore* function(int nColumns, GType* types) c_gtk_list_store_newv; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter) c_gtk_list_store_append; ///
  void function(GtkListStore* listStore) c_gtk_list_store_clear; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter, int position) c_gtk_list_store_insert; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter, GtkTreeIter* sibling) c_gtk_list_store_insert_after; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter, GtkTreeIter* sibling) c_gtk_list_store_insert_before; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter, int position,  ...) c_gtk_list_store_insert_with_values; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter, int position, int* columns, GValue* values, int nValues) c_gtk_list_store_insert_with_valuesv; ///
  bool function(GtkListStore* listStore, GtkTreeIter* iter) c_gtk_list_store_iter_is_valid; ///
  void function(GtkListStore* store, GtkTreeIter* iter, GtkTreeIter* position) c_gtk_list_store_move_after; ///
  void function(GtkListStore* store, GtkTreeIter* iter, GtkTreeIter* position) c_gtk_list_store_move_before; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter) c_gtk_list_store_prepend; ///
  bool function(GtkListStore* listStore, GtkTreeIter* iter) c_gtk_list_store_remove; ///
  void function(GtkListStore* store, int* newOrder) c_gtk_list_store_reorder; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter,  ...) c_gtk_list_store_set; ///
  void function(GtkListStore* listStore, int nColumns, GType* types) c_gtk_list_store_set_column_types; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter, void* varArgs) c_gtk_list_store_set_valist; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter, int column, GValue* value) c_gtk_list_store_set_value; ///
  void function(GtkListStore* listStore, GtkTreeIter* iter, int* columns, GValue* values, int nValues) c_gtk_list_store_set_valuesv; ///
  void function(GtkListStore* store, GtkTreeIter* a, GtkTreeIter* b) c_gtk_list_store_swap; ///

  // LockButton
  GType function() c_gtk_lock_button_get_type; ///
  GtkWidget* function(GPermission* permission) c_gtk_lock_button_new; ///
  GPermission* function(GtkLockButton* button) c_gtk_lock_button_get_permission; ///
  void function(GtkLockButton* button, GPermission* permission) c_gtk_lock_button_set_permission; ///

  // LockButtonAccessible
  GType function() c_gtk_lock_button_accessible_get_type; ///

  // Menu
  GType function() c_gtk_menu_get_type; ///
  GtkWidget* function() c_gtk_menu_new; ///
  GtkWidget* function(GMenuModel* model) c_gtk_menu_new_from_model; ///
  GList* function(GtkWidget* widget) c_gtk_menu_get_for_attach_widget; ///
  void function(GtkMenu* menu, GtkWidget* child, uint leftAttach, uint rightAttach, uint topAttach, uint bottomAttach) c_gtk_menu_attach; ///
  void function(GtkMenu* menu, GtkWidget* attachWidget, GtkMenuDetachFunc detacher) c_gtk_menu_attach_to_widget; ///
  void function(GtkMenu* menu) c_gtk_menu_detach; ///
  GtkAccelGroup* function(GtkMenu* menu) c_gtk_menu_get_accel_group; ///
  const(char)* function(GtkMenu* menu) c_gtk_menu_get_accel_path; ///
  GtkWidget* function(GtkMenu* menu) c_gtk_menu_get_active; ///
  GtkWidget* function(GtkMenu* menu) c_gtk_menu_get_attach_widget; ///
  int function(GtkMenu* menu) c_gtk_menu_get_monitor; ///
  bool function(GtkMenu* menu) c_gtk_menu_get_reserve_toggle_size; ///
  bool function(GtkMenu* menu) c_gtk_menu_get_tearoff_state; ///
  const(char)* function(GtkMenu* menu) c_gtk_menu_get_title; ///
  void function(GtkMenu* menu, GdkMonitor* monitor) c_gtk_menu_place_on_monitor; ///
  void function(GtkMenu* menu) c_gtk_menu_popdown; ///
  void function(GtkMenu* menu, GtkWidget* parentMenuShell, GtkWidget* parentMenuItem, GtkMenuPositionFunc func, void* data, uint button, uint activateTime) c_gtk_menu_popup; ///
  void function(GtkMenu* menu, const(GdkEvent)* triggerEvent) c_gtk_menu_popup_at_pointer; ///
  void function(GtkMenu* menu, GdkWindow* rectWindow, const(GdkRectangle)* rect, GdkGravity rectAnchor, GdkGravity menuAnchor, const(GdkEvent)* triggerEvent) c_gtk_menu_popup_at_rect; ///
  void function(GtkMenu* menu, GtkWidget* widget, GdkGravity widgetAnchor, GdkGravity menuAnchor, const(GdkEvent)* triggerEvent) c_gtk_menu_popup_at_widget; ///
  void function(GtkMenu* menu, GdkDevice* device, GtkWidget* parentMenuShell, GtkWidget* parentMenuItem, GtkMenuPositionFunc func, void* data, GDestroyNotify destroy, uint button, uint activateTime) c_gtk_menu_popup_for_device; ///
  void function(GtkMenu* menu, GtkWidget* child, int position) c_gtk_menu_reorder_child; ///
  void function(GtkMenu* menu) c_gtk_menu_reposition; ///
  void function(GtkMenu* menu, GtkAccelGroup* accelGroup) c_gtk_menu_set_accel_group; ///
  void function(GtkMenu* menu, const(char)* accelPath) c_gtk_menu_set_accel_path; ///
  void function(GtkMenu* menu, uint index) c_gtk_menu_set_active; ///
  void function(GtkMenu* menu, int monitorNum) c_gtk_menu_set_monitor; ///
  void function(GtkMenu* menu, bool reserveToggleSize) c_gtk_menu_set_reserve_toggle_size; ///
  void function(GtkMenu* menu, GdkScreen* screen) c_gtk_menu_set_screen; ///
  void function(GtkMenu* menu, bool tornOff) c_gtk_menu_set_tearoff_state; ///
  void function(GtkMenu* menu, const(char)* title) c_gtk_menu_set_title; ///

  // MenuAccessible
  GType function() c_gtk_menu_accessible_get_type; ///

  // MenuBar
  GType function() c_gtk_menu_bar_get_type; ///
  GtkWidget* function() c_gtk_menu_bar_new; ///
  GtkWidget* function(GMenuModel* model) c_gtk_menu_bar_new_from_model; ///
  GtkPackDirection function(GtkMenuBar* menubar) c_gtk_menu_bar_get_child_pack_direction; ///
  GtkPackDirection function(GtkMenuBar* menubar) c_gtk_menu_bar_get_pack_direction; ///
  void function(GtkMenuBar* menubar, GtkPackDirection childPackDir) c_gtk_menu_bar_set_child_pack_direction; ///
  void function(GtkMenuBar* menubar, GtkPackDirection packDir) c_gtk_menu_bar_set_pack_direction; ///

  // MenuButton
  GType function() c_gtk_menu_button_get_type; ///
  GtkWidget* function() c_gtk_menu_button_new; ///
  GtkWidget* function(GtkMenuButton* menuButton) c_gtk_menu_button_get_align_widget; ///
  GtkArrowType function(GtkMenuButton* menuButton) c_gtk_menu_button_get_direction; ///
  GMenuModel* function(GtkMenuButton* menuButton) c_gtk_menu_button_get_menu_model; ///
  GtkPopover* function(GtkMenuButton* menuButton) c_gtk_menu_button_get_popover; ///
  GtkMenu* function(GtkMenuButton* menuButton) c_gtk_menu_button_get_popup; ///
  bool function(GtkMenuButton* menuButton) c_gtk_menu_button_get_use_popover; ///
  void function(GtkMenuButton* menuButton, GtkWidget* alignWidget) c_gtk_menu_button_set_align_widget; ///
  void function(GtkMenuButton* menuButton, GtkArrowType direction) c_gtk_menu_button_set_direction; ///
  void function(GtkMenuButton* menuButton, GMenuModel* menuModel) c_gtk_menu_button_set_menu_model; ///
  void function(GtkMenuButton* menuButton, GtkWidget* popover) c_gtk_menu_button_set_popover; ///
  void function(GtkMenuButton* menuButton, GtkWidget* menu) c_gtk_menu_button_set_popup; ///
  void function(GtkMenuButton* menuButton, bool usePopover) c_gtk_menu_button_set_use_popover; ///

  // MenuButtonAccessible
  GType function() c_gtk_menu_button_accessible_get_type; ///

  // MenuItem
  GType function() c_gtk_menu_item_get_type; ///
  GtkWidget* function() c_gtk_menu_item_new; ///
  GtkWidget* function(const(char)* label) c_gtk_menu_item_new_with_label; ///
  GtkWidget* function(const(char)* label) c_gtk_menu_item_new_with_mnemonic; ///
  void function(GtkMenuItem* menuItem) c_gtk_menu_item_activate; ///
  void function(GtkMenuItem* menuItem) c_gtk_menu_item_deselect; ///
  const(char)* function(GtkMenuItem* menuItem) c_gtk_menu_item_get_accel_path; ///
  const(char)* function(GtkMenuItem* menuItem) c_gtk_menu_item_get_label; ///
  bool function(GtkMenuItem* menuItem) c_gtk_menu_item_get_reserve_indicator; ///
  bool function(GtkMenuItem* menuItem) c_gtk_menu_item_get_right_justified; ///
  GtkWidget* function(GtkMenuItem* menuItem) c_gtk_menu_item_get_submenu; ///
  bool function(GtkMenuItem* menuItem) c_gtk_menu_item_get_use_underline; ///
  void function(GtkMenuItem* menuItem) c_gtk_menu_item_select; ///
  void function(GtkMenuItem* menuItem, const(char)* accelPath) c_gtk_menu_item_set_accel_path; ///
  void function(GtkMenuItem* menuItem, const(char)* label) c_gtk_menu_item_set_label; ///
  void function(GtkMenuItem* menuItem, bool reserve) c_gtk_menu_item_set_reserve_indicator; ///
  void function(GtkMenuItem* menuItem, bool rightJustified) c_gtk_menu_item_set_right_justified; ///
  void function(GtkMenuItem* menuItem, GtkWidget* submenu) c_gtk_menu_item_set_submenu; ///
  void function(GtkMenuItem* menuItem, bool setting) c_gtk_menu_item_set_use_underline; ///
  void function(GtkMenuItem* menuItem, int allocation) c_gtk_menu_item_toggle_size_allocate; ///
  void function(GtkMenuItem* menuItem, int* requisition) c_gtk_menu_item_toggle_size_request; ///

  // MenuItemAccessible
  GType function() c_gtk_menu_item_accessible_get_type; ///

  // MenuShell
  GType function() c_gtk_menu_shell_get_type; ///
  void function(GtkMenuShell* menuShell, GtkWidget* menuItem, bool forceDeactivate) c_gtk_menu_shell_activate_item; ///
  void function(GtkMenuShell* menuShell, GtkWidget* child) c_gtk_menu_shell_append; ///
  void function(GtkMenuShell* menuShell, GMenuModel* model, const(char)* actionNamespace, bool withSeparators) c_gtk_menu_shell_bind_model; ///
  void function(GtkMenuShell* menuShell) c_gtk_menu_shell_cancel; ///
  void function(GtkMenuShell* menuShell) c_gtk_menu_shell_deactivate; ///
  void function(GtkMenuShell* menuShell) c_gtk_menu_shell_deselect; ///
  GtkWidget* function(GtkMenuShell* menuShell) c_gtk_menu_shell_get_parent_shell; ///
  GtkWidget* function(GtkMenuShell* menuShell) c_gtk_menu_shell_get_selected_item; ///
  bool function(GtkMenuShell* menuShell) c_gtk_menu_shell_get_take_focus; ///
  void function(GtkMenuShell* menuShell, GtkWidget* child, int position) c_gtk_menu_shell_insert; ///
  void function(GtkMenuShell* menuShell, GtkWidget* child) c_gtk_menu_shell_prepend; ///
  void function(GtkMenuShell* menuShell, bool searchSensitive) c_gtk_menu_shell_select_first; ///
  void function(GtkMenuShell* menuShell, GtkWidget* menuItem) c_gtk_menu_shell_select_item; ///
  void function(GtkMenuShell* menuShell, bool takeFocus) c_gtk_menu_shell_set_take_focus; ///

  // MenuShellAccessible
  GType function() c_gtk_menu_shell_accessible_get_type; ///

  // MenuToolButton
  GType function() c_gtk_menu_tool_button_get_type; ///
  GtkToolItem* function(GtkWidget* iconWidget, const(char)* label) c_gtk_menu_tool_button_new; ///
  GtkToolItem* function(const(char)* stockId) c_gtk_menu_tool_button_new_from_stock; ///
  GtkWidget* function(GtkMenuToolButton* button) c_gtk_menu_tool_button_get_menu; ///
  void function(GtkMenuToolButton* button, const(char)* markup) c_gtk_menu_tool_button_set_arrow_tooltip_markup; ///
  void function(GtkMenuToolButton* button, const(char)* text) c_gtk_menu_tool_button_set_arrow_tooltip_text; ///
  void function(GtkMenuToolButton* button, GtkWidget* menu) c_gtk_menu_tool_button_set_menu; ///

  // MessageDialog
  GType function() c_gtk_message_dialog_get_type; ///
  GtkWidget* function(GtkWindow* parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const(char)* messageFormat,  ...) c_gtk_message_dialog_new; ///
  GtkWidget* function(GtkWindow* parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const(char)* messageFormat,  ...) c_gtk_message_dialog_new_with_markup; ///
  void function(GtkMessageDialog* messageDialog, const(char)* messageFormat,  ...) c_gtk_message_dialog_format_secondary_markup; ///
  void function(GtkMessageDialog* messageDialog, const(char)* messageFormat,  ...) c_gtk_message_dialog_format_secondary_text; ///
  GtkWidget* function(GtkMessageDialog* dialog) c_gtk_message_dialog_get_image; ///
  GtkWidget* function(GtkMessageDialog* messageDialog) c_gtk_message_dialog_get_message_area; ///
  void function(GtkMessageDialog* dialog, GtkWidget* image) c_gtk_message_dialog_set_image; ///
  void function(GtkMessageDialog* messageDialog, const(char)* str) c_gtk_message_dialog_set_markup; ///

  // Misc
  GType function() c_gtk_misc_get_type; ///
  void function(GtkMisc* misc, float* xalign, float* yalign) c_gtk_misc_get_alignment; ///
  void function(GtkMisc* misc, int* xpad, int* ypad) c_gtk_misc_get_padding; ///
  void function(GtkMisc* misc, float xalign, float yalign) c_gtk_misc_set_alignment; ///
  void function(GtkMisc* misc, int xpad, int ypad) c_gtk_misc_set_padding; ///

  // ModelButton
  GType function() c_gtk_model_button_get_type; ///
  GtkWidget* function() c_gtk_model_button_new; ///

  // MountOperation
  GType function() c_gtk_mount_operation_get_type; ///
  GMountOperation* function(GtkWindow* parent) c_gtk_mount_operation_new; ///
  GtkWindow* function(GtkMountOperation* op) c_gtk_mount_operation_get_parent; ///
  GdkScreen* function(GtkMountOperation* op) c_gtk_mount_operation_get_screen; ///
  bool function(GtkMountOperation* op) c_gtk_mount_operation_is_showing; ///
  void function(GtkMountOperation* op, GtkWindow* parent) c_gtk_mount_operation_set_parent; ///
  void function(GtkMountOperation* op, GdkScreen* screen) c_gtk_mount_operation_set_screen; ///

  // NativeDialog
  GType function() c_gtk_native_dialog_get_type; ///
  void function(GtkNativeDialog* self) c_gtk_native_dialog_destroy; ///
  bool function(GtkNativeDialog* self) c_gtk_native_dialog_get_modal; ///
  const(char)* function(GtkNativeDialog* self) c_gtk_native_dialog_get_title; ///
  GtkWindow* function(GtkNativeDialog* self) c_gtk_native_dialog_get_transient_for; ///
  bool function(GtkNativeDialog* self) c_gtk_native_dialog_get_visible; ///
  void function(GtkNativeDialog* self) c_gtk_native_dialog_hide; ///
  int function(GtkNativeDialog* self) c_gtk_native_dialog_run; ///
  void function(GtkNativeDialog* self, bool modal) c_gtk_native_dialog_set_modal; ///
  void function(GtkNativeDialog* self, const(char)* title) c_gtk_native_dialog_set_title; ///
  void function(GtkNativeDialog* self, GtkWindow* parent) c_gtk_native_dialog_set_transient_for; ///
  void function(GtkNativeDialog* self) c_gtk_native_dialog_show; ///

  // Notebook
  GType function() c_gtk_notebook_get_type; ///
  GtkWidget* function() c_gtk_notebook_new; ///
  int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel) c_gtk_notebook_append_page; ///
  int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel, GtkWidget* menuLabel) c_gtk_notebook_append_page_menu; ///
  void function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_detach_tab; ///
  GtkWidget* function(GtkNotebook* notebook, GtkPackType packType) c_gtk_notebook_get_action_widget; ///
  int function(GtkNotebook* notebook) c_gtk_notebook_get_current_page; ///
  const(char)* function(GtkNotebook* notebook) c_gtk_notebook_get_group_name; ///
  GtkWidget* function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_menu_label; ///
  const(char)* function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_menu_label_text; ///
  int function(GtkNotebook* notebook) c_gtk_notebook_get_n_pages; ///
  GtkWidget* function(GtkNotebook* notebook, int pageNum) c_gtk_notebook_get_nth_page; ///
  bool function(GtkNotebook* notebook) c_gtk_notebook_get_scrollable; ///
  bool function(GtkNotebook* notebook) c_gtk_notebook_get_show_border; ///
  bool function(GtkNotebook* notebook) c_gtk_notebook_get_show_tabs; ///
  bool function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_tab_detachable; ///
  ushort function(GtkNotebook* notebook) c_gtk_notebook_get_tab_hborder; ///
  GtkWidget* function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_tab_label; ///
  const(char)* function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_tab_label_text; ///
  GtkPositionType function(GtkNotebook* notebook) c_gtk_notebook_get_tab_pos; ///
  bool function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_tab_reorderable; ///
  ushort function(GtkNotebook* notebook) c_gtk_notebook_get_tab_vborder; ///
  int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel, int position) c_gtk_notebook_insert_page; ///
  int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel, GtkWidget* menuLabel, int position) c_gtk_notebook_insert_page_menu; ///
  void function(GtkNotebook* notebook) c_gtk_notebook_next_page; ///
  int function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_page_num; ///
  void function(GtkNotebook* notebook) c_gtk_notebook_popup_disable; ///
  void function(GtkNotebook* notebook) c_gtk_notebook_popup_enable; ///
  int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel) c_gtk_notebook_prepend_page; ///
  int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel, GtkWidget* menuLabel) c_gtk_notebook_prepend_page_menu; ///
  void function(GtkNotebook* notebook) c_gtk_notebook_prev_page; ///
  void function(GtkNotebook* notebook, int pageNum) c_gtk_notebook_remove_page; ///
  void function(GtkNotebook* notebook, GtkWidget* child, int position) c_gtk_notebook_reorder_child; ///
  void function(GtkNotebook* notebook, GtkWidget* widget, GtkPackType packType) c_gtk_notebook_set_action_widget; ///
  void function(GtkNotebook* notebook, int pageNum) c_gtk_notebook_set_current_page; ///
  void function(GtkNotebook* notebook, const(char)* groupName) c_gtk_notebook_set_group_name; ///
  void function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* menuLabel) c_gtk_notebook_set_menu_label; ///
  void function(GtkNotebook* notebook, GtkWidget* child, const(char)* menuText) c_gtk_notebook_set_menu_label_text; ///
  void function(GtkNotebook* notebook, bool scrollable) c_gtk_notebook_set_scrollable; ///
  void function(GtkNotebook* notebook, bool showBorder) c_gtk_notebook_set_show_border; ///
  void function(GtkNotebook* notebook, bool showTabs) c_gtk_notebook_set_show_tabs; ///
  void function(GtkNotebook* notebook, GtkWidget* child, bool detachable) c_gtk_notebook_set_tab_detachable; ///
  void function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel) c_gtk_notebook_set_tab_label; ///
  void function(GtkNotebook* notebook, GtkWidget* child, const(char)* tabText) c_gtk_notebook_set_tab_label_text; ///
  void function(GtkNotebook* notebook, GtkPositionType pos) c_gtk_notebook_set_tab_pos; ///
  void function(GtkNotebook* notebook, GtkWidget* child, bool reorderable) c_gtk_notebook_set_tab_reorderable; ///

  // NotebookAccessible
  GType function() c_gtk_notebook_accessible_get_type; ///

  // NotebookPageAccessible
  GType function() c_gtk_notebook_page_accessible_get_type; ///
  AtkObject* function(GtkNotebookAccessible* notebook, GtkWidget* child) c_gtk_notebook_page_accessible_new; ///
  void function(GtkNotebookPageAccessible* page) c_gtk_notebook_page_accessible_invalidate; ///

  // NumerableIcon
  GType function() c_gtk_numerable_icon_get_type; ///
  GIcon* function(GIcon* baseIcon) c_gtk_numerable_icon_new; ///
  GIcon* function(GIcon* baseIcon, GtkStyleContext* context) c_gtk_numerable_icon_new_with_style_context; ///
  GIcon* function(GtkNumerableIcon* self) c_gtk_numerable_icon_get_background_gicon; ///
  const(char)* function(GtkNumerableIcon* self) c_gtk_numerable_icon_get_background_icon_name; ///
  int function(GtkNumerableIcon* self) c_gtk_numerable_icon_get_count; ///
  const(char)* function(GtkNumerableIcon* self) c_gtk_numerable_icon_get_label; ///
  GtkStyleContext* function(GtkNumerableIcon* self) c_gtk_numerable_icon_get_style_context; ///
  void function(GtkNumerableIcon* self, GIcon* icon) c_gtk_numerable_icon_set_background_gicon; ///
  void function(GtkNumerableIcon* self, const(char)* iconName) c_gtk_numerable_icon_set_background_icon_name; ///
  void function(GtkNumerableIcon* self, int count) c_gtk_numerable_icon_set_count; ///
  void function(GtkNumerableIcon* self, const(char)* label) c_gtk_numerable_icon_set_label; ///
  void function(GtkNumerableIcon* self, GtkStyleContext* style) c_gtk_numerable_icon_set_style_context; ///

  // OffscreenWindow
  GType function() c_gtk_offscreen_window_get_type; ///
  GtkWidget* function() c_gtk_offscreen_window_new; ///
  PixbufC* function(GtkOffscreenWindow* offscreen) c_gtk_offscreen_window_get_pixbuf; ///
  cairo_surface_t* function(GtkOffscreenWindow* offscreen) c_gtk_offscreen_window_get_surface; ///

  // Orientable
  GType function() c_gtk_orientable_get_type; ///
  GtkOrientation function(GtkOrientable* orientable) c_gtk_orientable_get_orientation; ///
  void function(GtkOrientable* orientable, GtkOrientation orientation) c_gtk_orientable_set_orientation; ///

  // Overlay
  GType function() c_gtk_overlay_get_type; ///
  GtkWidget* function() c_gtk_overlay_new; ///
  void function(GtkOverlay* overlay, GtkWidget* widget) c_gtk_overlay_add_overlay; ///
  bool function(GtkOverlay* overlay, GtkWidget* widget) c_gtk_overlay_get_overlay_pass_through; ///
  void function(GtkOverlay* overlay, GtkWidget* child, int index) c_gtk_overlay_reorder_overlay; ///
  void function(GtkOverlay* overlay, GtkWidget* widget, bool passThrough) c_gtk_overlay_set_overlay_pass_through; ///

  // PadController
  GType function() c_gtk_pad_controller_get_type; ///
  GtkPadController* function(GtkWindow* window, GActionGroup* group, GdkDevice* pad) c_gtk_pad_controller_new; ///
  void function(GtkPadController* controller, GtkPadActionType type, int index, int mode, const(char)* label, const(char)* actionName) c_gtk_pad_controller_set_action; ///
  void function(GtkPadController* controller, const(GtkPadActionEntry)* entries, int nEntries) c_gtk_pad_controller_set_action_entries; ///

  // PageSetup
  GType function() c_gtk_page_setup_get_type; ///
  GtkPageSetup* function() c_gtk_page_setup_new; ///
  GtkPageSetup* function(const(char)* fileName, GError** _err) c_gtk_page_setup_new_from_file; ///
  GtkPageSetup* function(VariantC* variant) c_gtk_page_setup_new_from_gvariant; ///
  GtkPageSetup* function(GKeyFile* keyFile, const(char)* groupName, GError** _err) c_gtk_page_setup_new_from_key_file; ///
  GtkPageSetup* function(GtkPageSetup* other) c_gtk_page_setup_copy; ///
  double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_bottom_margin; ///
  double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_left_margin; ///
  GtkPageOrientation function(GtkPageSetup* setup) c_gtk_page_setup_get_orientation; ///
  double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_page_height; ///
  double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_page_width; ///
  double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_paper_height; ///
  GtkPaperSize* function(GtkPageSetup* setup) c_gtk_page_setup_get_paper_size; ///
  double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_paper_width; ///
  double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_right_margin; ///
  double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_top_margin; ///
  bool function(GtkPageSetup* setup, const(char)* fileName, GError** _err) c_gtk_page_setup_load_file; ///
  bool function(GtkPageSetup* setup, GKeyFile* keyFile, const(char)* groupName, GError** _err) c_gtk_page_setup_load_key_file; ///
  void function(GtkPageSetup* setup, double margin, GtkUnit unit) c_gtk_page_setup_set_bottom_margin; ///
  void function(GtkPageSetup* setup, double margin, GtkUnit unit) c_gtk_page_setup_set_left_margin; ///
  void function(GtkPageSetup* setup, GtkPageOrientation orientation) c_gtk_page_setup_set_orientation; ///
  void function(GtkPageSetup* setup, GtkPaperSize* size) c_gtk_page_setup_set_paper_size; ///
  void function(GtkPageSetup* setup, GtkPaperSize* size) c_gtk_page_setup_set_paper_size_and_default_margins; ///
  void function(GtkPageSetup* setup, double margin, GtkUnit unit) c_gtk_page_setup_set_right_margin; ///
  void function(GtkPageSetup* setup, double margin, GtkUnit unit) c_gtk_page_setup_set_top_margin; ///
  bool function(GtkPageSetup* setup, const(char)* fileName, GError** _err) c_gtk_page_setup_to_file; ///
  VariantC* function(GtkPageSetup* setup) c_gtk_page_setup_to_gvariant; ///
  void function(GtkPageSetup* setup, GKeyFile* keyFile, const(char)* groupName) c_gtk_page_setup_to_key_file; ///

  // Paned
  GType function() c_gtk_paned_get_type; ///
  GtkWidget* function(GtkOrientation orientation) c_gtk_paned_new; ///
  void function(GtkPaned* paned, GtkWidget* child) c_gtk_paned_add1; ///
  void function(GtkPaned* paned, GtkWidget* child) c_gtk_paned_add2; ///
  GtkWidget* function(GtkPaned* paned) c_gtk_paned_get_child1; ///
  GtkWidget* function(GtkPaned* paned) c_gtk_paned_get_child2; ///
  GdkWindow* function(GtkPaned* paned) c_gtk_paned_get_handle_window; ///
  int function(GtkPaned* paned) c_gtk_paned_get_position; ///
  bool function(GtkPaned* paned) c_gtk_paned_get_wide_handle; ///
  void function(GtkPaned* paned, GtkWidget* child, bool resize, bool shrink) c_gtk_paned_pack1; ///
  void function(GtkPaned* paned, GtkWidget* child, bool resize, bool shrink) c_gtk_paned_pack2; ///
  void function(GtkPaned* paned, int position) c_gtk_paned_set_position; ///
  void function(GtkPaned* paned, bool wide) c_gtk_paned_set_wide_handle; ///

  // PanedAccessible
  GType function() c_gtk_paned_accessible_get_type; ///

  // PaperSize
  GType function() c_gtk_paper_size_get_type; ///
  GtkPaperSize* function(const(char)* name) c_gtk_paper_size_new; ///
  GtkPaperSize* function(const(char)* name, const(char)* displayName, double width, double height, GtkUnit unit) c_gtk_paper_size_new_custom; ///
  GtkPaperSize* function(VariantC* variant) c_gtk_paper_size_new_from_gvariant; ///
  GtkPaperSize* function(const(char)* ippName, double width, double height) c_gtk_paper_size_new_from_ipp; ///
  GtkPaperSize* function(GKeyFile* keyFile, const(char)* groupName, GError** _err) c_gtk_paper_size_new_from_key_file; ///
  GtkPaperSize* function(const(char)* ppdName, const(char)* ppdDisplayName, double width, double height) c_gtk_paper_size_new_from_ppd; ///
  GtkPaperSize* function(GtkPaperSize* other) c_gtk_paper_size_copy; ///
  void function(GtkPaperSize* size) c_gtk_paper_size_free; ///
  double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_default_bottom_margin; ///
  double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_default_left_margin; ///
  double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_default_right_margin; ///
  double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_default_top_margin; ///
  const(char)* function(GtkPaperSize* size) c_gtk_paper_size_get_display_name; ///
  double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_height; ///
  const(char)* function(GtkPaperSize* size) c_gtk_paper_size_get_name; ///
  const(char)* function(GtkPaperSize* size) c_gtk_paper_size_get_ppd_name; ///
  double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_width; ///
  bool function(GtkPaperSize* size) c_gtk_paper_size_is_custom; ///
  bool function(GtkPaperSize* size1, GtkPaperSize* size2) c_gtk_paper_size_is_equal; ///
  bool function(GtkPaperSize* size) c_gtk_paper_size_is_ipp; ///
  void function(GtkPaperSize* size, double width, double height, GtkUnit unit) c_gtk_paper_size_set_size; ///
  VariantC* function(GtkPaperSize* paperSize) c_gtk_paper_size_to_gvariant; ///
  void function(GtkPaperSize* size, GKeyFile* keyFile, const(char)* groupName) c_gtk_paper_size_to_key_file; ///
  const(char)* function() c_gtk_paper_size_get_default; ///
  GList* function(bool includeCustom) c_gtk_paper_size_get_paper_sizes; ///

  // PlacesSidebar
  GType function() c_gtk_places_sidebar_get_type; ///
  GtkWidget* function() c_gtk_places_sidebar_new; ///
  void function(GtkPlacesSidebar* sidebar, GFile* location) c_gtk_places_sidebar_add_shortcut; ///
  bool function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_local_only; ///
  GFile* function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_location; ///
  GFile* function(GtkPlacesSidebar* sidebar, int n) c_gtk_places_sidebar_get_nth_bookmark; ///
  GtkPlacesOpenFlags function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_open_flags; ///
  bool function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_connect_to_server; ///
  bool function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_desktop; ///
  bool function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_enter_location; ///
  bool function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_other_locations; ///
  bool function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_recent; ///
  bool function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_starred_location; ///
  bool function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_trash; ///
  GSList* function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_list_shortcuts; ///
  void function(GtkPlacesSidebar* sidebar, GFile* location) c_gtk_places_sidebar_remove_shortcut; ///
  void function(GtkPlacesSidebar* sidebar, bool visible, GdkDragContext* context) c_gtk_places_sidebar_set_drop_targets_visible; ///
  void function(GtkPlacesSidebar* sidebar, bool localOnly) c_gtk_places_sidebar_set_local_only; ///
  void function(GtkPlacesSidebar* sidebar, GFile* location) c_gtk_places_sidebar_set_location; ///
  void function(GtkPlacesSidebar* sidebar, GtkPlacesOpenFlags flags) c_gtk_places_sidebar_set_open_flags; ///
  void function(GtkPlacesSidebar* sidebar, bool showConnectToServer) c_gtk_places_sidebar_set_show_connect_to_server; ///
  void function(GtkPlacesSidebar* sidebar, bool showDesktop) c_gtk_places_sidebar_set_show_desktop; ///
  void function(GtkPlacesSidebar* sidebar, bool showEnterLocation) c_gtk_places_sidebar_set_show_enter_location; ///
  void function(GtkPlacesSidebar* sidebar, bool showOtherLocations) c_gtk_places_sidebar_set_show_other_locations; ///
  void function(GtkPlacesSidebar* sidebar, bool showRecent) c_gtk_places_sidebar_set_show_recent; ///
  void function(GtkPlacesSidebar* sidebar, bool showStarredLocation) c_gtk_places_sidebar_set_show_starred_location; ///
  void function(GtkPlacesSidebar* sidebar, bool showTrash) c_gtk_places_sidebar_set_show_trash; ///

  // Plug
  GType function() c_gtk_plug_get_type; ///
  GtkWidget* function(Window socketId) c_gtk_plug_new; ///
  GtkWidget* function(GdkDisplay* display, Window socketId) c_gtk_plug_new_for_display; ///
  void function(GtkPlug* plug, Window socketId) c_gtk_plug_construct; ///
  void function(GtkPlug* plug, GdkDisplay* display, Window socketId) c_gtk_plug_construct_for_display; ///
  bool function(GtkPlug* plug) c_gtk_plug_get_embedded; ///
  Window function(GtkPlug* plug) c_gtk_plug_get_id; ///
  GdkWindow* function(GtkPlug* plug) c_gtk_plug_get_socket_window; ///

  // PlugAccessible
  GType function() c_gtk_plug_accessible_get_type; ///
  char* function(GtkPlugAccessible* plug) c_gtk_plug_accessible_get_id; ///

  // Popover
  GType function() c_gtk_popover_get_type; ///
  GtkWidget* function(GtkWidget* relativeTo) c_gtk_popover_new; ///
  GtkWidget* function(GtkWidget* relativeTo, GMenuModel* model) c_gtk_popover_new_from_model; ///
  void function(GtkPopover* popover, GMenuModel* model, const(char)* actionNamespace) c_gtk_popover_bind_model; ///
  GtkPopoverConstraint function(GtkPopover* popover) c_gtk_popover_get_constrain_to; ///
  GtkWidget* function(GtkPopover* popover) c_gtk_popover_get_default_widget; ///
  bool function(GtkPopover* popover) c_gtk_popover_get_modal; ///
  bool function(GtkPopover* popover, GdkRectangle* rect) c_gtk_popover_get_pointing_to; ///
  GtkPositionType function(GtkPopover* popover) c_gtk_popover_get_position; ///
  GtkWidget* function(GtkPopover* popover) c_gtk_popover_get_relative_to; ///
  bool function(GtkPopover* popover) c_gtk_popover_get_transitions_enabled; ///
  void function(GtkPopover* popover) c_gtk_popover_popdown; ///
  void function(GtkPopover* popover) c_gtk_popover_popup; ///
  void function(GtkPopover* popover, GtkPopoverConstraint constraint) c_gtk_popover_set_constrain_to; ///
  void function(GtkPopover* popover, GtkWidget* widget) c_gtk_popover_set_default_widget; ///
  void function(GtkPopover* popover, bool modal) c_gtk_popover_set_modal; ///
  void function(GtkPopover* popover, const(GdkRectangle)* rect) c_gtk_popover_set_pointing_to; ///
  void function(GtkPopover* popover, GtkPositionType position) c_gtk_popover_set_position; ///
  void function(GtkPopover* popover, GtkWidget* relativeTo) c_gtk_popover_set_relative_to; ///
  void function(GtkPopover* popover, bool transitionsEnabled) c_gtk_popover_set_transitions_enabled; ///

  // PopoverAccessible
  GType function() c_gtk_popover_accessible_get_type; ///

  // PopoverMenu
  GType function() c_gtk_popover_menu_get_type; ///
  GtkWidget* function() c_gtk_popover_menu_new; ///
  void function(GtkPopoverMenu* popover, const(char)* name) c_gtk_popover_menu_open_submenu; ///

  // PrintContext
  GType function() c_gtk_print_context_get_type; ///
  PangoContext* function(GtkPrintContext* context) c_gtk_print_context_create_pango_context; ///
  PangoLayout* function(GtkPrintContext* context) c_gtk_print_context_create_pango_layout; ///
  cairo_t* function(GtkPrintContext* context) c_gtk_print_context_get_cairo_context; ///
  double function(GtkPrintContext* context) c_gtk_print_context_get_dpi_x; ///
  double function(GtkPrintContext* context) c_gtk_print_context_get_dpi_y; ///
  bool function(GtkPrintContext* context, double* top, double* bottom, double* left, double* right) c_gtk_print_context_get_hard_margins; ///
  double function(GtkPrintContext* context) c_gtk_print_context_get_height; ///
  GtkPageSetup* function(GtkPrintContext* context) c_gtk_print_context_get_page_setup; ///
  PangoFontMap* function(GtkPrintContext* context) c_gtk_print_context_get_pango_fontmap; ///
  double function(GtkPrintContext* context) c_gtk_print_context_get_width; ///
  void function(GtkPrintContext* context, cairo_t* cr, double dpiX, double dpiY) c_gtk_print_context_set_cairo_context; ///

  // PrintOperation
  GType function() c_gtk_print_operation_get_type; ///
  GtkPrintOperation* function() c_gtk_print_operation_new; ///
  void function(GtkPrintOperation* op) c_gtk_print_operation_cancel; ///
  void function(GtkPrintOperation* op) c_gtk_print_operation_draw_page_finish; ///
  GtkPageSetup* function(GtkPrintOperation* op) c_gtk_print_operation_get_default_page_setup; ///
  bool function(GtkPrintOperation* op) c_gtk_print_operation_get_embed_page_setup; ///
  void function(GtkPrintOperation* op, GError** _err) c_gtk_print_operation_get_error; ///
  bool function(GtkPrintOperation* op) c_gtk_print_operation_get_has_selection; ///
  int function(GtkPrintOperation* op) c_gtk_print_operation_get_n_pages_to_print; ///
  GtkPrintSettings* function(GtkPrintOperation* op) c_gtk_print_operation_get_print_settings; ///
  GtkPrintStatus function(GtkPrintOperation* op) c_gtk_print_operation_get_status; ///
  const(char)* function(GtkPrintOperation* op) c_gtk_print_operation_get_status_string; ///
  bool function(GtkPrintOperation* op) c_gtk_print_operation_get_support_selection; ///
  bool function(GtkPrintOperation* op) c_gtk_print_operation_is_finished; ///
  GtkPrintOperationResult function(GtkPrintOperation* op, GtkPrintOperationAction action, GtkWindow* parent, GError** _err) c_gtk_print_operation_run; ///
  void function(GtkPrintOperation* op, bool allowAsync) c_gtk_print_operation_set_allow_async; ///
  void function(GtkPrintOperation* op, int currentPage) c_gtk_print_operation_set_current_page; ///
  void function(GtkPrintOperation* op, const(char)* label) c_gtk_print_operation_set_custom_tab_label; ///
  void function(GtkPrintOperation* op, GtkPageSetup* defaultPageSetup) c_gtk_print_operation_set_default_page_setup; ///
  void function(GtkPrintOperation* op) c_gtk_print_operation_set_defer_drawing; ///
  void function(GtkPrintOperation* op, bool embed) c_gtk_print_operation_set_embed_page_setup; ///
  void function(GtkPrintOperation* op, const(char)* filename) c_gtk_print_operation_set_export_filename; ///
  void function(GtkPrintOperation* op, bool hasSelection) c_gtk_print_operation_set_has_selection; ///
  void function(GtkPrintOperation* op, const(char)* jobName) c_gtk_print_operation_set_job_name; ///
  void function(GtkPrintOperation* op, int nPages) c_gtk_print_operation_set_n_pages; ///
  void function(GtkPrintOperation* op, GtkPrintSettings* printSettings) c_gtk_print_operation_set_print_settings; ///
  void function(GtkPrintOperation* op, bool showProgress) c_gtk_print_operation_set_show_progress; ///
  void function(GtkPrintOperation* op, bool supportSelection) c_gtk_print_operation_set_support_selection; ///
  void function(GtkPrintOperation* op, bool trackStatus) c_gtk_print_operation_set_track_print_status; ///
  void function(GtkPrintOperation* op, GtkUnit unit) c_gtk_print_operation_set_unit; ///
  void function(GtkPrintOperation* op, bool fullPage) c_gtk_print_operation_set_use_full_page; ///

  // PrintOperationPreview
  GType function() c_gtk_print_operation_preview_get_type; ///
  void function(GtkPrintOperationPreview* preview) c_gtk_print_operation_preview_end_preview; ///
  bool function(GtkPrintOperationPreview* preview, int pageNr) c_gtk_print_operation_preview_is_selected; ///
  void function(GtkPrintOperationPreview* preview, int pageNr) c_gtk_print_operation_preview_render_page; ///

  // PrintSettings
  GType function() c_gtk_print_settings_get_type; ///
  GtkPrintSettings* function() c_gtk_print_settings_new; ///
  GtkPrintSettings* function(const(char)* fileName, GError** _err) c_gtk_print_settings_new_from_file; ///
  GtkPrintSettings* function(VariantC* variant) c_gtk_print_settings_new_from_gvariant; ///
  GtkPrintSettings* function(GKeyFile* keyFile, const(char)* groupName, GError** _err) c_gtk_print_settings_new_from_key_file; ///
  GtkPrintSettings* function(GtkPrintSettings* other) c_gtk_print_settings_copy; ///
  void function(GtkPrintSettings* settings, GtkPrintSettingsFunc func, void* userData) c_gtk_print_settings_foreach; ///
  const(char)* function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_get; ///
  bool function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_get_bool; ///
  bool function(GtkPrintSettings* settings) c_gtk_print_settings_get_collate; ///
  const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_default_source; ///
  const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_dither; ///
  double function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_get_double; ///
  double function(GtkPrintSettings* settings, const(char)* key, double def) c_gtk_print_settings_get_double_with_default; ///
  GtkPrintDuplex function(GtkPrintSettings* settings) c_gtk_print_settings_get_duplex; ///
  const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_finishings; ///
  int function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_get_int; ///
  int function(GtkPrintSettings* settings, const(char)* key, int def) c_gtk_print_settings_get_int_with_default; ///
  double function(GtkPrintSettings* settings, const(char)* key, GtkUnit unit) c_gtk_print_settings_get_length; ///
  const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_media_type; ///
  int function(GtkPrintSettings* settings) c_gtk_print_settings_get_n_copies; ///
  int function(GtkPrintSettings* settings) c_gtk_print_settings_get_number_up; ///
  GtkNumberUpLayout function(GtkPrintSettings* settings) c_gtk_print_settings_get_number_up_layout; ///
  GtkPageOrientation function(GtkPrintSettings* settings) c_gtk_print_settings_get_orientation; ///
  const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_output_bin; ///
  GtkPageRange* function(GtkPrintSettings* settings, int* numRanges) c_gtk_print_settings_get_page_ranges; ///
  GtkPageSet function(GtkPrintSettings* settings) c_gtk_print_settings_get_page_set; ///
  double function(GtkPrintSettings* settings, GtkUnit unit) c_gtk_print_settings_get_paper_height; ///
  GtkPaperSize* function(GtkPrintSettings* settings) c_gtk_print_settings_get_paper_size; ///
  double function(GtkPrintSettings* settings, GtkUnit unit) c_gtk_print_settings_get_paper_width; ///
  GtkPrintPages function(GtkPrintSettings* settings) c_gtk_print_settings_get_print_pages; ///
  const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_printer; ///
  double function(GtkPrintSettings* settings) c_gtk_print_settings_get_printer_lpi; ///
  GtkPrintQuality function(GtkPrintSettings* settings) c_gtk_print_settings_get_quality; ///
  int function(GtkPrintSettings* settings) c_gtk_print_settings_get_resolution; ///
  int function(GtkPrintSettings* settings) c_gtk_print_settings_get_resolution_x; ///
  int function(GtkPrintSettings* settings) c_gtk_print_settings_get_resolution_y; ///
  bool function(GtkPrintSettings* settings) c_gtk_print_settings_get_reverse; ///
  double function(GtkPrintSettings* settings) c_gtk_print_settings_get_scale; ///
  bool function(GtkPrintSettings* settings) c_gtk_print_settings_get_use_color; ///
  bool function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_has_key; ///
  bool function(GtkPrintSettings* settings, const(char)* fileName, GError** _err) c_gtk_print_settings_load_file; ///
  bool function(GtkPrintSettings* settings, GKeyFile* keyFile, const(char)* groupName, GError** _err) c_gtk_print_settings_load_key_file; ///
  void function(GtkPrintSettings* settings, const(char)* key, const(char)* value) c_gtk_print_settings_set; ///
  void function(GtkPrintSettings* settings, const(char)* key, bool value) c_gtk_print_settings_set_bool; ///
  void function(GtkPrintSettings* settings, bool collate) c_gtk_print_settings_set_collate; ///
  void function(GtkPrintSettings* settings, const(char)* defaultSource) c_gtk_print_settings_set_default_source; ///
  void function(GtkPrintSettings* settings, const(char)* dither) c_gtk_print_settings_set_dither; ///
  void function(GtkPrintSettings* settings, const(char)* key, double value) c_gtk_print_settings_set_double; ///
  void function(GtkPrintSettings* settings, GtkPrintDuplex duplex) c_gtk_print_settings_set_duplex; ///
  void function(GtkPrintSettings* settings, const(char)* finishings) c_gtk_print_settings_set_finishings; ///
  void function(GtkPrintSettings* settings, const(char)* key, int value) c_gtk_print_settings_set_int; ///
  void function(GtkPrintSettings* settings, const(char)* key, double value, GtkUnit unit) c_gtk_print_settings_set_length; ///
  void function(GtkPrintSettings* settings, const(char)* mediaType) c_gtk_print_settings_set_media_type; ///
  void function(GtkPrintSettings* settings, int numCopies) c_gtk_print_settings_set_n_copies; ///
  void function(GtkPrintSettings* settings, int numberUp) c_gtk_print_settings_set_number_up; ///
  void function(GtkPrintSettings* settings, GtkNumberUpLayout numberUpLayout) c_gtk_print_settings_set_number_up_layout; ///
  void function(GtkPrintSettings* settings, GtkPageOrientation orientation) c_gtk_print_settings_set_orientation; ///
  void function(GtkPrintSettings* settings, const(char)* outputBin) c_gtk_print_settings_set_output_bin; ///
  void function(GtkPrintSettings* settings, GtkPageRange* pageRanges, int numRanges) c_gtk_print_settings_set_page_ranges; ///
  void function(GtkPrintSettings* settings, GtkPageSet pageSet) c_gtk_print_settings_set_page_set; ///
  void function(GtkPrintSettings* settings, double height, GtkUnit unit) c_gtk_print_settings_set_paper_height; ///
  void function(GtkPrintSettings* settings, GtkPaperSize* paperSize) c_gtk_print_settings_set_paper_size; ///
  void function(GtkPrintSettings* settings, double width, GtkUnit unit) c_gtk_print_settings_set_paper_width; ///
  void function(GtkPrintSettings* settings, GtkPrintPages pages) c_gtk_print_settings_set_print_pages; ///
  void function(GtkPrintSettings* settings, const(char)* printer) c_gtk_print_settings_set_printer; ///
  void function(GtkPrintSettings* settings, double lpi) c_gtk_print_settings_set_printer_lpi; ///
  void function(GtkPrintSettings* settings, GtkPrintQuality quality) c_gtk_print_settings_set_quality; ///
  void function(GtkPrintSettings* settings, int resolution) c_gtk_print_settings_set_resolution; ///
  void function(GtkPrintSettings* settings, int resolutionX, int resolutionY) c_gtk_print_settings_set_resolution_xy; ///
  void function(GtkPrintSettings* settings, bool reverse) c_gtk_print_settings_set_reverse; ///
  void function(GtkPrintSettings* settings, double scale) c_gtk_print_settings_set_scale; ///
  void function(GtkPrintSettings* settings, bool useColor) c_gtk_print_settings_set_use_color; ///
  bool function(GtkPrintSettings* settings, const(char)* fileName, GError** _err) c_gtk_print_settings_to_file; ///
  VariantC* function(GtkPrintSettings* settings) c_gtk_print_settings_to_gvariant; ///
  void function(GtkPrintSettings* settings, GKeyFile* keyFile, const(char)* groupName) c_gtk_print_settings_to_key_file; ///
  void function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_unset; ///

  // ProgressBar
  GType function() c_gtk_progress_bar_get_type; ///
  GtkWidget* function() c_gtk_progress_bar_new; ///
  PangoEllipsizeMode function(GtkProgressBar* pbar) c_gtk_progress_bar_get_ellipsize; ///
  double function(GtkProgressBar* pbar) c_gtk_progress_bar_get_fraction; ///
  bool function(GtkProgressBar* pbar) c_gtk_progress_bar_get_inverted; ///
  double function(GtkProgressBar* pbar) c_gtk_progress_bar_get_pulse_step; ///
  bool function(GtkProgressBar* pbar) c_gtk_progress_bar_get_show_text; ///
  const(char)* function(GtkProgressBar* pbar) c_gtk_progress_bar_get_text; ///
  void function(GtkProgressBar* pbar) c_gtk_progress_bar_pulse; ///
  void function(GtkProgressBar* pbar, PangoEllipsizeMode mode) c_gtk_progress_bar_set_ellipsize; ///
  void function(GtkProgressBar* pbar, double fraction) c_gtk_progress_bar_set_fraction; ///
  void function(GtkProgressBar* pbar, bool inverted) c_gtk_progress_bar_set_inverted; ///
  void function(GtkProgressBar* pbar, double fraction) c_gtk_progress_bar_set_pulse_step; ///
  void function(GtkProgressBar* pbar, bool showText) c_gtk_progress_bar_set_show_text; ///
  void function(GtkProgressBar* pbar, const(char)* text) c_gtk_progress_bar_set_text; ///

  // ProgressBarAccessible
  GType function() c_gtk_progress_bar_accessible_get_type; ///

  // RadioAction
  GType function() c_gtk_radio_action_get_type; ///
  GtkRadioAction* function(const(char)* name, const(char)* label, const(char)* tooltip, const(char)* stockId, int value) c_gtk_radio_action_new; ///
  int function(GtkRadioAction* action) c_gtk_radio_action_get_current_value; ///
  GSList* function(GtkRadioAction* action) c_gtk_radio_action_get_group; ///
  void function(GtkRadioAction* action, GtkRadioAction* groupSource) c_gtk_radio_action_join_group; ///
  void function(GtkRadioAction* action, int currentValue) c_gtk_radio_action_set_current_value; ///
  void function(GtkRadioAction* action, GSList* group) c_gtk_radio_action_set_group; ///

  // RadioButton
  GType function() c_gtk_radio_button_get_type; ///
  GtkWidget* function(GSList* group) c_gtk_radio_button_new; ///
  GtkWidget* function(GtkRadioButton* radioGroupMember) c_gtk_radio_button_new_from_widget; ///
  GtkWidget* function(GSList* group, const(char)* label) c_gtk_radio_button_new_with_label; ///
  GtkWidget* function(GtkRadioButton* radioGroupMember, const(char)* label) c_gtk_radio_button_new_with_label_from_widget; ///
  GtkWidget* function(GSList* group, const(char)* label) c_gtk_radio_button_new_with_mnemonic; ///
  GtkWidget* function(GtkRadioButton* radioGroupMember, const(char)* label) c_gtk_radio_button_new_with_mnemonic_from_widget; ///
  GSList* function(GtkRadioButton* radioButton) c_gtk_radio_button_get_group; ///
  void function(GtkRadioButton* radioButton, GtkRadioButton* groupSource) c_gtk_radio_button_join_group; ///
  void function(GtkRadioButton* radioButton, GSList* group) c_gtk_radio_button_set_group; ///

  // RadioButtonAccessible
  GType function() c_gtk_radio_button_accessible_get_type; ///

  // RadioMenuItem
  GType function() c_gtk_radio_menu_item_get_type; ///
  GtkWidget* function(GSList* group) c_gtk_radio_menu_item_new; ///
  GtkWidget* function(GtkRadioMenuItem* group) c_gtk_radio_menu_item_new_from_widget; ///
  GtkWidget* function(GSList* group, const(char)* label) c_gtk_radio_menu_item_new_with_label; ///
  GtkWidget* function(GtkRadioMenuItem* group, const(char)* label) c_gtk_radio_menu_item_new_with_label_from_widget; ///
  GtkWidget* function(GSList* group, const(char)* label) c_gtk_radio_menu_item_new_with_mnemonic; ///
  GtkWidget* function(GtkRadioMenuItem* group, const(char)* label) c_gtk_radio_menu_item_new_with_mnemonic_from_widget; ///
  GSList* function(GtkRadioMenuItem* radioMenuItem) c_gtk_radio_menu_item_get_group; ///
  void function(GtkRadioMenuItem* radioMenuItem, GtkRadioMenuItem* groupSource) c_gtk_radio_menu_item_join_group; ///
  void function(GtkRadioMenuItem* radioMenuItem, GSList* group) c_gtk_radio_menu_item_set_group; ///

  // RadioMenuItemAccessible
  GType function() c_gtk_radio_menu_item_accessible_get_type; ///

  // RadioToolButton
  GType function() c_gtk_radio_tool_button_get_type; ///
  GtkToolItem* function(GSList* group) c_gtk_radio_tool_button_new; ///
  GtkToolItem* function(GSList* group, const(char)* stockId) c_gtk_radio_tool_button_new_from_stock; ///
  GtkToolItem* function(GtkRadioToolButton* group) c_gtk_radio_tool_button_new_from_widget; ///
  GtkToolItem* function(GtkRadioToolButton* group, const(char)* stockId) c_gtk_radio_tool_button_new_with_stock_from_widget; ///
  GSList* function(GtkRadioToolButton* button) c_gtk_radio_tool_button_get_group; ///
  void function(GtkRadioToolButton* button, GSList* group) c_gtk_radio_tool_button_set_group; ///

  // Range
  GType function() c_gtk_range_get_type; ///
  GtkAdjustment* function(GtkRange* range) c_gtk_range_get_adjustment; ///
  double function(GtkRange* range) c_gtk_range_get_fill_level; ///
  bool function(GtkRange* range) c_gtk_range_get_flippable; ///
  bool function(GtkRange* range) c_gtk_range_get_inverted; ///
  GtkSensitivityType function(GtkRange* range) c_gtk_range_get_lower_stepper_sensitivity; ///
  int function(GtkRange* range) c_gtk_range_get_min_slider_size; ///
  void function(GtkRange* range, GdkRectangle* rangeRect) c_gtk_range_get_range_rect; ///
  bool function(GtkRange* range) c_gtk_range_get_restrict_to_fill_level; ///
  int function(GtkRange* range) c_gtk_range_get_round_digits; ///
  bool function(GtkRange* range) c_gtk_range_get_show_fill_level; ///
  void function(GtkRange* range, int* sliderStart, int* sliderEnd) c_gtk_range_get_slider_range; ///
  bool function(GtkRange* range) c_gtk_range_get_slider_size_fixed; ///
  GtkSensitivityType function(GtkRange* range) c_gtk_range_get_upper_stepper_sensitivity; ///
  double function(GtkRange* range) c_gtk_range_get_value; ///
  void function(GtkRange* range, GtkAdjustment* adjustment) c_gtk_range_set_adjustment; ///
  void function(GtkRange* range, double fillLevel) c_gtk_range_set_fill_level; ///
  void function(GtkRange* range, bool flippable) c_gtk_range_set_flippable; ///
  void function(GtkRange* range, double step, double page) c_gtk_range_set_increments; ///
  void function(GtkRange* range, bool setting) c_gtk_range_set_inverted; ///
  void function(GtkRange* range, GtkSensitivityType sensitivity) c_gtk_range_set_lower_stepper_sensitivity; ///
  void function(GtkRange* range, int minSize) c_gtk_range_set_min_slider_size; ///
  void function(GtkRange* range, double min, double max) c_gtk_range_set_range; ///
  void function(GtkRange* range, bool restrictToFillLevel) c_gtk_range_set_restrict_to_fill_level; ///
  void function(GtkRange* range, int roundDigits) c_gtk_range_set_round_digits; ///
  void function(GtkRange* range, bool showFillLevel) c_gtk_range_set_show_fill_level; ///
  void function(GtkRange* range, bool sizeFixed) c_gtk_range_set_slider_size_fixed; ///
  void function(GtkRange* range, GtkSensitivityType sensitivity) c_gtk_range_set_upper_stepper_sensitivity; ///
  void function(GtkRange* range, double value) c_gtk_range_set_value; ///

  // RangeAccessible
  GType function() c_gtk_range_accessible_get_type; ///

  // RcProperty
  bool function(const(GParamSpec)* pspec, const(GString)* gstring, GValue* propertyValue) c_gtk_rc_property_parse_border; ///
  bool function(const(GParamSpec)* pspec, const(GString)* gstring, GValue* propertyValue) c_gtk_rc_property_parse_color; ///
  bool function(const(GParamSpec)* pspec, const(GString)* gstring, GValue* propertyValue) c_gtk_rc_property_parse_enum; ///
  bool function(const(GParamSpec)* pspec, const(GString)* gstring, GValue* propertyValue) c_gtk_rc_property_parse_flags; ///
  bool function(const(GParamSpec)* pspec, const(GString)* gstring, GValue* propertyValue) c_gtk_rc_property_parse_requisition; ///

  // RcStyle
  GType function() c_gtk_rc_style_get_type; ///
  GtkRcStyle* function() c_gtk_rc_style_new; ///
  GtkRcStyle* function(GtkRcStyle* orig) c_gtk_rc_style_copy; ///

  // RecentAction
  GType function() c_gtk_recent_action_get_type; ///
  GtkAction* function(const(char)* name, const(char)* label, const(char)* tooltip, const(char)* stockId) c_gtk_recent_action_new; ///
  GtkAction* function(const(char)* name, const(char)* label, const(char)* tooltip, const(char)* stockId, GtkRecentManager* manager) c_gtk_recent_action_new_for_manager; ///
  bool function(GtkRecentAction* action) c_gtk_recent_action_get_show_numbers; ///
  void function(GtkRecentAction* action, bool showNumbers) c_gtk_recent_action_set_show_numbers; ///

  // RecentChooser
  GType function() c_gtk_recent_chooser_get_type; ///
  void function(GtkRecentChooser* chooser, GtkRecentFilter* filter) c_gtk_recent_chooser_add_filter; ///
  GtkRecentInfo* function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_current_item; ///
  char* function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_current_uri; ///
  GtkRecentFilter* function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_filter; ///
  GList* function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_items; ///
  int function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_limit; ///
  bool function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_local_only; ///
  bool function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_select_multiple; ///
  bool function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_show_icons; ///
  bool function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_show_not_found; ///
  bool function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_show_private; ///
  bool function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_show_tips; ///
  GtkRecentSortType function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_sort_type; ///
  char** function(GtkRecentChooser* chooser, size_t* length) c_gtk_recent_chooser_get_uris; ///
  GSList* function(GtkRecentChooser* chooser) c_gtk_recent_chooser_list_filters; ///
  void function(GtkRecentChooser* chooser, GtkRecentFilter* filter) c_gtk_recent_chooser_remove_filter; ///
  void function(GtkRecentChooser* chooser) c_gtk_recent_chooser_select_all; ///
  bool function(GtkRecentChooser* chooser, const(char)* uri, GError** _err) c_gtk_recent_chooser_select_uri; ///
  bool function(GtkRecentChooser* chooser, const(char)* uri, GError** _err) c_gtk_recent_chooser_set_current_uri; ///
  void function(GtkRecentChooser* chooser, GtkRecentFilter* filter) c_gtk_recent_chooser_set_filter; ///
  void function(GtkRecentChooser* chooser, int limit) c_gtk_recent_chooser_set_limit; ///
  void function(GtkRecentChooser* chooser, bool localOnly) c_gtk_recent_chooser_set_local_only; ///
  void function(GtkRecentChooser* chooser, bool selectMultiple) c_gtk_recent_chooser_set_select_multiple; ///
  void function(GtkRecentChooser* chooser, bool showIcons) c_gtk_recent_chooser_set_show_icons; ///
  void function(GtkRecentChooser* chooser, bool showNotFound) c_gtk_recent_chooser_set_show_not_found; ///
  void function(GtkRecentChooser* chooser, bool showPrivate) c_gtk_recent_chooser_set_show_private; ///
  void function(GtkRecentChooser* chooser, bool showTips) c_gtk_recent_chooser_set_show_tips; ///
  void function(GtkRecentChooser* chooser, GtkRecentSortFunc sortFunc, void* sortData, GDestroyNotify dataDestroy) c_gtk_recent_chooser_set_sort_func; ///
  void function(GtkRecentChooser* chooser, GtkRecentSortType sortType) c_gtk_recent_chooser_set_sort_type; ///
  void function(GtkRecentChooser* chooser) c_gtk_recent_chooser_unselect_all; ///
  void function(GtkRecentChooser* chooser, const(char)* uri) c_gtk_recent_chooser_unselect_uri; ///

  // RecentChooserDialog
  GType function() c_gtk_recent_chooser_dialog_get_type; ///
  GtkWidget* function(const(char)* title, GtkWindow* parent, const(char)* firstButtonText,  ...) c_gtk_recent_chooser_dialog_new; ///
  GtkWidget* function(const(char)* title, GtkWindow* parent, GtkRecentManager* manager, const(char)* firstButtonText,  ...) c_gtk_recent_chooser_dialog_new_for_manager; ///

  // RecentChooserMenu
  GType function() c_gtk_recent_chooser_menu_get_type; ///
  GtkWidget* function() c_gtk_recent_chooser_menu_new; ///
  GtkWidget* function(GtkRecentManager* manager) c_gtk_recent_chooser_menu_new_for_manager; ///
  bool function(GtkRecentChooserMenu* menu) c_gtk_recent_chooser_menu_get_show_numbers; ///
  void function(GtkRecentChooserMenu* menu, bool showNumbers) c_gtk_recent_chooser_menu_set_show_numbers; ///

  // RecentChooserWidget
  GType function() c_gtk_recent_chooser_widget_get_type; ///
  GtkWidget* function() c_gtk_recent_chooser_widget_new; ///
  GtkWidget* function(GtkRecentManager* manager) c_gtk_recent_chooser_widget_new_for_manager; ///

  // RecentFilter
  GType function() c_gtk_recent_filter_get_type; ///
  GtkRecentFilter* function() c_gtk_recent_filter_new; ///
  void function(GtkRecentFilter* filter, int days) c_gtk_recent_filter_add_age; ///
  void function(GtkRecentFilter* filter, const(char)* application) c_gtk_recent_filter_add_application; ///
  void function(GtkRecentFilter* filter, GtkRecentFilterFlags needed, GtkRecentFilterFunc func, void* data, GDestroyNotify dataDestroy) c_gtk_recent_filter_add_custom; ///
  void function(GtkRecentFilter* filter, const(char)* group) c_gtk_recent_filter_add_group; ///
  void function(GtkRecentFilter* filter, const(char)* mimeType) c_gtk_recent_filter_add_mime_type; ///
  void function(GtkRecentFilter* filter, const(char)* pattern) c_gtk_recent_filter_add_pattern; ///
  void function(GtkRecentFilter* filter) c_gtk_recent_filter_add_pixbuf_formats; ///
  bool function(GtkRecentFilter* filter, const(GtkRecentFilterInfo)* filterInfo) c_gtk_recent_filter_filter; ///
  const(char)* function(GtkRecentFilter* filter) c_gtk_recent_filter_get_name; ///
  GtkRecentFilterFlags function(GtkRecentFilter* filter) c_gtk_recent_filter_get_needed; ///
  void function(GtkRecentFilter* filter, const(char)* name) c_gtk_recent_filter_set_name; ///

  // RecentInfo
  GType function() c_gtk_recent_info_get_type; ///
  GAppInfo* function(GtkRecentInfo* info, const(char)* appName, GError** _err) c_gtk_recent_info_create_app_info; ///
  bool function(GtkRecentInfo* info) c_gtk_recent_info_exists; ///
  long function(GtkRecentInfo* info) c_gtk_recent_info_get_added; ///
  int function(GtkRecentInfo* info) c_gtk_recent_info_get_age; ///
  bool function(GtkRecentInfo* info, const(char)* appName, const(char*)* appExec, uint* count, long* time) c_gtk_recent_info_get_application_info; ///
  char** function(GtkRecentInfo* info, size_t* length) c_gtk_recent_info_get_applications; ///
  const(char)* function(GtkRecentInfo* info) c_gtk_recent_info_get_description; ///
  const(char)* function(GtkRecentInfo* info) c_gtk_recent_info_get_display_name; ///
  GIcon* function(GtkRecentInfo* info) c_gtk_recent_info_get_gicon; ///
  char** function(GtkRecentInfo* info, size_t* length) c_gtk_recent_info_get_groups; ///
  PixbufC* function(GtkRecentInfo* info, int size) c_gtk_recent_info_get_icon; ///
  const(char)* function(GtkRecentInfo* info) c_gtk_recent_info_get_mime_type; ///
  long function(GtkRecentInfo* info) c_gtk_recent_info_get_modified; ///
  bool function(GtkRecentInfo* info) c_gtk_recent_info_get_private_hint; ///
  char* function(GtkRecentInfo* info) c_gtk_recent_info_get_short_name; ///
  const(char)* function(GtkRecentInfo* info) c_gtk_recent_info_get_uri; ///
  char* function(GtkRecentInfo* info) c_gtk_recent_info_get_uri_display; ///
  long function(GtkRecentInfo* info) c_gtk_recent_info_get_visited; ///
  bool function(GtkRecentInfo* info, const(char)* appName) c_gtk_recent_info_has_application; ///
  bool function(GtkRecentInfo* info, const(char)* groupName) c_gtk_recent_info_has_group; ///
  bool function(GtkRecentInfo* info) c_gtk_recent_info_is_local; ///
  char* function(GtkRecentInfo* info) c_gtk_recent_info_last_application; ///
  bool function(GtkRecentInfo* infoA, GtkRecentInfo* infoB) c_gtk_recent_info_match; ///
  GtkRecentInfo* function(GtkRecentInfo* info) c_gtk_recent_info_ref; ///
  void function(GtkRecentInfo* info) c_gtk_recent_info_unref; ///

  // RecentManager
  GType function() c_gtk_recent_manager_get_type; ///
  GtkRecentManager* function() c_gtk_recent_manager_new; ///
  GtkRecentManager* function() c_gtk_recent_manager_get_default; ///
  bool function(GtkRecentManager* manager, const(char)* uri, const(GtkRecentData)* recentData) c_gtk_recent_manager_add_full; ///
  bool function(GtkRecentManager* manager, const(char)* uri) c_gtk_recent_manager_add_item; ///
  GList* function(GtkRecentManager* manager) c_gtk_recent_manager_get_items; ///
  bool function(GtkRecentManager* manager, const(char)* uri) c_gtk_recent_manager_has_item; ///
  GtkRecentInfo* function(GtkRecentManager* manager, const(char)* uri, GError** _err) c_gtk_recent_manager_lookup_item; ///
  bool function(GtkRecentManager* manager, const(char)* uri, const(char)* newUri, GError** _err) c_gtk_recent_manager_move_item; ///
  int function(GtkRecentManager* manager, GError** _err) c_gtk_recent_manager_purge_items; ///
  bool function(GtkRecentManager* manager, const(char)* uri, GError** _err) c_gtk_recent_manager_remove_item; ///

  // RendererCellAccessible
  GType function() c_gtk_renderer_cell_accessible_get_type; ///
  AtkObject* function(GtkCellRenderer* renderer) c_gtk_renderer_cell_accessible_new; ///

  // Requisition
  GType function() c_gtk_requisition_get_type; ///
  GtkRequisition* function() c_gtk_requisition_new; ///
  GtkRequisition* function(const(GtkRequisition)* requisition) c_gtk_requisition_copy; ///
  void function(GtkRequisition* requisition) c_gtk_requisition_free; ///

  // Revealer
  GType function() c_gtk_revealer_get_type; ///
  GtkWidget* function() c_gtk_revealer_new; ///
  bool function(GtkRevealer* revealer) c_gtk_revealer_get_child_revealed; ///
  bool function(GtkRevealer* revealer) c_gtk_revealer_get_reveal_child; ///
  uint function(GtkRevealer* revealer) c_gtk_revealer_get_transition_duration; ///
  GtkRevealerTransitionType function(GtkRevealer* revealer) c_gtk_revealer_get_transition_type; ///
  void function(GtkRevealer* revealer, bool revealChild) c_gtk_revealer_set_reveal_child; ///
  void function(GtkRevealer* revealer, uint duration) c_gtk_revealer_set_transition_duration; ///
  void function(GtkRevealer* revealer, GtkRevealerTransitionType transition) c_gtk_revealer_set_transition_type; ///

  // Scale
  GType function() c_gtk_scale_get_type; ///
  GtkWidget* function(GtkOrientation orientation, GtkAdjustment* adjustment) c_gtk_scale_new; ///
  GtkWidget* function(GtkOrientation orientation, double min, double max, double step) c_gtk_scale_new_with_range; ///
  void function(GtkScale* scale, double value, GtkPositionType position, const(char)* markup) c_gtk_scale_add_mark; ///
  void function(GtkScale* scale) c_gtk_scale_clear_marks; ///
  int function(GtkScale* scale) c_gtk_scale_get_digits; ///
  bool function(GtkScale* scale) c_gtk_scale_get_draw_value; ///
  bool function(GtkScale* scale) c_gtk_scale_get_has_origin; ///
  PangoLayout* function(GtkScale* scale) c_gtk_scale_get_layout; ///
  void function(GtkScale* scale, int* x, int* y) c_gtk_scale_get_layout_offsets; ///
  GtkPositionType function(GtkScale* scale) c_gtk_scale_get_value_pos; ///
  void function(GtkScale* scale, int digits) c_gtk_scale_set_digits; ///
  void function(GtkScale* scale, bool drawValue) c_gtk_scale_set_draw_value; ///
  void function(GtkScale* scale, bool hasOrigin) c_gtk_scale_set_has_origin; ///
  void function(GtkScale* scale, GtkPositionType pos) c_gtk_scale_set_value_pos; ///

  // ScaleAccessible
  GType function() c_gtk_scale_accessible_get_type; ///

  // ScaleButton
  GType function() c_gtk_scale_button_get_type; ///
  GtkWidget* function(GtkIconSize size, double min, double max, double step, const(char*)* icons) c_gtk_scale_button_new; ///
  GtkAdjustment* function(GtkScaleButton* button) c_gtk_scale_button_get_adjustment; ///
  GtkWidget* function(GtkScaleButton* button) c_gtk_scale_button_get_minus_button; ///
  GtkWidget* function(GtkScaleButton* button) c_gtk_scale_button_get_plus_button; ///
  GtkWidget* function(GtkScaleButton* button) c_gtk_scale_button_get_popup; ///
  double function(GtkScaleButton* button) c_gtk_scale_button_get_value; ///
  void function(GtkScaleButton* button, GtkAdjustment* adjustment) c_gtk_scale_button_set_adjustment; ///
  void function(GtkScaleButton* button, const(char*)* icons) c_gtk_scale_button_set_icons; ///
  void function(GtkScaleButton* button, double value) c_gtk_scale_button_set_value; ///

  // ScaleButtonAccessible
  GType function() c_gtk_scale_button_accessible_get_type; ///

  // Scrollable
  GType function() c_gtk_scrollable_get_type; ///
  bool function(GtkScrollable* scrollable, GtkBorder* border) c_gtk_scrollable_get_border; ///
  GtkAdjustment* function(GtkScrollable* scrollable) c_gtk_scrollable_get_hadjustment; ///
  GtkScrollablePolicy function(GtkScrollable* scrollable) c_gtk_scrollable_get_hscroll_policy; ///
  GtkAdjustment* function(GtkScrollable* scrollable) c_gtk_scrollable_get_vadjustment; ///
  GtkScrollablePolicy function(GtkScrollable* scrollable) c_gtk_scrollable_get_vscroll_policy; ///
  void function(GtkScrollable* scrollable, GtkAdjustment* hadjustment) c_gtk_scrollable_set_hadjustment; ///
  void function(GtkScrollable* scrollable, GtkScrollablePolicy policy) c_gtk_scrollable_set_hscroll_policy; ///
  void function(GtkScrollable* scrollable, GtkAdjustment* vadjustment) c_gtk_scrollable_set_vadjustment; ///
  void function(GtkScrollable* scrollable, GtkScrollablePolicy policy) c_gtk_scrollable_set_vscroll_policy; ///

  // Scrollbar
  GType function() c_gtk_scrollbar_get_type; ///
  GtkWidget* function(GtkOrientation orientation, GtkAdjustment* adjustment) c_gtk_scrollbar_new; ///

  // ScrolledWindow
  GType function() c_gtk_scrolled_window_get_type; ///
  GtkWidget* function(GtkAdjustment* hadjustment, GtkAdjustment* vadjustment) c_gtk_scrolled_window_new; ///
  void function(GtkScrolledWindow* scrolledWindow, GtkWidget* child) c_gtk_scrolled_window_add_with_viewport; ///
  bool function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_capture_button_press; ///
  GtkAdjustment* function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_hadjustment; ///
  GtkWidget* function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_hscrollbar; ///
  bool function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_kinetic_scrolling; ///
  int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_max_content_height; ///
  int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_max_content_width; ///
  int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_min_content_height; ///
  int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_min_content_width; ///
  bool function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_overlay_scrolling; ///
  GtkCornerType function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_placement; ///
  void function(GtkScrolledWindow* scrolledWindow, GtkPolicyType* hscrollbarPolicy, GtkPolicyType* vscrollbarPolicy) c_gtk_scrolled_window_get_policy; ///
  bool function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_propagate_natural_height; ///
  bool function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_propagate_natural_width; ///
  GtkShadowType function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_shadow_type; ///
  GtkAdjustment* function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_vadjustment; ///
  GtkWidget* function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_vscrollbar; ///
  void function(GtkScrolledWindow* scrolledWindow, bool captureButtonPress) c_gtk_scrolled_window_set_capture_button_press; ///
  void function(GtkScrolledWindow* scrolledWindow, GtkAdjustment* hadjustment) c_gtk_scrolled_window_set_hadjustment; ///
  void function(GtkScrolledWindow* scrolledWindow, bool kineticScrolling) c_gtk_scrolled_window_set_kinetic_scrolling; ///
  void function(GtkScrolledWindow* scrolledWindow, int height) c_gtk_scrolled_window_set_max_content_height; ///
  void function(GtkScrolledWindow* scrolledWindow, int width) c_gtk_scrolled_window_set_max_content_width; ///
  void function(GtkScrolledWindow* scrolledWindow, int height) c_gtk_scrolled_window_set_min_content_height; ///
  void function(GtkScrolledWindow* scrolledWindow, int width) c_gtk_scrolled_window_set_min_content_width; ///
  void function(GtkScrolledWindow* scrolledWindow, bool overlayScrolling) c_gtk_scrolled_window_set_overlay_scrolling; ///
  void function(GtkScrolledWindow* scrolledWindow, GtkCornerType windowPlacement) c_gtk_scrolled_window_set_placement; ///
  void function(GtkScrolledWindow* scrolledWindow, GtkPolicyType hscrollbarPolicy, GtkPolicyType vscrollbarPolicy) c_gtk_scrolled_window_set_policy; ///
  void function(GtkScrolledWindow* scrolledWindow, bool propagate) c_gtk_scrolled_window_set_propagate_natural_height; ///
  void function(GtkScrolledWindow* scrolledWindow, bool propagate) c_gtk_scrolled_window_set_propagate_natural_width; ///
  void function(GtkScrolledWindow* scrolledWindow, GtkShadowType type) c_gtk_scrolled_window_set_shadow_type; ///
  void function(GtkScrolledWindow* scrolledWindow, GtkAdjustment* vadjustment) c_gtk_scrolled_window_set_vadjustment; ///
  void function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_unset_placement; ///

  // ScrolledWindowAccessible
  GType function() c_gtk_scrolled_window_accessible_get_type; ///

  // SearchBar
  GType function() c_gtk_search_bar_get_type; ///
  GtkWidget* function() c_gtk_search_bar_new; ///
  void function(GtkSearchBar* bar, GtkEntry* entry) c_gtk_search_bar_connect_entry; ///
  bool function(GtkSearchBar* bar) c_gtk_search_bar_get_search_mode; ///
  bool function(GtkSearchBar* bar) c_gtk_search_bar_get_show_close_button; ///
  bool function(GtkSearchBar* bar, GdkEvent* event) c_gtk_search_bar_handle_event; ///
  void function(GtkSearchBar* bar, bool searchMode) c_gtk_search_bar_set_search_mode; ///
  void function(GtkSearchBar* bar, bool visible) c_gtk_search_bar_set_show_close_button; ///

  // SearchEntry
  GType function() c_gtk_search_entry_get_type; ///
  GtkWidget* function() c_gtk_search_entry_new; ///
  bool function(GtkSearchEntry* entry, GdkEvent* event) c_gtk_search_entry_handle_event; ///

  // SelectionData
  GType function() c_gtk_selection_data_get_type; ///
  GtkSelectionData* function(const(GtkSelectionData)* data) c_gtk_selection_data_copy; ///
  void function(GtkSelectionData* data) c_gtk_selection_data_free; ///
  const(ubyte)* function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_get_data; ///
  GdkAtom function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_get_data_type; ///
  const(ubyte)* function(const(GtkSelectionData)* selectionData, int* length) c_gtk_selection_data_get_data_with_length; ///
  GdkDisplay* function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_get_display; ///
  int function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_get_format; ///
  int function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_get_length; ///
  PixbufC* function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_get_pixbuf; ///
  GdkAtom function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_get_selection; ///
  GdkAtom function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_get_target; ///
  bool function(const(GtkSelectionData)* selectionData, GdkAtom** targets, int* nAtoms) c_gtk_selection_data_get_targets; ///
  ubyte* function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_get_text; ///
  char** function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_get_uris; ///
  void function(GtkSelectionData* selectionData, GdkAtom type, int format, const(ubyte)* data, int length) c_gtk_selection_data_set; ///
  bool function(GtkSelectionData* selectionData, PixbufC* pixbuf) c_gtk_selection_data_set_pixbuf; ///
  bool function(GtkSelectionData* selectionData, const(char)* str, int len) c_gtk_selection_data_set_text; ///
  bool function(GtkSelectionData* selectionData, char** uris) c_gtk_selection_data_set_uris; ///
  bool function(const(GtkSelectionData)* selectionData, bool writable) c_gtk_selection_data_targets_include_image; ///
  bool function(const(GtkSelectionData)* selectionData, GtkTextBuffer* buffer) c_gtk_selection_data_targets_include_rich_text; ///
  bool function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_targets_include_text; ///
  bool function(const(GtkSelectionData)* selectionData) c_gtk_selection_data_targets_include_uri; ///

  // Separator
  GType function() c_gtk_separator_get_type; ///
  GtkWidget* function(GtkOrientation orientation) c_gtk_separator_new; ///

  // SeparatorMenuItem
  GType function() c_gtk_separator_menu_item_get_type; ///
  GtkWidget* function() c_gtk_separator_menu_item_new; ///

  // SeparatorToolItem
  GType function() c_gtk_separator_tool_item_get_type; ///
  GtkToolItem* function() c_gtk_separator_tool_item_new; ///
  bool function(GtkSeparatorToolItem* item) c_gtk_separator_tool_item_get_draw; ///
  void function(GtkSeparatorToolItem* item, bool draw) c_gtk_separator_tool_item_set_draw; ///

  // Settings
  GType function() c_gtk_settings_get_type; ///
  GtkSettings* function() c_gtk_settings_get_default; ///
  GtkSettings* function(GdkScreen* screen) c_gtk_settings_get_for_screen; ///
  void function(GParamSpec* pspec) c_gtk_settings_install_property; ///
  void function(GParamSpec* pspec, GtkRcPropertyParser parser) c_gtk_settings_install_property_parser; ///
  void function(GtkSettings* settings, const(char)* name) c_gtk_settings_reset_property; ///
  void function(GtkSettings* settings, const(char)* name, double vDouble, const(char)* origin) c_gtk_settings_set_double_property; ///
  void function(GtkSettings* settings, const(char)* name, glong vLong, const(char)* origin) c_gtk_settings_set_long_property; ///
  void function(GtkSettings* settings, const(char)* name, const(GtkSettingsValue)* svalue) c_gtk_settings_set_property_value; ///
  void function(GtkSettings* settings, const(char)* name, const(char)* vString, const(char)* origin) c_gtk_settings_set_string_property; ///

  // ShortcutLabel
  GType function() c_gtk_shortcut_label_get_type; ///
  GtkWidget* function(const(char)* accelerator) c_gtk_shortcut_label_new; ///
  const(char)* function(GtkShortcutLabel* self) c_gtk_shortcut_label_get_accelerator; ///
  const(char)* function(GtkShortcutLabel* self) c_gtk_shortcut_label_get_disabled_text; ///
  void function(GtkShortcutLabel* self, const(char)* accelerator) c_gtk_shortcut_label_set_accelerator; ///
  void function(GtkShortcutLabel* self, const(char)* disabledText) c_gtk_shortcut_label_set_disabled_text; ///

  // ShortcutsGroup
  GType function() c_gtk_shortcuts_group_get_type; ///

  // ShortcutsSection
  GType function() c_gtk_shortcuts_section_get_type; ///

  // ShortcutsShortcut
  GType function() c_gtk_shortcuts_shortcut_get_type; ///

  // ShortcutsWindow
  GType function() c_gtk_shortcuts_window_get_type; ///

  // SizeGroup
  GType function() c_gtk_size_group_get_type; ///
  GtkSizeGroup* function(GtkSizeGroupMode mode) c_gtk_size_group_new; ///
  void function(GtkSizeGroup* sizeGroup, GtkWidget* widget) c_gtk_size_group_add_widget; ///
  bool function(GtkSizeGroup* sizeGroup) c_gtk_size_group_get_ignore_hidden; ///
  GtkSizeGroupMode function(GtkSizeGroup* sizeGroup) c_gtk_size_group_get_mode; ///
  GSList* function(GtkSizeGroup* sizeGroup) c_gtk_size_group_get_widgets; ///
  void function(GtkSizeGroup* sizeGroup, GtkWidget* widget) c_gtk_size_group_remove_widget; ///
  void function(GtkSizeGroup* sizeGroup, bool ignoreHidden) c_gtk_size_group_set_ignore_hidden; ///
  void function(GtkSizeGroup* sizeGroup, GtkSizeGroupMode mode) c_gtk_size_group_set_mode; ///

  // Socket
  GType function() c_gtk_socket_get_type; ///
  GtkWidget* function() c_gtk_socket_new; ///
  void function(GtkSocket* socket, Window window) c_gtk_socket_add_id; ///
  Window function(GtkSocket* socket) c_gtk_socket_get_id; ///
  GdkWindow* function(GtkSocket* socket) c_gtk_socket_get_plug_window; ///

  // SocketAccessible
  GType function() c_gtk_socket_accessible_get_type; ///
  void function(GtkSocketAccessible* socket, char* path) c_gtk_socket_accessible_embed; ///

  // SpinButton
  GType function() c_gtk_spin_button_get_type; ///
  GtkWidget* function(GtkAdjustment* adjustment, double climbRate, uint digits) c_gtk_spin_button_new; ///
  GtkWidget* function(double min, double max, double step) c_gtk_spin_button_new_with_range; ///
  void function(GtkSpinButton* spinButton, GtkAdjustment* adjustment, double climbRate, uint digits) c_gtk_spin_button_configure; ///
  GtkAdjustment* function(GtkSpinButton* spinButton) c_gtk_spin_button_get_adjustment; ///
  uint function(GtkSpinButton* spinButton) c_gtk_spin_button_get_digits; ///
  void function(GtkSpinButton* spinButton, double* step, double* page) c_gtk_spin_button_get_increments; ///
  bool function(GtkSpinButton* spinButton) c_gtk_spin_button_get_numeric; ///
  void function(GtkSpinButton* spinButton, double* min, double* max) c_gtk_spin_button_get_range; ///
  bool function(GtkSpinButton* spinButton) c_gtk_spin_button_get_snap_to_ticks; ///
  GtkSpinButtonUpdatePolicy function(GtkSpinButton* spinButton) c_gtk_spin_button_get_update_policy; ///
  double function(GtkSpinButton* spinButton) c_gtk_spin_button_get_value; ///
  int function(GtkSpinButton* spinButton) c_gtk_spin_button_get_value_as_int; ///
  bool function(GtkSpinButton* spinButton) c_gtk_spin_button_get_wrap; ///
  void function(GtkSpinButton* spinButton, GtkAdjustment* adjustment) c_gtk_spin_button_set_adjustment; ///
  void function(GtkSpinButton* spinButton, uint digits) c_gtk_spin_button_set_digits; ///
  void function(GtkSpinButton* spinButton, double step, double page) c_gtk_spin_button_set_increments; ///
  void function(GtkSpinButton* spinButton, bool numeric) c_gtk_spin_button_set_numeric; ///
  void function(GtkSpinButton* spinButton, double min, double max) c_gtk_spin_button_set_range; ///
  void function(GtkSpinButton* spinButton, bool snapToTicks) c_gtk_spin_button_set_snap_to_ticks; ///
  void function(GtkSpinButton* spinButton, GtkSpinButtonUpdatePolicy policy) c_gtk_spin_button_set_update_policy; ///
  void function(GtkSpinButton* spinButton, double value) c_gtk_spin_button_set_value; ///
  void function(GtkSpinButton* spinButton, bool wrap) c_gtk_spin_button_set_wrap; ///
  void function(GtkSpinButton* spinButton, GtkSpinType direction, double increment) c_gtk_spin_button_spin; ///
  void function(GtkSpinButton* spinButton) c_gtk_spin_button_update; ///

  // SpinButtonAccessible
  GType function() c_gtk_spin_button_accessible_get_type; ///

  // Spinner
  GType function() c_gtk_spinner_get_type; ///
  GtkWidget* function() c_gtk_spinner_new; ///
  void function(GtkSpinner* spinner) c_gtk_spinner_start; ///
  void function(GtkSpinner* spinner) c_gtk_spinner_stop; ///

  // SpinnerAccessible
  GType function() c_gtk_spinner_accessible_get_type; ///

  // Stack
  GType function() c_gtk_stack_get_type; ///
  GtkWidget* function() c_gtk_stack_new; ///
  void function(GtkStack* stack, GtkWidget* child, const(char)* name) c_gtk_stack_add_named; ///
  void function(GtkStack* stack, GtkWidget* child, const(char)* name, const(char)* title) c_gtk_stack_add_titled; ///
  GtkWidget* function(GtkStack* stack, const(char)* name) c_gtk_stack_get_child_by_name; ///
  bool function(GtkStack* stack) c_gtk_stack_get_hhomogeneous; ///
  bool function(GtkStack* stack) c_gtk_stack_get_homogeneous; ///
  bool function(GtkStack* stack) c_gtk_stack_get_interpolate_size; ///
  uint function(GtkStack* stack) c_gtk_stack_get_transition_duration; ///
  bool function(GtkStack* stack) c_gtk_stack_get_transition_running; ///
  GtkStackTransitionType function(GtkStack* stack) c_gtk_stack_get_transition_type; ///
  bool function(GtkStack* stack) c_gtk_stack_get_vhomogeneous; ///
  GtkWidget* function(GtkStack* stack) c_gtk_stack_get_visible_child; ///
  const(char)* function(GtkStack* stack) c_gtk_stack_get_visible_child_name; ///
  void function(GtkStack* stack, bool hhomogeneous) c_gtk_stack_set_hhomogeneous; ///
  void function(GtkStack* stack, bool homogeneous) c_gtk_stack_set_homogeneous; ///
  void function(GtkStack* stack, bool interpolateSize) c_gtk_stack_set_interpolate_size; ///
  void function(GtkStack* stack, uint duration) c_gtk_stack_set_transition_duration; ///
  void function(GtkStack* stack, GtkStackTransitionType transition) c_gtk_stack_set_transition_type; ///
  void function(GtkStack* stack, bool vhomogeneous) c_gtk_stack_set_vhomogeneous; ///
  void function(GtkStack* stack, GtkWidget* child) c_gtk_stack_set_visible_child; ///
  void function(GtkStack* stack, const(char)* name, GtkStackTransitionType transition) c_gtk_stack_set_visible_child_full; ///
  void function(GtkStack* stack, const(char)* name) c_gtk_stack_set_visible_child_name; ///

  // StackAccessible
  GType function() c_gtk_stack_accessible_get_type; ///

  // StackSidebar
  GType function() c_gtk_stack_sidebar_get_type; ///
  GtkWidget* function() c_gtk_stack_sidebar_new; ///
  GtkStack* function(GtkStackSidebar* sidebar) c_gtk_stack_sidebar_get_stack; ///
  void function(GtkStackSidebar* sidebar, GtkStack* stack) c_gtk_stack_sidebar_set_stack; ///

  // StackSwitcher
  GType function() c_gtk_stack_switcher_get_type; ///
  GtkWidget* function() c_gtk_stack_switcher_new; ///
  GtkStack* function(GtkStackSwitcher* switcher) c_gtk_stack_switcher_get_stack; ///
  void function(GtkStackSwitcher* switcher, GtkStack* stack) c_gtk_stack_switcher_set_stack; ///

  // StatusIcon
  GType function() c_gtk_status_icon_get_type; ///
  GtkStatusIcon* function() c_gtk_status_icon_new; ///
  GtkStatusIcon* function(const(char)* filename) c_gtk_status_icon_new_from_file; ///
  GtkStatusIcon* function(GIcon* icon) c_gtk_status_icon_new_from_gicon; ///
  GtkStatusIcon* function(const(char)* iconName) c_gtk_status_icon_new_from_icon_name; ///
  GtkStatusIcon* function(PixbufC* pixbuf) c_gtk_status_icon_new_from_pixbuf; ///
  GtkStatusIcon* function(const(char)* stockId) c_gtk_status_icon_new_from_stock; ///
  void function(GtkMenu* menu, int* x, int* y, bool* pushIn, GtkStatusIcon* userData) c_gtk_status_icon_position_menu; ///
  bool function(GtkStatusIcon* statusIcon, GdkScreen** screen, GdkRectangle* area, GtkOrientation* orientation) c_gtk_status_icon_get_geometry; ///
  GIcon* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_gicon; ///
  bool function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_has_tooltip; ///
  const(char)* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_icon_name; ///
  PixbufC* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_pixbuf; ///
  GdkScreen* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_screen; ///
  int function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_size; ///
  const(char)* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_stock; ///
  GtkImageType function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_storage_type; ///
  const(char)* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_title; ///
  char* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_tooltip_markup; ///
  char* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_tooltip_text; ///
  bool function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_visible; ///
  uint function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_x11_window_id; ///
  bool function(GtkStatusIcon* statusIcon) c_gtk_status_icon_is_embedded; ///
  void function(GtkStatusIcon* statusIcon, const(char)* filename) c_gtk_status_icon_set_from_file; ///
  void function(GtkStatusIcon* statusIcon, GIcon* icon) c_gtk_status_icon_set_from_gicon; ///
  void function(GtkStatusIcon* statusIcon, const(char)* iconName) c_gtk_status_icon_set_from_icon_name; ///
  void function(GtkStatusIcon* statusIcon, PixbufC* pixbuf) c_gtk_status_icon_set_from_pixbuf; ///
  void function(GtkStatusIcon* statusIcon, const(char)* stockId) c_gtk_status_icon_set_from_stock; ///
  void function(GtkStatusIcon* statusIcon, bool hasTooltip) c_gtk_status_icon_set_has_tooltip; ///
  void function(GtkStatusIcon* statusIcon, const(char)* name) c_gtk_status_icon_set_name; ///
  void function(GtkStatusIcon* statusIcon, GdkScreen* screen) c_gtk_status_icon_set_screen; ///
  void function(GtkStatusIcon* statusIcon, const(char)* title) c_gtk_status_icon_set_title; ///
  void function(GtkStatusIcon* statusIcon, const(char)* markup) c_gtk_status_icon_set_tooltip_markup; ///
  void function(GtkStatusIcon* statusIcon, const(char)* text) c_gtk_status_icon_set_tooltip_text; ///
  void function(GtkStatusIcon* statusIcon, bool visible) c_gtk_status_icon_set_visible; ///

  // Statusbar
  GType function() c_gtk_statusbar_get_type; ///
  GtkWidget* function() c_gtk_statusbar_new; ///
  uint function(GtkStatusbar* statusbar, const(char)* contextDescription) c_gtk_statusbar_get_context_id; ///
  GtkWidget* function(GtkStatusbar* statusbar) c_gtk_statusbar_get_message_area; ///
  void function(GtkStatusbar* statusbar, uint contextId) c_gtk_statusbar_pop; ///
  uint function(GtkStatusbar* statusbar, uint contextId, const(char)* text) c_gtk_statusbar_push; ///
  void function(GtkStatusbar* statusbar, uint contextId, uint messageId) c_gtk_statusbar_remove; ///
  void function(GtkStatusbar* statusbar, uint contextId) c_gtk_statusbar_remove_all; ///

  // StatusbarAccessible
  GType function() c_gtk_statusbar_accessible_get_type; ///

  // StockItem
  GtkStockItem* function(const(GtkStockItem)* item) c_gtk_stock_item_copy; ///
  void function(GtkStockItem* item) c_gtk_stock_item_free; ///

  // Style
  GType function() c_gtk_style_get_type; ///
  GtkStyle* function() c_gtk_style_new; ///
  void function(GtkStyle* style, cairo_t* cr, GdkWindow* window, GtkStateType stateType, int x, int y, int width, int height) c_gtk_style_apply_default_background; ///
  GtkStyle* function(GtkStyle* style, GdkWindow* window) c_gtk_style_attach; ///
  GtkStyle* function(GtkStyle* style) c_gtk_style_copy; ///
  void function(GtkStyle* style) c_gtk_style_detach; ///
  void function(GtkStyle* style, GType widgetType, const(char)* firstPropertyName,  ...) c_gtk_style_get; ///
  void function(GtkStyle* style, GType widgetType, const(char)* propertyName, GValue* value) c_gtk_style_get_style_property; ///
  void function(GtkStyle* style, GType widgetType, const(char)* firstPropertyName, void* varArgs) c_gtk_style_get_valist; ///
  bool function(GtkStyle* style) c_gtk_style_has_context; ///
  bool function(GtkStyle* style, const(char)* colorName, GdkColor* color) c_gtk_style_lookup_color; ///
  GtkIconSet* function(GtkStyle* style, const(char)* stockId) c_gtk_style_lookup_icon_set; ///
  PixbufC* function(GtkStyle* style, const(GtkIconSource)* source, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget* widget, const(char)* detail) c_gtk_style_render_icon; ///
  void function(GtkStyle* style, GdkWindow* window, GtkStateType stateType) c_gtk_style_set_background; ///

  // StyleContext
  GType function() c_gtk_style_context_get_type; ///
  GtkStyleContext* function() c_gtk_style_context_new; ///
  void function(GdkScreen* screen, GtkStyleProvider* provider, uint priority) c_gtk_style_context_add_provider_for_screen; ///
  void function(GdkScreen* screen, GtkStyleProvider* provider) c_gtk_style_context_remove_provider_for_screen; ///
  void function(GdkScreen* screen) c_gtk_style_context_reset_widgets; ///
  void function(GtkStyleContext* context, const(char)* className) c_gtk_style_context_add_class; ///
  void function(GtkStyleContext* context, GtkStyleProvider* provider, uint priority) c_gtk_style_context_add_provider; ///
  void function(GtkStyleContext* context, const(char)* regionName, GtkRegionFlags flags) c_gtk_style_context_add_region; ///
  void function(GtkStyleContext* context, void* regionId) c_gtk_style_context_cancel_animations; ///
  void function(GtkStyleContext* context, GtkStateFlags state,  ...) c_gtk_style_context_get; ///
  void function(GtkStyleContext* context, GtkStateFlags state, GdkRGBA* color) c_gtk_style_context_get_background_color; ///
  void function(GtkStyleContext* context, GtkStateFlags state, GtkBorder* border) c_gtk_style_context_get_border; ///
  void function(GtkStyleContext* context, GtkStateFlags state, GdkRGBA* color) c_gtk_style_context_get_border_color; ///
  void function(GtkStyleContext* context, GtkStateFlags state, GdkRGBA* color) c_gtk_style_context_get_color; ///
  GtkTextDirection function(GtkStyleContext* context) c_gtk_style_context_get_direction; ///
  const(PangoFontDescription)* function(GtkStyleContext* context, GtkStateFlags state) c_gtk_style_context_get_font; ///
  GdkFrameClock* function(GtkStyleContext* context) c_gtk_style_context_get_frame_clock; ///
  GtkJunctionSides function(GtkStyleContext* context) c_gtk_style_context_get_junction_sides; ///
  void function(GtkStyleContext* context, GtkStateFlags state, GtkBorder* margin) c_gtk_style_context_get_margin; ///
  void function(GtkStyleContext* context, GtkStateFlags state, GtkBorder* padding) c_gtk_style_context_get_padding; ///
  GtkStyleContext* function(GtkStyleContext* context) c_gtk_style_context_get_parent; ///
  const(GtkWidgetPath)* function(GtkStyleContext* context) c_gtk_style_context_get_path; ///
  void function(GtkStyleContext* context, const(char)* property, GtkStateFlags state, GValue* value) c_gtk_style_context_get_property; ///
  int function(GtkStyleContext* context) c_gtk_style_context_get_scale; ///
  GdkScreen* function(GtkStyleContext* context) c_gtk_style_context_get_screen; ///
  GtkCssSection* function(GtkStyleContext* context, const(char)* property) c_gtk_style_context_get_section; ///
  GtkStateFlags function(GtkStyleContext* context) c_gtk_style_context_get_state; ///
  void function(GtkStyleContext* context,  ...) c_gtk_style_context_get_style; ///
  void function(GtkStyleContext* context, const(char)* propertyName, GValue* value) c_gtk_style_context_get_style_property; ///
  void function(GtkStyleContext* context, void* args) c_gtk_style_context_get_style_valist; ///
  void function(GtkStyleContext* context, GtkStateFlags state, void* args) c_gtk_style_context_get_valist; ///
  bool function(GtkStyleContext* context, const(char)* className) c_gtk_style_context_has_class; ///
  bool function(GtkStyleContext* context, const(char)* regionName, GtkRegionFlags* flagsReturn) c_gtk_style_context_has_region; ///
  void function(GtkStyleContext* context) c_gtk_style_context_invalidate; ///
  GList* function(GtkStyleContext* context) c_gtk_style_context_list_classes; ///
  GList* function(GtkStyleContext* context) c_gtk_style_context_list_regions; ///
  bool function(GtkStyleContext* context, const(char)* colorName, GdkRGBA* color) c_gtk_style_context_lookup_color; ///
  GtkIconSet* function(GtkStyleContext* context, const(char)* stockId) c_gtk_style_context_lookup_icon_set; ///
  void function(GtkStyleContext* context, GdkWindow* window, void* regionId, GtkStateType state, bool stateValue) c_gtk_style_context_notify_state_change; ///
  void function(GtkStyleContext* context) c_gtk_style_context_pop_animatable_region; ///
  void function(GtkStyleContext* context, void* regionId) c_gtk_style_context_push_animatable_region; ///
  void function(GtkStyleContext* context, const(char)* className) c_gtk_style_context_remove_class; ///
  void function(GtkStyleContext* context, GtkStyleProvider* provider) c_gtk_style_context_remove_provider; ///
  void function(GtkStyleContext* context, const(char)* regionName) c_gtk_style_context_remove_region; ///
  void function(GtkStyleContext* context) c_gtk_style_context_restore; ///
  void function(GtkStyleContext* context) c_gtk_style_context_save; ///
  void function(GtkStyleContext* context, GdkWindow* window, int dx, int dy) c_gtk_style_context_scroll_animations; ///
  void function(GtkStyleContext* context, GdkWindow* window) c_gtk_style_context_set_background; ///
  void function(GtkStyleContext* context, GtkTextDirection direction) c_gtk_style_context_set_direction; ///
  void function(GtkStyleContext* context, GdkFrameClock* frameClock) c_gtk_style_context_set_frame_clock; ///
  void function(GtkStyleContext* context, GtkJunctionSides sides) c_gtk_style_context_set_junction_sides; ///
  void function(GtkStyleContext* context, GtkStyleContext* parent) c_gtk_style_context_set_parent; ///
  void function(GtkStyleContext* context, GtkWidgetPath* path) c_gtk_style_context_set_path; ///
  void function(GtkStyleContext* context, int scale) c_gtk_style_context_set_scale; ///
  void function(GtkStyleContext* context, GdkScreen* screen) c_gtk_style_context_set_screen; ///
  void function(GtkStyleContext* context, GtkStateFlags flags) c_gtk_style_context_set_state; ///
  bool function(GtkStyleContext* context, GtkStateType state, double* progress) c_gtk_style_context_state_is_running; ///
  char* function(GtkStyleContext* context, GtkStyleContextPrintFlags flags) c_gtk_style_context_to_string; ///

  // StyleProperties
  GType function() c_gtk_style_properties_get_type; ///
  GtkStyleProperties* function() c_gtk_style_properties_new; ///
  bool function(const(char)* propertyName, GtkStylePropertyParser* parseFunc, GParamSpec** pspec) c_gtk_style_properties_lookup_property; ///
  void function(GtkStylePropertyParser parseFunc, GParamSpec* pspec) c_gtk_style_properties_register_property; ///
  void function(GtkStyleProperties* props) c_gtk_style_properties_clear; ///
  void function(GtkStyleProperties* props, GtkStateFlags state,  ...) c_gtk_style_properties_get; ///
  bool function(GtkStyleProperties* props, const(char)* property, GtkStateFlags state, GValue* value) c_gtk_style_properties_get_property; ///
  void function(GtkStyleProperties* props, GtkStateFlags state, void* args) c_gtk_style_properties_get_valist; ///
  GtkSymbolicColor* function(GtkStyleProperties* props, const(char)* name) c_gtk_style_properties_lookup_color; ///
  void function(GtkStyleProperties* props, const(char)* name, GtkSymbolicColor* color) c_gtk_style_properties_map_color; ///
  void function(GtkStyleProperties* props, const(GtkStyleProperties)* propsToMerge, bool replace) c_gtk_style_properties_merge; ///
  void function(GtkStyleProperties* props, GtkStateFlags state,  ...) c_gtk_style_properties_set; ///
  void function(GtkStyleProperties* props, const(char)* property, GtkStateFlags state, const(GValue)* value) c_gtk_style_properties_set_property; ///
  void function(GtkStyleProperties* props, GtkStateFlags state, void* args) c_gtk_style_properties_set_valist; ///
  void function(GtkStyleProperties* props, const(char)* property, GtkStateFlags state) c_gtk_style_properties_unset_property; ///

  // StyleProvider
  GType function() c_gtk_style_provider_get_type; ///
  GtkIconFactory* function(GtkStyleProvider* provider, GtkWidgetPath* path) c_gtk_style_provider_get_icon_factory; ///
  GtkStyleProperties* function(GtkStyleProvider* provider, GtkWidgetPath* path) c_gtk_style_provider_get_style; ///
  bool function(GtkStyleProvider* provider, GtkWidgetPath* path, GtkStateFlags state, GParamSpec* pspec, GValue* value) c_gtk_style_provider_get_style_property; ///

  // Switch
  GType function() c_gtk_switch_get_type; ///
  GtkWidget* function() c_gtk_switch_new; ///
  bool function(GtkSwitch* sw) c_gtk_switch_get_active; ///
  bool function(GtkSwitch* sw) c_gtk_switch_get_state; ///
  void function(GtkSwitch* sw, bool isActive) c_gtk_switch_set_active; ///
  void function(GtkSwitch* sw, bool state) c_gtk_switch_set_state; ///

  // SwitchAccessible
  GType function() c_gtk_switch_accessible_get_type; ///

  // SymbolicColor
  GType function() c_gtk_symbolic_color_get_type; ///
  GtkSymbolicColor* function(GtkSymbolicColor* color, double factor) c_gtk_symbolic_color_new_alpha; ///
  GtkSymbolicColor* function(const(GdkRGBA)* color) c_gtk_symbolic_color_new_literal; ///
  GtkSymbolicColor* function(GtkSymbolicColor* color1, GtkSymbolicColor* color2, double factor) c_gtk_symbolic_color_new_mix; ///
  GtkSymbolicColor* function(const(char)* name) c_gtk_symbolic_color_new_name; ///
  GtkSymbolicColor* function(GtkSymbolicColor* color, double factor) c_gtk_symbolic_color_new_shade; ///
  GtkSymbolicColor* function(const(char)* themeClass, int id) c_gtk_symbolic_color_new_win32; ///
  GtkSymbolicColor* function(GtkSymbolicColor* color) c_gtk_symbolic_color_ref; ///
  bool function(GtkSymbolicColor* color, GtkStyleProperties* props, GdkRGBA* resolvedColor) c_gtk_symbolic_color_resolve; ///
  char* function(GtkSymbolicColor* color) c_gtk_symbolic_color_to_string; ///
  void function(GtkSymbolicColor* color) c_gtk_symbolic_color_unref; ///

  // Table
  GType function() c_gtk_table_get_type; ///
  GtkWidget* function(uint rows, uint columns, bool homogeneous) c_gtk_table_new; ///
  void function(GtkTable* table, GtkWidget* child, uint leftAttach, uint rightAttach, uint topAttach, uint bottomAttach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, uint xpadding, uint ypadding) c_gtk_table_attach; ///
  void function(GtkTable* table, GtkWidget* widget, uint leftAttach, uint rightAttach, uint topAttach, uint bottomAttach) c_gtk_table_attach_defaults; ///
  uint function(GtkTable* table, uint column) c_gtk_table_get_col_spacing; ///
  uint function(GtkTable* table) c_gtk_table_get_default_col_spacing; ///
  uint function(GtkTable* table) c_gtk_table_get_default_row_spacing; ///
  bool function(GtkTable* table) c_gtk_table_get_homogeneous; ///
  uint function(GtkTable* table, uint row) c_gtk_table_get_row_spacing; ///
  void function(GtkTable* table, uint* rows, uint* columns) c_gtk_table_get_size; ///
  void function(GtkTable* table, uint rows, uint columns) c_gtk_table_resize; ///
  void function(GtkTable* table, uint column, uint spacing) c_gtk_table_set_col_spacing; ///
  void function(GtkTable* table, uint spacing) c_gtk_table_set_col_spacings; ///
  void function(GtkTable* table, bool homogeneous) c_gtk_table_set_homogeneous; ///
  void function(GtkTable* table, uint row, uint spacing) c_gtk_table_set_row_spacing; ///
  void function(GtkTable* table, uint spacing) c_gtk_table_set_row_spacings; ///

  // TargetEntry
  GType function() c_gtk_target_entry_get_type; ///
  GtkTargetEntry* function(const(char)* target, uint flags, uint info) c_gtk_target_entry_new; ///
  GtkTargetEntry* function(GtkTargetEntry* data) c_gtk_target_entry_copy; ///
  void function(GtkTargetEntry* data) c_gtk_target_entry_free; ///

  // TargetList
  GType function() c_gtk_target_list_get_type; ///
  GtkTargetList* function(const(GtkTargetEntry)* targets, uint ntargets) c_gtk_target_list_new; ///
  void function(GtkTargetList* list, GdkAtom target, uint flags, uint info) c_gtk_target_list_add; ///
  void function(GtkTargetList* list, uint info, bool writable) c_gtk_target_list_add_image_targets; ///
  void function(GtkTargetList* list, uint info, bool deserializable, GtkTextBuffer* buffer) c_gtk_target_list_add_rich_text_targets; ///
  void function(GtkTargetList* list, const(GtkTargetEntry)* targets, uint ntargets) c_gtk_target_list_add_table; ///
  void function(GtkTargetList* list, uint info) c_gtk_target_list_add_text_targets; ///
  void function(GtkTargetList* list, uint info) c_gtk_target_list_add_uri_targets; ///
  bool function(GtkTargetList* list, GdkAtom target, uint* info) c_gtk_target_list_find; ///
  GtkTargetList* function(GtkTargetList* list) c_gtk_target_list_ref; ///
  void function(GtkTargetList* list, GdkAtom target) c_gtk_target_list_remove; ///
  void function(GtkTargetList* list) c_gtk_target_list_unref; ///

  // TearoffMenuItem
  GType function() c_gtk_tearoff_menu_item_get_type; ///
  GtkWidget* function() c_gtk_tearoff_menu_item_new; ///

  // TextAttributes
  GType function() c_gtk_text_attributes_get_type; ///
  GtkTextAttributes* function() c_gtk_text_attributes_new; ///
  GtkTextAttributes* function(GtkTextAttributes* src) c_gtk_text_attributes_copy; ///
  void function(GtkTextAttributes* src, GtkTextAttributes* dest) c_gtk_text_attributes_copy_values; ///
  GtkTextAttributes* function(GtkTextAttributes* values) c_gtk_text_attributes_ref; ///
  void function(GtkTextAttributes* values) c_gtk_text_attributes_unref; ///

  // TextBuffer
  GType function() c_gtk_text_buffer_get_type; ///
  GtkTextBuffer* function(GtkTextTagTable* table) c_gtk_text_buffer_new; ///
  void function(GtkTextBuffer* buffer, GtkTextMark* mark, const(GtkTextIter)* where) c_gtk_text_buffer_add_mark; ///
  void function(GtkTextBuffer* buffer, GtkClipboard* clipboard) c_gtk_text_buffer_add_selection_clipboard; ///
  void function(GtkTextBuffer* buffer, GtkTextTag* tag, const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_buffer_apply_tag; ///
  void function(GtkTextBuffer* buffer, const(char)* name, const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_buffer_apply_tag_by_name; ///
  bool function(GtkTextBuffer* buffer, GtkTextIter* iter, bool interactive, bool defaultEditable) c_gtk_text_buffer_backspace; ///
  void function(GtkTextBuffer* buffer) c_gtk_text_buffer_begin_user_action; ///
  void function(GtkTextBuffer* buffer, GtkClipboard* clipboard) c_gtk_text_buffer_copy_clipboard; ///
  GtkTextChildAnchor* function(GtkTextBuffer* buffer, GtkTextIter* iter) c_gtk_text_buffer_create_child_anchor; ///
  GtkTextMark* function(GtkTextBuffer* buffer, const(char)* markName, const(GtkTextIter)* where, bool leftGravity) c_gtk_text_buffer_create_mark; ///
  GtkTextTag* function(GtkTextBuffer* buffer, const(char)* tagName, const(char)* firstPropertyName,  ...) c_gtk_text_buffer_create_tag; ///
  void function(GtkTextBuffer* buffer, GtkClipboard* clipboard, bool defaultEditable) c_gtk_text_buffer_cut_clipboard; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_delete; ///
  bool function(GtkTextBuffer* buffer, GtkTextIter* startIter, GtkTextIter* endIter, bool defaultEditable) c_gtk_text_buffer_delete_interactive; ///
  void function(GtkTextBuffer* buffer, GtkTextMark* mark) c_gtk_text_buffer_delete_mark; ///
  void function(GtkTextBuffer* buffer, const(char)* name) c_gtk_text_buffer_delete_mark_by_name; ///
  bool function(GtkTextBuffer* buffer, bool interactive, bool defaultEditable) c_gtk_text_buffer_delete_selection; ///
  bool function(GtkTextBuffer* registerBuffer, GtkTextBuffer* contentBuffer, GdkAtom format, GtkTextIter* iter, const(ubyte)* data, size_t length, GError** _err) c_gtk_text_buffer_deserialize; ///
  bool function(GtkTextBuffer* buffer, GdkAtom format) c_gtk_text_buffer_deserialize_get_can_create_tags; ///
  void function(GtkTextBuffer* buffer, GdkAtom format, bool canCreateTags) c_gtk_text_buffer_deserialize_set_can_create_tags; ///
  void function(GtkTextBuffer* buffer) c_gtk_text_buffer_end_user_action; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_get_bounds; ///
  int function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_char_count; ///
  GtkTargetList* function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_copy_target_list; ///
  GdkAtom* function(GtkTextBuffer* buffer, int* nFormats) c_gtk_text_buffer_get_deserialize_formats; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter) c_gtk_text_buffer_get_end_iter; ///
  bool function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_has_selection; ///
  GtkTextMark* function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_insert; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, GtkTextChildAnchor* anchor) c_gtk_text_buffer_get_iter_at_child_anchor; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, int lineNumber) c_gtk_text_buffer_get_iter_at_line; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, int lineNumber, int byteIndex) c_gtk_text_buffer_get_iter_at_line_index; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, int lineNumber, int charOffset) c_gtk_text_buffer_get_iter_at_line_offset; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, GtkTextMark* mark) c_gtk_text_buffer_get_iter_at_mark; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, int charOffset) c_gtk_text_buffer_get_iter_at_offset; ///
  int function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_line_count; ///
  GtkTextMark* function(GtkTextBuffer* buffer, const(char)* name) c_gtk_text_buffer_get_mark; ///
  bool function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_modified; ///
  GtkTargetList* function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_paste_target_list; ///
  GtkTextMark* function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_selection_bound; ///
  bool function(GtkTextBuffer* buffer, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_get_selection_bounds; ///
  GdkAtom* function(GtkTextBuffer* buffer, int* nFormats) c_gtk_text_buffer_get_serialize_formats; ///
  char* function(GtkTextBuffer* buffer, const(GtkTextIter)* start, const(GtkTextIter)* end, bool includeHiddenChars) c_gtk_text_buffer_get_slice; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter) c_gtk_text_buffer_get_start_iter; ///
  GtkTextTagTable* function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_tag_table; ///
  char* function(GtkTextBuffer* buffer, const(GtkTextIter)* start, const(GtkTextIter)* end, bool includeHiddenChars) c_gtk_text_buffer_get_text; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, const(char)* text, int len) c_gtk_text_buffer_insert; ///
  void function(GtkTextBuffer* buffer, const(char)* text, int len) c_gtk_text_buffer_insert_at_cursor; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, GtkTextChildAnchor* anchor) c_gtk_text_buffer_insert_child_anchor; ///
  bool function(GtkTextBuffer* buffer, GtkTextIter* iter, const(char)* text, int len, bool defaultEditable) c_gtk_text_buffer_insert_interactive; ///
  bool function(GtkTextBuffer* buffer, const(char)* text, int len, bool defaultEditable) c_gtk_text_buffer_insert_interactive_at_cursor; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, const(char)* markup, int len) c_gtk_text_buffer_insert_markup; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, PixbufC* pixbuf) c_gtk_text_buffer_insert_pixbuf; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_buffer_insert_range; ///
  bool function(GtkTextBuffer* buffer, GtkTextIter* iter, const(GtkTextIter)* start, const(GtkTextIter)* end, bool defaultEditable) c_gtk_text_buffer_insert_range_interactive; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, const(char)* text, int len, GtkTextTag* firstTag,  ...) c_gtk_text_buffer_insert_with_tags; ///
  void function(GtkTextBuffer* buffer, GtkTextIter* iter, const(char)* text, int len, const(char)* firstTagName,  ...) c_gtk_text_buffer_insert_with_tags_by_name; ///
  void function(GtkTextBuffer* buffer, GtkTextMark* mark, const(GtkTextIter)* where) c_gtk_text_buffer_move_mark; ///
  void function(GtkTextBuffer* buffer, const(char)* name, const(GtkTextIter)* where) c_gtk_text_buffer_move_mark_by_name; ///
  void function(GtkTextBuffer* buffer, GtkClipboard* clipboard, GtkTextIter* overrideLocation, bool defaultEditable) c_gtk_text_buffer_paste_clipboard; ///
  void function(GtkTextBuffer* buffer, const(GtkTextIter)* where) c_gtk_text_buffer_place_cursor; ///
  GdkAtom function(GtkTextBuffer* buffer, const(char)* mimeType, GtkTextBufferDeserializeFunc function_, void* userData, GDestroyNotify userDataDestroy) c_gtk_text_buffer_register_deserialize_format; ///
  GdkAtom function(GtkTextBuffer* buffer, const(char)* tagsetName) c_gtk_text_buffer_register_deserialize_tagset; ///
  GdkAtom function(GtkTextBuffer* buffer, const(char)* mimeType, GtkTextBufferSerializeFunc function_, void* userData, GDestroyNotify userDataDestroy) c_gtk_text_buffer_register_serialize_format; ///
  GdkAtom function(GtkTextBuffer* buffer, const(char)* tagsetName) c_gtk_text_buffer_register_serialize_tagset; ///
  void function(GtkTextBuffer* buffer, const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_buffer_remove_all_tags; ///
  void function(GtkTextBuffer* buffer, GtkClipboard* clipboard) c_gtk_text_buffer_remove_selection_clipboard; ///
  void function(GtkTextBuffer* buffer, GtkTextTag* tag, const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_buffer_remove_tag; ///
  void function(GtkTextBuffer* buffer, const(char)* name, const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_buffer_remove_tag_by_name; ///
  void function(GtkTextBuffer* buffer, const(GtkTextIter)* ins, const(GtkTextIter)* bound) c_gtk_text_buffer_select_range; ///
  ubyte* function(GtkTextBuffer* registerBuffer, GtkTextBuffer* contentBuffer, GdkAtom format, const(GtkTextIter)* start, const(GtkTextIter)* end, size_t* length) c_gtk_text_buffer_serialize; ///
  void function(GtkTextBuffer* buffer, bool setting) c_gtk_text_buffer_set_modified; ///
  void function(GtkTextBuffer* buffer, const(char)* text, int len) c_gtk_text_buffer_set_text; ///
  void function(GtkTextBuffer* buffer, GdkAtom format) c_gtk_text_buffer_unregister_deserialize_format; ///
  void function(GtkTextBuffer* buffer, GdkAtom format) c_gtk_text_buffer_unregister_serialize_format; ///

  // TextCellAccessible
  GType function() c_gtk_text_cell_accessible_get_type; ///

  // TextChildAnchor
  GType function() c_gtk_text_child_anchor_get_type; ///
  GtkTextChildAnchor* function() c_gtk_text_child_anchor_new; ///
  bool function(GtkTextChildAnchor* anchor) c_gtk_text_child_anchor_get_deleted; ///
  GList* function(GtkTextChildAnchor* anchor) c_gtk_text_child_anchor_get_widgets; ///

  // TextIter
  GType function() c_gtk_text_iter_get_type; ///
  void function(GtkTextIter* iter, const(GtkTextIter)* other) c_gtk_text_iter_assign; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_backward_char; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_chars; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_backward_cursor_position; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_cursor_positions; ///
  bool function(GtkTextIter* iter, GtkTextCharPredicate pred, void* userData, const(GtkTextIter)* limit) c_gtk_text_iter_backward_find_char; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_backward_line; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_lines; ///
  bool function(const(GtkTextIter)* iter, const(char)* str, GtkTextSearchFlags flags, GtkTextIter* matchStart, GtkTextIter* matchEnd, const(GtkTextIter)* limit) c_gtk_text_iter_backward_search; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_backward_sentence_start; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_sentence_starts; ///
  bool function(GtkTextIter* iter, GtkTextTag* tag) c_gtk_text_iter_backward_to_tag_toggle; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_backward_visible_cursor_position; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_visible_cursor_positions; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_backward_visible_line; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_visible_lines; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_backward_visible_word_start; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_visible_word_starts; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_backward_word_start; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_word_starts; ///
  bool function(const(GtkTextIter)* iter, GtkTextTag* tag) c_gtk_text_iter_begins_tag; ///
  bool function(const(GtkTextIter)* iter, bool defaultEditability) c_gtk_text_iter_can_insert; ///
  int function(const(GtkTextIter)* lhs, const(GtkTextIter)* rhs) c_gtk_text_iter_compare; ///
  GtkTextIter* function(const(GtkTextIter)* iter) c_gtk_text_iter_copy; ///
  bool function(const(GtkTextIter)* iter, bool defaultSetting) c_gtk_text_iter_editable; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_ends_line; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_ends_sentence; ///
  bool function(const(GtkTextIter)* iter, GtkTextTag* tag) c_gtk_text_iter_ends_tag; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_ends_word; ///
  bool function(const(GtkTextIter)* lhs, const(GtkTextIter)* rhs) c_gtk_text_iter_equal; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_forward_char; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_chars; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_forward_cursor_position; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_cursor_positions; ///
  bool function(GtkTextIter* iter, GtkTextCharPredicate pred, void* userData, const(GtkTextIter)* limit) c_gtk_text_iter_forward_find_char; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_forward_line; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_lines; ///
  bool function(const(GtkTextIter)* iter, const(char)* str, GtkTextSearchFlags flags, GtkTextIter* matchStart, GtkTextIter* matchEnd, const(GtkTextIter)* limit) c_gtk_text_iter_forward_search; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_forward_sentence_end; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_sentence_ends; ///
  void function(GtkTextIter* iter) c_gtk_text_iter_forward_to_end; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_forward_to_line_end; ///
  bool function(GtkTextIter* iter, GtkTextTag* tag) c_gtk_text_iter_forward_to_tag_toggle; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_forward_visible_cursor_position; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_visible_cursor_positions; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_forward_visible_line; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_visible_lines; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_forward_visible_word_end; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_visible_word_ends; ///
  bool function(GtkTextIter* iter) c_gtk_text_iter_forward_word_end; ///
  bool function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_word_ends; ///
  void function(GtkTextIter* iter) c_gtk_text_iter_free; ///
  bool function(const(GtkTextIter)* iter, GtkTextAttributes* values) c_gtk_text_iter_get_attributes; ///
  GtkTextBuffer* function(const(GtkTextIter)* iter) c_gtk_text_iter_get_buffer; ///
  int function(const(GtkTextIter)* iter) c_gtk_text_iter_get_bytes_in_line; ///
  dchar function(const(GtkTextIter)* iter) c_gtk_text_iter_get_char; ///
  int function(const(GtkTextIter)* iter) c_gtk_text_iter_get_chars_in_line; ///
  GtkTextChildAnchor* function(const(GtkTextIter)* iter) c_gtk_text_iter_get_child_anchor; ///
  PangoLanguage* function(const(GtkTextIter)* iter) c_gtk_text_iter_get_language; ///
  int function(const(GtkTextIter)* iter) c_gtk_text_iter_get_line; ///
  int function(const(GtkTextIter)* iter) c_gtk_text_iter_get_line_index; ///
  int function(const(GtkTextIter)* iter) c_gtk_text_iter_get_line_offset; ///
  GSList* function(const(GtkTextIter)* iter) c_gtk_text_iter_get_marks; ///
  int function(const(GtkTextIter)* iter) c_gtk_text_iter_get_offset; ///
  PixbufC* function(const(GtkTextIter)* iter) c_gtk_text_iter_get_pixbuf; ///
  char* function(const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_iter_get_slice; ///
  GSList* function(const(GtkTextIter)* iter) c_gtk_text_iter_get_tags; ///
  char* function(const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_iter_get_text; ///
  GSList* function(const(GtkTextIter)* iter, bool toggledOn) c_gtk_text_iter_get_toggled_tags; ///
  int function(const(GtkTextIter)* iter) c_gtk_text_iter_get_visible_line_index; ///
  int function(const(GtkTextIter)* iter) c_gtk_text_iter_get_visible_line_offset; ///
  char* function(const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_iter_get_visible_slice; ///
  char* function(const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_iter_get_visible_text; ///
  bool function(const(GtkTextIter)* iter, GtkTextTag* tag) c_gtk_text_iter_has_tag; ///
  bool function(const(GtkTextIter)* iter, const(GtkTextIter)* start, const(GtkTextIter)* end) c_gtk_text_iter_in_range; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_inside_sentence; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_inside_word; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_is_cursor_position; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_is_end; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_is_start; ///
  void function(GtkTextIter* first, GtkTextIter* second) c_gtk_text_iter_order; ///
  void function(GtkTextIter* iter, int lineNumber) c_gtk_text_iter_set_line; ///
  void function(GtkTextIter* iter, int byteOnLine) c_gtk_text_iter_set_line_index; ///
  void function(GtkTextIter* iter, int charOnLine) c_gtk_text_iter_set_line_offset; ///
  void function(GtkTextIter* iter, int charOffset) c_gtk_text_iter_set_offset; ///
  void function(GtkTextIter* iter, int byteOnLine) c_gtk_text_iter_set_visible_line_index; ///
  void function(GtkTextIter* iter, int charOnLine) c_gtk_text_iter_set_visible_line_offset; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_starts_line; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_starts_sentence; ///
  bool function(const(GtkTextIter)* iter, GtkTextTag* tag) c_gtk_text_iter_starts_tag; ///
  bool function(const(GtkTextIter)* iter) c_gtk_text_iter_starts_word; ///
  bool function(const(GtkTextIter)* iter, GtkTextTag* tag) c_gtk_text_iter_toggles_tag; ///

  // TextMark
  GType function() c_gtk_text_mark_get_type; ///
  GtkTextMark* function(const(char)* name, bool leftGravity) c_gtk_text_mark_new; ///
  GtkTextBuffer* function(GtkTextMark* mark) c_gtk_text_mark_get_buffer; ///
  bool function(GtkTextMark* mark) c_gtk_text_mark_get_deleted; ///
  bool function(GtkTextMark* mark) c_gtk_text_mark_get_left_gravity; ///
  const(char)* function(GtkTextMark* mark) c_gtk_text_mark_get_name; ///
  bool function(GtkTextMark* mark) c_gtk_text_mark_get_visible; ///
  void function(GtkTextMark* mark, bool setting) c_gtk_text_mark_set_visible; ///

  // TextTag
  GType function() c_gtk_text_tag_get_type; ///
  GtkTextTag* function(const(char)* name) c_gtk_text_tag_new; ///
  void function(GtkTextTag* tag, bool sizeChanged) c_gtk_text_tag_changed; ///
  bool function(GtkTextTag* tag, ObjectC* eventObject, GdkEvent* event, const(GtkTextIter)* iter) c_gtk_text_tag_event; ///
  int function(GtkTextTag* tag) c_gtk_text_tag_get_priority; ///
  void function(GtkTextTag* tag, int priority) c_gtk_text_tag_set_priority; ///

  // TextTagTable
  GType function() c_gtk_text_tag_table_get_type; ///
  GtkTextTagTable* function() c_gtk_text_tag_table_new; ///
  bool function(GtkTextTagTable* table, GtkTextTag* tag) c_gtk_text_tag_table_add; ///
  void function(GtkTextTagTable* table, GtkTextTagTableForeach func, void* data) c_gtk_text_tag_table_foreach; ///
  int function(GtkTextTagTable* table) c_gtk_text_tag_table_get_size; ///
  GtkTextTag* function(GtkTextTagTable* table, const(char)* name) c_gtk_text_tag_table_lookup; ///
  void function(GtkTextTagTable* table, GtkTextTag* tag) c_gtk_text_tag_table_remove; ///

  // TextView
  GType function() c_gtk_text_view_get_type; ///
  GtkWidget* function() c_gtk_text_view_new; ///
  GtkWidget* function(GtkTextBuffer* buffer) c_gtk_text_view_new_with_buffer; ///
  void function(GtkTextView* textView, GtkWidget* child, GtkTextChildAnchor* anchor) c_gtk_text_view_add_child_at_anchor; ///
  void function(GtkTextView* textView, GtkWidget* child, GtkTextWindowType whichWindow, int xpos, int ypos) c_gtk_text_view_add_child_in_window; ///
  bool function(GtkTextView* textView, GtkTextIter* iter) c_gtk_text_view_backward_display_line; ///
  bool function(GtkTextView* textView, GtkTextIter* iter) c_gtk_text_view_backward_display_line_start; ///
  void function(GtkTextView* textView, GtkTextWindowType win, int bufferX, int bufferY, int* windowX, int* windowY) c_gtk_text_view_buffer_to_window_coords; ///
  bool function(GtkTextView* textView, GtkTextIter* iter) c_gtk_text_view_forward_display_line; ///
  bool function(GtkTextView* textView, GtkTextIter* iter) c_gtk_text_view_forward_display_line_end; ///
  bool function(GtkTextView* textView) c_gtk_text_view_get_accepts_tab; ///
  int function(GtkTextView* textView, GtkTextWindowType type) c_gtk_text_view_get_border_window_size; ///
  int function(GtkTextView* textView) c_gtk_text_view_get_bottom_margin; ///
  GtkTextBuffer* function(GtkTextView* textView) c_gtk_text_view_get_buffer; ///
  void function(GtkTextView* textView, const(GtkTextIter)* iter, GdkRectangle* strong, GdkRectangle* weak) c_gtk_text_view_get_cursor_locations; ///
  bool function(GtkTextView* textView) c_gtk_text_view_get_cursor_visible; ///
  GtkTextAttributes* function(GtkTextView* textView) c_gtk_text_view_get_default_attributes; ///
  bool function(GtkTextView* textView) c_gtk_text_view_get_editable; ///
  GtkAdjustment* function(GtkTextView* textView) c_gtk_text_view_get_hadjustment; ///
  int function(GtkTextView* textView) c_gtk_text_view_get_indent; ///
  GtkInputHints function(GtkTextView* textView) c_gtk_text_view_get_input_hints; ///
  GtkInputPurpose function(GtkTextView* textView) c_gtk_text_view_get_input_purpose; ///
  bool function(GtkTextView* textView, GtkTextIter* iter, int x, int y) c_gtk_text_view_get_iter_at_location; ///
  bool function(GtkTextView* textView, GtkTextIter* iter, int* trailing, int x, int y) c_gtk_text_view_get_iter_at_position; ///
  void function(GtkTextView* textView, const(GtkTextIter)* iter, GdkRectangle* location) c_gtk_text_view_get_iter_location; ///
  GtkJustification function(GtkTextView* textView) c_gtk_text_view_get_justification; ///
  int function(GtkTextView* textView) c_gtk_text_view_get_left_margin; ///
  void function(GtkTextView* textView, GtkTextIter* targetIter, int y, int* lineTop) c_gtk_text_view_get_line_at_y; ///
  void function(GtkTextView* textView, const(GtkTextIter)* iter, int* y, int* height) c_gtk_text_view_get_line_yrange; ///
  bool function(GtkTextView* textView) c_gtk_text_view_get_monospace; ///
  bool function(GtkTextView* textView) c_gtk_text_view_get_overwrite; ///
  int function(GtkTextView* textView) c_gtk_text_view_get_pixels_above_lines; ///
  int function(GtkTextView* textView) c_gtk_text_view_get_pixels_below_lines; ///
  int function(GtkTextView* textView) c_gtk_text_view_get_pixels_inside_wrap; ///
  int function(GtkTextView* textView) c_gtk_text_view_get_right_margin; ///
  PangoTabArray* function(GtkTextView* textView) c_gtk_text_view_get_tabs; ///
  int function(GtkTextView* textView) c_gtk_text_view_get_top_margin; ///
  GtkAdjustment* function(GtkTextView* textView) c_gtk_text_view_get_vadjustment; ///
  void function(GtkTextView* textView, GdkRectangle* visibleRect) c_gtk_text_view_get_visible_rect; ///
  GdkWindow* function(GtkTextView* textView, GtkTextWindowType win) c_gtk_text_view_get_window; ///
  GtkTextWindowType function(GtkTextView* textView, GdkWindow* window) c_gtk_text_view_get_window_type; ///
  GtkWrapMode function(GtkTextView* textView) c_gtk_text_view_get_wrap_mode; ///
  bool function(GtkTextView* textView, GdkEventKey* event) c_gtk_text_view_im_context_filter_keypress; ///
  void function(GtkTextView* textView, GtkWidget* child, int xpos, int ypos) c_gtk_text_view_move_child; ///
  bool function(GtkTextView* textView, GtkTextMark* mark) c_gtk_text_view_move_mark_onscreen; ///
  bool function(GtkTextView* textView, GtkTextIter* iter, int count) c_gtk_text_view_move_visually; ///
  bool function(GtkTextView* textView) c_gtk_text_view_place_cursor_onscreen; ///
  void function(GtkTextView* textView) c_gtk_text_view_reset_cursor_blink; ///
  void function(GtkTextView* textView) c_gtk_text_view_reset_im_context; ///
  void function(GtkTextView* textView, GtkTextMark* mark) c_gtk_text_view_scroll_mark_onscreen; ///
  bool function(GtkTextView* textView, GtkTextIter* iter, double withinMargin, bool useAlign, double xalign, double yalign) c_gtk_text_view_scroll_to_iter; ///
  void function(GtkTextView* textView, GtkTextMark* mark, double withinMargin, bool useAlign, double xalign, double yalign) c_gtk_text_view_scroll_to_mark; ///
  void function(GtkTextView* textView, bool acceptsTab) c_gtk_text_view_set_accepts_tab; ///
  void function(GtkTextView* textView, GtkTextWindowType type, int size) c_gtk_text_view_set_border_window_size; ///
  void function(GtkTextView* textView, int bottomMargin) c_gtk_text_view_set_bottom_margin; ///
  void function(GtkTextView* textView, GtkTextBuffer* buffer) c_gtk_text_view_set_buffer; ///
  void function(GtkTextView* textView, bool setting) c_gtk_text_view_set_cursor_visible; ///
  void function(GtkTextView* textView, bool setting) c_gtk_text_view_set_editable; ///
  void function(GtkTextView* textView, int indent) c_gtk_text_view_set_indent; ///
  void function(GtkTextView* textView, GtkInputHints hints) c_gtk_text_view_set_input_hints; ///
  void function(GtkTextView* textView, GtkInputPurpose purpose) c_gtk_text_view_set_input_purpose; ///
  void function(GtkTextView* textView, GtkJustification justification) c_gtk_text_view_set_justification; ///
  void function(GtkTextView* textView, int leftMargin) c_gtk_text_view_set_left_margin; ///
  void function(GtkTextView* textView, bool monospace) c_gtk_text_view_set_monospace; ///
  void function(GtkTextView* textView, bool overwrite) c_gtk_text_view_set_overwrite; ///
  void function(GtkTextView* textView, int pixelsAboveLines) c_gtk_text_view_set_pixels_above_lines; ///
  void function(GtkTextView* textView, int pixelsBelowLines) c_gtk_text_view_set_pixels_below_lines; ///
  void function(GtkTextView* textView, int pixelsInsideWrap) c_gtk_text_view_set_pixels_inside_wrap; ///
  void function(GtkTextView* textView, int rightMargin) c_gtk_text_view_set_right_margin; ///
  void function(GtkTextView* textView, PangoTabArray* tabs) c_gtk_text_view_set_tabs; ///
  void function(GtkTextView* textView, int topMargin) c_gtk_text_view_set_top_margin; ///
  void function(GtkTextView* textView, GtkWrapMode wrapMode) c_gtk_text_view_set_wrap_mode; ///
  bool function(GtkTextView* textView, const(GtkTextIter)* iter) c_gtk_text_view_starts_display_line; ///
  void function(GtkTextView* textView, GtkTextWindowType win, int windowX, int windowY, int* bufferX, int* bufferY) c_gtk_text_view_window_to_buffer_coords; ///

  // TextViewAccessible
  GType function() c_gtk_text_view_accessible_get_type; ///

  // ThemingEngine
  GType function() c_gtk_theming_engine_get_type; ///
  GtkThemingEngine* function(const(char)* name) c_gtk_theming_engine_load; ///
  void function(const(char)* nameSpace, GtkStylePropertyParser parseFunc, GParamSpec* pspec) c_gtk_theming_engine_register_property; ///
  void function(GtkThemingEngine* engine, GtkStateFlags state,  ...) c_gtk_theming_engine_get; ///
  void function(GtkThemingEngine* engine, GtkStateFlags state, GdkRGBA* color) c_gtk_theming_engine_get_background_color; ///
  void function(GtkThemingEngine* engine, GtkStateFlags state, GtkBorder* border) c_gtk_theming_engine_get_border; ///
  void function(GtkThemingEngine* engine, GtkStateFlags state, GdkRGBA* color) c_gtk_theming_engine_get_border_color; ///
  void function(GtkThemingEngine* engine, GtkStateFlags state, GdkRGBA* color) c_gtk_theming_engine_get_color; ///
  GtkTextDirection function(GtkThemingEngine* engine) c_gtk_theming_engine_get_direction; ///
  const(PangoFontDescription)* function(GtkThemingEngine* engine, GtkStateFlags state) c_gtk_theming_engine_get_font; ///
  GtkJunctionSides function(GtkThemingEngine* engine) c_gtk_theming_engine_get_junction_sides; ///
  void function(GtkThemingEngine* engine, GtkStateFlags state, GtkBorder* margin) c_gtk_theming_engine_get_margin; ///
  void function(GtkThemingEngine* engine, GtkStateFlags state, GtkBorder* padding) c_gtk_theming_engine_get_padding; ///
  const(GtkWidgetPath)* function(GtkThemingEngine* engine) c_gtk_theming_engine_get_path; ///
  void function(GtkThemingEngine* engine, const(char)* property, GtkStateFlags state, GValue* value) c_gtk_theming_engine_get_property; ///
  GdkScreen* function(GtkThemingEngine* engine) c_gtk_theming_engine_get_screen; ///
  GtkStateFlags function(GtkThemingEngine* engine) c_gtk_theming_engine_get_state; ///
  void function(GtkThemingEngine* engine,  ...) c_gtk_theming_engine_get_style; ///
  void function(GtkThemingEngine* engine, const(char)* propertyName, GValue* value) c_gtk_theming_engine_get_style_property; ///
  void function(GtkThemingEngine* engine, void* args) c_gtk_theming_engine_get_style_valist; ///
  void function(GtkThemingEngine* engine, GtkStateFlags state, void* args) c_gtk_theming_engine_get_valist; ///
  bool function(GtkThemingEngine* engine, const(char)* styleClass) c_gtk_theming_engine_has_class; ///
  bool function(GtkThemingEngine* engine, const(char)* styleRegion, GtkRegionFlags* flags) c_gtk_theming_engine_has_region; ///
  bool function(GtkThemingEngine* engine, const(char)* colorName, GdkRGBA* color) c_gtk_theming_engine_lookup_color; ///
  bool function(GtkThemingEngine* engine, GtkStateType state, double* progress) c_gtk_theming_engine_state_is_running; ///

  // ToggleAction
  GType function() c_gtk_toggle_action_get_type; ///
  GtkToggleAction* function(const(char)* name, const(char)* label, const(char)* tooltip, const(char)* stockId) c_gtk_toggle_action_new; ///
  bool function(GtkToggleAction* action) c_gtk_toggle_action_get_active; ///
  bool function(GtkToggleAction* action) c_gtk_toggle_action_get_draw_as_radio; ///
  void function(GtkToggleAction* action, bool isActive) c_gtk_toggle_action_set_active; ///
  void function(GtkToggleAction* action, bool drawAsRadio) c_gtk_toggle_action_set_draw_as_radio; ///
  void function(GtkToggleAction* action) c_gtk_toggle_action_toggled; ///

  // ToggleButton
  GType function() c_gtk_toggle_button_get_type; ///
  GtkWidget* function() c_gtk_toggle_button_new; ///
  GtkWidget* function(const(char)* label) c_gtk_toggle_button_new_with_label; ///
  GtkWidget* function(const(char)* label) c_gtk_toggle_button_new_with_mnemonic; ///
  bool function(GtkToggleButton* toggleButton) c_gtk_toggle_button_get_active; ///
  bool function(GtkToggleButton* toggleButton) c_gtk_toggle_button_get_inconsistent; ///
  bool function(GtkToggleButton* toggleButton) c_gtk_toggle_button_get_mode; ///
  void function(GtkToggleButton* toggleButton, bool isActive) c_gtk_toggle_button_set_active; ///
  void function(GtkToggleButton* toggleButton, bool setting) c_gtk_toggle_button_set_inconsistent; ///
  void function(GtkToggleButton* toggleButton, bool drawIndicator) c_gtk_toggle_button_set_mode; ///
  void function(GtkToggleButton* toggleButton) c_gtk_toggle_button_toggled; ///

  // ToggleButtonAccessible
  GType function() c_gtk_toggle_button_accessible_get_type; ///

  // ToggleToolButton
  GType function() c_gtk_toggle_tool_button_get_type; ///
  GtkToolItem* function() c_gtk_toggle_tool_button_new; ///
  GtkToolItem* function(const(char)* stockId) c_gtk_toggle_tool_button_new_from_stock; ///
  bool function(GtkToggleToolButton* button) c_gtk_toggle_tool_button_get_active; ///
  void function(GtkToggleToolButton* button, bool isActive) c_gtk_toggle_tool_button_set_active; ///

  // ToolButton
  GType function() c_gtk_tool_button_get_type; ///
  GtkToolItem* function(GtkWidget* iconWidget, const(char)* label) c_gtk_tool_button_new; ///
  GtkToolItem* function(const(char)* stockId) c_gtk_tool_button_new_from_stock; ///
  const(char)* function(GtkToolButton* button) c_gtk_tool_button_get_icon_name; ///
  GtkWidget* function(GtkToolButton* button) c_gtk_tool_button_get_icon_widget; ///
  const(char)* function(GtkToolButton* button) c_gtk_tool_button_get_label; ///
  GtkWidget* function(GtkToolButton* button) c_gtk_tool_button_get_label_widget; ///
  const(char)* function(GtkToolButton* button) c_gtk_tool_button_get_stock_id; ///
  bool function(GtkToolButton* button) c_gtk_tool_button_get_use_underline; ///
  void function(GtkToolButton* button, const(char)* iconName) c_gtk_tool_button_set_icon_name; ///
  void function(GtkToolButton* button, GtkWidget* iconWidget) c_gtk_tool_button_set_icon_widget; ///
  void function(GtkToolButton* button, const(char)* label) c_gtk_tool_button_set_label; ///
  void function(GtkToolButton* button, GtkWidget* labelWidget) c_gtk_tool_button_set_label_widget; ///
  void function(GtkToolButton* button, const(char)* stockId) c_gtk_tool_button_set_stock_id; ///
  void function(GtkToolButton* button, bool useUnderline) c_gtk_tool_button_set_use_underline; ///

  // ToolItem
  GType function() c_gtk_tool_item_get_type; ///
  GtkToolItem* function() c_gtk_tool_item_new; ///
  PangoEllipsizeMode function(GtkToolItem* toolItem) c_gtk_tool_item_get_ellipsize_mode; ///
  bool function(GtkToolItem* toolItem) c_gtk_tool_item_get_expand; ///
  bool function(GtkToolItem* toolItem) c_gtk_tool_item_get_homogeneous; ///
  GtkIconSize function(GtkToolItem* toolItem) c_gtk_tool_item_get_icon_size; ///
  bool function(GtkToolItem* toolItem) c_gtk_tool_item_get_is_important; ///
  GtkOrientation function(GtkToolItem* toolItem) c_gtk_tool_item_get_orientation; ///
  GtkWidget* function(GtkToolItem* toolItem, const(char)* menuItemId) c_gtk_tool_item_get_proxy_menu_item; ///
  GtkReliefStyle function(GtkToolItem* toolItem) c_gtk_tool_item_get_relief_style; ///
  float function(GtkToolItem* toolItem) c_gtk_tool_item_get_text_alignment; ///
  GtkOrientation function(GtkToolItem* toolItem) c_gtk_tool_item_get_text_orientation; ///
  GtkSizeGroup* function(GtkToolItem* toolItem) c_gtk_tool_item_get_text_size_group; ///
  GtkToolbarStyle function(GtkToolItem* toolItem) c_gtk_tool_item_get_toolbar_style; ///
  bool function(GtkToolItem* toolItem) c_gtk_tool_item_get_use_drag_window; ///
  bool function(GtkToolItem* toolItem) c_gtk_tool_item_get_visible_horizontal; ///
  bool function(GtkToolItem* toolItem) c_gtk_tool_item_get_visible_vertical; ///
  void function(GtkToolItem* toolItem) c_gtk_tool_item_rebuild_menu; ///
  GtkWidget* function(GtkToolItem* toolItem) c_gtk_tool_item_retrieve_proxy_menu_item; ///
  void function(GtkToolItem* toolItem, bool expand) c_gtk_tool_item_set_expand; ///
  void function(GtkToolItem* toolItem, bool homogeneous) c_gtk_tool_item_set_homogeneous; ///
  void function(GtkToolItem* toolItem, bool isImportant) c_gtk_tool_item_set_is_important; ///
  void function(GtkToolItem* toolItem, const(char)* menuItemId, GtkWidget* menuItem) c_gtk_tool_item_set_proxy_menu_item; ///
  void function(GtkToolItem* toolItem, const(char)* markup) c_gtk_tool_item_set_tooltip_markup; ///
  void function(GtkToolItem* toolItem, const(char)* text) c_gtk_tool_item_set_tooltip_text; ///
  void function(GtkToolItem* toolItem, bool useDragWindow) c_gtk_tool_item_set_use_drag_window; ///
  void function(GtkToolItem* toolItem, bool visibleHorizontal) c_gtk_tool_item_set_visible_horizontal; ///
  void function(GtkToolItem* toolItem, bool visibleVertical) c_gtk_tool_item_set_visible_vertical; ///
  void function(GtkToolItem* toolItem) c_gtk_tool_item_toolbar_reconfigured; ///

  // ToolItemGroup
  GType function() c_gtk_tool_item_group_get_type; ///
  GtkWidget* function(const(char)* label) c_gtk_tool_item_group_new; ///
  bool function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_collapsed; ///
  GtkToolItem* function(GtkToolItemGroup* group, int x, int y) c_gtk_tool_item_group_get_drop_item; ///
  PangoEllipsizeMode function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_ellipsize; ///
  GtkReliefStyle function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_header_relief; ///
  int function(GtkToolItemGroup* group, GtkToolItem* item) c_gtk_tool_item_group_get_item_position; ///
  const(char)* function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_label; ///
  GtkWidget* function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_label_widget; ///
  uint function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_n_items; ///
  GtkToolItem* function(GtkToolItemGroup* group, uint index) c_gtk_tool_item_group_get_nth_item; ///
  void function(GtkToolItemGroup* group, GtkToolItem* item, int position) c_gtk_tool_item_group_insert; ///
  void function(GtkToolItemGroup* group, bool collapsed) c_gtk_tool_item_group_set_collapsed; ///
  void function(GtkToolItemGroup* group, PangoEllipsizeMode ellipsize) c_gtk_tool_item_group_set_ellipsize; ///
  void function(GtkToolItemGroup* group, GtkReliefStyle style) c_gtk_tool_item_group_set_header_relief; ///
  void function(GtkToolItemGroup* group, GtkToolItem* item, int position) c_gtk_tool_item_group_set_item_position; ///
  void function(GtkToolItemGroup* group, const(char)* label) c_gtk_tool_item_group_set_label; ///
  void function(GtkToolItemGroup* group, GtkWidget* labelWidget) c_gtk_tool_item_group_set_label_widget; ///

  // ToolPalette
  GType function() c_gtk_tool_palette_get_type; ///
  GtkWidget* function() c_gtk_tool_palette_new; ///
  const(GtkTargetEntry)* function() c_gtk_tool_palette_get_drag_target_group; ///
  const(GtkTargetEntry)* function() c_gtk_tool_palette_get_drag_target_item; ///
  void function(GtkToolPalette* palette, GtkWidget* widget, GtkDestDefaults flags, GtkToolPaletteDragTargets targets, GdkDragAction actions) c_gtk_tool_palette_add_drag_dest; ///
  GtkWidget* function(GtkToolPalette* palette, const(GtkSelectionData)* selection) c_gtk_tool_palette_get_drag_item; ///
  GtkToolItemGroup* function(GtkToolPalette* palette, int x, int y) c_gtk_tool_palette_get_drop_group; ///
  GtkToolItem* function(GtkToolPalette* palette, int x, int y) c_gtk_tool_palette_get_drop_item; ///
  bool function(GtkToolPalette* palette, GtkToolItemGroup* group) c_gtk_tool_palette_get_exclusive; ///
  bool function(GtkToolPalette* palette, GtkToolItemGroup* group) c_gtk_tool_palette_get_expand; ///
  int function(GtkToolPalette* palette, GtkToolItemGroup* group) c_gtk_tool_palette_get_group_position; ///
  GtkAdjustment* function(GtkToolPalette* palette) c_gtk_tool_palette_get_hadjustment; ///
  GtkIconSize function(GtkToolPalette* palette) c_gtk_tool_palette_get_icon_size; ///
  GtkToolbarStyle function(GtkToolPalette* palette) c_gtk_tool_palette_get_style; ///
  GtkAdjustment* function(GtkToolPalette* palette) c_gtk_tool_palette_get_vadjustment; ///
  void function(GtkToolPalette* palette, GtkToolPaletteDragTargets targets) c_gtk_tool_palette_set_drag_source; ///
  void function(GtkToolPalette* palette, GtkToolItemGroup* group, bool exclusive) c_gtk_tool_palette_set_exclusive; ///
  void function(GtkToolPalette* palette, GtkToolItemGroup* group, bool expand) c_gtk_tool_palette_set_expand; ///
  void function(GtkToolPalette* palette, GtkToolItemGroup* group, int position) c_gtk_tool_palette_set_group_position; ///
  void function(GtkToolPalette* palette, GtkIconSize iconSize) c_gtk_tool_palette_set_icon_size; ///
  void function(GtkToolPalette* palette, GtkToolbarStyle style) c_gtk_tool_palette_set_style; ///
  void function(GtkToolPalette* palette) c_gtk_tool_palette_unset_icon_size; ///
  void function(GtkToolPalette* palette) c_gtk_tool_palette_unset_style; ///

  // ToolShell
  GType function() c_gtk_tool_shell_get_type; ///
  PangoEllipsizeMode function(GtkToolShell* shell) c_gtk_tool_shell_get_ellipsize_mode; ///
  GtkIconSize function(GtkToolShell* shell) c_gtk_tool_shell_get_icon_size; ///
  GtkOrientation function(GtkToolShell* shell) c_gtk_tool_shell_get_orientation; ///
  GtkReliefStyle function(GtkToolShell* shell) c_gtk_tool_shell_get_relief_style; ///
  GtkToolbarStyle function(GtkToolShell* shell) c_gtk_tool_shell_get_style; ///
  float function(GtkToolShell* shell) c_gtk_tool_shell_get_text_alignment; ///
  GtkOrientation function(GtkToolShell* shell) c_gtk_tool_shell_get_text_orientation; ///
  GtkSizeGroup* function(GtkToolShell* shell) c_gtk_tool_shell_get_text_size_group; ///
  void function(GtkToolShell* shell) c_gtk_tool_shell_rebuild_menu; ///

  // Toolbar
  GType function() c_gtk_toolbar_get_type; ///
  GtkWidget* function() c_gtk_toolbar_new; ///
  int function(GtkToolbar* toolbar, int x, int y) c_gtk_toolbar_get_drop_index; ///
  GtkIconSize function(GtkToolbar* toolbar) c_gtk_toolbar_get_icon_size; ///
  int function(GtkToolbar* toolbar, GtkToolItem* item) c_gtk_toolbar_get_item_index; ///
  int function(GtkToolbar* toolbar) c_gtk_toolbar_get_n_items; ///
  GtkToolItem* function(GtkToolbar* toolbar, int n) c_gtk_toolbar_get_nth_item; ///
  GtkReliefStyle function(GtkToolbar* toolbar) c_gtk_toolbar_get_relief_style; ///
  bool function(GtkToolbar* toolbar) c_gtk_toolbar_get_show_arrow; ///
  GtkToolbarStyle function(GtkToolbar* toolbar) c_gtk_toolbar_get_style; ///
  void function(GtkToolbar* toolbar, GtkToolItem* item, int pos) c_gtk_toolbar_insert; ///
  void function(GtkToolbar* toolbar, GtkToolItem* toolItem, int index) c_gtk_toolbar_set_drop_highlight_item; ///
  void function(GtkToolbar* toolbar, GtkIconSize iconSize) c_gtk_toolbar_set_icon_size; ///
  void function(GtkToolbar* toolbar, bool showArrow) c_gtk_toolbar_set_show_arrow; ///
  void function(GtkToolbar* toolbar, GtkToolbarStyle style) c_gtk_toolbar_set_style; ///
  void function(GtkToolbar* toolbar) c_gtk_toolbar_unset_icon_size; ///
  void function(GtkToolbar* toolbar) c_gtk_toolbar_unset_style; ///

  // Tooltip
  GType function() c_gtk_tooltip_get_type; ///
  void function(GdkDisplay* display) c_gtk_tooltip_trigger_tooltip_query; ///
  void function(GtkTooltip* tooltip, GtkWidget* customWidget) c_gtk_tooltip_set_custom; ///
  void function(GtkTooltip* tooltip, PixbufC* pixbuf) c_gtk_tooltip_set_icon; ///
  void function(GtkTooltip* tooltip, GIcon* gicon, GtkIconSize size) c_gtk_tooltip_set_icon_from_gicon; ///
  void function(GtkTooltip* tooltip, const(char)* iconName, GtkIconSize size) c_gtk_tooltip_set_icon_from_icon_name; ///
  void function(GtkTooltip* tooltip, const(char)* stockId, GtkIconSize size) c_gtk_tooltip_set_icon_from_stock; ///
  void function(GtkTooltip* tooltip, const(char)* markup) c_gtk_tooltip_set_markup; ///
  void function(GtkTooltip* tooltip, const(char)* text) c_gtk_tooltip_set_text; ///
  void function(GtkTooltip* tooltip, const(GdkRectangle)* rect) c_gtk_tooltip_set_tip_area; ///

  // ToplevelAccessible
  GType function() c_gtk_toplevel_accessible_get_type; ///
  GList* function(GtkToplevelAccessible* accessible) c_gtk_toplevel_accessible_get_children; ///

  // TreeDragDest
  GType function() c_gtk_tree_drag_dest_get_type; ///
  bool function(GtkTreeDragDest* dragDest, GtkTreePath* dest, GtkSelectionData* selectionData) c_gtk_tree_drag_dest_drag_data_received; ///
  bool function(GtkTreeDragDest* dragDest, GtkTreePath* destPath, GtkSelectionData* selectionData) c_gtk_tree_drag_dest_row_drop_possible; ///

  // TreeDragSource
  GType function() c_gtk_tree_drag_source_get_type; ///
  bool function(GtkTreeDragSource* dragSource, GtkTreePath* path) c_gtk_tree_drag_source_drag_data_delete; ///
  bool function(GtkTreeDragSource* dragSource, GtkTreePath* path, GtkSelectionData* selectionData) c_gtk_tree_drag_source_drag_data_get; ///
  bool function(GtkTreeDragSource* dragSource, GtkTreePath* path) c_gtk_tree_drag_source_row_draggable; ///

  // TreeIter
  GType function() c_gtk_tree_iter_get_type; ///
  GtkTreeIter* function(GtkTreeIter* iter) c_gtk_tree_iter_copy; ///
  void function(GtkTreeIter* iter) c_gtk_tree_iter_free; ///

  // TreeModel
  GType function() c_gtk_tree_model_get_type; ///
  GtkTreeModel* function(GtkTreeModel* childModel, GtkTreePath* root) c_gtk_tree_model_filter_new; ///
  void function(GtkTreeModel* model, GtkTreeModelForeachFunc func, void* userData) c_gtk_tree_model_foreach; ///
  void function(GtkTreeModel* treeModel, GtkTreeIter* iter,  ...) c_gtk_tree_model_get; ///
  GType function(GtkTreeModel* treeModel, int index) c_gtk_tree_model_get_column_type; ///
  GtkTreeModelFlags function(GtkTreeModel* treeModel) c_gtk_tree_model_get_flags; ///
  bool function(GtkTreeModel* treeModel, GtkTreeIter* iter, GtkTreePath* path) c_gtk_tree_model_get_iter; ///
  bool function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_get_iter_first; ///
  bool function(GtkTreeModel* treeModel, GtkTreeIter* iter, const(char)* pathString) c_gtk_tree_model_get_iter_from_string; ///
  int function(GtkTreeModel* treeModel) c_gtk_tree_model_get_n_columns; ///
  GtkTreePath* function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_get_path; ///
  char* function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_get_string_from_iter; ///
  void function(GtkTreeModel* treeModel, GtkTreeIter* iter, void* varArgs) c_gtk_tree_model_get_valist; ///
  void function(GtkTreeModel* treeModel, GtkTreeIter* iter, int column, GValue* value) c_gtk_tree_model_get_value; ///
  bool function(GtkTreeModel* treeModel, GtkTreeIter* iter, GtkTreeIter* parent) c_gtk_tree_model_iter_children; ///
  bool function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_iter_has_child; ///
  int function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_iter_n_children; ///
  bool function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_iter_next; ///
  bool function(GtkTreeModel* treeModel, GtkTreeIter* iter, GtkTreeIter* parent, int n) c_gtk_tree_model_iter_nth_child; ///
  bool function(GtkTreeModel* treeModel, GtkTreeIter* iter, GtkTreeIter* child) c_gtk_tree_model_iter_parent; ///
  bool function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_iter_previous; ///
  void function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_ref_node; ///
  void function(GtkTreeModel* treeModel, GtkTreePath* path, GtkTreeIter* iter) c_gtk_tree_model_row_changed; ///
  void function(GtkTreeModel* treeModel, GtkTreePath* path) c_gtk_tree_model_row_deleted; ///
  void function(GtkTreeModel* treeModel, GtkTreePath* path, GtkTreeIter* iter) c_gtk_tree_model_row_has_child_toggled; ///
  void function(GtkTreeModel* treeModel, GtkTreePath* path, GtkTreeIter* iter) c_gtk_tree_model_row_inserted; ///
  void function(GtkTreeModel* treeModel, GtkTreePath* path, GtkTreeIter* iter, int* newOrder) c_gtk_tree_model_rows_reordered; ///
  void function(GtkTreeModel* treeModel, GtkTreePath* path, GtkTreeIter* iter, int* newOrder, int length) c_gtk_tree_model_rows_reordered_with_length; ///
  void function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_unref_node; ///

  // TreeModelFilter
  GType function() c_gtk_tree_model_filter_get_type; ///
  void function(GtkTreeModelFilter* filter) c_gtk_tree_model_filter_clear_cache; ///
  bool function(GtkTreeModelFilter* filter, GtkTreeIter* filterIter, GtkTreeIter* childIter) c_gtk_tree_model_filter_convert_child_iter_to_iter; ///
  GtkTreePath* function(GtkTreeModelFilter* filter, GtkTreePath* childPath) c_gtk_tree_model_filter_convert_child_path_to_path; ///
  void function(GtkTreeModelFilter* filter, GtkTreeIter* childIter, GtkTreeIter* filterIter) c_gtk_tree_model_filter_convert_iter_to_child_iter; ///
  GtkTreePath* function(GtkTreeModelFilter* filter, GtkTreePath* filterPath) c_gtk_tree_model_filter_convert_path_to_child_path; ///
  GtkTreeModel* function(GtkTreeModelFilter* filter) c_gtk_tree_model_filter_get_model; ///
  void function(GtkTreeModelFilter* filter) c_gtk_tree_model_filter_refilter; ///
  void function(GtkTreeModelFilter* filter, int nColumns, GType* types, GtkTreeModelFilterModifyFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_model_filter_set_modify_func; ///
  void function(GtkTreeModelFilter* filter, int column) c_gtk_tree_model_filter_set_visible_column; ///
  void function(GtkTreeModelFilter* filter, GtkTreeModelFilterVisibleFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_model_filter_set_visible_func; ///

  // TreeModelSort
  GType function() c_gtk_tree_model_sort_get_type; ///
  GtkTreeModel* function(GtkTreeModel* childModel) c_gtk_tree_model_sort_new_with_model; ///
  void function(GtkTreeModelSort* treeModelSort) c_gtk_tree_model_sort_clear_cache; ///
  bool function(GtkTreeModelSort* treeModelSort, GtkTreeIter* sortIter, GtkTreeIter* childIter) c_gtk_tree_model_sort_convert_child_iter_to_iter; ///
  GtkTreePath* function(GtkTreeModelSort* treeModelSort, GtkTreePath* childPath) c_gtk_tree_model_sort_convert_child_path_to_path; ///
  void function(GtkTreeModelSort* treeModelSort, GtkTreeIter* childIter, GtkTreeIter* sortedIter) c_gtk_tree_model_sort_convert_iter_to_child_iter; ///
  GtkTreePath* function(GtkTreeModelSort* treeModelSort, GtkTreePath* sortedPath) c_gtk_tree_model_sort_convert_path_to_child_path; ///
  GtkTreeModel* function(GtkTreeModelSort* treeModel) c_gtk_tree_model_sort_get_model; ///
  bool function(GtkTreeModelSort* treeModelSort, GtkTreeIter* iter) c_gtk_tree_model_sort_iter_is_valid; ///
  void function(GtkTreeModelSort* treeModelSort) c_gtk_tree_model_sort_reset_default_sort_func; ///

  // TreePath
  GType function() c_gtk_tree_path_get_type; ///
  GtkTreePath* function() c_gtk_tree_path_new; ///
  GtkTreePath* function() c_gtk_tree_path_new_first; ///
  GtkTreePath* function(int firstIndex,  ...) c_gtk_tree_path_new_from_indices; ///
  GtkTreePath* function(int* indices, size_t length) c_gtk_tree_path_new_from_indicesv; ///
  GtkTreePath* function(const(char)* path) c_gtk_tree_path_new_from_string; ///
  void function(GtkTreePath* path, int index) c_gtk_tree_path_append_index; ///
  int function(const(GtkTreePath)* a, const(GtkTreePath)* b) c_gtk_tree_path_compare; ///
  GtkTreePath* function(const(GtkTreePath)* path) c_gtk_tree_path_copy; ///
  void function(GtkTreePath* path) c_gtk_tree_path_down; ///
  void function(GtkTreePath* path) c_gtk_tree_path_free; ///
  int function(GtkTreePath* path) c_gtk_tree_path_get_depth; ///
  int* function(GtkTreePath* path) c_gtk_tree_path_get_indices; ///
  int* function(GtkTreePath* path, int* depth) c_gtk_tree_path_get_indices_with_depth; ///
  bool function(GtkTreePath* path, GtkTreePath* descendant) c_gtk_tree_path_is_ancestor; ///
  bool function(GtkTreePath* path, GtkTreePath* ancestor) c_gtk_tree_path_is_descendant; ///
  void function(GtkTreePath* path) c_gtk_tree_path_next; ///
  void function(GtkTreePath* path, int index) c_gtk_tree_path_prepend_index; ///
  bool function(GtkTreePath* path) c_gtk_tree_path_prev; ///
  char* function(GtkTreePath* path) c_gtk_tree_path_to_string; ///
  bool function(GtkTreePath* path) c_gtk_tree_path_up; ///

  // TreeRowReference
  GType function() c_gtk_tree_row_reference_get_type; ///
  GtkTreeRowReference* function(GtkTreeModel* model, GtkTreePath* path) c_gtk_tree_row_reference_new; ///
  GtkTreeRowReference* function(ObjectC* proxy, GtkTreeModel* model, GtkTreePath* path) c_gtk_tree_row_reference_new_proxy; ///
  GtkTreeRowReference* function(GtkTreeRowReference* reference) c_gtk_tree_row_reference_copy; ///
  void function(GtkTreeRowReference* reference) c_gtk_tree_row_reference_free; ///
  GtkTreeModel* function(GtkTreeRowReference* reference) c_gtk_tree_row_reference_get_model; ///
  GtkTreePath* function(GtkTreeRowReference* reference) c_gtk_tree_row_reference_get_path; ///
  bool function(GtkTreeRowReference* reference) c_gtk_tree_row_reference_valid; ///
  void function(ObjectC* proxy, GtkTreePath* path) c_gtk_tree_row_reference_deleted; ///
  void function(ObjectC* proxy, GtkTreePath* path) c_gtk_tree_row_reference_inserted; ///
  void function(ObjectC* proxy, GtkTreePath* path, GtkTreeIter* iter, int* newOrder) c_gtk_tree_row_reference_reordered; ///

  // TreeSelection
  GType function() c_gtk_tree_selection_get_type; ///
  int function(GtkTreeSelection* selection) c_gtk_tree_selection_count_selected_rows; ///
  GtkSelectionMode function(GtkTreeSelection* selection) c_gtk_tree_selection_get_mode; ///
  GtkTreeSelectionFunc function(GtkTreeSelection* selection) c_gtk_tree_selection_get_select_function; ///
  bool function(GtkTreeSelection* selection, GtkTreeModel** model, GtkTreeIter* iter) c_gtk_tree_selection_get_selected; ///
  GList* function(GtkTreeSelection* selection, GtkTreeModel** model) c_gtk_tree_selection_get_selected_rows; ///
  GtkTreeView* function(GtkTreeSelection* selection) c_gtk_tree_selection_get_tree_view; ///
  void* function(GtkTreeSelection* selection) c_gtk_tree_selection_get_user_data; ///
  bool function(GtkTreeSelection* selection, GtkTreeIter* iter) c_gtk_tree_selection_iter_is_selected; ///
  bool function(GtkTreeSelection* selection, GtkTreePath* path) c_gtk_tree_selection_path_is_selected; ///
  void function(GtkTreeSelection* selection) c_gtk_tree_selection_select_all; ///
  void function(GtkTreeSelection* selection, GtkTreeIter* iter) c_gtk_tree_selection_select_iter; ///
  void function(GtkTreeSelection* selection, GtkTreePath* path) c_gtk_tree_selection_select_path; ///
  void function(GtkTreeSelection* selection, GtkTreePath* startPath, GtkTreePath* endPath) c_gtk_tree_selection_select_range; ///
  void function(GtkTreeSelection* selection, GtkTreeSelectionForeachFunc func, void* data) c_gtk_tree_selection_selected_foreach; ///
  void function(GtkTreeSelection* selection, GtkSelectionMode type) c_gtk_tree_selection_set_mode; ///
  void function(GtkTreeSelection* selection, GtkTreeSelectionFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_selection_set_select_function; ///
  void function(GtkTreeSelection* selection) c_gtk_tree_selection_unselect_all; ///
  void function(GtkTreeSelection* selection, GtkTreeIter* iter) c_gtk_tree_selection_unselect_iter; ///
  void function(GtkTreeSelection* selection, GtkTreePath* path) c_gtk_tree_selection_unselect_path; ///
  void function(GtkTreeSelection* selection, GtkTreePath* startPath, GtkTreePath* endPath) c_gtk_tree_selection_unselect_range; ///

  // TreeSortable
  GType function() c_gtk_tree_sortable_get_type; ///
  bool function(GtkTreeSortable* sortable, int* sortColumnId, GtkSortType* order) c_gtk_tree_sortable_get_sort_column_id; ///
  bool function(GtkTreeSortable* sortable) c_gtk_tree_sortable_has_default_sort_func; ///
  void function(GtkTreeSortable* sortable, GtkTreeIterCompareFunc sortFunc, void* userData, GDestroyNotify destroy) c_gtk_tree_sortable_set_default_sort_func; ///
  void function(GtkTreeSortable* sortable, int sortColumnId, GtkSortType order) c_gtk_tree_sortable_set_sort_column_id; ///
  void function(GtkTreeSortable* sortable, int sortColumnId, GtkTreeIterCompareFunc sortFunc, void* userData, GDestroyNotify destroy) c_gtk_tree_sortable_set_sort_func; ///
  void function(GtkTreeSortable* sortable) c_gtk_tree_sortable_sort_column_changed; ///

  // TreeStore
  GType function() c_gtk_tree_store_get_type; ///
  GtkTreeStore* function(int nColumns,  ...) c_gtk_tree_store_new; ///
  GtkTreeStore* function(int nColumns, GType* types) c_gtk_tree_store_newv; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent) c_gtk_tree_store_append; ///
  void function(GtkTreeStore* treeStore) c_gtk_tree_store_clear; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent, int position) c_gtk_tree_store_insert; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent, GtkTreeIter* sibling) c_gtk_tree_store_insert_after; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent, GtkTreeIter* sibling) c_gtk_tree_store_insert_before; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent, int position,  ...) c_gtk_tree_store_insert_with_values; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent, int position, int* columns, GValue* values, int nValues) c_gtk_tree_store_insert_with_valuesv; ///
  bool function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* descendant) c_gtk_tree_store_is_ancestor; ///
  int function(GtkTreeStore* treeStore, GtkTreeIter* iter) c_gtk_tree_store_iter_depth; ///
  bool function(GtkTreeStore* treeStore, GtkTreeIter* iter) c_gtk_tree_store_iter_is_valid; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* position) c_gtk_tree_store_move_after; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* position) c_gtk_tree_store_move_before; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent) c_gtk_tree_store_prepend; ///
  bool function(GtkTreeStore* treeStore, GtkTreeIter* iter) c_gtk_tree_store_remove; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* parent, int* newOrder) c_gtk_tree_store_reorder; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter,  ...) c_gtk_tree_store_set; ///
  void function(GtkTreeStore* treeStore, int nColumns, GType* types) c_gtk_tree_store_set_column_types; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, void* varArgs) c_gtk_tree_store_set_valist; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, int column, GValue* value) c_gtk_tree_store_set_value; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* iter, int* columns, GValue* values, int nValues) c_gtk_tree_store_set_valuesv; ///
  void function(GtkTreeStore* treeStore, GtkTreeIter* a, GtkTreeIter* b) c_gtk_tree_store_swap; ///

  // TreeView
  GType function() c_gtk_tree_view_get_type; ///
  GtkWidget* function() c_gtk_tree_view_new; ///
  GtkWidget* function(GtkTreeModel* model) c_gtk_tree_view_new_with_model; ///
  int function(GtkTreeView* treeView, GtkTreeViewColumn* column) c_gtk_tree_view_append_column; ///
  void function(GtkTreeView* treeView) c_gtk_tree_view_collapse_all; ///
  bool function(GtkTreeView* treeView, GtkTreePath* path) c_gtk_tree_view_collapse_row; ///
  void function(GtkTreeView* treeView) c_gtk_tree_view_columns_autosize; ///
  void function(GtkTreeView* treeView, int bx, int by, int* tx, int* ty) c_gtk_tree_view_convert_bin_window_to_tree_coords; ///
  void function(GtkTreeView* treeView, int bx, int by, int* wx, int* wy) c_gtk_tree_view_convert_bin_window_to_widget_coords; ///
  void function(GtkTreeView* treeView, int tx, int ty, int* bx, int* by) c_gtk_tree_view_convert_tree_to_bin_window_coords; ///
  void function(GtkTreeView* treeView, int tx, int ty, int* wx, int* wy) c_gtk_tree_view_convert_tree_to_widget_coords; ///
  void function(GtkTreeView* treeView, int wx, int wy, int* bx, int* by) c_gtk_tree_view_convert_widget_to_bin_window_coords; ///
  void function(GtkTreeView* treeView, int wx, int wy, int* tx, int* ty) c_gtk_tree_view_convert_widget_to_tree_coords; ///
  cairo_surface_t* function(GtkTreeView* treeView, GtkTreePath* path) c_gtk_tree_view_create_row_drag_icon; ///
  void function(GtkTreeView* treeView, const(GtkTargetEntry)* targets, int nTargets, GdkDragAction actions) c_gtk_tree_view_enable_model_drag_dest; ///
  void function(GtkTreeView* treeView, GdkModifierType startButtonMask, const(GtkTargetEntry)* targets, int nTargets, GdkDragAction actions) c_gtk_tree_view_enable_model_drag_source; ///
  void function(GtkTreeView* treeView) c_gtk_tree_view_expand_all; ///
  bool function(GtkTreeView* treeView, GtkTreePath* path, bool openAll) c_gtk_tree_view_expand_row; ///
  void function(GtkTreeView* treeView, GtkTreePath* path) c_gtk_tree_view_expand_to_path; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_activate_on_single_click; ///
  void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* column, GdkRectangle* rect) c_gtk_tree_view_get_background_area; ///
  GdkWindow* function(GtkTreeView* treeView) c_gtk_tree_view_get_bin_window; ///
  void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* column, GdkRectangle* rect) c_gtk_tree_view_get_cell_area; ///
  GtkTreeViewColumn* function(GtkTreeView* treeView, int n) c_gtk_tree_view_get_column; ///
  GList* function(GtkTreeView* treeView) c_gtk_tree_view_get_columns; ///
  void function(GtkTreeView* treeView, GtkTreePath** path, GtkTreeViewColumn** focusColumn) c_gtk_tree_view_get_cursor; ///
  bool function(GtkTreeView* treeView, int dragX, int dragY, GtkTreePath** path, GtkTreeViewDropPosition* pos) c_gtk_tree_view_get_dest_row_at_pos; ///
  void function(GtkTreeView* treeView, GtkTreePath** path, GtkTreeViewDropPosition* pos) c_gtk_tree_view_get_drag_dest_row; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_enable_search; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_enable_tree_lines; ///
  GtkTreeViewColumn* function(GtkTreeView* treeView) c_gtk_tree_view_get_expander_column; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_fixed_height_mode; ///
  GtkTreeViewGridLines function(GtkTreeView* treeView) c_gtk_tree_view_get_grid_lines; ///
  GtkAdjustment* function(GtkTreeView* treeView) c_gtk_tree_view_get_hadjustment; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_headers_clickable; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_headers_visible; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_hover_expand; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_hover_selection; ///
  int function(GtkTreeView* treeView) c_gtk_tree_view_get_level_indentation; ///
  GtkTreeModel* function(GtkTreeView* treeView) c_gtk_tree_view_get_model; ///
  uint function(GtkTreeView* treeView) c_gtk_tree_view_get_n_columns; ///
  bool function(GtkTreeView* treeView, int x, int y, GtkTreePath** path, GtkTreeViewColumn** column, int* cellX, int* cellY) c_gtk_tree_view_get_path_at_pos; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_reorderable; ///
  GtkTreeViewRowSeparatorFunc function(GtkTreeView* treeView) c_gtk_tree_view_get_row_separator_func; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_rubber_banding; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_rules_hint; ///
  int function(GtkTreeView* treeView) c_gtk_tree_view_get_search_column; ///
  GtkEntry* function(GtkTreeView* treeView) c_gtk_tree_view_get_search_entry; ///
  GtkTreeViewSearchEqualFunc function(GtkTreeView* treeView) c_gtk_tree_view_get_search_equal_func; ///
  GtkTreeViewSearchPositionFunc function(GtkTreeView* treeView) c_gtk_tree_view_get_search_position_func; ///
  GtkTreeSelection* function(GtkTreeView* treeView) c_gtk_tree_view_get_selection; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_get_show_expanders; ///
  int function(GtkTreeView* treeView) c_gtk_tree_view_get_tooltip_column; ///
  bool function(GtkTreeView* treeView, int* x, int* y, bool keyboardTip, GtkTreeModel** model, GtkTreePath** path, GtkTreeIter* iter) c_gtk_tree_view_get_tooltip_context; ///
  GtkAdjustment* function(GtkTreeView* treeView) c_gtk_tree_view_get_vadjustment; ///
  bool function(GtkTreeView* treeView, GtkTreePath** startPath, GtkTreePath** endPath) c_gtk_tree_view_get_visible_range; ///
  void function(GtkTreeView* treeView, GdkRectangle* visibleRect) c_gtk_tree_view_get_visible_rect; ///
  int function(GtkTreeView* treeView, GtkTreeViewColumn* column, int position) c_gtk_tree_view_insert_column; ///
  int function(GtkTreeView* treeView, int position, const(char)* title, GtkCellRenderer* cell,  ...) c_gtk_tree_view_insert_column_with_attributes; ///
  int function(GtkTreeView* treeView, int position, const(char)* title, GtkCellRenderer* cell, GtkTreeCellDataFunc func, void* data, GDestroyNotify dnotify) c_gtk_tree_view_insert_column_with_data_func; ///
  bool function(GtkTreeView* treeView, int x, int y, GtkTreePath** path, GtkTreeViewColumn** column, int* cellX, int* cellY) c_gtk_tree_view_is_blank_at_pos; ///
  bool function(GtkTreeView* treeView) c_gtk_tree_view_is_rubber_banding_active; ///
  void function(GtkTreeView* treeView, GtkTreeViewMappingFunc func, void* data) c_gtk_tree_view_map_expanded_rows; ///
  void function(GtkTreeView* treeView, GtkTreeViewColumn* column, GtkTreeViewColumn* baseColumn) c_gtk_tree_view_move_column_after; ///
  int function(GtkTreeView* treeView, GtkTreeViewColumn* column) c_gtk_tree_view_remove_column; ///
  void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* column) c_gtk_tree_view_row_activated; ///
  bool function(GtkTreeView* treeView, GtkTreePath* path) c_gtk_tree_view_row_expanded; ///
  void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* column, bool useAlign, float rowAlign, float colAlign) c_gtk_tree_view_scroll_to_cell; ///
  void function(GtkTreeView* treeView, int treeX, int treeY) c_gtk_tree_view_scroll_to_point; ///
  void function(GtkTreeView* treeView, bool single) c_gtk_tree_view_set_activate_on_single_click; ///
  void function(GtkTreeView* treeView, GtkTreeViewColumnDropFunc func, void* userData, GDestroyNotify destroy) c_gtk_tree_view_set_column_drag_function; ///
  void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* focusColumn, bool startEditing) c_gtk_tree_view_set_cursor; ///
  void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* focusColumn, GtkCellRenderer* focusCell, bool startEditing) c_gtk_tree_view_set_cursor_on_cell; ///
  void function(GtkTreeView* treeView, GtkTreeDestroyCountFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_view_set_destroy_count_func; ///
  void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewDropPosition pos) c_gtk_tree_view_set_drag_dest_row; ///
  void function(GtkTreeView* treeView, bool enableSearch) c_gtk_tree_view_set_enable_search; ///
  void function(GtkTreeView* treeView, bool enabled) c_gtk_tree_view_set_enable_tree_lines; ///
  void function(GtkTreeView* treeView, GtkTreeViewColumn* column) c_gtk_tree_view_set_expander_column; ///
  void function(GtkTreeView* treeView, bool enable) c_gtk_tree_view_set_fixed_height_mode; ///
  void function(GtkTreeView* treeView, GtkTreeViewGridLines gridLines) c_gtk_tree_view_set_grid_lines; ///
  void function(GtkTreeView* treeView, GtkAdjustment* adjustment) c_gtk_tree_view_set_hadjustment; ///
  void function(GtkTreeView* treeView, bool setting) c_gtk_tree_view_set_headers_clickable; ///
  void function(GtkTreeView* treeView, bool headersVisible) c_gtk_tree_view_set_headers_visible; ///
  void function(GtkTreeView* treeView, bool expand) c_gtk_tree_view_set_hover_expand; ///
  void function(GtkTreeView* treeView, bool hover) c_gtk_tree_view_set_hover_selection; ///
  void function(GtkTreeView* treeView, int indentation) c_gtk_tree_view_set_level_indentation; ///
  void function(GtkTreeView* treeView, GtkTreeModel* model) c_gtk_tree_view_set_model; ///
  void function(GtkTreeView* treeView, bool reorderable) c_gtk_tree_view_set_reorderable; ///
  void function(GtkTreeView* treeView, GtkTreeViewRowSeparatorFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_view_set_row_separator_func; ///
  void function(GtkTreeView* treeView, bool enable) c_gtk_tree_view_set_rubber_banding; ///
  void function(GtkTreeView* treeView, bool setting) c_gtk_tree_view_set_rules_hint; ///
  void function(GtkTreeView* treeView, int column) c_gtk_tree_view_set_search_column; ///
  void function(GtkTreeView* treeView, GtkEntry* entry) c_gtk_tree_view_set_search_entry; ///
  void function(GtkTreeView* treeView, GtkTreeViewSearchEqualFunc searchEqualFunc, void* searchUserData, GDestroyNotify searchDestroy) c_gtk_tree_view_set_search_equal_func; ///
  void function(GtkTreeView* treeView, GtkTreeViewSearchPositionFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_view_set_search_position_func; ///
  void function(GtkTreeView* treeView, bool enabled) c_gtk_tree_view_set_show_expanders; ///
  void function(GtkTreeView* treeView, GtkTooltip* tooltip, GtkTreePath* path, GtkTreeViewColumn* column, GtkCellRenderer* cell) c_gtk_tree_view_set_tooltip_cell; ///
  void function(GtkTreeView* treeView, int column) c_gtk_tree_view_set_tooltip_column; ///
  void function(GtkTreeView* treeView, GtkTooltip* tooltip, GtkTreePath* path) c_gtk_tree_view_set_tooltip_row; ///
  void function(GtkTreeView* treeView, GtkAdjustment* adjustment) c_gtk_tree_view_set_vadjustment; ///
  void function(GtkTreeView* treeView) c_gtk_tree_view_unset_rows_drag_dest; ///
  void function(GtkTreeView* treeView) c_gtk_tree_view_unset_rows_drag_source; ///

  // TreeViewAccessible
  GType function() c_gtk_tree_view_accessible_get_type; ///

  // TreeViewColumn
  GType function() c_gtk_tree_view_column_get_type; ///
  GtkTreeViewColumn* function() c_gtk_tree_view_column_new; ///
  GtkTreeViewColumn* function(GtkCellArea* area) c_gtk_tree_view_column_new_with_area; ///
  GtkTreeViewColumn* function(const(char)* title, GtkCellRenderer* cell,  ...) c_gtk_tree_view_column_new_with_attributes; ///
  void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cellRenderer, const(char)* attribute, int column) c_gtk_tree_view_column_add_attribute; ///
  bool function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cellRenderer, int* xOffset, int* width) c_gtk_tree_view_column_cell_get_position; ///
  void function(GtkTreeViewColumn* treeColumn, const(GdkRectangle)* cellArea, int* xOffset, int* yOffset, int* width, int* height) c_gtk_tree_view_column_cell_get_size; ///
  bool function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_cell_is_visible; ///
  void function(GtkTreeViewColumn* treeColumn, GtkTreeModel* treeModel, GtkTreeIter* iter, bool isExpander, bool isExpanded) c_gtk_tree_view_column_cell_set_cell_data; ///
  void function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_clear; ///
  void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cellRenderer) c_gtk_tree_view_column_clear_attributes; ///
  void function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_clicked; ///
  void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cell) c_gtk_tree_view_column_focus_cell; ///
  float function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_alignment; ///
  GtkWidget* function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_button; ///
  bool function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_clickable; ///
  bool function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_expand; ///
  int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_fixed_width; ///
  int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_max_width; ///
  int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_min_width; ///
  bool function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_reorderable; ///
  bool function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_resizable; ///
  GtkTreeViewColumnSizing function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_sizing; ///
  int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_sort_column_id; ///
  bool function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_sort_indicator; ///
  GtkSortType function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_sort_order; ///
  int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_spacing; ///
  const(char)* function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_title; ///
  GtkWidget* function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_tree_view; ///
  bool function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_visible; ///
  GtkWidget* function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_widget; ///
  int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_width; ///
  int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_x_offset; ///
  void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cell, bool expand) c_gtk_tree_view_column_pack_end; ///
  void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cell, bool expand) c_gtk_tree_view_column_pack_start; ///
  void function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_queue_resize; ///
  void function(GtkTreeViewColumn* treeColumn, float xalign) c_gtk_tree_view_column_set_alignment; ///
  void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cellRenderer,  ...) c_gtk_tree_view_column_set_attributes; ///
  void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cellRenderer, GtkTreeCellDataFunc func, void* funcData, GDestroyNotify destroy) c_gtk_tree_view_column_set_cell_data_func; ///
  void function(GtkTreeViewColumn* treeColumn, bool clickable) c_gtk_tree_view_column_set_clickable; ///
  void function(GtkTreeViewColumn* treeColumn, bool expand) c_gtk_tree_view_column_set_expand; ///
  void function(GtkTreeViewColumn* treeColumn, int fixedWidth) c_gtk_tree_view_column_set_fixed_width; ///
  void function(GtkTreeViewColumn* treeColumn, int maxWidth) c_gtk_tree_view_column_set_max_width; ///
  void function(GtkTreeViewColumn* treeColumn, int minWidth) c_gtk_tree_view_column_set_min_width; ///
  void function(GtkTreeViewColumn* treeColumn, bool reorderable) c_gtk_tree_view_column_set_reorderable; ///
  void function(GtkTreeViewColumn* treeColumn, bool resizable) c_gtk_tree_view_column_set_resizable; ///
  void function(GtkTreeViewColumn* treeColumn, GtkTreeViewColumnSizing type) c_gtk_tree_view_column_set_sizing; ///
  void function(GtkTreeViewColumn* treeColumn, int sortColumnId) c_gtk_tree_view_column_set_sort_column_id; ///
  void function(GtkTreeViewColumn* treeColumn, bool setting) c_gtk_tree_view_column_set_sort_indicator; ///
  void function(GtkTreeViewColumn* treeColumn, GtkSortType order) c_gtk_tree_view_column_set_sort_order; ///
  void function(GtkTreeViewColumn* treeColumn, int spacing) c_gtk_tree_view_column_set_spacing; ///
  void function(GtkTreeViewColumn* treeColumn, const(char)* title) c_gtk_tree_view_column_set_title; ///
  void function(GtkTreeViewColumn* treeColumn, bool visible) c_gtk_tree_view_column_set_visible; ///
  void function(GtkTreeViewColumn* treeColumn, GtkWidget* widget) c_gtk_tree_view_column_set_widget; ///

  // UIManager
  GType function() c_gtk_ui_manager_get_type; ///
  GtkUIManager* function() c_gtk_ui_manager_new; ///
  void function(GtkUIManager* manager, uint mergeId, const(char)* path, const(char)* name, const(char)* action, GtkUIManagerItemType type, bool top) c_gtk_ui_manager_add_ui; ///
  uint function(GtkUIManager* manager, const(char)* filename, GError** _err) c_gtk_ui_manager_add_ui_from_file; ///
  uint function(GtkUIManager* manager, const(char)* resourcePath, GError** _err) c_gtk_ui_manager_add_ui_from_resource; ///
  uint function(GtkUIManager* manager, const(char)* buffer, ptrdiff_t length, GError** _err) c_gtk_ui_manager_add_ui_from_string; ///
  void function(GtkUIManager* manager) c_gtk_ui_manager_ensure_update; ///
  GtkAccelGroup* function(GtkUIManager* manager) c_gtk_ui_manager_get_accel_group; ///
  GtkAction* function(GtkUIManager* manager, const(char)* path) c_gtk_ui_manager_get_action; ///
  GList* function(GtkUIManager* manager) c_gtk_ui_manager_get_action_groups; ///
  bool function(GtkUIManager* manager) c_gtk_ui_manager_get_add_tearoffs; ///
  GSList* function(GtkUIManager* manager, GtkUIManagerItemType types) c_gtk_ui_manager_get_toplevels; ///
  char* function(GtkUIManager* manager) c_gtk_ui_manager_get_ui; ///
  GtkWidget* function(GtkUIManager* manager, const(char)* path) c_gtk_ui_manager_get_widget; ///
  void function(GtkUIManager* manager, GtkActionGroup* actionGroup, int pos) c_gtk_ui_manager_insert_action_group; ///
  uint function(GtkUIManager* manager) c_gtk_ui_manager_new_merge_id; ///
  void function(GtkUIManager* manager, GtkActionGroup* actionGroup) c_gtk_ui_manager_remove_action_group; ///
  void function(GtkUIManager* manager, uint mergeId) c_gtk_ui_manager_remove_ui; ///
  void function(GtkUIManager* manager, bool addTearoffs) c_gtk_ui_manager_set_add_tearoffs; ///

  // VBox
  GType function() c_gtk_vbox_get_type; ///
  GtkWidget* function(bool homogeneous, int spacing) c_gtk_vbox_new; ///

  // VButtonBox
  GType function() c_gtk_vbutton_box_get_type; ///
  GtkWidget* function() c_gtk_vbutton_box_new; ///

  // VPaned
  GType function() c_gtk_vpaned_get_type; ///
  GtkWidget* function() c_gtk_vpaned_new; ///

  // VScale
  GType function() c_gtk_vscale_get_type; ///
  GtkWidget* function(GtkAdjustment* adjustment) c_gtk_vscale_new; ///
  GtkWidget* function(double min, double max, double step) c_gtk_vscale_new_with_range; ///

  // VScrollbar
  GType function() c_gtk_vscrollbar_get_type; ///
  GtkWidget* function(GtkAdjustment* adjustment) c_gtk_vscrollbar_new; ///

  // VSeparator
  GType function() c_gtk_vseparator_get_type; ///
  GtkWidget* function() c_gtk_vseparator_new; ///

  // Viewport
  GType function() c_gtk_viewport_get_type; ///
  GtkWidget* function(GtkAdjustment* hadjustment, GtkAdjustment* vadjustment) c_gtk_viewport_new; ///
  GdkWindow* function(GtkViewport* viewport) c_gtk_viewport_get_bin_window; ///
  GtkAdjustment* function(GtkViewport* viewport) c_gtk_viewport_get_hadjustment; ///
  GtkShadowType function(GtkViewport* viewport) c_gtk_viewport_get_shadow_type; ///
  GtkAdjustment* function(GtkViewport* viewport) c_gtk_viewport_get_vadjustment; ///
  GdkWindow* function(GtkViewport* viewport) c_gtk_viewport_get_view_window; ///
  void function(GtkViewport* viewport, GtkAdjustment* adjustment) c_gtk_viewport_set_hadjustment; ///
  void function(GtkViewport* viewport, GtkShadowType type) c_gtk_viewport_set_shadow_type; ///
  void function(GtkViewport* viewport, GtkAdjustment* adjustment) c_gtk_viewport_set_vadjustment; ///

  // VolumeButton
  GType function() c_gtk_volume_button_get_type; ///
  GtkWidget* function() c_gtk_volume_button_new; ///

  // Widget
  GType function() c_gtk_widget_get_type; ///
  GtkWidget* function(GType type, const(char)* firstPropertyName,  ...) c_gtk_widget_new; ///
  GtkTextDirection function() c_gtk_widget_get_default_direction; ///
  GtkStyle* function() c_gtk_widget_get_default_style; ///
  void function() c_gtk_widget_pop_composite_child; ///
  void function() c_gtk_widget_push_composite_child; ///
  void function(GtkTextDirection dir) c_gtk_widget_set_default_direction; ///
  bool function(GtkWidget* widget) c_gtk_widget_activate; ///
  void function(GtkWidget* widget, const(char)* accelSignal, GtkAccelGroup* accelGroup, uint accelKey, GdkModifierType accelMods, GtkAccelFlags accelFlags) c_gtk_widget_add_accelerator; ///
  void function(GtkWidget* widget, GdkDevice* device, GdkEventMask events) c_gtk_widget_add_device_events; ///
  void function(GtkWidget* widget, int events) c_gtk_widget_add_events; ///
  void function(GtkWidget* widget, GtkWidget* label) c_gtk_widget_add_mnemonic_label; ///
  uint function(GtkWidget* widget, GtkTickCallback callback, void* userData, GDestroyNotify notify) c_gtk_widget_add_tick_callback; ///
  bool function(GtkWidget* widget, uint signalId) c_gtk_widget_can_activate_accel; ///
  bool function(GtkWidget* widget, GtkDirectionType direction) c_gtk_widget_child_focus; ///
  void function(GtkWidget* widget, const(char)* childProperty) c_gtk_widget_child_notify; ///
  void function(GtkWidget* widget, uint* pathLength, char** path, char** pathReversed) c_gtk_widget_class_path; ///
  bool function(GtkWidget* widget, GtkOrientation orientation) c_gtk_widget_compute_expand; ///
  PangoContext* function(GtkWidget* widget) c_gtk_widget_create_pango_context; ///
  PangoLayout* function(GtkWidget* widget, const(char)* text) c_gtk_widget_create_pango_layout; ///
  void function(GtkWidget* widget) c_gtk_widget_destroy; ///
  void function(GtkWidget* widget, GtkWidget** widgetPointer) c_gtk_widget_destroyed; ///
  bool function(GtkWidget* widget, GdkDevice* device) c_gtk_widget_device_is_shadowed; ///
  GdkDragContext* function(GtkWidget* widget, GtkTargetList* targets, GdkDragAction actions, int button, GdkEvent* event) c_gtk_drag_begin; ///
  GdkDragContext* function(GtkWidget* widget, GtkTargetList* targets, GdkDragAction actions, int button, GdkEvent* event, int x, int y) c_gtk_drag_begin_with_coordinates; ///
  bool function(GtkWidget* widget, int startX, int startY, int currentX, int currentY) c_gtk_drag_check_threshold; ///
  void function(GtkWidget* widget) c_gtk_drag_dest_add_image_targets; ///
  void function(GtkWidget* widget) c_gtk_drag_dest_add_text_targets; ///
  void function(GtkWidget* widget) c_gtk_drag_dest_add_uri_targets; ///
  GdkAtom function(GtkWidget* widget, GdkDragContext* context, GtkTargetList* targetList) c_gtk_drag_dest_find_target; ///
  GtkTargetList* function(GtkWidget* widget) c_gtk_drag_dest_get_target_list; ///
  bool function(GtkWidget* widget) c_gtk_drag_dest_get_track_motion; ///
  void function(GtkWidget* widget, GtkDestDefaults flags, const(GtkTargetEntry)* targets, int nTargets, GdkDragAction actions) c_gtk_drag_dest_set; ///
  void function(GtkWidget* widget, GdkWindow* proxyWindow, GdkDragProtocol protocol, bool useCoordinates) c_gtk_drag_dest_set_proxy; ///
  void function(GtkWidget* widget, GtkTargetList* targetList) c_gtk_drag_dest_set_target_list; ///
  void function(GtkWidget* widget, bool trackMotion) c_gtk_drag_dest_set_track_motion; ///
  void function(GtkWidget* widget) c_gtk_drag_dest_unset; ///
  void function(GtkWidget* widget, GdkDragContext* context, GdkAtom target, uint time) c_gtk_drag_get_data; ///
  void function(GtkWidget* widget) c_gtk_drag_highlight; ///
  void function(GtkWidget* widget) c_gtk_drag_source_add_image_targets; ///
  void function(GtkWidget* widget) c_gtk_drag_source_add_text_targets; ///
  void function(GtkWidget* widget) c_gtk_drag_source_add_uri_targets; ///
  GtkTargetList* function(GtkWidget* widget) c_gtk_drag_source_get_target_list; ///
  void function(GtkWidget* widget, GdkModifierType startButtonMask, const(GtkTargetEntry)* targets, int nTargets, GdkDragAction actions) c_gtk_drag_source_set; ///
  void function(GtkWidget* widget, GIcon* icon) c_gtk_drag_source_set_icon_gicon; ///
  void function(GtkWidget* widget, const(char)* iconName) c_gtk_drag_source_set_icon_name; ///
  void function(GtkWidget* widget, PixbufC* pixbuf) c_gtk_drag_source_set_icon_pixbuf; ///
  void function(GtkWidget* widget, const(char)* stockId) c_gtk_drag_source_set_icon_stock; ///
  void function(GtkWidget* widget, GtkTargetList* targetList) c_gtk_drag_source_set_target_list; ///
  void function(GtkWidget* widget) c_gtk_drag_source_unset; ///
  void function(GtkWidget* widget) c_gtk_drag_unhighlight; ///
  void function(GtkWidget* widget, cairo_t* cr) c_gtk_widget_draw; ///
  void function(GtkWidget* widget) c_gtk_widget_ensure_style; ///
  void function(GtkWidget* widget) c_gtk_widget_error_bell; ///
  bool function(GtkWidget* widget, GdkEvent* event) c_gtk_widget_event; ///
  void function(GtkWidget* widget) c_gtk_widget_freeze_child_notify; ///
  AtkObject* function(GtkWidget* widget) c_gtk_widget_get_accessible; ///
  GActionGroup* function(GtkWidget* widget, const(char)* prefix) c_gtk_widget_get_action_group; ///
  int function(GtkWidget* widget) c_gtk_widget_get_allocated_baseline; ///
  int function(GtkWidget* widget) c_gtk_widget_get_allocated_height; ///
  void function(GtkWidget* widget, GtkAllocation* allocation, int* baseline) c_gtk_widget_get_allocated_size; ///
  int function(GtkWidget* widget) c_gtk_widget_get_allocated_width; ///
  void function(GtkWidget* widget, GtkAllocation* allocation) c_gtk_widget_get_allocation; ///
  GtkWidget* function(GtkWidget* widget, GType widgetType) c_gtk_widget_get_ancestor; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_app_paintable; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_can_default; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_can_focus; ///
  void function(GtkWidget* widget, GtkRequisition* requisition) c_gtk_widget_get_child_requisition; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_child_visible; ///
  void function(GtkWidget* widget, GtkAllocation* clip) c_gtk_widget_get_clip; ///
  GtkClipboard* function(GtkWidget* widget, GdkAtom selection) c_gtk_widget_get_clipboard; ///
  char* function(GtkWidget* widget) c_gtk_widget_get_composite_name; ///
  bool function(GtkWidget* widget, GdkDevice* device) c_gtk_widget_get_device_enabled; ///
  GdkEventMask function(GtkWidget* widget, GdkDevice* device) c_gtk_widget_get_device_events; ///
  GtkTextDirection function(GtkWidget* widget) c_gtk_widget_get_direction; ///
  GdkDisplay* function(GtkWidget* widget) c_gtk_widget_get_display; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_double_buffered; ///
  int function(GtkWidget* widget) c_gtk_widget_get_events; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_focus_on_click; ///
  PangoFontMap* function(GtkWidget* widget) c_gtk_widget_get_font_map; ///
  const(cairo_font_options_t)* function(GtkWidget* widget) c_gtk_widget_get_font_options; ///
  GdkFrameClock* function(GtkWidget* widget) c_gtk_widget_get_frame_clock; ///
  GtkAlign function(GtkWidget* widget) c_gtk_widget_get_halign; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_has_tooltip; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_has_window; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_hexpand; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_hexpand_set; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_mapped; ///
  int function(GtkWidget* widget) c_gtk_widget_get_margin_bottom; ///
  int function(GtkWidget* widget) c_gtk_widget_get_margin_end; ///
  int function(GtkWidget* widget) c_gtk_widget_get_margin_left; ///
  int function(GtkWidget* widget) c_gtk_widget_get_margin_right; ///
  int function(GtkWidget* widget) c_gtk_widget_get_margin_start; ///
  int function(GtkWidget* widget) c_gtk_widget_get_margin_top; ///
  GdkModifierType function(GtkWidget* widget, GdkModifierIntent intent) c_gtk_widget_get_modifier_mask; ///
  GtkRcStyle* function(GtkWidget* widget) c_gtk_widget_get_modifier_style; ///
  const(char)* function(GtkWidget* widget) c_gtk_widget_get_name; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_no_show_all; ///
  double function(GtkWidget* widget) c_gtk_widget_get_opacity; ///
  PangoContext* function(GtkWidget* widget) c_gtk_widget_get_pango_context; ///
  GtkWidget* function(GtkWidget* widget) c_gtk_widget_get_parent; ///
  GdkWindow* function(GtkWidget* widget) c_gtk_widget_get_parent_window; ///
  GtkWidgetPath* function(GtkWidget* widget) c_gtk_widget_get_path; ///
  void function(GtkWidget* widget, int* x, int* y) c_gtk_widget_get_pointer; ///
  void function(GtkWidget* widget, int* minimumHeight, int* naturalHeight) c_gtk_widget_get_preferred_height; ///
  void function(GtkWidget* widget, int width, int* minimumHeight, int* naturalHeight, int* minimumBaseline, int* naturalBaseline) c_gtk_widget_get_preferred_height_and_baseline_for_width; ///
  void function(GtkWidget* widget, int width, int* minimumHeight, int* naturalHeight) c_gtk_widget_get_preferred_height_for_width; ///
  void function(GtkWidget* widget, GtkRequisition* minimumSize, GtkRequisition* naturalSize) c_gtk_widget_get_preferred_size; ///
  void function(GtkWidget* widget, int* minimumWidth, int* naturalWidth) c_gtk_widget_get_preferred_width; ///
  void function(GtkWidget* widget, int height, int* minimumWidth, int* naturalWidth) c_gtk_widget_get_preferred_width_for_height; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_realized; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_receives_default; ///
  GtkSizeRequestMode function(GtkWidget* widget) c_gtk_widget_get_request_mode; ///
  void function(GtkWidget* widget, GtkRequisition* requisition) c_gtk_widget_get_requisition; ///
  GdkWindow* function(GtkWidget* widget) c_gtk_widget_get_root_window; ///
  int function(GtkWidget* widget) c_gtk_widget_get_scale_factor; ///
  GdkScreen* function(GtkWidget* widget) c_gtk_widget_get_screen; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_sensitive; ///
  GtkSettings* function(GtkWidget* widget) c_gtk_widget_get_settings; ///
  void function(GtkWidget* widget, int* width, int* height) c_gtk_widget_get_size_request; ///
  GtkStateType function(GtkWidget* widget) c_gtk_widget_get_state; ///
  GtkStateFlags function(GtkWidget* widget) c_gtk_widget_get_state_flags; ///
  GtkStyle* function(GtkWidget* widget) c_gtk_widget_get_style; ///
  GtkStyleContext* function(GtkWidget* widget) c_gtk_widget_get_style_context; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_support_multidevice; ///
  ObjectC* function(GtkWidget* widget, GType widgetType, const(char)* name) c_gtk_widget_get_template_child; ///
  char* function(GtkWidget* widget) c_gtk_widget_get_tooltip_markup; ///
  char* function(GtkWidget* widget) c_gtk_widget_get_tooltip_text; ///
  GtkWindow* function(GtkWidget* widget) c_gtk_widget_get_tooltip_window; ///
  GtkWidget* function(GtkWidget* widget) c_gtk_widget_get_toplevel; ///
  GtkAlign function(GtkWidget* widget) c_gtk_widget_get_valign; ///
  GtkAlign function(GtkWidget* widget) c_gtk_widget_get_valign_with_baseline; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_vexpand; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_vexpand_set; ///
  bool function(GtkWidget* widget) c_gtk_widget_get_visible; ///
  GdkVisual* function(GtkWidget* widget) c_gtk_widget_get_visual; ///
  GdkWindow* function(GtkWidget* widget) c_gtk_widget_get_window; ///
  void function(GtkWidget* widget) c_gtk_grab_add; ///
  void function(GtkWidget* widget) c_gtk_widget_grab_default; ///
  void function(GtkWidget* widget) c_gtk_widget_grab_focus; ///
  void function(GtkWidget* widget) c_gtk_grab_remove; ///
  bool function(GtkWidget* widget) c_gtk_widget_has_default; ///
  bool function(GtkWidget* widget) c_gtk_widget_has_focus; ///
  bool function(GtkWidget* widget) c_gtk_widget_has_grab; ///
  bool function(GtkWidget* widget) c_gtk_widget_has_rc_style; ///
  bool function(GtkWidget* widget) c_gtk_widget_has_screen; ///
  bool function(GtkWidget* widget) c_gtk_widget_has_visible_focus; ///
  void function(GtkWidget* widget) c_gtk_widget_hide; ///
  bool function(GtkWidget* widget) c_gtk_widget_hide_on_delete; ///
  bool function(GtkWidget* widget) c_gtk_widget_in_destruction; ///
  void function(GtkWidget* widget) c_gtk_widget_init_template; ///
  void function(GtkWidget* widget, cairo_region_t* region) c_gtk_widget_input_shape_combine_region; ///
  void function(GtkWidget* widget, const(char)* name, GActionGroup* group) c_gtk_widget_insert_action_group; ///
  bool function(GtkWidget* widget, const(GdkRectangle)* area, GdkRectangle* intersection) c_gtk_widget_intersect; ///
  bool function(GtkWidget* widget, GtkWidget* ancestor) c_gtk_widget_is_ancestor; ///
  bool function(GtkWidget* widget) c_gtk_widget_is_composited; ///
  bool function(GtkWidget* widget) c_gtk_widget_is_drawable; ///
  bool function(GtkWidget* widget) c_gtk_widget_is_focus; ///
  bool function(GtkWidget* widget) c_gtk_widget_is_sensitive; ///
  bool function(GtkWidget* widget) c_gtk_widget_is_toplevel; ///
  bool function(GtkWidget* widget) c_gtk_widget_is_visible; ///
  bool function(GtkWidget* widget, GtkDirectionType direction) c_gtk_widget_keynav_failed; ///
  GList* function(GtkWidget* widget) c_gtk_widget_list_accel_closures; ///
  const(char*)* function(GtkWidget* widget) c_gtk_widget_list_action_prefixes; ///
  GList* function(GtkWidget* widget) c_gtk_widget_list_mnemonic_labels; ///
  void function(GtkWidget* widget) c_gtk_widget_map; ///
  bool function(GtkWidget* widget, bool groupCycling) c_gtk_widget_mnemonic_activate; ///
  void function(GtkWidget* widget, GtkStateType state, const(GdkColor)* color) c_gtk_widget_modify_base; ///
  void function(GtkWidget* widget, GtkStateType state, const(GdkColor)* color) c_gtk_widget_modify_bg; ///
  void function(GtkWidget* widget, const(GdkColor)* primary, const(GdkColor)* secondary) c_gtk_widget_modify_cursor; ///
  void function(GtkWidget* widget, GtkStateType state, const(GdkColor)* color) c_gtk_widget_modify_fg; ///
  void function(GtkWidget* widget, PangoFontDescription* fontDesc) c_gtk_widget_modify_font; ///
  void function(GtkWidget* widget, GtkRcStyle* style) c_gtk_widget_modify_style; ///
  void function(GtkWidget* widget, GtkStateType state, const(GdkColor)* color) c_gtk_widget_modify_text; ///
  void function(GtkWidget* widget, GtkStateFlags state, const(GdkRGBA)* color) c_gtk_widget_override_background_color; ///
  void function(GtkWidget* widget, GtkStateFlags state, const(GdkRGBA)* color) c_gtk_widget_override_color; ///
  void function(GtkWidget* widget, const(GdkRGBA)* cursor, const(GdkRGBA)* secondaryCursor) c_gtk_widget_override_cursor; ///
  void function(GtkWidget* widget, const(PangoFontDescription)* fontDesc) c_gtk_widget_override_font; ///
  void function(GtkWidget* widget, const(char)* name, const(GdkRGBA)* color) c_gtk_widget_override_symbolic_color; ///
  void function(GtkWidget* widget, uint* pathLength, char** path, char** pathReversed) c_gtk_widget_path; ///
  void function(GtkWidget* widget) c_gtk_widget_queue_allocate; ///
  void function(GtkWidget* widget) c_gtk_widget_queue_compute_expand; ///
  void function(GtkWidget* widget) c_gtk_widget_queue_draw; ///
  void function(GtkWidget* widget, int x, int y, int width, int height) c_gtk_widget_queue_draw_area; ///
  void function(GtkWidget* widget, const(cairo_region_t)* region) c_gtk_widget_queue_draw_region; ///
  void function(GtkWidget* widget) c_gtk_widget_queue_resize; ///
  void function(GtkWidget* widget) c_gtk_widget_queue_resize_no_redraw; ///
  void function(GtkWidget* widget) c_gtk_widget_realize; ///
  cairo_region_t* function(GtkWidget* widget, const(cairo_region_t)* region) c_gtk_widget_region_intersect; ///
  void function(GtkWidget* widget, GdkWindow* window) c_gtk_widget_register_window; ///
  bool function(GtkWidget* widget, GtkAccelGroup* accelGroup, uint accelKey, GdkModifierType accelMods) c_gtk_widget_remove_accelerator; ///
  void function(GtkWidget* widget, GtkWidget* label) c_gtk_widget_remove_mnemonic_label; ///
  void function(GtkWidget* widget, uint id) c_gtk_widget_remove_tick_callback; ///
  PixbufC* function(GtkWidget* widget, const(char)* stockId, GtkIconSize size, const(char)* detail) c_gtk_widget_render_icon; ///
  PixbufC* function(GtkWidget* widget, const(char)* stockId, GtkIconSize size) c_gtk_widget_render_icon_pixbuf; ///
  void function(GtkWidget* widget, GtkWidget* newParent) c_gtk_widget_reparent; ///
  void function(GtkWidget* widget) c_gtk_widget_reset_rc_styles; ///
  void function(GtkWidget* widget) c_gtk_widget_reset_style; ///
  int function(GtkWidget* widget, GdkEvent* event) c_gtk_widget_send_expose; ///
  bool function(GtkWidget* widget, GdkEvent* event) c_gtk_widget_send_focus_change; ///
  void function(GtkWidget* widget, const(char)* accelPath, GtkAccelGroup* accelGroup) c_gtk_widget_set_accel_path; ///
  void function(GtkWidget* widget, const(GtkAllocation)* allocation) c_gtk_widget_set_allocation; ///
  void function(GtkWidget* widget, bool appPaintable) c_gtk_widget_set_app_paintable; ///
  void function(GtkWidget* widget, bool canDefault) c_gtk_widget_set_can_default; ///
  void function(GtkWidget* widget, bool canFocus) c_gtk_widget_set_can_focus; ///
  void function(GtkWidget* widget, bool isVisible) c_gtk_widget_set_child_visible; ///
  void function(GtkWidget* widget, const(GtkAllocation)* clip) c_gtk_widget_set_clip; ///
  void function(GtkWidget* widget, const(char)* name) c_gtk_widget_set_composite_name; ///
  void function(GtkWidget* widget, GdkDevice* device, bool enabled) c_gtk_widget_set_device_enabled; ///
  void function(GtkWidget* widget, GdkDevice* device, GdkEventMask events) c_gtk_widget_set_device_events; ///
  void function(GtkWidget* widget, GtkTextDirection dir) c_gtk_widget_set_direction; ///
  void function(GtkWidget* widget, bool doubleBuffered) c_gtk_widget_set_double_buffered; ///
  void function(GtkWidget* widget, int events) c_gtk_widget_set_events; ///
  void function(GtkWidget* widget, bool focusOnClick) c_gtk_widget_set_focus_on_click; ///
  void function(GtkWidget* widget, PangoFontMap* fontMap) c_gtk_widget_set_font_map; ///
  void function(GtkWidget* widget, const(cairo_font_options_t)* options) c_gtk_widget_set_font_options; ///
  void function(GtkWidget* widget, GtkAlign align_) c_gtk_widget_set_halign; ///
  void function(GtkWidget* widget, bool hasTooltip) c_gtk_widget_set_has_tooltip; ///
  void function(GtkWidget* widget, bool hasWindow) c_gtk_widget_set_has_window; ///
  void function(GtkWidget* widget, bool expand) c_gtk_widget_set_hexpand; ///
  void function(GtkWidget* widget, bool set) c_gtk_widget_set_hexpand_set; ///
  void function(GtkWidget* widget, bool mapped) c_gtk_widget_set_mapped; ///
  void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_bottom; ///
  void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_end; ///
  void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_left; ///
  void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_right; ///
  void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_start; ///
  void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_top; ///
  void function(GtkWidget* widget, const(char)* name) c_gtk_widget_set_name; ///
  void function(GtkWidget* widget, bool noShowAll) c_gtk_widget_set_no_show_all; ///
  void function(GtkWidget* widget, double opacity) c_gtk_widget_set_opacity; ///
  void function(GtkWidget* widget, GtkWidget* parent) c_gtk_widget_set_parent; ///
  void function(GtkWidget* widget, GdkWindow* parentWindow) c_gtk_widget_set_parent_window; ///
  void function(GtkWidget* widget, bool realized) c_gtk_widget_set_realized; ///
  void function(GtkWidget* widget, bool receivesDefault) c_gtk_widget_set_receives_default; ///
  void function(GtkWidget* widget, bool redrawOnAllocate) c_gtk_widget_set_redraw_on_allocate; ///
  void function(GtkWidget* widget, bool sensitive) c_gtk_widget_set_sensitive; ///
  void function(GtkWidget* widget, int width, int height) c_gtk_widget_set_size_request; ///
  void function(GtkWidget* widget, GtkStateType state) c_gtk_widget_set_state; ///
  void function(GtkWidget* widget, GtkStateFlags flags, bool clear) c_gtk_widget_set_state_flags; ///
  void function(GtkWidget* widget, GtkStyle* style) c_gtk_widget_set_style; ///
  void function(GtkWidget* widget, bool supportMultidevice) c_gtk_widget_set_support_multidevice; ///
  void function(GtkWidget* widget, const(char)* markup) c_gtk_widget_set_tooltip_markup; ///
  void function(GtkWidget* widget, const(char)* text) c_gtk_widget_set_tooltip_text; ///
  void function(GtkWidget* widget, GtkWindow* customWindow) c_gtk_widget_set_tooltip_window; ///
  void function(GtkWidget* widget, GtkAlign align_) c_gtk_widget_set_valign; ///
  void function(GtkWidget* widget, bool expand) c_gtk_widget_set_vexpand; ///
  void function(GtkWidget* widget, bool set) c_gtk_widget_set_vexpand_set; ///
  void function(GtkWidget* widget, bool visible) c_gtk_widget_set_visible; ///
  void function(GtkWidget* widget, GdkVisual* visual) c_gtk_widget_set_visual; ///
  void function(GtkWidget* widget, GdkWindow* window) c_gtk_widget_set_window; ///
  void function(GtkWidget* widget, cairo_region_t* region) c_gtk_widget_shape_combine_region; ///
  void function(GtkWidget* widget) c_gtk_widget_show; ///
  void function(GtkWidget* widget) c_gtk_widget_show_all; ///
  void function(GtkWidget* widget) c_gtk_widget_show_now; ///
  void function(GtkWidget* widget, GtkAllocation* allocation) c_gtk_widget_size_allocate; ///
  void function(GtkWidget* widget, GtkAllocation* allocation, int baseline) c_gtk_widget_size_allocate_with_baseline; ///
  void function(GtkWidget* widget, GtkRequisition* requisition) c_gtk_widget_size_request; ///
  void function(GtkWidget* widget) c_gtk_widget_style_attach; ///
  void function(GtkWidget* widget, const(char)* firstPropertyName,  ...) c_gtk_widget_style_get; ///
  void function(GtkWidget* widget, const(char)* propertyName, GValue* value) c_gtk_widget_style_get_property; ///
  void function(GtkWidget* widget, const(char)* firstPropertyName, void* varArgs) c_gtk_widget_style_get_valist; ///
  void function(GtkWidget* widget) c_gtk_widget_thaw_child_notify; ///
  bool function(GtkWidget* srcWidget, GtkWidget* destWidget, int srcX, int srcY, int* destX, int* destY) c_gtk_widget_translate_coordinates; ///
  void function(GtkWidget* widget) c_gtk_widget_trigger_tooltip_query; ///
  void function(GtkWidget* widget) c_gtk_widget_unmap; ///
  void function(GtkWidget* widget) c_gtk_widget_unparent; ///
  void function(GtkWidget* widget) c_gtk_widget_unrealize; ///
  void function(GtkWidget* widget, GdkWindow* window) c_gtk_widget_unregister_window; ///
  void function(GtkWidget* widget, GtkStateFlags flags) c_gtk_widget_unset_state_flags; ///

  // WidgetAccessible
  GType function() c_gtk_widget_accessible_get_type; ///

  // WidgetClass
  void function(GtkWidgetClass* widgetClass, const(char)* callbackName, GCallback callbackSymbol) c_gtk_widget_class_bind_template_callback_full; ///
  void function(GtkWidgetClass* widgetClass, const(char)* name, bool internalChild, ptrdiff_t structOffset) c_gtk_widget_class_bind_template_child_full; ///
  GParamSpec* function(GtkWidgetClass* klass, const(char)* propertyName) c_gtk_widget_class_find_style_property; ///
  const(char)* function(GtkWidgetClass* widgetClass) c_gtk_widget_class_get_css_name; ///
  void function(GtkWidgetClass* klass, GParamSpec* pspec) c_gtk_widget_class_install_style_property; ///
  void function(GtkWidgetClass* klass, GParamSpec* pspec, GtkRcPropertyParser parser) c_gtk_widget_class_install_style_property_parser; ///
  GParamSpec** function(GtkWidgetClass* klass, uint* nProperties) c_gtk_widget_class_list_style_properties; ///
  void function(GtkWidgetClass* widgetClass, AtkRole role) c_gtk_widget_class_set_accessible_role; ///
  void function(GtkWidgetClass* widgetClass, GType type) c_gtk_widget_class_set_accessible_type; ///
  void function(GtkWidgetClass* widgetClass, GtkBuilderConnectFunc connectFunc, void* connectData, GDestroyNotify connectDataDestroy) c_gtk_widget_class_set_connect_func; ///
  void function(GtkWidgetClass* widgetClass, const(char)* name) c_gtk_widget_class_set_css_name; ///
  void function(GtkWidgetClass* widgetClass, GBytes* templateBytes) c_gtk_widget_class_set_template; ///
  void function(GtkWidgetClass* widgetClass, const(char)* resourceName) c_gtk_widget_class_set_template_from_resource; ///

  // WidgetPath
  GType function() c_gtk_widget_path_get_type; ///
  GtkWidgetPath* function() c_gtk_widget_path_new; ///
  int function(GtkWidgetPath* path, GtkWidget* widget) c_gtk_widget_path_append_for_widget; ///
  int function(GtkWidgetPath* path, GType type) c_gtk_widget_path_append_type; ///
  int function(GtkWidgetPath* path, GtkWidgetPath* siblings, uint siblingIndex) c_gtk_widget_path_append_with_siblings; ///
  GtkWidgetPath* function(const(GtkWidgetPath)* path) c_gtk_widget_path_copy; ///
  void function(GtkWidgetPath* path) c_gtk_widget_path_free; ///
  GType function(const(GtkWidgetPath)* path) c_gtk_widget_path_get_object_type; ///
  bool function(const(GtkWidgetPath)* path, GType type) c_gtk_widget_path_has_parent; ///
  bool function(const(GtkWidgetPath)* path, GType type) c_gtk_widget_path_is_type; ///
  void function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_add_class; ///
  void function(GtkWidgetPath* path, int pos, const(char)* name, GtkRegionFlags flags) c_gtk_widget_path_iter_add_region; ///
  void function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_clear_classes; ///
  void function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_clear_regions; ///
  const(char)* function(const(GtkWidgetPath)* path, int pos) c_gtk_widget_path_iter_get_name; ///
  const(char)* function(const(GtkWidgetPath)* path, int pos) c_gtk_widget_path_iter_get_object_name; ///
  GType function(const(GtkWidgetPath)* path, int pos) c_gtk_widget_path_iter_get_object_type; ///
  uint function(const(GtkWidgetPath)* path, int pos) c_gtk_widget_path_iter_get_sibling_index; ///
  const(GtkWidgetPath)* function(const(GtkWidgetPath)* path, int pos) c_gtk_widget_path_iter_get_siblings; ///
  GtkStateFlags function(const(GtkWidgetPath)* path, int pos) c_gtk_widget_path_iter_get_state; ///
  bool function(const(GtkWidgetPath)* path, int pos, const(char)* name) c_gtk_widget_path_iter_has_class; ///
  bool function(const(GtkWidgetPath)* path, int pos, const(char)* name) c_gtk_widget_path_iter_has_name; ///
  bool function(const(GtkWidgetPath)* path, int pos, GQuark qname) c_gtk_widget_path_iter_has_qclass; ///
  bool function(const(GtkWidgetPath)* path, int pos, GQuark qname) c_gtk_widget_path_iter_has_qname; ///
  bool function(const(GtkWidgetPath)* path, int pos, GQuark qname, GtkRegionFlags* flags) c_gtk_widget_path_iter_has_qregion; ///
  bool function(const(GtkWidgetPath)* path, int pos, const(char)* name, GtkRegionFlags* flags) c_gtk_widget_path_iter_has_region; ///
  GSList* function(const(GtkWidgetPath)* path, int pos) c_gtk_widget_path_iter_list_classes; ///
  GSList* function(const(GtkWidgetPath)* path, int pos) c_gtk_widget_path_iter_list_regions; ///
  void function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_remove_class; ///
  void function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_remove_region; ///
  void function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_set_name; ///
  void function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_set_object_name; ///
  void function(GtkWidgetPath* path, int pos, GType type) c_gtk_widget_path_iter_set_object_type; ///
  void function(GtkWidgetPath* path, int pos, GtkStateFlags state) c_gtk_widget_path_iter_set_state; ///
  int function(const(GtkWidgetPath)* path) c_gtk_widget_path_length; ///
  void function(GtkWidgetPath* path, GType type) c_gtk_widget_path_prepend_type; ///
  GtkWidgetPath* function(GtkWidgetPath* path) c_gtk_widget_path_ref; ///
  char* function(const(GtkWidgetPath)* path) c_gtk_widget_path_to_string; ///
  void function(GtkWidgetPath* path) c_gtk_widget_path_unref; ///

  // Window
  GType function() c_gtk_window_get_type; ///
  GtkWidget* function(GtkWindowType type) c_gtk_window_new; ///
  GList* function() c_gtk_window_get_default_icon_list; ///
  const(char)* function() c_gtk_window_get_default_icon_name; ///
  GList* function() c_gtk_window_list_toplevels; ///
  void function(bool setting) c_gtk_window_set_auto_startup_notification; ///
  void function(PixbufC* icon) c_gtk_window_set_default_icon; ///
  bool function(const(char)* filename, GError** _err) c_gtk_window_set_default_icon_from_file; ///
  void function(GList* list) c_gtk_window_set_default_icon_list; ///
  void function(const(char)* name) c_gtk_window_set_default_icon_name; ///
  void function(bool enable) c_gtk_window_set_interactive_debugging; ///
  bool function(GtkWindow* window) c_gtk_window_activate_default; ///
  bool function(GtkWindow* window) c_gtk_window_activate_focus; ///
  bool function(GtkWindow* window, GdkEventKey* event) c_gtk_window_activate_key; ///
  void function(GtkWindow* window, GtkAccelGroup* accelGroup) c_gtk_window_add_accel_group; ///
  void function(GtkWindow* window, uint keyval, GtkWidget* target) c_gtk_window_add_mnemonic; ///
  void function(GtkWindow* window, int button, int rootX, int rootY, uint timestamp) c_gtk_window_begin_move_drag; ///
  void function(GtkWindow* window, GdkWindowEdge edge, int button, int rootX, int rootY, uint timestamp) c_gtk_window_begin_resize_drag; ///
  void function(GtkWindow* window) c_gtk_window_close; ///
  void function(GtkWindow* window) c_gtk_window_deiconify; ///
  void function(GtkWindow* window) c_gtk_window_fullscreen; ///
  void function(GtkWindow* window, GdkScreen* screen, int monitor) c_gtk_window_fullscreen_on_monitor; ///
  bool function(GtkWindow* window) c_gtk_window_get_accept_focus; ///
  GtkApplication* function(GtkWindow* window) c_gtk_window_get_application; ///
  GtkWidget* function(GtkWindow* window) c_gtk_window_get_attached_to; ///
  bool function(GtkWindow* window) c_gtk_window_get_decorated; ///
  void function(GtkWindow* window, int* width, int* height) c_gtk_window_get_default_size; ///
  GtkWidget* function(GtkWindow* window) c_gtk_window_get_default_widget; ///
  bool function(GtkWindow* window) c_gtk_window_get_deletable; ///
  bool function(GtkWindow* window) c_gtk_window_get_destroy_with_parent; ///
  GtkWidget* function(GtkWindow* window) c_gtk_window_get_focus; ///
  bool function(GtkWindow* window) c_gtk_window_get_focus_on_map; ///
  bool function(GtkWindow* window) c_gtk_window_get_focus_visible; ///
  GdkGravity function(GtkWindow* window) c_gtk_window_get_gravity; ///
  GtkWindowGroup* function(GtkWindow* window) c_gtk_window_get_group; ///
  bool function(GtkWindow* window) c_gtk_window_get_has_resize_grip; ///
  bool function(GtkWindow* window) c_gtk_window_get_hide_titlebar_when_maximized; ///
  PixbufC* function(GtkWindow* window) c_gtk_window_get_icon; ///
  GList* function(GtkWindow* window) c_gtk_window_get_icon_list; ///
  const(char)* function(GtkWindow* window) c_gtk_window_get_icon_name; ///
  GdkModifierType function(GtkWindow* window) c_gtk_window_get_mnemonic_modifier; ///
  bool function(GtkWindow* window) c_gtk_window_get_mnemonics_visible; ///
  bool function(GtkWindow* window) c_gtk_window_get_modal; ///
  double function(GtkWindow* window) c_gtk_window_get_opacity; ///
  void function(GtkWindow* window, int* rootX, int* rootY) c_gtk_window_get_position; ///
  bool function(GtkWindow* window) c_gtk_window_get_resizable; ///
  bool function(GtkWindow* window, GdkRectangle* rect) c_gtk_window_get_resize_grip_area; ///
  const(char)* function(GtkWindow* window) c_gtk_window_get_role; ///
  GdkScreen* function(GtkWindow* window) c_gtk_window_get_screen; ///
  void function(GtkWindow* window, int* width, int* height) c_gtk_window_get_size; ///
  bool function(GtkWindow* window) c_gtk_window_get_skip_pager_hint; ///
  bool function(GtkWindow* window) c_gtk_window_get_skip_taskbar_hint; ///
  const(char)* function(GtkWindow* window) c_gtk_window_get_title; ///
  GtkWidget* function(GtkWindow* window) c_gtk_window_get_titlebar; ///
  GtkWindow* function(GtkWindow* window) c_gtk_window_get_transient_for; ///
  GdkWindowTypeHint function(GtkWindow* window) c_gtk_window_get_type_hint; ///
  bool function(GtkWindow* window) c_gtk_window_get_urgency_hint; ///
  GtkWindowType function(GtkWindow* window) c_gtk_window_get_window_type; ///
  bool function(GtkWindow* window) c_gtk_window_has_group; ///
  bool function(GtkWindow* window) c_gtk_window_has_toplevel_focus; ///
  void function(GtkWindow* window) c_gtk_window_iconify; ///
  bool function(GtkWindow* window) c_gtk_window_is_active; ///
  bool function(GtkWindow* window) c_gtk_window_is_maximized; ///
  void function(GtkWindow* window) c_gtk_window_maximize; ///
  bool function(GtkWindow* window, uint keyval, GdkModifierType modifier) c_gtk_window_mnemonic_activate; ///
  void function(GtkWindow* window, int x, int y) c_gtk_window_move; ///
  bool function(GtkWindow* window, const(char)* geometry) c_gtk_window_parse_geometry; ///
  void function(GtkWindow* window) c_gtk_window_present; ///
  void function(GtkWindow* window, uint timestamp) c_gtk_window_present_with_time; ///
  bool function(GtkWindow* window, GdkEventKey* event) c_gtk_window_propagate_key_event; ///
  void function(GtkWindow* window, GtkAccelGroup* accelGroup) c_gtk_window_remove_accel_group; ///
  void function(GtkWindow* window, uint keyval, GtkWidget* target) c_gtk_window_remove_mnemonic; ///
  void function(GtkWindow* window) c_gtk_window_reshow_with_initial_size; ///
  void function(GtkWindow* window, int width, int height) c_gtk_window_resize; ///
  bool function(GtkWindow* window) c_gtk_window_resize_grip_is_visible; ///
  void function(GtkWindow* window, int width, int height) c_gtk_window_resize_to_geometry; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_accept_focus; ///
  void function(GtkWindow* window, GtkApplication* application) c_gtk_window_set_application; ///
  void function(GtkWindow* window, GtkWidget* attachWidget) c_gtk_window_set_attached_to; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_decorated; ///
  void function(GtkWindow* window, GtkWidget* defaultWidget) c_gtk_window_set_default; ///
  void function(GtkWindow* window, int width, int height) c_gtk_window_set_default_geometry; ///
  void function(GtkWindow* window, int width, int height) c_gtk_window_set_default_size; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_deletable; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_destroy_with_parent; ///
  void function(GtkWindow* window, GtkWidget* focus) c_gtk_window_set_focus; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_focus_on_map; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_focus_visible; ///
  void function(GtkWindow* window, GtkWidget* geometryWidget, GdkGeometry* geometry, GdkWindowHints geomMask) c_gtk_window_set_geometry_hints; ///
  void function(GtkWindow* window, GdkGravity gravity) c_gtk_window_set_gravity; ///
  void function(GtkWindow* window, bool value) c_gtk_window_set_has_resize_grip; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_has_user_ref_count; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_hide_titlebar_when_maximized; ///
  void function(GtkWindow* window, PixbufC* icon) c_gtk_window_set_icon; ///
  bool function(GtkWindow* window, const(char)* filename, GError** _err) c_gtk_window_set_icon_from_file; ///
  void function(GtkWindow* window, GList* list) c_gtk_window_set_icon_list; ///
  void function(GtkWindow* window, const(char)* name) c_gtk_window_set_icon_name; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_keep_above; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_keep_below; ///
  void function(GtkWindow* window, GdkModifierType modifier) c_gtk_window_set_mnemonic_modifier; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_mnemonics_visible; ///
  void function(GtkWindow* window, bool modal) c_gtk_window_set_modal; ///
  void function(GtkWindow* window, double opacity) c_gtk_window_set_opacity; ///
  void function(GtkWindow* window, GtkWindowPosition position) c_gtk_window_set_position; ///
  void function(GtkWindow* window, bool resizable) c_gtk_window_set_resizable; ///
  void function(GtkWindow* window, const(char)* role) c_gtk_window_set_role; ///
  void function(GtkWindow* window, GdkScreen* screen) c_gtk_window_set_screen; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_skip_pager_hint; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_skip_taskbar_hint; ///
  void function(GtkWindow* window, const(char)* startupId) c_gtk_window_set_startup_id; ///
  void function(GtkWindow* window, const(char)* title) c_gtk_window_set_title; ///
  void function(GtkWindow* window, GtkWidget* titlebar) c_gtk_window_set_titlebar; ///
  void function(GtkWindow* window, GtkWindow* parent) c_gtk_window_set_transient_for; ///
  void function(GtkWindow* window, GdkWindowTypeHint hint) c_gtk_window_set_type_hint; ///
  void function(GtkWindow* window, bool setting) c_gtk_window_set_urgency_hint; ///
  void function(GtkWindow* window, const(char)* wmclassName, const(char)* wmclassClass) c_gtk_window_set_wmclass; ///
  void function(GtkWindow* window) c_gtk_window_stick; ///
  void function(GtkWindow* window) c_gtk_window_unfullscreen; ///
  void function(GtkWindow* window) c_gtk_window_unmaximize; ///
  void function(GtkWindow* window) c_gtk_window_unstick; ///

  // WindowAccessible
  GType function() c_gtk_window_accessible_get_type; ///

  // WindowGroup
  GType function() c_gtk_window_group_get_type; ///
  GtkWindowGroup* function() c_gtk_window_group_new; ///
  void function(GtkWindowGroup* windowGroup, GtkWindow* window) c_gtk_window_group_add_window; ///
  GtkWidget* function(GtkWindowGroup* windowGroup, GdkDevice* device) c_gtk_window_group_get_current_device_grab; ///
  GtkWidget* function(GtkWindowGroup* windowGroup) c_gtk_window_group_get_current_grab; ///
  GList* function(GtkWindowGroup* windowGroup) c_gtk_window_group_list_windows; ///
  void function(GtkWindowGroup* windowGroup, GtkWindow* window) c_gtk_window_group_remove_window; ///

  // global
  bool function(ObjectC* object, uint accelKey, GdkModifierType accelMods) c_gtk_accel_groups_activate; ///
  GSList* function(ObjectC* object) c_gtk_accel_groups_from_object; ///
  GdkModifierType function() c_gtk_accelerator_get_default_mod_mask; ///
  char* function(uint acceleratorKey, GdkModifierType acceleratorMods) c_gtk_accelerator_get_label; ///
  char* function(GdkDisplay* display, uint acceleratorKey, uint keycode, GdkModifierType acceleratorMods) c_gtk_accelerator_get_label_with_keycode; ///
  char* function(uint acceleratorKey, GdkModifierType acceleratorMods) c_gtk_accelerator_name; ///
  char* function(GdkDisplay* display, uint acceleratorKey, uint keycode, GdkModifierType acceleratorMods) c_gtk_accelerator_name_with_keycode; ///
  void function(const(char)* accelerator, uint* acceleratorKey, GdkModifierType* acceleratorMods) c_gtk_accelerator_parse; ///
  void function(const(char)* accelerator, uint* acceleratorKey, uint** acceleratorCodes, GdkModifierType* acceleratorMods) c_gtk_accelerator_parse_with_keycode; ///
  void function(GdkModifierType defaultModMask) c_gtk_accelerator_set_default_mod_mask; ///
  bool function(uint keyval, GdkModifierType modifiers) c_gtk_accelerator_valid; ///
  bool function(GdkScreen* screen) c_gtk_alternative_dialog_button_order; ///
  bool function(ObjectC* object, uint keyval, GdkModifierType modifiers) c_gtk_bindings_activate; ///
  bool function(ObjectC* object, GdkEventKey* event) c_gtk_bindings_activate_event; ///
  bool function(cairo_t* cr, GdkWindow* window) c_gtk_cairo_should_draw_window; ///
  void function(cairo_t* cr, GtkWidget* widget, GdkWindow* window) c_gtk_cairo_transform_to_window; ///
  const(char)* function(uint requiredMajor, uint requiredMinor, uint requiredMicro) c_gtk_check_version; ///
  void function(GtkWidget* widget, GdkDevice* device, bool blockOthers) c_gtk_device_grab_add; ///
  void function(GtkWidget* widget, GdkDevice* device) c_gtk_device_grab_remove; ///
  void function() c_gtk_disable_setlocale; ///
  int function(int extraSpace, uint nRequestedSizes, GtkRequestedSize* sizes) c_gtk_distribute_natural_allocation; ///
  void function(GdkDragContext* context) c_gtk_drag_cancel; ///
  void function(GdkDragContext* context, bool success, bool del, uint time) c_gtk_drag_finish; ///
  GtkWidget* function(GdkDragContext* context) c_gtk_drag_get_source_widget; ///
  void function(GdkDragContext* context) c_gtk_drag_set_icon_default; ///
  void function(GdkDragContext* context, GIcon* icon, int hotX, int hotY) c_gtk_drag_set_icon_gicon; ///
  void function(GdkDragContext* context, const(char)* iconName, int hotX, int hotY) c_gtk_drag_set_icon_name; ///
  void function(GdkDragContext* context, PixbufC* pixbuf, int hotX, int hotY) c_gtk_drag_set_icon_pixbuf; ///
  void function(GdkDragContext* context, const(char)* stockId, int hotX, int hotY) c_gtk_drag_set_icon_stock; ///
  void function(GdkDragContext* context, cairo_surface_t* surface) c_gtk_drag_set_icon_surface; ///
  void function(GdkDragContext* context, GtkWidget* widget, int hotX, int hotY) c_gtk_drag_set_icon_widget; ///
  void function(GtkWidget* widget, cairo_t* cr, const(GdkRectangle)* location, bool isPrimary, GtkTextDirection direction, bool drawArrow) c_gtk_draw_insertion_cursor; ///
  bool function() c_gtk_events_pending; ///
  bool function() c_gtk_false; ///
  uint function() c_gtk_get_binary_age; ///
  GdkEvent* function() c_gtk_get_current_event; ///
  GdkDevice* function() c_gtk_get_current_event_device; ///
  bool function(GdkModifierType* state) c_gtk_get_current_event_state; ///
  uint function() c_gtk_get_current_event_time; ///
  uint function() c_gtk_get_debug_flags; ///
  PangoLanguage* function() c_gtk_get_default_language; ///
  GtkWidget* function(GdkEvent* event) c_gtk_get_event_widget; ///
  uint function() c_gtk_get_interface_age; ///
  GtkTextDirection function() c_gtk_get_locale_direction; ///
  uint function() c_gtk_get_major_version; ///
  uint function() c_gtk_get_micro_version; ///
  uint function() c_gtk_get_minor_version; ///
  GOptionGroup* function(bool openDefaultDisplay) c_gtk_get_option_group; ///
  GtkWidget* function() c_gtk_grab_get_current; ///
  void function(int* argc, char*** argv) c_gtk_init; ///
  bool function(int* argc, char*** argv) c_gtk_init_check; ///
  bool function(int* argc, char*** argv, const(char)* parameterString, const(GOptionEntry)* entries, const(char)* translationDomain, GError** _err) c_gtk_init_with_args; ///
  uint function(GtkKeySnoopFunc snooper, void* funcData) c_gtk_key_snooper_install; ///
  void function(uint snooperHandlerId) c_gtk_key_snooper_remove; ///
  void function() c_gtk_main; ///
  void function(GdkEvent* event) c_gtk_main_do_event; ///
  bool function() c_gtk_main_iteration; ///
  bool function(bool blocking) c_gtk_main_iteration_do; ///
  uint function() c_gtk_main_level; ///
  void function() c_gtk_main_quit; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, GtkArrowType arrowType, bool fill, int x, int y, int width, int height) c_gtk_paint_arrow; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_box; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height, GtkPositionType gapSide, int gapX, int gapWidth) c_gtk_paint_box_gap; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_check; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_diamond; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, int x, int y, GtkExpanderStyle expanderStyle) c_gtk_paint_expander; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height, GtkPositionType gapSide) c_gtk_paint_extension; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_flat_box; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_focus; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height, GtkOrientation orientation) c_gtk_paint_handle; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, int x1, int x2, int y) c_gtk_paint_hline; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, bool useText, GtkWidget* widget, const(char)* detail, int x, int y, PangoLayout* layout) c_gtk_paint_layout; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_option; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, GdkWindowEdge edge, int x, int y, int width, int height) c_gtk_paint_resize_grip; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_shadow; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height, GtkPositionType gapSide, int gapX, int gapWidth) c_gtk_paint_shadow_gap; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height, GtkOrientation orientation) c_gtk_paint_slider; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, uint step, int x, int y, int width, int height) c_gtk_paint_spinner; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_tab; ///
  void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, int y1, int y2, int x) c_gtk_paint_vline; ///
  bool function(int* argc, char*** argv) c_gtk_parse_args; ///
  GtkPageSetup* function(GtkWindow* parent, GtkPageSetup* pageSetup, GtkPrintSettings* settings) c_gtk_print_run_page_setup_dialog; ///
  void function(GtkWindow* parent, GtkPageSetup* pageSetup, GtkPrintSettings* settings, GtkPageSetupDoneFunc doneCb, void* data) c_gtk_print_run_page_setup_dialog_async; ///
  void function(GtkWidget* widget, GdkEvent* event) c_gtk_propagate_event; ///
  void function(const(char)* filename) c_gtk_rc_add_default_file; ///
  char* function(const(char)* moduleFile) c_gtk_rc_find_module_in_path; ///
  char* function(GtkSettings* settings, GScanner* scanner, const(char)* pixmapFile) c_gtk_rc_find_pixmap_in_path; ///
  char** function() c_gtk_rc_get_default_files; ///
  char* function() c_gtk_rc_get_im_module_file; ///
  char* function() c_gtk_rc_get_im_module_path; ///
  char* function() c_gtk_rc_get_module_dir; ///
  GtkStyle* function(GtkWidget* widget) c_gtk_rc_get_style; ///
  GtkStyle* function(GtkSettings* settings, const(char)* widgetPath, const(char)* classPath, GType type) c_gtk_rc_get_style_by_paths; ///
  char* function() c_gtk_rc_get_theme_dir; ///
  void function(const(char)* filename) c_gtk_rc_parse; ///
  uint function(GScanner* scanner, GdkColor* color) c_gtk_rc_parse_color; ///
  uint function(GScanner* scanner, GtkRcStyle* style, GdkColor* color) c_gtk_rc_parse_color_full; ///
  uint function(GScanner* scanner, GtkPathPriorityType* priority) c_gtk_rc_parse_priority; ///
  uint function(GScanner* scanner, GtkStateType* state) c_gtk_rc_parse_state; ///
  void function(const(char)* rcString) c_gtk_rc_parse_string; ///
  bool function() c_gtk_rc_reparse_all; ///
  bool function(GtkSettings* settings, bool forceLoad) c_gtk_rc_reparse_all_for_settings; ///
  void function(GtkSettings* settings) c_gtk_rc_reset_styles; ///
  GScanner* function() c_gtk_rc_scanner_new; ///
  void function(char** filenames) c_gtk_rc_set_default_files; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_activity; ///
  void function(GtkStyleContext* context, cairo_t* cr, double angle, double x, double y, double size) c_gtk_render_arrow; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_background; ///
  void function(GtkStyleContext* context, double x, double y, double width, double height, GdkRectangle* outClip) c_gtk_render_background_get_clip; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_check; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_expander; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height, GtkPositionType gapSide) c_gtk_render_extension; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_focus; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_frame; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height, GtkPositionType gapSide, double xy0Gap, double xy1Gap) c_gtk_render_frame_gap; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_handle; ///
  void function(GtkStyleContext* context, cairo_t* cr, PixbufC* pixbuf, double x, double y) c_gtk_render_icon; ///
  PixbufC* function(GtkStyleContext* context, const(GtkIconSource)* source, GtkIconSize size) c_gtk_render_icon_pixbuf; ///
  void function(GtkStyleContext* context, cairo_t* cr, cairo_surface_t* surface, double x, double y) c_gtk_render_icon_surface; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, PangoLayout* layout, int index, PangoDirection direction) c_gtk_render_insertion_cursor; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, PangoLayout* layout) c_gtk_render_layout; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x0, double y0, double x1, double y1) c_gtk_render_line; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_option; ///
  void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height, GtkOrientation orientation) c_gtk_render_slider; ///
  void function(double r, double g, double b, double* h, double* s, double* v) c_gtk_rgb_to_hsv; ///
  void function(GtkWidget* widget, GdkAtom selection, GdkAtom target, uint info) c_gtk_selection_add_target; ///
  void function(GtkWidget* widget, GdkAtom selection, const(GtkTargetEntry)* targets, uint ntargets) c_gtk_selection_add_targets; ///
  void function(GtkWidget* widget, GdkAtom selection) c_gtk_selection_clear_targets; ///
  bool function(GtkWidget* widget, GdkAtom selection, GdkAtom target, uint time) c_gtk_selection_convert; ///
  bool function(GtkWidget* widget, GdkAtom selection, uint time) c_gtk_selection_owner_set; ///
  bool function(GdkDisplay* display, GtkWidget* widget, GdkAtom selection, uint time) c_gtk_selection_owner_set_for_display; ///
  void function(GtkWidget* widget) c_gtk_selection_remove_all; ///
  void function(uint flags) c_gtk_set_debug_flags; ///
  void function(GtkWindow* parent, const(char)* firstPropertyName,  ...) c_gtk_show_about_dialog; ///
  bool function(GdkScreen* screen, const(char)* uri, uint timestamp, GError** _err) c_gtk_show_uri; ///
  bool function(GtkWindow* parent, const(char)* uri, uint timestamp, GError** _err) c_gtk_show_uri_on_window; ///
  void function(const(GtkStockItem)* items, uint nItems) c_gtk_stock_add; ///
  void function(const(GtkStockItem)* items, uint nItems) c_gtk_stock_add_static; ///
  GSList* function() c_gtk_stock_list_ids; ///
  bool function(const(char)* stockId, GtkStockItem* item) c_gtk_stock_lookup; ///
  void function(const(char)* domain, GtkTranslateFunc func, void* data, GDestroyNotify notify) c_gtk_stock_set_translate_func; ///
  void function(GtkTargetEntry* targets, int nTargets) c_gtk_target_table_free; ///
  GtkTargetEntry* function(GtkTargetList* list, int* nTargets) c_gtk_target_table_new_from_list; ///
  bool function(GdkAtom* targets, int nTargets, bool writable) c_gtk_targets_include_image; ///
  bool function(GdkAtom* targets, int nTargets, GtkTextBuffer* buffer) c_gtk_targets_include_rich_text; ///
  bool function(GdkAtom* targets, int nTargets) c_gtk_targets_include_text; ///
  bool function(GdkAtom* targets, int nTargets) c_gtk_targets_include_uri; ///
  GtkWidget* function(const(char)* windowTitle, const(char)* dialogText) c_gtk_test_create_simple_window; ///
  GtkWidget* function(GType widgetType, const(char)* firstPropertyName,  ...) c_gtk_test_create_widget; ///
  GtkWidget* function(const(char)* windowTitle, const(char)* dialogText,  ...) c_gtk_test_display_button_window; ///
  GtkWidget* function(GtkWidget* widget, const(char)* labelPattern) c_gtk_test_find_label; ///
  GtkWidget* function(GtkWidget* baseWidget, GType widgetType) c_gtk_test_find_sibling; ///
  GtkWidget* function(GtkWidget* widget, const(char)* labelPattern, GType widgetType) c_gtk_test_find_widget; ///
  void function(int* argcp, char*** argvp,  ...) c_gtk_test_init; ///
  const(GType)* function(uint* nTypes) c_gtk_test_list_all_types; ///
  void function() c_gtk_test_register_all_types; ///
  double function(GtkWidget* widget) c_gtk_test_slider_get_value; ///
  void function(GtkWidget* widget, double percentage) c_gtk_test_slider_set_perc; ///
  bool function(GtkSpinButton* spinner, uint button, bool upwards) c_gtk_test_spin_button_click; ///
  char* function(GtkWidget* widget) c_gtk_test_text_get; ///
  void function(GtkWidget* widget, const(char)* string_) c_gtk_test_text_set; ///
  bool function(GtkWidget* widget, uint button, GdkModifierType modifiers) c_gtk_test_widget_click; ///
  bool function(GtkWidget* widget, uint keyval, GdkModifierType modifiers) c_gtk_test_widget_send_key; ///
  void function(GtkWidget* widget) c_gtk_test_widget_wait_for_draw; ///
  bool function(GtkSelectionData* selectionData, GtkTreeModel** treeModel, GtkTreePath** path) c_gtk_tree_get_row_drag_data; ///
  bool function(GtkSelectionData* selectionData, GtkTreeModel* treeModel, GtkTreePath* path) c_gtk_tree_set_row_drag_data; ///
  bool function() c_gtk_true; ///
}

// AboutDialog

/** */
alias gtk_about_dialog_get_type = c_gtk_about_dialog_get_type;

/** */
alias gtk_about_dialog_new = c_gtk_about_dialog_new;

/** */
alias gtk_about_dialog_add_credit_section = c_gtk_about_dialog_add_credit_section;

/** */
alias gtk_about_dialog_get_artists = c_gtk_about_dialog_get_artists;

/** */
alias gtk_about_dialog_get_authors = c_gtk_about_dialog_get_authors;

/** */
alias gtk_about_dialog_get_comments = c_gtk_about_dialog_get_comments;

/** */
alias gtk_about_dialog_get_copyright = c_gtk_about_dialog_get_copyright;

/** */
alias gtk_about_dialog_get_documenters = c_gtk_about_dialog_get_documenters;

/** */
alias gtk_about_dialog_get_license = c_gtk_about_dialog_get_license;

/** */
alias gtk_about_dialog_get_license_type = c_gtk_about_dialog_get_license_type;

/** */
alias gtk_about_dialog_get_logo = c_gtk_about_dialog_get_logo;

/** */
alias gtk_about_dialog_get_logo_icon_name = c_gtk_about_dialog_get_logo_icon_name;

/** */
alias gtk_about_dialog_get_program_name = c_gtk_about_dialog_get_program_name;

/** */
alias gtk_about_dialog_get_translator_credits = c_gtk_about_dialog_get_translator_credits;

/** */
alias gtk_about_dialog_get_version = c_gtk_about_dialog_get_version;

/** */
alias gtk_about_dialog_get_website = c_gtk_about_dialog_get_website;

/** */
alias gtk_about_dialog_get_website_label = c_gtk_about_dialog_get_website_label;

/** */
alias gtk_about_dialog_get_wrap_license = c_gtk_about_dialog_get_wrap_license;

/** */
alias gtk_about_dialog_set_artists = c_gtk_about_dialog_set_artists;

/** */
alias gtk_about_dialog_set_authors = c_gtk_about_dialog_set_authors;

/** */
alias gtk_about_dialog_set_comments = c_gtk_about_dialog_set_comments;

/** */
alias gtk_about_dialog_set_copyright = c_gtk_about_dialog_set_copyright;

/** */
alias gtk_about_dialog_set_documenters = c_gtk_about_dialog_set_documenters;

/** */
alias gtk_about_dialog_set_license = c_gtk_about_dialog_set_license;

/** */
alias gtk_about_dialog_set_license_type = c_gtk_about_dialog_set_license_type;

/** */
alias gtk_about_dialog_set_logo = c_gtk_about_dialog_set_logo;

/** */
alias gtk_about_dialog_set_logo_icon_name = c_gtk_about_dialog_set_logo_icon_name;

/** */
alias gtk_about_dialog_set_program_name = c_gtk_about_dialog_set_program_name;

/** */
alias gtk_about_dialog_set_translator_credits = c_gtk_about_dialog_set_translator_credits;

/** */
alias gtk_about_dialog_set_version = c_gtk_about_dialog_set_version;

/** */
alias gtk_about_dialog_set_website = c_gtk_about_dialog_set_website;

/** */
alias gtk_about_dialog_set_website_label = c_gtk_about_dialog_set_website_label;

/** */
alias gtk_about_dialog_set_wrap_license = c_gtk_about_dialog_set_wrap_license;

// AccelGroup

/** */
alias gtk_accel_group_get_type = c_gtk_accel_group_get_type;

/** */
alias gtk_accel_group_new = c_gtk_accel_group_new;

/** */
alias gtk_accel_group_from_accel_closure = c_gtk_accel_group_from_accel_closure;

/** */
alias gtk_accel_group_activate = c_gtk_accel_group_activate;

/** */
alias gtk_accel_group_connect = c_gtk_accel_group_connect;

/** */
alias gtk_accel_group_connect_by_path = c_gtk_accel_group_connect_by_path;

/** */
alias gtk_accel_group_disconnect = c_gtk_accel_group_disconnect;

/** */
alias gtk_accel_group_disconnect_key = c_gtk_accel_group_disconnect_key;

/** */
alias gtk_accel_group_find = c_gtk_accel_group_find;

/** */
alias gtk_accel_group_get_is_locked = c_gtk_accel_group_get_is_locked;

/** */
alias gtk_accel_group_get_modifier_mask = c_gtk_accel_group_get_modifier_mask;

/** */
alias gtk_accel_group_lock = c_gtk_accel_group_lock;

/** */
alias gtk_accel_group_query = c_gtk_accel_group_query;

/** */
alias gtk_accel_group_unlock = c_gtk_accel_group_unlock;

// AccelLabel

/** */
alias gtk_accel_label_get_type = c_gtk_accel_label_get_type;

/** */
alias gtk_accel_label_new = c_gtk_accel_label_new;

/** */
alias gtk_accel_label_get_accel = c_gtk_accel_label_get_accel;

/** */
alias gtk_accel_label_get_accel_widget = c_gtk_accel_label_get_accel_widget;

/** */
alias gtk_accel_label_get_accel_width = c_gtk_accel_label_get_accel_width;

/** */
alias gtk_accel_label_refetch = c_gtk_accel_label_refetch;

/** */
alias gtk_accel_label_set_accel = c_gtk_accel_label_set_accel;

/** */
alias gtk_accel_label_set_accel_closure = c_gtk_accel_label_set_accel_closure;

/** */
alias gtk_accel_label_set_accel_widget = c_gtk_accel_label_set_accel_widget;

// AccelMap

/** */
alias gtk_accel_map_get_type = c_gtk_accel_map_get_type;

/** */
alias gtk_accel_map_add_entry = c_gtk_accel_map_add_entry;

/** */
alias gtk_accel_map_add_filter = c_gtk_accel_map_add_filter;

/** */
alias gtk_accel_map_change_entry = c_gtk_accel_map_change_entry;

/** */
alias gtk_accel_map_foreach = c_gtk_accel_map_foreach;

/** */
alias gtk_accel_map_foreach_unfiltered = c_gtk_accel_map_foreach_unfiltered;

/** */
alias gtk_accel_map_get = c_gtk_accel_map_get;

/** */
alias gtk_accel_map_load = c_gtk_accel_map_load;

/** */
alias gtk_accel_map_load_fd = c_gtk_accel_map_load_fd;

/** */
alias gtk_accel_map_load_scanner = c_gtk_accel_map_load_scanner;

/** */
alias gtk_accel_map_lock_path = c_gtk_accel_map_lock_path;

/** */
alias gtk_accel_map_lookup_entry = c_gtk_accel_map_lookup_entry;

/** */
alias gtk_accel_map_save = c_gtk_accel_map_save;

/** */
alias gtk_accel_map_save_fd = c_gtk_accel_map_save_fd;

/** */
alias gtk_accel_map_unlock_path = c_gtk_accel_map_unlock_path;

// Accessible

/** */
alias gtk_accessible_get_type = c_gtk_accessible_get_type;

/** */
alias gtk_accessible_connect_widget_destroyed = c_gtk_accessible_connect_widget_destroyed;

/** */
alias gtk_accessible_get_widget = c_gtk_accessible_get_widget;

/** */
alias gtk_accessible_set_widget = c_gtk_accessible_set_widget;

// Action

/** */
alias gtk_action_get_type = c_gtk_action_get_type;

/** */
alias gtk_action_new = c_gtk_action_new;

/** */
alias gtk_action_activate = c_gtk_action_activate;

/** */
alias gtk_action_block_activate = c_gtk_action_block_activate;

/** */
alias gtk_action_connect_accelerator = c_gtk_action_connect_accelerator;

/** */
alias gtk_action_create_icon = c_gtk_action_create_icon;

/** */
alias gtk_action_create_menu = c_gtk_action_create_menu;

/** */
alias gtk_action_create_menu_item = c_gtk_action_create_menu_item;

/** */
alias gtk_action_create_tool_item = c_gtk_action_create_tool_item;

/** */
alias gtk_action_disconnect_accelerator = c_gtk_action_disconnect_accelerator;

/** */
alias gtk_action_get_accel_closure = c_gtk_action_get_accel_closure;

/** */
alias gtk_action_get_accel_path = c_gtk_action_get_accel_path;

/** */
alias gtk_action_get_always_show_image = c_gtk_action_get_always_show_image;

/** */
alias gtk_action_get_gicon = c_gtk_action_get_gicon;

/** */
alias gtk_action_get_icon_name = c_gtk_action_get_icon_name;

/** */
alias gtk_action_get_is_important = c_gtk_action_get_is_important;

/** */
alias gtk_action_get_label = c_gtk_action_get_label;

/** */
alias gtk_action_get_name = c_gtk_action_get_name;

/** */
alias gtk_action_get_proxies = c_gtk_action_get_proxies;

/** */
alias gtk_action_get_sensitive = c_gtk_action_get_sensitive;

/** */
alias gtk_action_get_short_label = c_gtk_action_get_short_label;

/** */
alias gtk_action_get_stock_id = c_gtk_action_get_stock_id;

/** */
alias gtk_action_get_tooltip = c_gtk_action_get_tooltip;

/** */
alias gtk_action_get_visible = c_gtk_action_get_visible;

/** */
alias gtk_action_get_visible_horizontal = c_gtk_action_get_visible_horizontal;

/** */
alias gtk_action_get_visible_vertical = c_gtk_action_get_visible_vertical;

/** */
alias gtk_action_is_sensitive = c_gtk_action_is_sensitive;

/** */
alias gtk_action_is_visible = c_gtk_action_is_visible;

/** */
alias gtk_action_set_accel_group = c_gtk_action_set_accel_group;

/** */
alias gtk_action_set_accel_path = c_gtk_action_set_accel_path;

/** */
alias gtk_action_set_always_show_image = c_gtk_action_set_always_show_image;

/** */
alias gtk_action_set_gicon = c_gtk_action_set_gicon;

/** */
alias gtk_action_set_icon_name = c_gtk_action_set_icon_name;

/** */
alias gtk_action_set_is_important = c_gtk_action_set_is_important;

/** */
alias gtk_action_set_label = c_gtk_action_set_label;

/** */
alias gtk_action_set_sensitive = c_gtk_action_set_sensitive;

/** */
alias gtk_action_set_short_label = c_gtk_action_set_short_label;

/** */
alias gtk_action_set_stock_id = c_gtk_action_set_stock_id;

/** */
alias gtk_action_set_tooltip = c_gtk_action_set_tooltip;

/** */
alias gtk_action_set_visible = c_gtk_action_set_visible;

/** */
alias gtk_action_set_visible_horizontal = c_gtk_action_set_visible_horizontal;

/** */
alias gtk_action_set_visible_vertical = c_gtk_action_set_visible_vertical;

/** */
alias gtk_action_unblock_activate = c_gtk_action_unblock_activate;

// ActionBar

/** */
alias gtk_action_bar_get_type = c_gtk_action_bar_get_type;

/** */
alias gtk_action_bar_new = c_gtk_action_bar_new;

/** */
alias gtk_action_bar_get_center_widget = c_gtk_action_bar_get_center_widget;

/** */
alias gtk_action_bar_pack_end = c_gtk_action_bar_pack_end;

/** */
alias gtk_action_bar_pack_start = c_gtk_action_bar_pack_start;

/** */
alias gtk_action_bar_set_center_widget = c_gtk_action_bar_set_center_widget;

// ActionGroup

/** */
alias gtk_action_group_get_type = c_gtk_action_group_get_type;

/** */
alias gtk_action_group_new = c_gtk_action_group_new;

/** */
alias gtk_action_group_add_action = c_gtk_action_group_add_action;

/** */
alias gtk_action_group_add_action_with_accel = c_gtk_action_group_add_action_with_accel;

/** */
alias gtk_action_group_add_actions = c_gtk_action_group_add_actions;

/** */
alias gtk_action_group_add_actions_full = c_gtk_action_group_add_actions_full;

/** */
alias gtk_action_group_add_radio_actions = c_gtk_action_group_add_radio_actions;

/** */
alias gtk_action_group_add_radio_actions_full = c_gtk_action_group_add_radio_actions_full;

/** */
alias gtk_action_group_add_toggle_actions = c_gtk_action_group_add_toggle_actions;

/** */
alias gtk_action_group_add_toggle_actions_full = c_gtk_action_group_add_toggle_actions_full;

/** */
alias gtk_action_group_get_accel_group = c_gtk_action_group_get_accel_group;

/** */
alias gtk_action_group_get_action = c_gtk_action_group_get_action;

/** */
alias gtk_action_group_get_name = c_gtk_action_group_get_name;

/** */
alias gtk_action_group_get_sensitive = c_gtk_action_group_get_sensitive;

/** */
alias gtk_action_group_get_visible = c_gtk_action_group_get_visible;

/** */
alias gtk_action_group_list_actions = c_gtk_action_group_list_actions;

/** */
alias gtk_action_group_remove_action = c_gtk_action_group_remove_action;

/** */
alias gtk_action_group_set_accel_group = c_gtk_action_group_set_accel_group;

/** */
alias gtk_action_group_set_sensitive = c_gtk_action_group_set_sensitive;

/** */
alias gtk_action_group_set_translate_func = c_gtk_action_group_set_translate_func;

/** */
alias gtk_action_group_set_translation_domain = c_gtk_action_group_set_translation_domain;

/** */
alias gtk_action_group_set_visible = c_gtk_action_group_set_visible;

/** */
alias gtk_action_group_translate_string = c_gtk_action_group_translate_string;

// Actionable

/** */
alias gtk_actionable_get_type = c_gtk_actionable_get_type;

/** */
alias gtk_actionable_get_action_name = c_gtk_actionable_get_action_name;

/** */
alias gtk_actionable_get_action_target_value = c_gtk_actionable_get_action_target_value;

/** */
alias gtk_actionable_set_action_name = c_gtk_actionable_set_action_name;

/** */
alias gtk_actionable_set_action_target = c_gtk_actionable_set_action_target;

/** */
alias gtk_actionable_set_action_target_value = c_gtk_actionable_set_action_target_value;

/** */
alias gtk_actionable_set_detailed_action_name = c_gtk_actionable_set_detailed_action_name;

// Activatable

/** */
alias gtk_activatable_get_type = c_gtk_activatable_get_type;

/** */
alias gtk_activatable_do_set_related_action = c_gtk_activatable_do_set_related_action;

/** */
alias gtk_activatable_get_related_action = c_gtk_activatable_get_related_action;

/** */
alias gtk_activatable_get_use_action_appearance = c_gtk_activatable_get_use_action_appearance;

/** */
alias gtk_activatable_set_related_action = c_gtk_activatable_set_related_action;

/** */
alias gtk_activatable_set_use_action_appearance = c_gtk_activatable_set_use_action_appearance;

/** */
alias gtk_activatable_sync_action_properties = c_gtk_activatable_sync_action_properties;

// Adjustment

/** */
alias gtk_adjustment_get_type = c_gtk_adjustment_get_type;

/** */
alias gtk_adjustment_new = c_gtk_adjustment_new;

/** */
alias gtk_adjustment_changed = c_gtk_adjustment_changed;

/** */
alias gtk_adjustment_clamp_page = c_gtk_adjustment_clamp_page;

/** */
alias gtk_adjustment_configure = c_gtk_adjustment_configure;

/** */
alias gtk_adjustment_get_lower = c_gtk_adjustment_get_lower;

/** */
alias gtk_adjustment_get_minimum_increment = c_gtk_adjustment_get_minimum_increment;

/** */
alias gtk_adjustment_get_page_increment = c_gtk_adjustment_get_page_increment;

/** */
alias gtk_adjustment_get_page_size = c_gtk_adjustment_get_page_size;

/** */
alias gtk_adjustment_get_step_increment = c_gtk_adjustment_get_step_increment;

/** */
alias gtk_adjustment_get_upper = c_gtk_adjustment_get_upper;

/** */
alias gtk_adjustment_get_value = c_gtk_adjustment_get_value;

/** */
alias gtk_adjustment_set_lower = c_gtk_adjustment_set_lower;

/** */
alias gtk_adjustment_set_page_increment = c_gtk_adjustment_set_page_increment;

/** */
alias gtk_adjustment_set_page_size = c_gtk_adjustment_set_page_size;

/** */
alias gtk_adjustment_set_step_increment = c_gtk_adjustment_set_step_increment;

/** */
alias gtk_adjustment_set_upper = c_gtk_adjustment_set_upper;

/** */
alias gtk_adjustment_set_value = c_gtk_adjustment_set_value;

/** */
alias gtk_adjustment_value_changed = c_gtk_adjustment_value_changed;

// Alignment

/** */
alias gtk_alignment_get_type = c_gtk_alignment_get_type;

/** */
alias gtk_alignment_new = c_gtk_alignment_new;

/** */
alias gtk_alignment_get_padding = c_gtk_alignment_get_padding;

/** */
alias gtk_alignment_set = c_gtk_alignment_set;

/** */
alias gtk_alignment_set_padding = c_gtk_alignment_set_padding;

// AppChooser

/** */
alias gtk_app_chooser_get_type = c_gtk_app_chooser_get_type;

/** */
alias gtk_app_chooser_get_app_info = c_gtk_app_chooser_get_app_info;

/** */
alias gtk_app_chooser_get_content_type = c_gtk_app_chooser_get_content_type;

/** */
alias gtk_app_chooser_refresh = c_gtk_app_chooser_refresh;

// AppChooserButton

/** */
alias gtk_app_chooser_button_get_type = c_gtk_app_chooser_button_get_type;

/** */
alias gtk_app_chooser_button_new = c_gtk_app_chooser_button_new;

/** */
alias gtk_app_chooser_button_append_custom_item = c_gtk_app_chooser_button_append_custom_item;

/** */
alias gtk_app_chooser_button_append_separator = c_gtk_app_chooser_button_append_separator;

/** */
alias gtk_app_chooser_button_get_heading = c_gtk_app_chooser_button_get_heading;

/** */
alias gtk_app_chooser_button_get_show_default_item = c_gtk_app_chooser_button_get_show_default_item;

/** */
alias gtk_app_chooser_button_get_show_dialog_item = c_gtk_app_chooser_button_get_show_dialog_item;

/** */
alias gtk_app_chooser_button_set_active_custom_item = c_gtk_app_chooser_button_set_active_custom_item;

/** */
alias gtk_app_chooser_button_set_heading = c_gtk_app_chooser_button_set_heading;

/** */
alias gtk_app_chooser_button_set_show_default_item = c_gtk_app_chooser_button_set_show_default_item;

/** */
alias gtk_app_chooser_button_set_show_dialog_item = c_gtk_app_chooser_button_set_show_dialog_item;

// AppChooserDialog

/** */
alias gtk_app_chooser_dialog_get_type = c_gtk_app_chooser_dialog_get_type;

/** */
alias gtk_app_chooser_dialog_new = c_gtk_app_chooser_dialog_new;

/** */
alias gtk_app_chooser_dialog_new_for_content_type = c_gtk_app_chooser_dialog_new_for_content_type;

/** */
alias gtk_app_chooser_dialog_get_heading = c_gtk_app_chooser_dialog_get_heading;

/** */
alias gtk_app_chooser_dialog_get_widget = c_gtk_app_chooser_dialog_get_widget;

/** */
alias gtk_app_chooser_dialog_set_heading = c_gtk_app_chooser_dialog_set_heading;

// AppChooserWidget

/** */
alias gtk_app_chooser_widget_get_type = c_gtk_app_chooser_widget_get_type;

/** */
alias gtk_app_chooser_widget_new = c_gtk_app_chooser_widget_new;

/** */
alias gtk_app_chooser_widget_get_default_text = c_gtk_app_chooser_widget_get_default_text;

/** */
alias gtk_app_chooser_widget_get_show_all = c_gtk_app_chooser_widget_get_show_all;

/** */
alias gtk_app_chooser_widget_get_show_default = c_gtk_app_chooser_widget_get_show_default;

/** */
alias gtk_app_chooser_widget_get_show_fallback = c_gtk_app_chooser_widget_get_show_fallback;

/** */
alias gtk_app_chooser_widget_get_show_other = c_gtk_app_chooser_widget_get_show_other;

/** */
alias gtk_app_chooser_widget_get_show_recommended = c_gtk_app_chooser_widget_get_show_recommended;

/** */
alias gtk_app_chooser_widget_set_default_text = c_gtk_app_chooser_widget_set_default_text;

/** */
alias gtk_app_chooser_widget_set_show_all = c_gtk_app_chooser_widget_set_show_all;

/** */
alias gtk_app_chooser_widget_set_show_default = c_gtk_app_chooser_widget_set_show_default;

/** */
alias gtk_app_chooser_widget_set_show_fallback = c_gtk_app_chooser_widget_set_show_fallback;

/** */
alias gtk_app_chooser_widget_set_show_other = c_gtk_app_chooser_widget_set_show_other;

/** */
alias gtk_app_chooser_widget_set_show_recommended = c_gtk_app_chooser_widget_set_show_recommended;

// Application

/** */
alias gtk_application_get_type = c_gtk_application_get_type;

/** */
alias gtk_application_new = c_gtk_application_new;

/** */
alias gtk_application_add_accelerator = c_gtk_application_add_accelerator;

/** */
alias gtk_application_add_window = c_gtk_application_add_window;

/** */
alias gtk_application_get_accels_for_action = c_gtk_application_get_accels_for_action;

/** */
alias gtk_application_get_actions_for_accel = c_gtk_application_get_actions_for_accel;

/** */
alias gtk_application_get_active_window = c_gtk_application_get_active_window;

/** */
alias gtk_application_get_app_menu = c_gtk_application_get_app_menu;

/** */
alias gtk_application_get_menu_by_id = c_gtk_application_get_menu_by_id;

/** */
alias gtk_application_get_menubar = c_gtk_application_get_menubar;

/** */
alias gtk_application_get_window_by_id = c_gtk_application_get_window_by_id;

/** */
alias gtk_application_get_windows = c_gtk_application_get_windows;

/** */
alias gtk_application_inhibit = c_gtk_application_inhibit;

/** */
alias gtk_application_is_inhibited = c_gtk_application_is_inhibited;

/** */
alias gtk_application_list_action_descriptions = c_gtk_application_list_action_descriptions;

/** */
alias gtk_application_prefers_app_menu = c_gtk_application_prefers_app_menu;

/** */
alias gtk_application_remove_accelerator = c_gtk_application_remove_accelerator;

/** */
alias gtk_application_remove_window = c_gtk_application_remove_window;

/** */
alias gtk_application_set_accels_for_action = c_gtk_application_set_accels_for_action;

/** */
alias gtk_application_set_app_menu = c_gtk_application_set_app_menu;

/** */
alias gtk_application_set_menubar = c_gtk_application_set_menubar;

/** */
alias gtk_application_uninhibit = c_gtk_application_uninhibit;

// ApplicationWindow

/** */
alias gtk_application_window_get_type = c_gtk_application_window_get_type;

/** */
alias gtk_application_window_new = c_gtk_application_window_new;

/** */
alias gtk_application_window_get_help_overlay = c_gtk_application_window_get_help_overlay;

/** */
alias gtk_application_window_get_id = c_gtk_application_window_get_id;

/** */
alias gtk_application_window_get_show_menubar = c_gtk_application_window_get_show_menubar;

/** */
alias gtk_application_window_set_help_overlay = c_gtk_application_window_set_help_overlay;

/** */
alias gtk_application_window_set_show_menubar = c_gtk_application_window_set_show_menubar;

// Arrow

/** */
alias gtk_arrow_get_type = c_gtk_arrow_get_type;

/** */
alias gtk_arrow_new = c_gtk_arrow_new;

/** */
alias gtk_arrow_set = c_gtk_arrow_set;

// ArrowAccessible

/** */
alias gtk_arrow_accessible_get_type = c_gtk_arrow_accessible_get_type;

// AspectFrame

/** */
alias gtk_aspect_frame_get_type = c_gtk_aspect_frame_get_type;

/** */
alias gtk_aspect_frame_new = c_gtk_aspect_frame_new;

/** */
alias gtk_aspect_frame_set = c_gtk_aspect_frame_set;

// Assistant

/** */
alias gtk_assistant_get_type = c_gtk_assistant_get_type;

/** */
alias gtk_assistant_new = c_gtk_assistant_new;

/** */
alias gtk_assistant_add_action_widget = c_gtk_assistant_add_action_widget;

/** */
alias gtk_assistant_append_page = c_gtk_assistant_append_page;

/** */
alias gtk_assistant_commit = c_gtk_assistant_commit;

/** */
alias gtk_assistant_get_current_page = c_gtk_assistant_get_current_page;

/** */
alias gtk_assistant_get_n_pages = c_gtk_assistant_get_n_pages;

/** */
alias gtk_assistant_get_nth_page = c_gtk_assistant_get_nth_page;

/** */
alias gtk_assistant_get_page_complete = c_gtk_assistant_get_page_complete;

/** */
alias gtk_assistant_get_page_has_padding = c_gtk_assistant_get_page_has_padding;

/** */
alias gtk_assistant_get_page_header_image = c_gtk_assistant_get_page_header_image;

/** */
alias gtk_assistant_get_page_side_image = c_gtk_assistant_get_page_side_image;

/** */
alias gtk_assistant_get_page_title = c_gtk_assistant_get_page_title;

/** */
alias gtk_assistant_get_page_type = c_gtk_assistant_get_page_type;

/** */
alias gtk_assistant_insert_page = c_gtk_assistant_insert_page;

/** */
alias gtk_assistant_next_page = c_gtk_assistant_next_page;

/** */
alias gtk_assistant_prepend_page = c_gtk_assistant_prepend_page;

/** */
alias gtk_assistant_previous_page = c_gtk_assistant_previous_page;

/** */
alias gtk_assistant_remove_action_widget = c_gtk_assistant_remove_action_widget;

/** */
alias gtk_assistant_remove_page = c_gtk_assistant_remove_page;

/** */
alias gtk_assistant_set_current_page = c_gtk_assistant_set_current_page;

/** */
alias gtk_assistant_set_forward_page_func = c_gtk_assistant_set_forward_page_func;

/** */
alias gtk_assistant_set_page_complete = c_gtk_assistant_set_page_complete;

/** */
alias gtk_assistant_set_page_has_padding = c_gtk_assistant_set_page_has_padding;

/** */
alias gtk_assistant_set_page_header_image = c_gtk_assistant_set_page_header_image;

/** */
alias gtk_assistant_set_page_side_image = c_gtk_assistant_set_page_side_image;

/** */
alias gtk_assistant_set_page_title = c_gtk_assistant_set_page_title;

/** */
alias gtk_assistant_set_page_type = c_gtk_assistant_set_page_type;

/** */
alias gtk_assistant_update_buttons_state = c_gtk_assistant_update_buttons_state;

// Bin

/** */
alias gtk_bin_get_type = c_gtk_bin_get_type;

/** */
alias gtk_bin_get_child = c_gtk_bin_get_child;

// BindingEntry

/** */
alias gtk_binding_entry_add_signal = c_gtk_binding_entry_add_signal;

/** */
alias gtk_binding_entry_add_signal_from_string = c_gtk_binding_entry_add_signal_from_string;

/** */
alias gtk_binding_entry_add_signall = c_gtk_binding_entry_add_signall;

/** */
alias gtk_binding_entry_remove = c_gtk_binding_entry_remove;

/** */
alias gtk_binding_entry_skip = c_gtk_binding_entry_skip;

// BindingSet

/** */
alias gtk_binding_set_activate = c_gtk_binding_set_activate;

/** */
alias gtk_binding_set_add_path = c_gtk_binding_set_add_path;

/** */
alias gtk_binding_set_by_class = c_gtk_binding_set_by_class;

/** */
alias gtk_binding_set_find = c_gtk_binding_set_find;

/** */
alias gtk_binding_set_new = c_gtk_binding_set_new;

// BooleanCellAccessible

/** */
alias gtk_boolean_cell_accessible_get_type = c_gtk_boolean_cell_accessible_get_type;

// Border

/** */
alias gtk_border_get_type = c_gtk_border_get_type;

/** */
alias gtk_border_new = c_gtk_border_new;

/** */
alias gtk_border_copy = c_gtk_border_copy;

/** */
alias gtk_border_free = c_gtk_border_free;

// Box

/** */
alias gtk_box_get_type = c_gtk_box_get_type;

/** */
alias gtk_box_new = c_gtk_box_new;

/** */
alias gtk_box_get_baseline_position = c_gtk_box_get_baseline_position;

/** */
alias gtk_box_get_center_widget = c_gtk_box_get_center_widget;

/** */
alias gtk_box_get_homogeneous = c_gtk_box_get_homogeneous;

/** */
alias gtk_box_get_spacing = c_gtk_box_get_spacing;

/** */
alias gtk_box_pack_end = c_gtk_box_pack_end;

/** */
alias gtk_box_pack_start = c_gtk_box_pack_start;

/** */
alias gtk_box_query_child_packing = c_gtk_box_query_child_packing;

/** */
alias gtk_box_reorder_child = c_gtk_box_reorder_child;

/** */
alias gtk_box_set_baseline_position = c_gtk_box_set_baseline_position;

/** */
alias gtk_box_set_center_widget = c_gtk_box_set_center_widget;

/** */
alias gtk_box_set_child_packing = c_gtk_box_set_child_packing;

/** */
alias gtk_box_set_homogeneous = c_gtk_box_set_homogeneous;

/** */
alias gtk_box_set_spacing = c_gtk_box_set_spacing;

// Buildable

/** */
alias gtk_buildable_get_type = c_gtk_buildable_get_type;

/** */
alias gtk_buildable_add_child = c_gtk_buildable_add_child;

/** */
alias gtk_buildable_construct_child = c_gtk_buildable_construct_child;

/** */
alias gtk_buildable_custom_finished = c_gtk_buildable_custom_finished;

/** */
alias gtk_buildable_custom_tag_end = c_gtk_buildable_custom_tag_end;

/** */
alias gtk_buildable_custom_tag_start = c_gtk_buildable_custom_tag_start;

/** */
alias gtk_buildable_get_internal_child = c_gtk_buildable_get_internal_child;

/** */
alias gtk_buildable_get_name = c_gtk_buildable_get_name;

/** */
alias gtk_buildable_parser_finished = c_gtk_buildable_parser_finished;

/** */
alias gtk_buildable_set_buildable_property = c_gtk_buildable_set_buildable_property;

/** */
alias gtk_buildable_set_name = c_gtk_buildable_set_name;

// Builder

/** */
alias gtk_builder_get_type = c_gtk_builder_get_type;

/** */
alias gtk_builder_new = c_gtk_builder_new;

/** */
alias gtk_builder_new_from_file = c_gtk_builder_new_from_file;

/** */
alias gtk_builder_new_from_resource = c_gtk_builder_new_from_resource;

/** */
alias gtk_builder_new_from_string = c_gtk_builder_new_from_string;

/** */
alias gtk_builder_add_callback_symbol = c_gtk_builder_add_callback_symbol;

/** */
alias gtk_builder_add_callback_symbols = c_gtk_builder_add_callback_symbols;

/** */
alias gtk_builder_add_from_file = c_gtk_builder_add_from_file;

/** */
alias gtk_builder_add_from_resource = c_gtk_builder_add_from_resource;

/** */
alias gtk_builder_add_from_string = c_gtk_builder_add_from_string;

/** */
alias gtk_builder_add_objects_from_file = c_gtk_builder_add_objects_from_file;

/** */
alias gtk_builder_add_objects_from_resource = c_gtk_builder_add_objects_from_resource;

/** */
alias gtk_builder_add_objects_from_string = c_gtk_builder_add_objects_from_string;

/** */
alias gtk_builder_connect_signals = c_gtk_builder_connect_signals;

/** */
alias gtk_builder_connect_signals_full = c_gtk_builder_connect_signals_full;

/** */
alias gtk_builder_expose_object = c_gtk_builder_expose_object;

/** */
alias gtk_builder_extend_with_template = c_gtk_builder_extend_with_template;

/** */
alias gtk_builder_get_application = c_gtk_builder_get_application;

/** */
alias gtk_builder_get_object = c_gtk_builder_get_object;

/** */
alias gtk_builder_get_objects = c_gtk_builder_get_objects;

/** */
alias gtk_builder_get_translation_domain = c_gtk_builder_get_translation_domain;

/** */
alias gtk_builder_get_type_from_name = c_gtk_builder_get_type_from_name;

/** */
alias gtk_builder_lookup_callback_symbol = c_gtk_builder_lookup_callback_symbol;

/** */
alias gtk_builder_set_application = c_gtk_builder_set_application;

/** */
alias gtk_builder_set_translation_domain = c_gtk_builder_set_translation_domain;

/** */
alias gtk_builder_value_from_string = c_gtk_builder_value_from_string;

/** */
alias gtk_builder_value_from_string_type = c_gtk_builder_value_from_string_type;

// Button

/** */
alias gtk_button_get_type = c_gtk_button_get_type;

/** */
alias gtk_button_new = c_gtk_button_new;

/** */
alias gtk_button_new_from_icon_name = c_gtk_button_new_from_icon_name;

/** */
alias gtk_button_new_from_stock = c_gtk_button_new_from_stock;

/** */
alias gtk_button_new_with_label = c_gtk_button_new_with_label;

/** */
alias gtk_button_new_with_mnemonic = c_gtk_button_new_with_mnemonic;

/** */
alias gtk_button_clicked = c_gtk_button_clicked;

/** */
alias gtk_button_enter = c_gtk_button_enter;

/** */
alias gtk_button_get_alignment = c_gtk_button_get_alignment;

/** */
alias gtk_button_get_always_show_image = c_gtk_button_get_always_show_image;

/** */
alias gtk_button_get_event_window = c_gtk_button_get_event_window;

/** */
alias gtk_button_get_focus_on_click = c_gtk_button_get_focus_on_click;

/** */
alias gtk_button_get_image = c_gtk_button_get_image;

/** */
alias gtk_button_get_image_position = c_gtk_button_get_image_position;

/** */
alias gtk_button_get_label = c_gtk_button_get_label;

/** */
alias gtk_button_get_relief = c_gtk_button_get_relief;

/** */
alias gtk_button_get_use_stock = c_gtk_button_get_use_stock;

/** */
alias gtk_button_get_use_underline = c_gtk_button_get_use_underline;

/** */
alias gtk_button_leave = c_gtk_button_leave;

/** */
alias gtk_button_pressed = c_gtk_button_pressed;

/** */
alias gtk_button_released = c_gtk_button_released;

/** */
alias gtk_button_set_alignment = c_gtk_button_set_alignment;

/** */
alias gtk_button_set_always_show_image = c_gtk_button_set_always_show_image;

/** */
alias gtk_button_set_focus_on_click = c_gtk_button_set_focus_on_click;

/** */
alias gtk_button_set_image = c_gtk_button_set_image;

/** */
alias gtk_button_set_image_position = c_gtk_button_set_image_position;

/** */
alias gtk_button_set_label = c_gtk_button_set_label;

/** */
alias gtk_button_set_relief = c_gtk_button_set_relief;

/** */
alias gtk_button_set_use_stock = c_gtk_button_set_use_stock;

/** */
alias gtk_button_set_use_underline = c_gtk_button_set_use_underline;

// ButtonAccessible

/** */
alias gtk_button_accessible_get_type = c_gtk_button_accessible_get_type;

// ButtonBox

/** */
alias gtk_button_box_get_type = c_gtk_button_box_get_type;

/** */
alias gtk_button_box_new = c_gtk_button_box_new;

/** */
alias gtk_button_box_get_child_non_homogeneous = c_gtk_button_box_get_child_non_homogeneous;

/** */
alias gtk_button_box_get_child_secondary = c_gtk_button_box_get_child_secondary;

/** */
alias gtk_button_box_get_layout = c_gtk_button_box_get_layout;

/** */
alias gtk_button_box_set_child_non_homogeneous = c_gtk_button_box_set_child_non_homogeneous;

/** */
alias gtk_button_box_set_child_secondary = c_gtk_button_box_set_child_secondary;

/** */
alias gtk_button_box_set_layout = c_gtk_button_box_set_layout;

// Calendar

/** */
alias gtk_calendar_get_type = c_gtk_calendar_get_type;

/** */
alias gtk_calendar_new = c_gtk_calendar_new;

/** */
alias gtk_calendar_clear_marks = c_gtk_calendar_clear_marks;

/** */
alias gtk_calendar_get_date = c_gtk_calendar_get_date;

/** */
alias gtk_calendar_get_day_is_marked = c_gtk_calendar_get_day_is_marked;

/** */
alias gtk_calendar_get_detail_height_rows = c_gtk_calendar_get_detail_height_rows;

/** */
alias gtk_calendar_get_detail_width_chars = c_gtk_calendar_get_detail_width_chars;

/** */
alias gtk_calendar_get_display_options = c_gtk_calendar_get_display_options;

/** */
alias gtk_calendar_mark_day = c_gtk_calendar_mark_day;

/** */
alias gtk_calendar_select_day = c_gtk_calendar_select_day;

/** */
alias gtk_calendar_select_month = c_gtk_calendar_select_month;

/** */
alias gtk_calendar_set_detail_func = c_gtk_calendar_set_detail_func;

/** */
alias gtk_calendar_set_detail_height_rows = c_gtk_calendar_set_detail_height_rows;

/** */
alias gtk_calendar_set_detail_width_chars = c_gtk_calendar_set_detail_width_chars;

/** */
alias gtk_calendar_set_display_options = c_gtk_calendar_set_display_options;

/** */
alias gtk_calendar_unmark_day = c_gtk_calendar_unmark_day;

// CellAccessible

/** */
alias gtk_cell_accessible_get_type = c_gtk_cell_accessible_get_type;

// CellAccessibleParent

/** */
alias gtk_cell_accessible_parent_get_type = c_gtk_cell_accessible_parent_get_type;

/** */
alias gtk_cell_accessible_parent_activate = c_gtk_cell_accessible_parent_activate;

/** */
alias gtk_cell_accessible_parent_edit = c_gtk_cell_accessible_parent_edit;

/** */
alias gtk_cell_accessible_parent_expand_collapse = c_gtk_cell_accessible_parent_expand_collapse;

/** */
alias gtk_cell_accessible_parent_get_cell_area = c_gtk_cell_accessible_parent_get_cell_area;

/** */
alias gtk_cell_accessible_parent_get_cell_extents = c_gtk_cell_accessible_parent_get_cell_extents;

/** */
alias gtk_cell_accessible_parent_get_cell_position = c_gtk_cell_accessible_parent_get_cell_position;

/** */
alias gtk_cell_accessible_parent_get_child_index = c_gtk_cell_accessible_parent_get_child_index;

/** */
alias gtk_cell_accessible_parent_get_column_header_cells = c_gtk_cell_accessible_parent_get_column_header_cells;

/** */
alias gtk_cell_accessible_parent_get_renderer_state = c_gtk_cell_accessible_parent_get_renderer_state;

/** */
alias gtk_cell_accessible_parent_get_row_header_cells = c_gtk_cell_accessible_parent_get_row_header_cells;

/** */
alias gtk_cell_accessible_parent_grab_focus = c_gtk_cell_accessible_parent_grab_focus;

/** */
alias gtk_cell_accessible_parent_update_relationset = c_gtk_cell_accessible_parent_update_relationset;

// CellArea

/** */
alias gtk_cell_area_get_type = c_gtk_cell_area_get_type;

/** */
alias gtk_cell_area_activate = c_gtk_cell_area_activate;

/** */
alias gtk_cell_area_activate_cell = c_gtk_cell_area_activate_cell;

/** */
alias gtk_cell_area_add = c_gtk_cell_area_add;

/** */
alias gtk_cell_area_add_focus_sibling = c_gtk_cell_area_add_focus_sibling;

/** */
alias gtk_cell_area_add_with_properties = c_gtk_cell_area_add_with_properties;

/** */
alias gtk_cell_area_apply_attributes = c_gtk_cell_area_apply_attributes;

/** */
alias gtk_cell_area_attribute_connect = c_gtk_cell_area_attribute_connect;

/** */
alias gtk_cell_area_attribute_disconnect = c_gtk_cell_area_attribute_disconnect;

/** */
alias gtk_cell_area_attribute_get_column = c_gtk_cell_area_attribute_get_column;

/** */
alias gtk_cell_area_cell_get = c_gtk_cell_area_cell_get;

/** */
alias gtk_cell_area_cell_get_property = c_gtk_cell_area_cell_get_property;

/** */
alias gtk_cell_area_cell_get_valist = c_gtk_cell_area_cell_get_valist;

/** */
alias gtk_cell_area_cell_set = c_gtk_cell_area_cell_set;

/** */
alias gtk_cell_area_cell_set_property = c_gtk_cell_area_cell_set_property;

/** */
alias gtk_cell_area_cell_set_valist = c_gtk_cell_area_cell_set_valist;

/** */
alias gtk_cell_area_copy_context = c_gtk_cell_area_copy_context;

/** */
alias gtk_cell_area_create_context = c_gtk_cell_area_create_context;

/** */
alias gtk_cell_area_event = c_gtk_cell_area_event;

/** */
alias gtk_cell_area_focus = c_gtk_cell_area_focus;

/** */
alias gtk_cell_area_foreach = c_gtk_cell_area_foreach;

/** */
alias gtk_cell_area_foreach_alloc = c_gtk_cell_area_foreach_alloc;

/** */
alias gtk_cell_area_get_cell_allocation = c_gtk_cell_area_get_cell_allocation;

/** */
alias gtk_cell_area_get_cell_at_position = c_gtk_cell_area_get_cell_at_position;

/** */
alias gtk_cell_area_get_current_path_string = c_gtk_cell_area_get_current_path_string;

/** */
alias gtk_cell_area_get_edit_widget = c_gtk_cell_area_get_edit_widget;

/** */
alias gtk_cell_area_get_edited_cell = c_gtk_cell_area_get_edited_cell;

/** */
alias gtk_cell_area_get_focus_cell = c_gtk_cell_area_get_focus_cell;

/** */
alias gtk_cell_area_get_focus_from_sibling = c_gtk_cell_area_get_focus_from_sibling;

/** */
alias gtk_cell_area_get_focus_siblings = c_gtk_cell_area_get_focus_siblings;

/** */
alias gtk_cell_area_get_preferred_height = c_gtk_cell_area_get_preferred_height;

/** */
alias gtk_cell_area_get_preferred_height_for_width = c_gtk_cell_area_get_preferred_height_for_width;

/** */
alias gtk_cell_area_get_preferred_width = c_gtk_cell_area_get_preferred_width;

/** */
alias gtk_cell_area_get_preferred_width_for_height = c_gtk_cell_area_get_preferred_width_for_height;

/** */
alias gtk_cell_area_get_request_mode = c_gtk_cell_area_get_request_mode;

/** */
alias gtk_cell_area_has_renderer = c_gtk_cell_area_has_renderer;

/** */
alias gtk_cell_area_inner_cell_area = c_gtk_cell_area_inner_cell_area;

/** */
alias gtk_cell_area_is_activatable = c_gtk_cell_area_is_activatable;

/** */
alias gtk_cell_area_is_focus_sibling = c_gtk_cell_area_is_focus_sibling;

/** */
alias gtk_cell_area_remove = c_gtk_cell_area_remove;

/** */
alias gtk_cell_area_remove_focus_sibling = c_gtk_cell_area_remove_focus_sibling;

/** */
alias gtk_cell_area_render = c_gtk_cell_area_render;

/** */
alias gtk_cell_area_request_renderer = c_gtk_cell_area_request_renderer;

/** */
alias gtk_cell_area_set_focus_cell = c_gtk_cell_area_set_focus_cell;

/** */
alias gtk_cell_area_stop_editing = c_gtk_cell_area_stop_editing;

// CellAreaBox

/** */
alias gtk_cell_area_box_get_type = c_gtk_cell_area_box_get_type;

/** */
alias gtk_cell_area_box_new = c_gtk_cell_area_box_new;

/** */
alias gtk_cell_area_box_get_spacing = c_gtk_cell_area_box_get_spacing;

/** */
alias gtk_cell_area_box_pack_end = c_gtk_cell_area_box_pack_end;

/** */
alias gtk_cell_area_box_pack_start = c_gtk_cell_area_box_pack_start;

/** */
alias gtk_cell_area_box_set_spacing = c_gtk_cell_area_box_set_spacing;

// CellAreaClass

/** */
alias gtk_cell_area_class_find_cell_property = c_gtk_cell_area_class_find_cell_property;

/** */
alias gtk_cell_area_class_install_cell_property = c_gtk_cell_area_class_install_cell_property;

/** */
alias gtk_cell_area_class_list_cell_properties = c_gtk_cell_area_class_list_cell_properties;

// CellAreaContext

/** */
alias gtk_cell_area_context_get_type = c_gtk_cell_area_context_get_type;

/** */
alias gtk_cell_area_context_allocate = c_gtk_cell_area_context_allocate;

/** */
alias gtk_cell_area_context_get_allocation = c_gtk_cell_area_context_get_allocation;

/** */
alias gtk_cell_area_context_get_area = c_gtk_cell_area_context_get_area;

/** */
alias gtk_cell_area_context_get_preferred_height = c_gtk_cell_area_context_get_preferred_height;

/** */
alias gtk_cell_area_context_get_preferred_height_for_width = c_gtk_cell_area_context_get_preferred_height_for_width;

/** */
alias gtk_cell_area_context_get_preferred_width = c_gtk_cell_area_context_get_preferred_width;

/** */
alias gtk_cell_area_context_get_preferred_width_for_height = c_gtk_cell_area_context_get_preferred_width_for_height;

/** */
alias gtk_cell_area_context_push_preferred_height = c_gtk_cell_area_context_push_preferred_height;

/** */
alias gtk_cell_area_context_push_preferred_width = c_gtk_cell_area_context_push_preferred_width;

/** */
alias gtk_cell_area_context_reset = c_gtk_cell_area_context_reset;

// CellEditable

/** */
alias gtk_cell_editable_get_type = c_gtk_cell_editable_get_type;

/** */
alias gtk_cell_editable_editing_done = c_gtk_cell_editable_editing_done;

/** */
alias gtk_cell_editable_remove_widget = c_gtk_cell_editable_remove_widget;

/** */
alias gtk_cell_editable_start_editing = c_gtk_cell_editable_start_editing;

// CellLayout

/** */
alias gtk_cell_layout_get_type = c_gtk_cell_layout_get_type;

/** */
alias gtk_cell_layout_add_attribute = c_gtk_cell_layout_add_attribute;

/** */
alias gtk_cell_layout_clear = c_gtk_cell_layout_clear;

/** */
alias gtk_cell_layout_clear_attributes = c_gtk_cell_layout_clear_attributes;

/** */
alias gtk_cell_layout_get_area = c_gtk_cell_layout_get_area;

/** */
alias gtk_cell_layout_get_cells = c_gtk_cell_layout_get_cells;

/** */
alias gtk_cell_layout_pack_end = c_gtk_cell_layout_pack_end;

/** */
alias gtk_cell_layout_pack_start = c_gtk_cell_layout_pack_start;

/** */
alias gtk_cell_layout_reorder = c_gtk_cell_layout_reorder;

/** */
alias gtk_cell_layout_set_attributes = c_gtk_cell_layout_set_attributes;

/** */
alias gtk_cell_layout_set_cell_data_func = c_gtk_cell_layout_set_cell_data_func;

// CellRenderer

/** */
alias gtk_cell_renderer_get_type = c_gtk_cell_renderer_get_type;

/** */
alias gtk_cell_renderer_activate = c_gtk_cell_renderer_activate;

/** */
alias gtk_cell_renderer_get_aligned_area = c_gtk_cell_renderer_get_aligned_area;

/** */
alias gtk_cell_renderer_get_alignment = c_gtk_cell_renderer_get_alignment;

/** */
alias gtk_cell_renderer_get_fixed_size = c_gtk_cell_renderer_get_fixed_size;

/** */
alias gtk_cell_renderer_get_padding = c_gtk_cell_renderer_get_padding;

/** */
alias gtk_cell_renderer_get_preferred_height = c_gtk_cell_renderer_get_preferred_height;

/** */
alias gtk_cell_renderer_get_preferred_height_for_width = c_gtk_cell_renderer_get_preferred_height_for_width;

/** */
alias gtk_cell_renderer_get_preferred_size = c_gtk_cell_renderer_get_preferred_size;

/** */
alias gtk_cell_renderer_get_preferred_width = c_gtk_cell_renderer_get_preferred_width;

/** */
alias gtk_cell_renderer_get_preferred_width_for_height = c_gtk_cell_renderer_get_preferred_width_for_height;

/** */
alias gtk_cell_renderer_get_request_mode = c_gtk_cell_renderer_get_request_mode;

/** */
alias gtk_cell_renderer_get_sensitive = c_gtk_cell_renderer_get_sensitive;

/** */
alias gtk_cell_renderer_get_size = c_gtk_cell_renderer_get_size;

/** */
alias gtk_cell_renderer_get_state = c_gtk_cell_renderer_get_state;

/** */
alias gtk_cell_renderer_get_visible = c_gtk_cell_renderer_get_visible;

/** */
alias gtk_cell_renderer_is_activatable = c_gtk_cell_renderer_is_activatable;

/** */
alias gtk_cell_renderer_render = c_gtk_cell_renderer_render;

/** */
alias gtk_cell_renderer_set_alignment = c_gtk_cell_renderer_set_alignment;

/** */
alias gtk_cell_renderer_set_fixed_size = c_gtk_cell_renderer_set_fixed_size;

/** */
alias gtk_cell_renderer_set_padding = c_gtk_cell_renderer_set_padding;

/** */
alias gtk_cell_renderer_set_sensitive = c_gtk_cell_renderer_set_sensitive;

/** */
alias gtk_cell_renderer_set_visible = c_gtk_cell_renderer_set_visible;

/** */
alias gtk_cell_renderer_start_editing = c_gtk_cell_renderer_start_editing;

/** */
alias gtk_cell_renderer_stop_editing = c_gtk_cell_renderer_stop_editing;

// CellRendererAccel

/** */
alias gtk_cell_renderer_accel_get_type = c_gtk_cell_renderer_accel_get_type;

/** */
alias gtk_cell_renderer_accel_new = c_gtk_cell_renderer_accel_new;

// CellRendererClass

/** */
alias gtk_cell_renderer_class_set_accessible_type = c_gtk_cell_renderer_class_set_accessible_type;

// CellRendererCombo

/** */
alias gtk_cell_renderer_combo_get_type = c_gtk_cell_renderer_combo_get_type;

/** */
alias gtk_cell_renderer_combo_new = c_gtk_cell_renderer_combo_new;

// CellRendererPixbuf

/** */
alias gtk_cell_renderer_pixbuf_get_type = c_gtk_cell_renderer_pixbuf_get_type;

/** */
alias gtk_cell_renderer_pixbuf_new = c_gtk_cell_renderer_pixbuf_new;

// CellRendererProgress

/** */
alias gtk_cell_renderer_progress_get_type = c_gtk_cell_renderer_progress_get_type;

/** */
alias gtk_cell_renderer_progress_new = c_gtk_cell_renderer_progress_new;

// CellRendererSpin

/** */
alias gtk_cell_renderer_spin_get_type = c_gtk_cell_renderer_spin_get_type;

/** */
alias gtk_cell_renderer_spin_new = c_gtk_cell_renderer_spin_new;

// CellRendererSpinner

/** */
alias gtk_cell_renderer_spinner_get_type = c_gtk_cell_renderer_spinner_get_type;

/** */
alias gtk_cell_renderer_spinner_new = c_gtk_cell_renderer_spinner_new;

// CellRendererText

/** */
alias gtk_cell_renderer_text_get_type = c_gtk_cell_renderer_text_get_type;

/** */
alias gtk_cell_renderer_text_new = c_gtk_cell_renderer_text_new;

/** */
alias gtk_cell_renderer_text_set_fixed_height_from_font = c_gtk_cell_renderer_text_set_fixed_height_from_font;

// CellRendererToggle

/** */
alias gtk_cell_renderer_toggle_get_type = c_gtk_cell_renderer_toggle_get_type;

/** */
alias gtk_cell_renderer_toggle_new = c_gtk_cell_renderer_toggle_new;

/** */
alias gtk_cell_renderer_toggle_get_activatable = c_gtk_cell_renderer_toggle_get_activatable;

/** */
alias gtk_cell_renderer_toggle_get_active = c_gtk_cell_renderer_toggle_get_active;

/** */
alias gtk_cell_renderer_toggle_get_radio = c_gtk_cell_renderer_toggle_get_radio;

/** */
alias gtk_cell_renderer_toggle_set_activatable = c_gtk_cell_renderer_toggle_set_activatable;

/** */
alias gtk_cell_renderer_toggle_set_active = c_gtk_cell_renderer_toggle_set_active;

/** */
alias gtk_cell_renderer_toggle_set_radio = c_gtk_cell_renderer_toggle_set_radio;

// CellView

/** */
alias gtk_cell_view_get_type = c_gtk_cell_view_get_type;

/** */
alias gtk_cell_view_new = c_gtk_cell_view_new;

/** */
alias gtk_cell_view_new_with_context = c_gtk_cell_view_new_with_context;

/** */
alias gtk_cell_view_new_with_markup = c_gtk_cell_view_new_with_markup;

/** */
alias gtk_cell_view_new_with_pixbuf = c_gtk_cell_view_new_with_pixbuf;

/** */
alias gtk_cell_view_new_with_text = c_gtk_cell_view_new_with_text;

/** */
alias gtk_cell_view_get_displayed_row = c_gtk_cell_view_get_displayed_row;

/** */
alias gtk_cell_view_get_draw_sensitive = c_gtk_cell_view_get_draw_sensitive;

/** */
alias gtk_cell_view_get_fit_model = c_gtk_cell_view_get_fit_model;

/** */
alias gtk_cell_view_get_model = c_gtk_cell_view_get_model;

/** */
alias gtk_cell_view_get_size_of_row = c_gtk_cell_view_get_size_of_row;

/** */
alias gtk_cell_view_set_background_color = c_gtk_cell_view_set_background_color;

/** */
alias gtk_cell_view_set_background_rgba = c_gtk_cell_view_set_background_rgba;

/** */
alias gtk_cell_view_set_displayed_row = c_gtk_cell_view_set_displayed_row;

/** */
alias gtk_cell_view_set_draw_sensitive = c_gtk_cell_view_set_draw_sensitive;

/** */
alias gtk_cell_view_set_fit_model = c_gtk_cell_view_set_fit_model;

/** */
alias gtk_cell_view_set_model = c_gtk_cell_view_set_model;

// CheckButton

/** */
alias gtk_check_button_get_type = c_gtk_check_button_get_type;

/** */
alias gtk_check_button_new = c_gtk_check_button_new;

/** */
alias gtk_check_button_new_with_label = c_gtk_check_button_new_with_label;

/** */
alias gtk_check_button_new_with_mnemonic = c_gtk_check_button_new_with_mnemonic;

// CheckMenuItem

/** */
alias gtk_check_menu_item_get_type = c_gtk_check_menu_item_get_type;

/** */
alias gtk_check_menu_item_new = c_gtk_check_menu_item_new;

/** */
alias gtk_check_menu_item_new_with_label = c_gtk_check_menu_item_new_with_label;

/** */
alias gtk_check_menu_item_new_with_mnemonic = c_gtk_check_menu_item_new_with_mnemonic;

/** */
alias gtk_check_menu_item_get_active = c_gtk_check_menu_item_get_active;

/** */
alias gtk_check_menu_item_get_draw_as_radio = c_gtk_check_menu_item_get_draw_as_radio;

/** */
alias gtk_check_menu_item_get_inconsistent = c_gtk_check_menu_item_get_inconsistent;

/** */
alias gtk_check_menu_item_set_active = c_gtk_check_menu_item_set_active;

/** */
alias gtk_check_menu_item_set_draw_as_radio = c_gtk_check_menu_item_set_draw_as_radio;

/** */
alias gtk_check_menu_item_set_inconsistent = c_gtk_check_menu_item_set_inconsistent;

/** */
alias gtk_check_menu_item_toggled = c_gtk_check_menu_item_toggled;

// CheckMenuItemAccessible

/** */
alias gtk_check_menu_item_accessible_get_type = c_gtk_check_menu_item_accessible_get_type;

// Clipboard

/** */
alias gtk_clipboard_get_type = c_gtk_clipboard_get_type;

/** */
alias gtk_clipboard_get = c_gtk_clipboard_get;

/** */
alias gtk_clipboard_get_default = c_gtk_clipboard_get_default;

/** */
alias gtk_clipboard_get_for_display = c_gtk_clipboard_get_for_display;

/** */
alias gtk_clipboard_clear = c_gtk_clipboard_clear;

/** */
alias gtk_clipboard_get_display = c_gtk_clipboard_get_display;

/** */
alias gtk_clipboard_get_owner = c_gtk_clipboard_get_owner;

/** */
alias gtk_clipboard_get_selection = c_gtk_clipboard_get_selection;

/** */
alias gtk_clipboard_request_contents = c_gtk_clipboard_request_contents;

/** */
alias gtk_clipboard_request_image = c_gtk_clipboard_request_image;

/** */
alias gtk_clipboard_request_rich_text = c_gtk_clipboard_request_rich_text;

/** */
alias gtk_clipboard_request_targets = c_gtk_clipboard_request_targets;

/** */
alias gtk_clipboard_request_text = c_gtk_clipboard_request_text;

/** */
alias gtk_clipboard_request_uris = c_gtk_clipboard_request_uris;

/** */
alias gtk_clipboard_set_can_store = c_gtk_clipboard_set_can_store;

/** */
alias gtk_clipboard_set_image = c_gtk_clipboard_set_image;

/** */
alias gtk_clipboard_set_text = c_gtk_clipboard_set_text;

/** */
alias gtk_clipboard_set_with_data = c_gtk_clipboard_set_with_data;

/** */
alias gtk_clipboard_set_with_owner = c_gtk_clipboard_set_with_owner;

/** */
alias gtk_clipboard_store = c_gtk_clipboard_store;

/** */
alias gtk_clipboard_wait_for_contents = c_gtk_clipboard_wait_for_contents;

/** */
alias gtk_clipboard_wait_for_image = c_gtk_clipboard_wait_for_image;

/** */
alias gtk_clipboard_wait_for_rich_text = c_gtk_clipboard_wait_for_rich_text;

/** */
alias gtk_clipboard_wait_for_targets = c_gtk_clipboard_wait_for_targets;

/** */
alias gtk_clipboard_wait_for_text = c_gtk_clipboard_wait_for_text;

/** */
alias gtk_clipboard_wait_for_uris = c_gtk_clipboard_wait_for_uris;

/** */
alias gtk_clipboard_wait_is_image_available = c_gtk_clipboard_wait_is_image_available;

/** */
alias gtk_clipboard_wait_is_rich_text_available = c_gtk_clipboard_wait_is_rich_text_available;

/** */
alias gtk_clipboard_wait_is_target_available = c_gtk_clipboard_wait_is_target_available;

/** */
alias gtk_clipboard_wait_is_text_available = c_gtk_clipboard_wait_is_text_available;

/** */
alias gtk_clipboard_wait_is_uris_available = c_gtk_clipboard_wait_is_uris_available;

// ColorButton

/** */
alias gtk_color_button_get_type = c_gtk_color_button_get_type;

/** */
alias gtk_color_button_new = c_gtk_color_button_new;

/** */
alias gtk_color_button_new_with_color = c_gtk_color_button_new_with_color;

/** */
alias gtk_color_button_new_with_rgba = c_gtk_color_button_new_with_rgba;

/** */
alias gtk_color_button_get_alpha = c_gtk_color_button_get_alpha;

/** */
alias gtk_color_button_get_color = c_gtk_color_button_get_color;

/** */
alias gtk_color_button_get_rgba = c_gtk_color_button_get_rgba;

/** */
alias gtk_color_button_get_title = c_gtk_color_button_get_title;

/** */
alias gtk_color_button_get_use_alpha = c_gtk_color_button_get_use_alpha;

/** */
alias gtk_color_button_set_alpha = c_gtk_color_button_set_alpha;

/** */
alias gtk_color_button_set_color = c_gtk_color_button_set_color;

/** */
alias gtk_color_button_set_rgba = c_gtk_color_button_set_rgba;

/** */
alias gtk_color_button_set_title = c_gtk_color_button_set_title;

/** */
alias gtk_color_button_set_use_alpha = c_gtk_color_button_set_use_alpha;

// ColorChooser

/** */
alias gtk_color_chooser_get_type = c_gtk_color_chooser_get_type;

/** */
alias gtk_color_chooser_add_palette = c_gtk_color_chooser_add_palette;

/** */
alias gtk_color_chooser_get_rgba = c_gtk_color_chooser_get_rgba;

/** */
alias gtk_color_chooser_get_use_alpha = c_gtk_color_chooser_get_use_alpha;

/** */
alias gtk_color_chooser_set_rgba = c_gtk_color_chooser_set_rgba;

/** */
alias gtk_color_chooser_set_use_alpha = c_gtk_color_chooser_set_use_alpha;

// ColorChooserDialog

/** */
alias gtk_color_chooser_dialog_get_type = c_gtk_color_chooser_dialog_get_type;

/** */
alias gtk_color_chooser_dialog_new = c_gtk_color_chooser_dialog_new;

// ColorChooserWidget

/** */
alias gtk_color_chooser_widget_get_type = c_gtk_color_chooser_widget_get_type;

/** */
alias gtk_color_chooser_widget_new = c_gtk_color_chooser_widget_new;

// ColorSelection

/** */
alias gtk_color_selection_get_type = c_gtk_color_selection_get_type;

/** */
alias gtk_color_selection_new = c_gtk_color_selection_new;

/** */
alias gtk_color_selection_palette_from_string = c_gtk_color_selection_palette_from_string;

/** */
alias gtk_color_selection_palette_to_string = c_gtk_color_selection_palette_to_string;

/** */
alias gtk_color_selection_set_change_palette_with_screen_hook = c_gtk_color_selection_set_change_palette_with_screen_hook;

/** */
alias gtk_color_selection_get_current_alpha = c_gtk_color_selection_get_current_alpha;

/** */
alias gtk_color_selection_get_current_color = c_gtk_color_selection_get_current_color;

/** */
alias gtk_color_selection_get_current_rgba = c_gtk_color_selection_get_current_rgba;

/** */
alias gtk_color_selection_get_has_opacity_control = c_gtk_color_selection_get_has_opacity_control;

/** */
alias gtk_color_selection_get_has_palette = c_gtk_color_selection_get_has_palette;

/** */
alias gtk_color_selection_get_previous_alpha = c_gtk_color_selection_get_previous_alpha;

/** */
alias gtk_color_selection_get_previous_color = c_gtk_color_selection_get_previous_color;

/** */
alias gtk_color_selection_get_previous_rgba = c_gtk_color_selection_get_previous_rgba;

/** */
alias gtk_color_selection_is_adjusting = c_gtk_color_selection_is_adjusting;

/** */
alias gtk_color_selection_set_current_alpha = c_gtk_color_selection_set_current_alpha;

/** */
alias gtk_color_selection_set_current_color = c_gtk_color_selection_set_current_color;

/** */
alias gtk_color_selection_set_current_rgba = c_gtk_color_selection_set_current_rgba;

/** */
alias gtk_color_selection_set_has_opacity_control = c_gtk_color_selection_set_has_opacity_control;

/** */
alias gtk_color_selection_set_has_palette = c_gtk_color_selection_set_has_palette;

/** */
alias gtk_color_selection_set_previous_alpha = c_gtk_color_selection_set_previous_alpha;

/** */
alias gtk_color_selection_set_previous_color = c_gtk_color_selection_set_previous_color;

/** */
alias gtk_color_selection_set_previous_rgba = c_gtk_color_selection_set_previous_rgba;

// ColorSelectionDialog

/** */
alias gtk_color_selection_dialog_get_type = c_gtk_color_selection_dialog_get_type;

/** */
alias gtk_color_selection_dialog_new = c_gtk_color_selection_dialog_new;

/** */
alias gtk_color_selection_dialog_get_color_selection = c_gtk_color_selection_dialog_get_color_selection;

// ComboBox

/** */
alias gtk_combo_box_get_type = c_gtk_combo_box_get_type;

/** */
alias gtk_combo_box_new = c_gtk_combo_box_new;

/** */
alias gtk_combo_box_new_with_area = c_gtk_combo_box_new_with_area;

/** */
alias gtk_combo_box_new_with_area_and_entry = c_gtk_combo_box_new_with_area_and_entry;

/** */
alias gtk_combo_box_new_with_entry = c_gtk_combo_box_new_with_entry;

/** */
alias gtk_combo_box_new_with_model = c_gtk_combo_box_new_with_model;

/** */
alias gtk_combo_box_new_with_model_and_entry = c_gtk_combo_box_new_with_model_and_entry;

/** */
alias gtk_combo_box_get_active = c_gtk_combo_box_get_active;

/** */
alias gtk_combo_box_get_active_id = c_gtk_combo_box_get_active_id;

/** */
alias gtk_combo_box_get_active_iter = c_gtk_combo_box_get_active_iter;

/** */
alias gtk_combo_box_get_add_tearoffs = c_gtk_combo_box_get_add_tearoffs;

/** */
alias gtk_combo_box_get_button_sensitivity = c_gtk_combo_box_get_button_sensitivity;

/** */
alias gtk_combo_box_get_column_span_column = c_gtk_combo_box_get_column_span_column;

/** */
alias gtk_combo_box_get_entry_text_column = c_gtk_combo_box_get_entry_text_column;

/** */
alias gtk_combo_box_get_focus_on_click = c_gtk_combo_box_get_focus_on_click;

/** */
alias gtk_combo_box_get_has_entry = c_gtk_combo_box_get_has_entry;

/** */
alias gtk_combo_box_get_id_column = c_gtk_combo_box_get_id_column;

/** */
alias gtk_combo_box_get_model = c_gtk_combo_box_get_model;

/** */
alias gtk_combo_box_get_popup_accessible = c_gtk_combo_box_get_popup_accessible;

/** */
alias gtk_combo_box_get_popup_fixed_width = c_gtk_combo_box_get_popup_fixed_width;

/** */
alias gtk_combo_box_get_row_separator_func = c_gtk_combo_box_get_row_separator_func;

/** */
alias gtk_combo_box_get_row_span_column = c_gtk_combo_box_get_row_span_column;

/** */
alias gtk_combo_box_get_title = c_gtk_combo_box_get_title;

/** */
alias gtk_combo_box_get_wrap_width = c_gtk_combo_box_get_wrap_width;

/** */
alias gtk_combo_box_popdown = c_gtk_combo_box_popdown;

/** */
alias gtk_combo_box_popup = c_gtk_combo_box_popup;

/** */
alias gtk_combo_box_popup_for_device = c_gtk_combo_box_popup_for_device;

/** */
alias gtk_combo_box_set_active = c_gtk_combo_box_set_active;

/** */
alias gtk_combo_box_set_active_id = c_gtk_combo_box_set_active_id;

/** */
alias gtk_combo_box_set_active_iter = c_gtk_combo_box_set_active_iter;

/** */
alias gtk_combo_box_set_add_tearoffs = c_gtk_combo_box_set_add_tearoffs;

/** */
alias gtk_combo_box_set_button_sensitivity = c_gtk_combo_box_set_button_sensitivity;

/** */
alias gtk_combo_box_set_column_span_column = c_gtk_combo_box_set_column_span_column;

/** */
alias gtk_combo_box_set_entry_text_column = c_gtk_combo_box_set_entry_text_column;

/** */
alias gtk_combo_box_set_focus_on_click = c_gtk_combo_box_set_focus_on_click;

/** */
alias gtk_combo_box_set_id_column = c_gtk_combo_box_set_id_column;

/** */
alias gtk_combo_box_set_model = c_gtk_combo_box_set_model;

/** */
alias gtk_combo_box_set_popup_fixed_width = c_gtk_combo_box_set_popup_fixed_width;

/** */
alias gtk_combo_box_set_row_separator_func = c_gtk_combo_box_set_row_separator_func;

/** */
alias gtk_combo_box_set_row_span_column = c_gtk_combo_box_set_row_span_column;

/** */
alias gtk_combo_box_set_title = c_gtk_combo_box_set_title;

/** */
alias gtk_combo_box_set_wrap_width = c_gtk_combo_box_set_wrap_width;

// ComboBoxAccessible

/** */
alias gtk_combo_box_accessible_get_type = c_gtk_combo_box_accessible_get_type;

// ComboBoxText

/** */
alias gtk_combo_box_text_get_type = c_gtk_combo_box_text_get_type;

/** */
alias gtk_combo_box_text_new = c_gtk_combo_box_text_new;

/** */
alias gtk_combo_box_text_new_with_entry = c_gtk_combo_box_text_new_with_entry;

/** */
alias gtk_combo_box_text_append = c_gtk_combo_box_text_append;

/** */
alias gtk_combo_box_text_append_text = c_gtk_combo_box_text_append_text;

/** */
alias gtk_combo_box_text_get_active_text = c_gtk_combo_box_text_get_active_text;

/** */
alias gtk_combo_box_text_insert = c_gtk_combo_box_text_insert;

/** */
alias gtk_combo_box_text_insert_text = c_gtk_combo_box_text_insert_text;

/** */
alias gtk_combo_box_text_prepend = c_gtk_combo_box_text_prepend;

/** */
alias gtk_combo_box_text_prepend_text = c_gtk_combo_box_text_prepend_text;

/** */
alias gtk_combo_box_text_remove = c_gtk_combo_box_text_remove;

/** */
alias gtk_combo_box_text_remove_all = c_gtk_combo_box_text_remove_all;

// Container

/** */
alias gtk_container_get_type = c_gtk_container_get_type;

/** */
alias gtk_container_add = c_gtk_container_add;

/** */
alias gtk_container_add_with_properties = c_gtk_container_add_with_properties;

/** */
alias gtk_container_check_resize = c_gtk_container_check_resize;

/** */
alias gtk_container_child_get = c_gtk_container_child_get;

/** */
alias gtk_container_child_get_property = c_gtk_container_child_get_property;

/** */
alias gtk_container_child_get_valist = c_gtk_container_child_get_valist;

/** */
alias gtk_container_child_notify = c_gtk_container_child_notify;

/** */
alias gtk_container_child_notify_by_pspec = c_gtk_container_child_notify_by_pspec;

/** */
alias gtk_container_child_set = c_gtk_container_child_set;

/** */
alias gtk_container_child_set_property = c_gtk_container_child_set_property;

/** */
alias gtk_container_child_set_valist = c_gtk_container_child_set_valist;

/** */
alias gtk_container_child_type = c_gtk_container_child_type;

/** */
alias gtk_container_forall = c_gtk_container_forall;

/** */
alias gtk_container_foreach = c_gtk_container_foreach;

/** */
alias gtk_container_get_border_width = c_gtk_container_get_border_width;

/** */
alias gtk_container_get_children = c_gtk_container_get_children;

/** */
alias gtk_container_get_focus_chain = c_gtk_container_get_focus_chain;

/** */
alias gtk_container_get_focus_child = c_gtk_container_get_focus_child;

/** */
alias gtk_container_get_focus_hadjustment = c_gtk_container_get_focus_hadjustment;

/** */
alias gtk_container_get_focus_vadjustment = c_gtk_container_get_focus_vadjustment;

/** */
alias gtk_container_get_path_for_child = c_gtk_container_get_path_for_child;

/** */
alias gtk_container_get_resize_mode = c_gtk_container_get_resize_mode;

/** */
alias gtk_container_propagate_draw = c_gtk_container_propagate_draw;

/** */
alias gtk_container_remove = c_gtk_container_remove;

/** */
alias gtk_container_resize_children = c_gtk_container_resize_children;

/** */
alias gtk_container_set_border_width = c_gtk_container_set_border_width;

/** */
alias gtk_container_set_focus_chain = c_gtk_container_set_focus_chain;

/** */
alias gtk_container_set_focus_child = c_gtk_container_set_focus_child;

/** */
alias gtk_container_set_focus_hadjustment = c_gtk_container_set_focus_hadjustment;

/** */
alias gtk_container_set_focus_vadjustment = c_gtk_container_set_focus_vadjustment;

/** */
alias gtk_container_set_reallocate_redraws = c_gtk_container_set_reallocate_redraws;

/** */
alias gtk_container_set_resize_mode = c_gtk_container_set_resize_mode;

/** */
alias gtk_container_unset_focus_chain = c_gtk_container_unset_focus_chain;

// ContainerAccessible

/** */
alias gtk_container_accessible_get_type = c_gtk_container_accessible_get_type;

// ContainerCellAccessible

/** */
alias gtk_container_cell_accessible_get_type = c_gtk_container_cell_accessible_get_type;

/** */
alias gtk_container_cell_accessible_new = c_gtk_container_cell_accessible_new;

/** */
alias gtk_container_cell_accessible_add_child = c_gtk_container_cell_accessible_add_child;

/** */
alias gtk_container_cell_accessible_get_children = c_gtk_container_cell_accessible_get_children;

/** */
alias gtk_container_cell_accessible_remove_child = c_gtk_container_cell_accessible_remove_child;

// ContainerClass

/** */
alias gtk_container_class_find_child_property = c_gtk_container_class_find_child_property;

/** */
alias gtk_container_class_handle_border_width = c_gtk_container_class_handle_border_width;

/** */
alias gtk_container_class_install_child_properties = c_gtk_container_class_install_child_properties;

/** */
alias gtk_container_class_install_child_property = c_gtk_container_class_install_child_property;

/** */
alias gtk_container_class_list_child_properties = c_gtk_container_class_list_child_properties;

// CssProvider

/** */
alias gtk_css_provider_get_type = c_gtk_css_provider_get_type;

/** */
alias gtk_css_provider_new = c_gtk_css_provider_new;

/** */
alias gtk_css_provider_get_default = c_gtk_css_provider_get_default;

/** */
alias gtk_css_provider_get_named = c_gtk_css_provider_get_named;

/** */
alias gtk_css_provider_load_from_data = c_gtk_css_provider_load_from_data;

/** */
alias gtk_css_provider_load_from_file = c_gtk_css_provider_load_from_file;

/** */
alias gtk_css_provider_load_from_path = c_gtk_css_provider_load_from_path;

/** */
alias gtk_css_provider_load_from_resource = c_gtk_css_provider_load_from_resource;

/** */
alias gtk_css_provider_to_string = c_gtk_css_provider_to_string;

// CssSection

/** */
alias gtk_css_section_get_type = c_gtk_css_section_get_type;

/** */
alias gtk_css_section_get_end_line = c_gtk_css_section_get_end_line;

/** */
alias gtk_css_section_get_end_position = c_gtk_css_section_get_end_position;

/** */
alias gtk_css_section_get_file = c_gtk_css_section_get_file;

/** */
alias gtk_css_section_get_parent = c_gtk_css_section_get_parent;

/** */
alias gtk_css_section_get_section_type = c_gtk_css_section_get_section_type;

/** */
alias gtk_css_section_get_start_line = c_gtk_css_section_get_start_line;

/** */
alias gtk_css_section_get_start_position = c_gtk_css_section_get_start_position;

/** */
alias gtk_css_section_ref = c_gtk_css_section_ref;

/** */
alias gtk_css_section_unref = c_gtk_css_section_unref;

// Dialog

/** */
alias gtk_dialog_get_type = c_gtk_dialog_get_type;

/** */
alias gtk_dialog_new = c_gtk_dialog_new;

/** */
alias gtk_dialog_new_with_buttons = c_gtk_dialog_new_with_buttons;

/** */
alias gtk_dialog_add_action_widget = c_gtk_dialog_add_action_widget;

/** */
alias gtk_dialog_add_button = c_gtk_dialog_add_button;

/** */
alias gtk_dialog_add_buttons = c_gtk_dialog_add_buttons;

/** */
alias gtk_dialog_get_action_area = c_gtk_dialog_get_action_area;

/** */
alias gtk_dialog_get_content_area = c_gtk_dialog_get_content_area;

/** */
alias gtk_dialog_get_header_bar = c_gtk_dialog_get_header_bar;

/** */
alias gtk_dialog_get_response_for_widget = c_gtk_dialog_get_response_for_widget;

/** */
alias gtk_dialog_get_widget_for_response = c_gtk_dialog_get_widget_for_response;

/** */
alias gtk_dialog_response = c_gtk_dialog_response;

/** */
alias gtk_dialog_run = c_gtk_dialog_run;

/** */
alias gtk_dialog_set_alternative_button_order = c_gtk_dialog_set_alternative_button_order;

/** */
alias gtk_dialog_set_alternative_button_order_from_array = c_gtk_dialog_set_alternative_button_order_from_array;

/** */
alias gtk_dialog_set_default_response = c_gtk_dialog_set_default_response;

/** */
alias gtk_dialog_set_response_sensitive = c_gtk_dialog_set_response_sensitive;

// DrawingArea

/** */
alias gtk_drawing_area_get_type = c_gtk_drawing_area_get_type;

/** */
alias gtk_drawing_area_new = c_gtk_drawing_area_new;

// Editable

/** */
alias gtk_editable_get_type = c_gtk_editable_get_type;

/** */
alias gtk_editable_copy_clipboard = c_gtk_editable_copy_clipboard;

/** */
alias gtk_editable_cut_clipboard = c_gtk_editable_cut_clipboard;

/** */
alias gtk_editable_delete_selection = c_gtk_editable_delete_selection;

/** */
alias gtk_editable_delete_text = c_gtk_editable_delete_text;

/** */
alias gtk_editable_get_chars = c_gtk_editable_get_chars;

/** */
alias gtk_editable_get_editable = c_gtk_editable_get_editable;

/** */
alias gtk_editable_get_position = c_gtk_editable_get_position;

/** */
alias gtk_editable_get_selection_bounds = c_gtk_editable_get_selection_bounds;

/** */
alias gtk_editable_insert_text = c_gtk_editable_insert_text;

/** */
alias gtk_editable_paste_clipboard = c_gtk_editable_paste_clipboard;

/** */
alias gtk_editable_select_region = c_gtk_editable_select_region;

/** */
alias gtk_editable_set_editable = c_gtk_editable_set_editable;

/** */
alias gtk_editable_set_position = c_gtk_editable_set_position;

// Entry

/** */
alias gtk_entry_get_type = c_gtk_entry_get_type;

/** */
alias gtk_entry_new = c_gtk_entry_new;

/** */
alias gtk_entry_new_with_buffer = c_gtk_entry_new_with_buffer;

/** */
alias gtk_entry_get_activates_default = c_gtk_entry_get_activates_default;

/** */
alias gtk_entry_get_alignment = c_gtk_entry_get_alignment;

/** */
alias gtk_entry_get_attributes = c_gtk_entry_get_attributes;

/** */
alias gtk_entry_get_buffer = c_gtk_entry_get_buffer;

/** */
alias gtk_entry_get_completion = c_gtk_entry_get_completion;

/** */
alias gtk_entry_get_current_icon_drag_source = c_gtk_entry_get_current_icon_drag_source;

/** */
alias gtk_entry_get_cursor_hadjustment = c_gtk_entry_get_cursor_hadjustment;

/** */
alias gtk_entry_get_has_frame = c_gtk_entry_get_has_frame;

/** */
alias gtk_entry_get_icon_activatable = c_gtk_entry_get_icon_activatable;

/** */
alias gtk_entry_get_icon_area = c_gtk_entry_get_icon_area;

/** */
alias gtk_entry_get_icon_at_pos = c_gtk_entry_get_icon_at_pos;

/** */
alias gtk_entry_get_icon_gicon = c_gtk_entry_get_icon_gicon;

/** */
alias gtk_entry_get_icon_name = c_gtk_entry_get_icon_name;

/** */
alias gtk_entry_get_icon_pixbuf = c_gtk_entry_get_icon_pixbuf;

/** */
alias gtk_entry_get_icon_sensitive = c_gtk_entry_get_icon_sensitive;

/** */
alias gtk_entry_get_icon_stock = c_gtk_entry_get_icon_stock;

/** */
alias gtk_entry_get_icon_storage_type = c_gtk_entry_get_icon_storage_type;

/** */
alias gtk_entry_get_icon_tooltip_markup = c_gtk_entry_get_icon_tooltip_markup;

/** */
alias gtk_entry_get_icon_tooltip_text = c_gtk_entry_get_icon_tooltip_text;

/** */
alias gtk_entry_get_inner_border = c_gtk_entry_get_inner_border;

/** */
alias gtk_entry_get_input_hints = c_gtk_entry_get_input_hints;

/** */
alias gtk_entry_get_input_purpose = c_gtk_entry_get_input_purpose;

/** */
alias gtk_entry_get_invisible_char = c_gtk_entry_get_invisible_char;

/** */
alias gtk_entry_get_layout = c_gtk_entry_get_layout;

/** */
alias gtk_entry_get_layout_offsets = c_gtk_entry_get_layout_offsets;

/** */
alias gtk_entry_get_max_length = c_gtk_entry_get_max_length;

/** */
alias gtk_entry_get_max_width_chars = c_gtk_entry_get_max_width_chars;

/** */
alias gtk_entry_get_overwrite_mode = c_gtk_entry_get_overwrite_mode;

/** */
alias gtk_entry_get_placeholder_text = c_gtk_entry_get_placeholder_text;

/** */
alias gtk_entry_get_progress_fraction = c_gtk_entry_get_progress_fraction;

/** */
alias gtk_entry_get_progress_pulse_step = c_gtk_entry_get_progress_pulse_step;

/** */
alias gtk_entry_get_tabs = c_gtk_entry_get_tabs;

/** */
alias gtk_entry_get_text = c_gtk_entry_get_text;

/** */
alias gtk_entry_get_text_area = c_gtk_entry_get_text_area;

/** */
alias gtk_entry_get_text_length = c_gtk_entry_get_text_length;

/** */
alias gtk_entry_get_visibility = c_gtk_entry_get_visibility;

/** */
alias gtk_entry_get_width_chars = c_gtk_entry_get_width_chars;

/** */
alias gtk_entry_grab_focus_without_selecting = c_gtk_entry_grab_focus_without_selecting;

/** */
alias gtk_entry_im_context_filter_keypress = c_gtk_entry_im_context_filter_keypress;

/** */
alias gtk_entry_layout_index_to_text_index = c_gtk_entry_layout_index_to_text_index;

/** */
alias gtk_entry_progress_pulse = c_gtk_entry_progress_pulse;

/** */
alias gtk_entry_reset_im_context = c_gtk_entry_reset_im_context;

/** */
alias gtk_entry_set_activates_default = c_gtk_entry_set_activates_default;

/** */
alias gtk_entry_set_alignment = c_gtk_entry_set_alignment;

/** */
alias gtk_entry_set_attributes = c_gtk_entry_set_attributes;

/** */
alias gtk_entry_set_buffer = c_gtk_entry_set_buffer;

/** */
alias gtk_entry_set_completion = c_gtk_entry_set_completion;

/** */
alias gtk_entry_set_cursor_hadjustment = c_gtk_entry_set_cursor_hadjustment;

/** */
alias gtk_entry_set_has_frame = c_gtk_entry_set_has_frame;

/** */
alias gtk_entry_set_icon_activatable = c_gtk_entry_set_icon_activatable;

/** */
alias gtk_entry_set_icon_drag_source = c_gtk_entry_set_icon_drag_source;

/** */
alias gtk_entry_set_icon_from_gicon = c_gtk_entry_set_icon_from_gicon;

/** */
alias gtk_entry_set_icon_from_icon_name = c_gtk_entry_set_icon_from_icon_name;

/** */
alias gtk_entry_set_icon_from_pixbuf = c_gtk_entry_set_icon_from_pixbuf;

/** */
alias gtk_entry_set_icon_from_stock = c_gtk_entry_set_icon_from_stock;

/** */
alias gtk_entry_set_icon_sensitive = c_gtk_entry_set_icon_sensitive;

/** */
alias gtk_entry_set_icon_tooltip_markup = c_gtk_entry_set_icon_tooltip_markup;

/** */
alias gtk_entry_set_icon_tooltip_text = c_gtk_entry_set_icon_tooltip_text;

/** */
alias gtk_entry_set_inner_border = c_gtk_entry_set_inner_border;

/** */
alias gtk_entry_set_input_hints = c_gtk_entry_set_input_hints;

/** */
alias gtk_entry_set_input_purpose = c_gtk_entry_set_input_purpose;

/** */
alias gtk_entry_set_invisible_char = c_gtk_entry_set_invisible_char;

/** */
alias gtk_entry_set_max_length = c_gtk_entry_set_max_length;

/** */
alias gtk_entry_set_max_width_chars = c_gtk_entry_set_max_width_chars;

/** */
alias gtk_entry_set_overwrite_mode = c_gtk_entry_set_overwrite_mode;

/** */
alias gtk_entry_set_placeholder_text = c_gtk_entry_set_placeholder_text;

/** */
alias gtk_entry_set_progress_fraction = c_gtk_entry_set_progress_fraction;

/** */
alias gtk_entry_set_progress_pulse_step = c_gtk_entry_set_progress_pulse_step;

/** */
alias gtk_entry_set_tabs = c_gtk_entry_set_tabs;

/** */
alias gtk_entry_set_text = c_gtk_entry_set_text;

/** */
alias gtk_entry_set_visibility = c_gtk_entry_set_visibility;

/** */
alias gtk_entry_set_width_chars = c_gtk_entry_set_width_chars;

/** */
alias gtk_entry_text_index_to_layout_index = c_gtk_entry_text_index_to_layout_index;

/** */
alias gtk_entry_unset_invisible_char = c_gtk_entry_unset_invisible_char;

// EntryAccessible

/** */
alias gtk_entry_accessible_get_type = c_gtk_entry_accessible_get_type;

// EntryBuffer

/** */
alias gtk_entry_buffer_get_type = c_gtk_entry_buffer_get_type;

/** */
alias gtk_entry_buffer_new = c_gtk_entry_buffer_new;

/** */
alias gtk_entry_buffer_delete_text = c_gtk_entry_buffer_delete_text;

/** */
alias gtk_entry_buffer_emit_deleted_text = c_gtk_entry_buffer_emit_deleted_text;

/** */
alias gtk_entry_buffer_emit_inserted_text = c_gtk_entry_buffer_emit_inserted_text;

/** */
alias gtk_entry_buffer_get_bytes = c_gtk_entry_buffer_get_bytes;

/** */
alias gtk_entry_buffer_get_length = c_gtk_entry_buffer_get_length;

/** */
alias gtk_entry_buffer_get_max_length = c_gtk_entry_buffer_get_max_length;

/** */
alias gtk_entry_buffer_get_text = c_gtk_entry_buffer_get_text;

/** */
alias gtk_entry_buffer_insert_text = c_gtk_entry_buffer_insert_text;

/** */
alias gtk_entry_buffer_set_max_length = c_gtk_entry_buffer_set_max_length;

/** */
alias gtk_entry_buffer_set_text = c_gtk_entry_buffer_set_text;

// EntryCompletion

/** */
alias gtk_entry_completion_get_type = c_gtk_entry_completion_get_type;

/** */
alias gtk_entry_completion_new = c_gtk_entry_completion_new;

/** */
alias gtk_entry_completion_new_with_area = c_gtk_entry_completion_new_with_area;

/** */
alias gtk_entry_completion_complete = c_gtk_entry_completion_complete;

/** */
alias gtk_entry_completion_compute_prefix = c_gtk_entry_completion_compute_prefix;

/** */
alias gtk_entry_completion_delete_action = c_gtk_entry_completion_delete_action;

/** */
alias gtk_entry_completion_get_completion_prefix = c_gtk_entry_completion_get_completion_prefix;

/** */
alias gtk_entry_completion_get_entry = c_gtk_entry_completion_get_entry;

/** */
alias gtk_entry_completion_get_inline_completion = c_gtk_entry_completion_get_inline_completion;

/** */
alias gtk_entry_completion_get_inline_selection = c_gtk_entry_completion_get_inline_selection;

/** */
alias gtk_entry_completion_get_minimum_key_length = c_gtk_entry_completion_get_minimum_key_length;

/** */
alias gtk_entry_completion_get_model = c_gtk_entry_completion_get_model;

/** */
alias gtk_entry_completion_get_popup_completion = c_gtk_entry_completion_get_popup_completion;

/** */
alias gtk_entry_completion_get_popup_set_width = c_gtk_entry_completion_get_popup_set_width;

/** */
alias gtk_entry_completion_get_popup_single_match = c_gtk_entry_completion_get_popup_single_match;

/** */
alias gtk_entry_completion_get_text_column = c_gtk_entry_completion_get_text_column;

/** */
alias gtk_entry_completion_insert_action_markup = c_gtk_entry_completion_insert_action_markup;

/** */
alias gtk_entry_completion_insert_action_text = c_gtk_entry_completion_insert_action_text;

/** */
alias gtk_entry_completion_insert_prefix = c_gtk_entry_completion_insert_prefix;

/** */
alias gtk_entry_completion_set_inline_completion = c_gtk_entry_completion_set_inline_completion;

/** */
alias gtk_entry_completion_set_inline_selection = c_gtk_entry_completion_set_inline_selection;

/** */
alias gtk_entry_completion_set_match_func = c_gtk_entry_completion_set_match_func;

/** */
alias gtk_entry_completion_set_minimum_key_length = c_gtk_entry_completion_set_minimum_key_length;

/** */
alias gtk_entry_completion_set_model = c_gtk_entry_completion_set_model;

/** */
alias gtk_entry_completion_set_popup_completion = c_gtk_entry_completion_set_popup_completion;

/** */
alias gtk_entry_completion_set_popup_set_width = c_gtk_entry_completion_set_popup_set_width;

/** */
alias gtk_entry_completion_set_popup_single_match = c_gtk_entry_completion_set_popup_single_match;

/** */
alias gtk_entry_completion_set_text_column = c_gtk_entry_completion_set_text_column;

// EntryIconAccessible

/** */
alias gtk_entry_icon_accessible_get_type = c_gtk_entry_icon_accessible_get_type;

// EventBox

/** */
alias gtk_event_box_get_type = c_gtk_event_box_get_type;

/** */
alias gtk_event_box_new = c_gtk_event_box_new;

/** */
alias gtk_event_box_get_above_child = c_gtk_event_box_get_above_child;

/** */
alias gtk_event_box_get_visible_window = c_gtk_event_box_get_visible_window;

/** */
alias gtk_event_box_set_above_child = c_gtk_event_box_set_above_child;

/** */
alias gtk_event_box_set_visible_window = c_gtk_event_box_set_visible_window;

// EventController

/** */
alias gtk_event_controller_get_type = c_gtk_event_controller_get_type;

/** */
alias gtk_event_controller_get_propagation_phase = c_gtk_event_controller_get_propagation_phase;

/** */
alias gtk_event_controller_get_widget = c_gtk_event_controller_get_widget;

/** */
alias gtk_event_controller_handle_event = c_gtk_event_controller_handle_event;

/** */
alias gtk_event_controller_reset = c_gtk_event_controller_reset;

/** */
alias gtk_event_controller_set_propagation_phase = c_gtk_event_controller_set_propagation_phase;

// EventControllerKey

/** */
alias gtk_event_controller_key_get_type = c_gtk_event_controller_key_get_type;

/** */
alias gtk_event_controller_key_new = c_gtk_event_controller_key_new;

/** */
alias gtk_event_controller_key_forward = c_gtk_event_controller_key_forward;

/** */
alias gtk_event_controller_key_get_group = c_gtk_event_controller_key_get_group;

/** */
alias gtk_event_controller_key_get_im_context = c_gtk_event_controller_key_get_im_context;

/** */
alias gtk_event_controller_key_set_im_context = c_gtk_event_controller_key_set_im_context;

// EventControllerMotion

/** */
alias gtk_event_controller_motion_get_type = c_gtk_event_controller_motion_get_type;

/** */
alias gtk_event_controller_motion_new = c_gtk_event_controller_motion_new;

// EventControllerScroll

/** */
alias gtk_event_controller_scroll_get_type = c_gtk_event_controller_scroll_get_type;

/** */
alias gtk_event_controller_scroll_new = c_gtk_event_controller_scroll_new;

/** */
alias gtk_event_controller_scroll_get_flags = c_gtk_event_controller_scroll_get_flags;

/** */
alias gtk_event_controller_scroll_set_flags = c_gtk_event_controller_scroll_set_flags;

// Expander

/** */
alias gtk_expander_get_type = c_gtk_expander_get_type;

/** */
alias gtk_expander_new = c_gtk_expander_new;

/** */
alias gtk_expander_new_with_mnemonic = c_gtk_expander_new_with_mnemonic;

/** */
alias gtk_expander_get_expanded = c_gtk_expander_get_expanded;

/** */
alias gtk_expander_get_label = c_gtk_expander_get_label;

/** */
alias gtk_expander_get_label_fill = c_gtk_expander_get_label_fill;

/** */
alias gtk_expander_get_label_widget = c_gtk_expander_get_label_widget;

/** */
alias gtk_expander_get_resize_toplevel = c_gtk_expander_get_resize_toplevel;

/** */
alias gtk_expander_get_spacing = c_gtk_expander_get_spacing;

/** */
alias gtk_expander_get_use_markup = c_gtk_expander_get_use_markup;

/** */
alias gtk_expander_get_use_underline = c_gtk_expander_get_use_underline;

/** */
alias gtk_expander_set_expanded = c_gtk_expander_set_expanded;

/** */
alias gtk_expander_set_label = c_gtk_expander_set_label;

/** */
alias gtk_expander_set_label_fill = c_gtk_expander_set_label_fill;

/** */
alias gtk_expander_set_label_widget = c_gtk_expander_set_label_widget;

/** */
alias gtk_expander_set_resize_toplevel = c_gtk_expander_set_resize_toplevel;

/** */
alias gtk_expander_set_spacing = c_gtk_expander_set_spacing;

/** */
alias gtk_expander_set_use_markup = c_gtk_expander_set_use_markup;

/** */
alias gtk_expander_set_use_underline = c_gtk_expander_set_use_underline;

// ExpanderAccessible

/** */
alias gtk_expander_accessible_get_type = c_gtk_expander_accessible_get_type;

// FileChooser

/** */
alias gtk_file_chooser_get_type = c_gtk_file_chooser_get_type;

/** */
alias gtk_file_chooser_add_choice = c_gtk_file_chooser_add_choice;

/** */
alias gtk_file_chooser_add_filter = c_gtk_file_chooser_add_filter;

/** */
alias gtk_file_chooser_add_shortcut_folder = c_gtk_file_chooser_add_shortcut_folder;

/** */
alias gtk_file_chooser_add_shortcut_folder_uri = c_gtk_file_chooser_add_shortcut_folder_uri;

/** */
alias gtk_file_chooser_get_action = c_gtk_file_chooser_get_action;

/** */
alias gtk_file_chooser_get_choice = c_gtk_file_chooser_get_choice;

/** */
alias gtk_file_chooser_get_create_folders = c_gtk_file_chooser_get_create_folders;

/** */
alias gtk_file_chooser_get_current_folder = c_gtk_file_chooser_get_current_folder;

/** */
alias gtk_file_chooser_get_current_folder_file = c_gtk_file_chooser_get_current_folder_file;

/** */
alias gtk_file_chooser_get_current_folder_uri = c_gtk_file_chooser_get_current_folder_uri;

/** */
alias gtk_file_chooser_get_current_name = c_gtk_file_chooser_get_current_name;

/** */
alias gtk_file_chooser_get_do_overwrite_confirmation = c_gtk_file_chooser_get_do_overwrite_confirmation;

/** */
alias gtk_file_chooser_get_extra_widget = c_gtk_file_chooser_get_extra_widget;

/** */
alias gtk_file_chooser_get_file = c_gtk_file_chooser_get_file;

/** */
alias gtk_file_chooser_get_filename = c_gtk_file_chooser_get_filename;

/** */
alias gtk_file_chooser_get_filenames = c_gtk_file_chooser_get_filenames;

/** */
alias gtk_file_chooser_get_files = c_gtk_file_chooser_get_files;

/** */
alias gtk_file_chooser_get_filter = c_gtk_file_chooser_get_filter;

/** */
alias gtk_file_chooser_get_local_only = c_gtk_file_chooser_get_local_only;

/** */
alias gtk_file_chooser_get_preview_file = c_gtk_file_chooser_get_preview_file;

/** */
alias gtk_file_chooser_get_preview_filename = c_gtk_file_chooser_get_preview_filename;

/** */
alias gtk_file_chooser_get_preview_uri = c_gtk_file_chooser_get_preview_uri;

/** */
alias gtk_file_chooser_get_preview_widget = c_gtk_file_chooser_get_preview_widget;

/** */
alias gtk_file_chooser_get_preview_widget_active = c_gtk_file_chooser_get_preview_widget_active;

/** */
alias gtk_file_chooser_get_select_multiple = c_gtk_file_chooser_get_select_multiple;

/** */
alias gtk_file_chooser_get_show_hidden = c_gtk_file_chooser_get_show_hidden;

/** */
alias gtk_file_chooser_get_uri = c_gtk_file_chooser_get_uri;

/** */
alias gtk_file_chooser_get_uris = c_gtk_file_chooser_get_uris;

/** */
alias gtk_file_chooser_get_use_preview_label = c_gtk_file_chooser_get_use_preview_label;

/** */
alias gtk_file_chooser_list_filters = c_gtk_file_chooser_list_filters;

/** */
alias gtk_file_chooser_list_shortcut_folder_uris = c_gtk_file_chooser_list_shortcut_folder_uris;

/** */
alias gtk_file_chooser_list_shortcut_folders = c_gtk_file_chooser_list_shortcut_folders;

/** */
alias gtk_file_chooser_remove_choice = c_gtk_file_chooser_remove_choice;

/** */
alias gtk_file_chooser_remove_filter = c_gtk_file_chooser_remove_filter;

/** */
alias gtk_file_chooser_remove_shortcut_folder = c_gtk_file_chooser_remove_shortcut_folder;

/** */
alias gtk_file_chooser_remove_shortcut_folder_uri = c_gtk_file_chooser_remove_shortcut_folder_uri;

/** */
alias gtk_file_chooser_select_all = c_gtk_file_chooser_select_all;

/** */
alias gtk_file_chooser_select_file = c_gtk_file_chooser_select_file;

/** */
alias gtk_file_chooser_select_filename = c_gtk_file_chooser_select_filename;

/** */
alias gtk_file_chooser_select_uri = c_gtk_file_chooser_select_uri;

/** */
alias gtk_file_chooser_set_action = c_gtk_file_chooser_set_action;

/** */
alias gtk_file_chooser_set_choice = c_gtk_file_chooser_set_choice;

/** */
alias gtk_file_chooser_set_create_folders = c_gtk_file_chooser_set_create_folders;

/** */
alias gtk_file_chooser_set_current_folder = c_gtk_file_chooser_set_current_folder;

/** */
alias gtk_file_chooser_set_current_folder_file = c_gtk_file_chooser_set_current_folder_file;

/** */
alias gtk_file_chooser_set_current_folder_uri = c_gtk_file_chooser_set_current_folder_uri;

/** */
alias gtk_file_chooser_set_current_name = c_gtk_file_chooser_set_current_name;

/** */
alias gtk_file_chooser_set_do_overwrite_confirmation = c_gtk_file_chooser_set_do_overwrite_confirmation;

/** */
alias gtk_file_chooser_set_extra_widget = c_gtk_file_chooser_set_extra_widget;

/** */
alias gtk_file_chooser_set_file = c_gtk_file_chooser_set_file;

/** */
alias gtk_file_chooser_set_filename = c_gtk_file_chooser_set_filename;

/** */
alias gtk_file_chooser_set_filter = c_gtk_file_chooser_set_filter;

/** */
alias gtk_file_chooser_set_local_only = c_gtk_file_chooser_set_local_only;

/** */
alias gtk_file_chooser_set_preview_widget = c_gtk_file_chooser_set_preview_widget;

/** */
alias gtk_file_chooser_set_preview_widget_active = c_gtk_file_chooser_set_preview_widget_active;

/** */
alias gtk_file_chooser_set_select_multiple = c_gtk_file_chooser_set_select_multiple;

/** */
alias gtk_file_chooser_set_show_hidden = c_gtk_file_chooser_set_show_hidden;

/** */
alias gtk_file_chooser_set_uri = c_gtk_file_chooser_set_uri;

/** */
alias gtk_file_chooser_set_use_preview_label = c_gtk_file_chooser_set_use_preview_label;

/** */
alias gtk_file_chooser_unselect_all = c_gtk_file_chooser_unselect_all;

/** */
alias gtk_file_chooser_unselect_file = c_gtk_file_chooser_unselect_file;

/** */
alias gtk_file_chooser_unselect_filename = c_gtk_file_chooser_unselect_filename;

/** */
alias gtk_file_chooser_unselect_uri = c_gtk_file_chooser_unselect_uri;

// FileChooserButton

/** */
alias gtk_file_chooser_button_get_type = c_gtk_file_chooser_button_get_type;

/** */
alias gtk_file_chooser_button_new = c_gtk_file_chooser_button_new;

/** */
alias gtk_file_chooser_button_new_with_dialog = c_gtk_file_chooser_button_new_with_dialog;

/** */
alias gtk_file_chooser_button_get_focus_on_click = c_gtk_file_chooser_button_get_focus_on_click;

/** */
alias gtk_file_chooser_button_get_title = c_gtk_file_chooser_button_get_title;

/** */
alias gtk_file_chooser_button_get_width_chars = c_gtk_file_chooser_button_get_width_chars;

/** */
alias gtk_file_chooser_button_set_focus_on_click = c_gtk_file_chooser_button_set_focus_on_click;

/** */
alias gtk_file_chooser_button_set_title = c_gtk_file_chooser_button_set_title;

/** */
alias gtk_file_chooser_button_set_width_chars = c_gtk_file_chooser_button_set_width_chars;

// FileChooserDialog

/** */
alias gtk_file_chooser_dialog_get_type = c_gtk_file_chooser_dialog_get_type;

/** */
alias gtk_file_chooser_dialog_new = c_gtk_file_chooser_dialog_new;

// FileChooserNative

/** */
alias gtk_file_chooser_native_get_type = c_gtk_file_chooser_native_get_type;

/** */
alias gtk_file_chooser_native_new = c_gtk_file_chooser_native_new;

/** */
alias gtk_file_chooser_native_get_accept_label = c_gtk_file_chooser_native_get_accept_label;

/** */
alias gtk_file_chooser_native_get_cancel_label = c_gtk_file_chooser_native_get_cancel_label;

/** */
alias gtk_file_chooser_native_set_accept_label = c_gtk_file_chooser_native_set_accept_label;

/** */
alias gtk_file_chooser_native_set_cancel_label = c_gtk_file_chooser_native_set_cancel_label;

// FileChooserWidget

/** */
alias gtk_file_chooser_widget_get_type = c_gtk_file_chooser_widget_get_type;

/** */
alias gtk_file_chooser_widget_new = c_gtk_file_chooser_widget_new;

// FileChooserWidgetAccessible

/** */
alias gtk_file_chooser_widget_accessible_get_type = c_gtk_file_chooser_widget_accessible_get_type;

// FileFilter

/** */
alias gtk_file_filter_get_type = c_gtk_file_filter_get_type;

/** */
alias gtk_file_filter_new = c_gtk_file_filter_new;

/** */
alias gtk_file_filter_new_from_gvariant = c_gtk_file_filter_new_from_gvariant;

/** */
alias gtk_file_filter_add_custom = c_gtk_file_filter_add_custom;

/** */
alias gtk_file_filter_add_mime_type = c_gtk_file_filter_add_mime_type;

/** */
alias gtk_file_filter_add_pattern = c_gtk_file_filter_add_pattern;

/** */
alias gtk_file_filter_add_pixbuf_formats = c_gtk_file_filter_add_pixbuf_formats;

/** */
alias gtk_file_filter_filter = c_gtk_file_filter_filter;

/** */
alias gtk_file_filter_get_name = c_gtk_file_filter_get_name;

/** */
alias gtk_file_filter_get_needed = c_gtk_file_filter_get_needed;

/** */
alias gtk_file_filter_set_name = c_gtk_file_filter_set_name;

/** */
alias gtk_file_filter_to_gvariant = c_gtk_file_filter_to_gvariant;

// Fixed

/** */
alias gtk_fixed_get_type = c_gtk_fixed_get_type;

/** */
alias gtk_fixed_new = c_gtk_fixed_new;

/** */
alias gtk_fixed_move = c_gtk_fixed_move;

/** */
alias gtk_fixed_put = c_gtk_fixed_put;

// FlowBox

/** */
alias gtk_flow_box_get_type = c_gtk_flow_box_get_type;

/** */
alias gtk_flow_box_new = c_gtk_flow_box_new;

/** */
alias gtk_flow_box_bind_model = c_gtk_flow_box_bind_model;

/** */
alias gtk_flow_box_get_activate_on_single_click = c_gtk_flow_box_get_activate_on_single_click;

/** */
alias gtk_flow_box_get_child_at_index = c_gtk_flow_box_get_child_at_index;

/** */
alias gtk_flow_box_get_child_at_pos = c_gtk_flow_box_get_child_at_pos;

/** */
alias gtk_flow_box_get_column_spacing = c_gtk_flow_box_get_column_spacing;

/** */
alias gtk_flow_box_get_homogeneous = c_gtk_flow_box_get_homogeneous;

/** */
alias gtk_flow_box_get_max_children_per_line = c_gtk_flow_box_get_max_children_per_line;

/** */
alias gtk_flow_box_get_min_children_per_line = c_gtk_flow_box_get_min_children_per_line;

/** */
alias gtk_flow_box_get_row_spacing = c_gtk_flow_box_get_row_spacing;

/** */
alias gtk_flow_box_get_selected_children = c_gtk_flow_box_get_selected_children;

/** */
alias gtk_flow_box_get_selection_mode = c_gtk_flow_box_get_selection_mode;

/** */
alias gtk_flow_box_insert = c_gtk_flow_box_insert;

/** */
alias gtk_flow_box_invalidate_filter = c_gtk_flow_box_invalidate_filter;

/** */
alias gtk_flow_box_invalidate_sort = c_gtk_flow_box_invalidate_sort;

/** */
alias gtk_flow_box_select_all = c_gtk_flow_box_select_all;

/** */
alias gtk_flow_box_select_child = c_gtk_flow_box_select_child;

/** */
alias gtk_flow_box_selected_foreach = c_gtk_flow_box_selected_foreach;

/** */
alias gtk_flow_box_set_activate_on_single_click = c_gtk_flow_box_set_activate_on_single_click;

/** */
alias gtk_flow_box_set_column_spacing = c_gtk_flow_box_set_column_spacing;

/** */
alias gtk_flow_box_set_filter_func = c_gtk_flow_box_set_filter_func;

/** */
alias gtk_flow_box_set_hadjustment = c_gtk_flow_box_set_hadjustment;

/** */
alias gtk_flow_box_set_homogeneous = c_gtk_flow_box_set_homogeneous;

/** */
alias gtk_flow_box_set_max_children_per_line = c_gtk_flow_box_set_max_children_per_line;

/** */
alias gtk_flow_box_set_min_children_per_line = c_gtk_flow_box_set_min_children_per_line;

/** */
alias gtk_flow_box_set_row_spacing = c_gtk_flow_box_set_row_spacing;

/** */
alias gtk_flow_box_set_selection_mode = c_gtk_flow_box_set_selection_mode;

/** */
alias gtk_flow_box_set_sort_func = c_gtk_flow_box_set_sort_func;

/** */
alias gtk_flow_box_set_vadjustment = c_gtk_flow_box_set_vadjustment;

/** */
alias gtk_flow_box_unselect_all = c_gtk_flow_box_unselect_all;

/** */
alias gtk_flow_box_unselect_child = c_gtk_flow_box_unselect_child;

// FlowBoxAccessible

/** */
alias gtk_flow_box_accessible_get_type = c_gtk_flow_box_accessible_get_type;

// FlowBoxChild

/** */
alias gtk_flow_box_child_get_type = c_gtk_flow_box_child_get_type;

/** */
alias gtk_flow_box_child_new = c_gtk_flow_box_child_new;

/** */
alias gtk_flow_box_child_changed = c_gtk_flow_box_child_changed;

/** */
alias gtk_flow_box_child_get_index = c_gtk_flow_box_child_get_index;

/** */
alias gtk_flow_box_child_is_selected = c_gtk_flow_box_child_is_selected;

// FlowBoxChildAccessible

/** */
alias gtk_flow_box_child_accessible_get_type = c_gtk_flow_box_child_accessible_get_type;

// FontButton

/** */
alias gtk_font_button_get_type = c_gtk_font_button_get_type;

/** */
alias gtk_font_button_new = c_gtk_font_button_new;

/** */
alias gtk_font_button_new_with_font = c_gtk_font_button_new_with_font;

/** */
alias gtk_font_button_get_font_name = c_gtk_font_button_get_font_name;

/** */
alias gtk_font_button_get_show_size = c_gtk_font_button_get_show_size;

/** */
alias gtk_font_button_get_show_style = c_gtk_font_button_get_show_style;

/** */
alias gtk_font_button_get_title = c_gtk_font_button_get_title;

/** */
alias gtk_font_button_get_use_font = c_gtk_font_button_get_use_font;

/** */
alias gtk_font_button_get_use_size = c_gtk_font_button_get_use_size;

/** */
alias gtk_font_button_set_font_name = c_gtk_font_button_set_font_name;

/** */
alias gtk_font_button_set_show_size = c_gtk_font_button_set_show_size;

/** */
alias gtk_font_button_set_show_style = c_gtk_font_button_set_show_style;

/** */
alias gtk_font_button_set_title = c_gtk_font_button_set_title;

/** */
alias gtk_font_button_set_use_font = c_gtk_font_button_set_use_font;

/** */
alias gtk_font_button_set_use_size = c_gtk_font_button_set_use_size;

// FontChooser

/** */
alias gtk_font_chooser_get_type = c_gtk_font_chooser_get_type;

/** */
alias gtk_font_chooser_get_font = c_gtk_font_chooser_get_font;

/** */
alias gtk_font_chooser_get_font_desc = c_gtk_font_chooser_get_font_desc;

/** */
alias gtk_font_chooser_get_font_face = c_gtk_font_chooser_get_font_face;

/** */
alias gtk_font_chooser_get_font_family = c_gtk_font_chooser_get_font_family;

/** */
alias gtk_font_chooser_get_font_features = c_gtk_font_chooser_get_font_features;

/** */
alias gtk_font_chooser_get_font_map = c_gtk_font_chooser_get_font_map;

/** */
alias gtk_font_chooser_get_font_size = c_gtk_font_chooser_get_font_size;

/** */
alias gtk_font_chooser_get_language = c_gtk_font_chooser_get_language;

/** */
alias gtk_font_chooser_get_level = c_gtk_font_chooser_get_level;

/** */
alias gtk_font_chooser_get_preview_text = c_gtk_font_chooser_get_preview_text;

/** */
alias gtk_font_chooser_get_show_preview_entry = c_gtk_font_chooser_get_show_preview_entry;

/** */
alias gtk_font_chooser_set_filter_func = c_gtk_font_chooser_set_filter_func;

/** */
alias gtk_font_chooser_set_font = c_gtk_font_chooser_set_font;

/** */
alias gtk_font_chooser_set_font_desc = c_gtk_font_chooser_set_font_desc;

/** */
alias gtk_font_chooser_set_font_map = c_gtk_font_chooser_set_font_map;

/** */
alias gtk_font_chooser_set_language = c_gtk_font_chooser_set_language;

/** */
alias gtk_font_chooser_set_level = c_gtk_font_chooser_set_level;

/** */
alias gtk_font_chooser_set_preview_text = c_gtk_font_chooser_set_preview_text;

/** */
alias gtk_font_chooser_set_show_preview_entry = c_gtk_font_chooser_set_show_preview_entry;

// FontChooserDialog

/** */
alias gtk_font_chooser_dialog_get_type = c_gtk_font_chooser_dialog_get_type;

/** */
alias gtk_font_chooser_dialog_new = c_gtk_font_chooser_dialog_new;

// FontChooserWidget

/** */
alias gtk_font_chooser_widget_get_type = c_gtk_font_chooser_widget_get_type;

/** */
alias gtk_font_chooser_widget_new = c_gtk_font_chooser_widget_new;

// FontSelection

/** */
alias gtk_font_selection_get_type = c_gtk_font_selection_get_type;

/** */
alias gtk_font_selection_new = c_gtk_font_selection_new;

/** */
alias gtk_font_selection_get_face = c_gtk_font_selection_get_face;

/** */
alias gtk_font_selection_get_face_list = c_gtk_font_selection_get_face_list;

/** */
alias gtk_font_selection_get_family = c_gtk_font_selection_get_family;

/** */
alias gtk_font_selection_get_family_list = c_gtk_font_selection_get_family_list;

/** */
alias gtk_font_selection_get_font_name = c_gtk_font_selection_get_font_name;

/** */
alias gtk_font_selection_get_preview_entry = c_gtk_font_selection_get_preview_entry;

/** */
alias gtk_font_selection_get_preview_text = c_gtk_font_selection_get_preview_text;

/** */
alias gtk_font_selection_get_size = c_gtk_font_selection_get_size;

/** */
alias gtk_font_selection_get_size_entry = c_gtk_font_selection_get_size_entry;

/** */
alias gtk_font_selection_get_size_list = c_gtk_font_selection_get_size_list;

/** */
alias gtk_font_selection_set_font_name = c_gtk_font_selection_set_font_name;

/** */
alias gtk_font_selection_set_preview_text = c_gtk_font_selection_set_preview_text;

// FontSelectionDialog

/** */
alias gtk_font_selection_dialog_get_type = c_gtk_font_selection_dialog_get_type;

/** */
alias gtk_font_selection_dialog_new = c_gtk_font_selection_dialog_new;

/** */
alias gtk_font_selection_dialog_get_cancel_button = c_gtk_font_selection_dialog_get_cancel_button;

/** */
alias gtk_font_selection_dialog_get_font_name = c_gtk_font_selection_dialog_get_font_name;

/** */
alias gtk_font_selection_dialog_get_font_selection = c_gtk_font_selection_dialog_get_font_selection;

/** */
alias gtk_font_selection_dialog_get_ok_button = c_gtk_font_selection_dialog_get_ok_button;

/** */
alias gtk_font_selection_dialog_get_preview_text = c_gtk_font_selection_dialog_get_preview_text;

/** */
alias gtk_font_selection_dialog_set_font_name = c_gtk_font_selection_dialog_set_font_name;

/** */
alias gtk_font_selection_dialog_set_preview_text = c_gtk_font_selection_dialog_set_preview_text;

// Frame

/** */
alias gtk_frame_get_type = c_gtk_frame_get_type;

/** */
alias gtk_frame_new = c_gtk_frame_new;

/** */
alias gtk_frame_get_label = c_gtk_frame_get_label;

/** */
alias gtk_frame_get_label_align = c_gtk_frame_get_label_align;

/** */
alias gtk_frame_get_label_widget = c_gtk_frame_get_label_widget;

/** */
alias gtk_frame_get_shadow_type = c_gtk_frame_get_shadow_type;

/** */
alias gtk_frame_set_label = c_gtk_frame_set_label;

/** */
alias gtk_frame_set_label_align = c_gtk_frame_set_label_align;

/** */
alias gtk_frame_set_label_widget = c_gtk_frame_set_label_widget;

/** */
alias gtk_frame_set_shadow_type = c_gtk_frame_set_shadow_type;

// FrameAccessible

/** */
alias gtk_frame_accessible_get_type = c_gtk_frame_accessible_get_type;

// GLArea

/** */
alias gtk_gl_area_get_type = c_gtk_gl_area_get_type;

/** */
alias gtk_gl_area_new = c_gtk_gl_area_new;

/** */
alias gtk_gl_area_attach_buffers = c_gtk_gl_area_attach_buffers;

/** */
alias gtk_gl_area_get_auto_render = c_gtk_gl_area_get_auto_render;

/** */
alias gtk_gl_area_get_context = c_gtk_gl_area_get_context;

/** */
alias gtk_gl_area_get_error = c_gtk_gl_area_get_error;

/** */
alias gtk_gl_area_get_has_alpha = c_gtk_gl_area_get_has_alpha;

/** */
alias gtk_gl_area_get_has_depth_buffer = c_gtk_gl_area_get_has_depth_buffer;

/** */
alias gtk_gl_area_get_has_stencil_buffer = c_gtk_gl_area_get_has_stencil_buffer;

/** */
alias gtk_gl_area_get_required_version = c_gtk_gl_area_get_required_version;

/** */
alias gtk_gl_area_get_use_es = c_gtk_gl_area_get_use_es;

/** */
alias gtk_gl_area_make_current = c_gtk_gl_area_make_current;

/** */
alias gtk_gl_area_queue_render = c_gtk_gl_area_queue_render;

/** */
alias gtk_gl_area_set_auto_render = c_gtk_gl_area_set_auto_render;

/** */
alias gtk_gl_area_set_error = c_gtk_gl_area_set_error;

/** */
alias gtk_gl_area_set_has_alpha = c_gtk_gl_area_set_has_alpha;

/** */
alias gtk_gl_area_set_has_depth_buffer = c_gtk_gl_area_set_has_depth_buffer;

/** */
alias gtk_gl_area_set_has_stencil_buffer = c_gtk_gl_area_set_has_stencil_buffer;

/** */
alias gtk_gl_area_set_required_version = c_gtk_gl_area_set_required_version;

/** */
alias gtk_gl_area_set_use_es = c_gtk_gl_area_set_use_es;

// Gesture

/** */
alias gtk_gesture_get_type = c_gtk_gesture_get_type;

/** */
alias gtk_gesture_get_bounding_box = c_gtk_gesture_get_bounding_box;

/** */
alias gtk_gesture_get_bounding_box_center = c_gtk_gesture_get_bounding_box_center;

/** */
alias gtk_gesture_get_device = c_gtk_gesture_get_device;

/** */
alias gtk_gesture_get_group = c_gtk_gesture_get_group;

/** */
alias gtk_gesture_get_last_event = c_gtk_gesture_get_last_event;

/** */
alias gtk_gesture_get_last_updated_sequence = c_gtk_gesture_get_last_updated_sequence;

/** */
alias gtk_gesture_get_point = c_gtk_gesture_get_point;

/** */
alias gtk_gesture_get_sequence_state = c_gtk_gesture_get_sequence_state;

/** */
alias gtk_gesture_get_sequences = c_gtk_gesture_get_sequences;

/** */
alias gtk_gesture_get_window = c_gtk_gesture_get_window;

/** */
alias gtk_gesture_group = c_gtk_gesture_group;

/** */
alias gtk_gesture_handles_sequence = c_gtk_gesture_handles_sequence;

/** */
alias gtk_gesture_is_active = c_gtk_gesture_is_active;

/** */
alias gtk_gesture_is_grouped_with = c_gtk_gesture_is_grouped_with;

/** */
alias gtk_gesture_is_recognized = c_gtk_gesture_is_recognized;

/** */
alias gtk_gesture_set_sequence_state = c_gtk_gesture_set_sequence_state;

/** */
alias gtk_gesture_set_state = c_gtk_gesture_set_state;

/** */
alias gtk_gesture_set_window = c_gtk_gesture_set_window;

/** */
alias gtk_gesture_ungroup = c_gtk_gesture_ungroup;

// GestureDrag

/** */
alias gtk_gesture_drag_get_type = c_gtk_gesture_drag_get_type;

/** */
alias gtk_gesture_drag_new = c_gtk_gesture_drag_new;

/** */
alias gtk_gesture_drag_get_offset = c_gtk_gesture_drag_get_offset;

/** */
alias gtk_gesture_drag_get_start_point = c_gtk_gesture_drag_get_start_point;

// GestureLongPress

/** */
alias gtk_gesture_long_press_get_type = c_gtk_gesture_long_press_get_type;

/** */
alias gtk_gesture_long_press_new = c_gtk_gesture_long_press_new;

// GestureMultiPress

/** */
alias gtk_gesture_multi_press_get_type = c_gtk_gesture_multi_press_get_type;

/** */
alias gtk_gesture_multi_press_new = c_gtk_gesture_multi_press_new;

/** */
alias gtk_gesture_multi_press_get_area = c_gtk_gesture_multi_press_get_area;

/** */
alias gtk_gesture_multi_press_set_area = c_gtk_gesture_multi_press_set_area;

// GesturePan

/** */
alias gtk_gesture_pan_get_type = c_gtk_gesture_pan_get_type;

/** */
alias gtk_gesture_pan_new = c_gtk_gesture_pan_new;

/** */
alias gtk_gesture_pan_get_orientation = c_gtk_gesture_pan_get_orientation;

/** */
alias gtk_gesture_pan_set_orientation = c_gtk_gesture_pan_set_orientation;

// GestureRotate

/** */
alias gtk_gesture_rotate_get_type = c_gtk_gesture_rotate_get_type;

/** */
alias gtk_gesture_rotate_new = c_gtk_gesture_rotate_new;

/** */
alias gtk_gesture_rotate_get_angle_delta = c_gtk_gesture_rotate_get_angle_delta;

// GestureSingle

/** */
alias gtk_gesture_single_get_type = c_gtk_gesture_single_get_type;

/** */
alias gtk_gesture_single_get_button = c_gtk_gesture_single_get_button;

/** */
alias gtk_gesture_single_get_current_button = c_gtk_gesture_single_get_current_button;

/** */
alias gtk_gesture_single_get_current_sequence = c_gtk_gesture_single_get_current_sequence;

/** */
alias gtk_gesture_single_get_exclusive = c_gtk_gesture_single_get_exclusive;

/** */
alias gtk_gesture_single_get_touch_only = c_gtk_gesture_single_get_touch_only;

/** */
alias gtk_gesture_single_set_button = c_gtk_gesture_single_set_button;

/** */
alias gtk_gesture_single_set_exclusive = c_gtk_gesture_single_set_exclusive;

/** */
alias gtk_gesture_single_set_touch_only = c_gtk_gesture_single_set_touch_only;

// GestureStylus

/** */
alias gtk_gesture_stylus_get_type = c_gtk_gesture_stylus_get_type;

/** */
alias gtk_gesture_stylus_new = c_gtk_gesture_stylus_new;

/** */
alias gtk_gesture_stylus_get_axes = c_gtk_gesture_stylus_get_axes;

/** */
alias gtk_gesture_stylus_get_axis = c_gtk_gesture_stylus_get_axis;

/** */
alias gtk_gesture_stylus_get_device_tool = c_gtk_gesture_stylus_get_device_tool;

// GestureSwipe

/** */
alias gtk_gesture_swipe_get_type = c_gtk_gesture_swipe_get_type;

/** */
alias gtk_gesture_swipe_new = c_gtk_gesture_swipe_new;

/** */
alias gtk_gesture_swipe_get_velocity = c_gtk_gesture_swipe_get_velocity;

// GestureZoom

/** */
alias gtk_gesture_zoom_get_type = c_gtk_gesture_zoom_get_type;

/** */
alias gtk_gesture_zoom_new = c_gtk_gesture_zoom_new;

/** */
alias gtk_gesture_zoom_get_scale_delta = c_gtk_gesture_zoom_get_scale_delta;

// Gradient

/** */
alias gtk_gradient_get_type = c_gtk_gradient_get_type;

/** */
alias gtk_gradient_new_linear = c_gtk_gradient_new_linear;

/** */
alias gtk_gradient_new_radial = c_gtk_gradient_new_radial;

/** */
alias gtk_gradient_add_color_stop = c_gtk_gradient_add_color_stop;

/** */
alias gtk_gradient_ref = c_gtk_gradient_ref;

/** */
alias gtk_gradient_resolve = c_gtk_gradient_resolve;

/** */
alias gtk_gradient_resolve_for_context = c_gtk_gradient_resolve_for_context;

/** */
alias gtk_gradient_to_string = c_gtk_gradient_to_string;

/** */
alias gtk_gradient_unref = c_gtk_gradient_unref;

// Grid

/** */
alias gtk_grid_get_type = c_gtk_grid_get_type;

/** */
alias gtk_grid_new = c_gtk_grid_new;

/** */
alias gtk_grid_attach = c_gtk_grid_attach;

/** */
alias gtk_grid_attach_next_to = c_gtk_grid_attach_next_to;

/** */
alias gtk_grid_get_baseline_row = c_gtk_grid_get_baseline_row;

/** */
alias gtk_grid_get_child_at = c_gtk_grid_get_child_at;

/** */
alias gtk_grid_get_column_homogeneous = c_gtk_grid_get_column_homogeneous;

/** */
alias gtk_grid_get_column_spacing = c_gtk_grid_get_column_spacing;

/** */
alias gtk_grid_get_row_baseline_position = c_gtk_grid_get_row_baseline_position;

/** */
alias gtk_grid_get_row_homogeneous = c_gtk_grid_get_row_homogeneous;

/** */
alias gtk_grid_get_row_spacing = c_gtk_grid_get_row_spacing;

/** */
alias gtk_grid_insert_column = c_gtk_grid_insert_column;

/** */
alias gtk_grid_insert_next_to = c_gtk_grid_insert_next_to;

/** */
alias gtk_grid_insert_row = c_gtk_grid_insert_row;

/** */
alias gtk_grid_remove_column = c_gtk_grid_remove_column;

/** */
alias gtk_grid_remove_row = c_gtk_grid_remove_row;

/** */
alias gtk_grid_set_baseline_row = c_gtk_grid_set_baseline_row;

/** */
alias gtk_grid_set_column_homogeneous = c_gtk_grid_set_column_homogeneous;

/** */
alias gtk_grid_set_column_spacing = c_gtk_grid_set_column_spacing;

/** */
alias gtk_grid_set_row_baseline_position = c_gtk_grid_set_row_baseline_position;

/** */
alias gtk_grid_set_row_homogeneous = c_gtk_grid_set_row_homogeneous;

/** */
alias gtk_grid_set_row_spacing = c_gtk_grid_set_row_spacing;

// HBox

/** */
alias gtk_hbox_get_type = c_gtk_hbox_get_type;

/** */
alias gtk_hbox_new = c_gtk_hbox_new;

// HButtonBox

/** */
alias gtk_hbutton_box_get_type = c_gtk_hbutton_box_get_type;

/** */
alias gtk_hbutton_box_new = c_gtk_hbutton_box_new;

// HPaned

/** */
alias gtk_hpaned_get_type = c_gtk_hpaned_get_type;

/** */
alias gtk_hpaned_new = c_gtk_hpaned_new;

// HSV

/** */
alias gtk_hsv_get_type = c_gtk_hsv_get_type;

/** */
alias gtk_hsv_new = c_gtk_hsv_new;

/** */
alias gtk_hsv_to_rgb = c_gtk_hsv_to_rgb;

/** */
alias gtk_hsv_get_color = c_gtk_hsv_get_color;

/** */
alias gtk_hsv_get_metrics = c_gtk_hsv_get_metrics;

/** */
alias gtk_hsv_is_adjusting = c_gtk_hsv_is_adjusting;

/** */
alias gtk_hsv_set_color = c_gtk_hsv_set_color;

/** */
alias gtk_hsv_set_metrics = c_gtk_hsv_set_metrics;

// HScale

/** */
alias gtk_hscale_get_type = c_gtk_hscale_get_type;

/** */
alias gtk_hscale_new = c_gtk_hscale_new;

/** */
alias gtk_hscale_new_with_range = c_gtk_hscale_new_with_range;

// HScrollbar

/** */
alias gtk_hscrollbar_get_type = c_gtk_hscrollbar_get_type;

/** */
alias gtk_hscrollbar_new = c_gtk_hscrollbar_new;

// HSeparator

/** */
alias gtk_hseparator_get_type = c_gtk_hseparator_get_type;

/** */
alias gtk_hseparator_new = c_gtk_hseparator_new;

// HandleBox

/** */
alias gtk_handle_box_get_type = c_gtk_handle_box_get_type;

/** */
alias gtk_handle_box_new = c_gtk_handle_box_new;

/** */
alias gtk_handle_box_get_child_detached = c_gtk_handle_box_get_child_detached;

/** */
alias gtk_handle_box_get_handle_position = c_gtk_handle_box_get_handle_position;

/** */
alias gtk_handle_box_get_shadow_type = c_gtk_handle_box_get_shadow_type;

/** */
alias gtk_handle_box_get_snap_edge = c_gtk_handle_box_get_snap_edge;

/** */
alias gtk_handle_box_set_handle_position = c_gtk_handle_box_set_handle_position;

/** */
alias gtk_handle_box_set_shadow_type = c_gtk_handle_box_set_shadow_type;

/** */
alias gtk_handle_box_set_snap_edge = c_gtk_handle_box_set_snap_edge;

// HeaderBar

/** */
alias gtk_header_bar_get_type = c_gtk_header_bar_get_type;

/** */
alias gtk_header_bar_new = c_gtk_header_bar_new;

/** */
alias gtk_header_bar_get_custom_title = c_gtk_header_bar_get_custom_title;

/** */
alias gtk_header_bar_get_decoration_layout = c_gtk_header_bar_get_decoration_layout;

/** */
alias gtk_header_bar_get_has_subtitle = c_gtk_header_bar_get_has_subtitle;

/** */
alias gtk_header_bar_get_show_close_button = c_gtk_header_bar_get_show_close_button;

/** */
alias gtk_header_bar_get_subtitle = c_gtk_header_bar_get_subtitle;

/** */
alias gtk_header_bar_get_title = c_gtk_header_bar_get_title;

/** */
alias gtk_header_bar_pack_end = c_gtk_header_bar_pack_end;

/** */
alias gtk_header_bar_pack_start = c_gtk_header_bar_pack_start;

/** */
alias gtk_header_bar_set_custom_title = c_gtk_header_bar_set_custom_title;

/** */
alias gtk_header_bar_set_decoration_layout = c_gtk_header_bar_set_decoration_layout;

/** */
alias gtk_header_bar_set_has_subtitle = c_gtk_header_bar_set_has_subtitle;

/** */
alias gtk_header_bar_set_show_close_button = c_gtk_header_bar_set_show_close_button;

/** */
alias gtk_header_bar_set_subtitle = c_gtk_header_bar_set_subtitle;

/** */
alias gtk_header_bar_set_title = c_gtk_header_bar_set_title;

// HeaderBarAccessible

/** */
alias gtk_header_bar_accessible_get_type = c_gtk_header_bar_accessible_get_type;

// IMContext

/** */
alias gtk_im_context_get_type = c_gtk_im_context_get_type;

/** */
alias gtk_im_context_delete_surrounding = c_gtk_im_context_delete_surrounding;

/** */
alias gtk_im_context_filter_keypress = c_gtk_im_context_filter_keypress;

/** */
alias gtk_im_context_focus_in = c_gtk_im_context_focus_in;

/** */
alias gtk_im_context_focus_out = c_gtk_im_context_focus_out;

/** */
alias gtk_im_context_get_preedit_string = c_gtk_im_context_get_preedit_string;

/** */
alias gtk_im_context_get_surrounding = c_gtk_im_context_get_surrounding;

/** */
alias gtk_im_context_reset = c_gtk_im_context_reset;

/** */
alias gtk_im_context_set_client_window = c_gtk_im_context_set_client_window;

/** */
alias gtk_im_context_set_cursor_location = c_gtk_im_context_set_cursor_location;

/** */
alias gtk_im_context_set_surrounding = c_gtk_im_context_set_surrounding;

/** */
alias gtk_im_context_set_use_preedit = c_gtk_im_context_set_use_preedit;

// IMContextSimple

/** */
alias gtk_im_context_simple_get_type = c_gtk_im_context_simple_get_type;

/** */
alias gtk_im_context_simple_new = c_gtk_im_context_simple_new;

/** */
alias gtk_im_context_simple_add_compose_file = c_gtk_im_context_simple_add_compose_file;

/** */
alias gtk_im_context_simple_add_table = c_gtk_im_context_simple_add_table;

// IMMulticontext

/** */
alias gtk_im_multicontext_get_type = c_gtk_im_multicontext_get_type;

/** */
alias gtk_im_multicontext_new = c_gtk_im_multicontext_new;

/** */
alias gtk_im_multicontext_append_menuitems = c_gtk_im_multicontext_append_menuitems;

/** */
alias gtk_im_multicontext_get_context_id = c_gtk_im_multicontext_get_context_id;

/** */
alias gtk_im_multicontext_set_context_id = c_gtk_im_multicontext_set_context_id;

// IconFactory

/** */
alias gtk_icon_factory_get_type = c_gtk_icon_factory_get_type;

/** */
alias gtk_icon_factory_new = c_gtk_icon_factory_new;

/** */
alias gtk_icon_factory_lookup_default = c_gtk_icon_factory_lookup_default;

/** */
alias gtk_icon_factory_add = c_gtk_icon_factory_add;

/** */
alias gtk_icon_factory_add_default = c_gtk_icon_factory_add_default;

/** */
alias gtk_icon_factory_lookup = c_gtk_icon_factory_lookup;

/** */
alias gtk_icon_factory_remove_default = c_gtk_icon_factory_remove_default;

// IconInfo

/** */
alias gtk_icon_info_get_type = c_gtk_icon_info_get_type;

/** */
alias gtk_icon_info_new_for_pixbuf = c_gtk_icon_info_new_for_pixbuf;

/** */
alias gtk_icon_info_copy = c_gtk_icon_info_copy;

/** */
alias gtk_icon_info_free = c_gtk_icon_info_free;

/** */
alias gtk_icon_info_get_attach_points = c_gtk_icon_info_get_attach_points;

/** */
alias gtk_icon_info_get_base_scale = c_gtk_icon_info_get_base_scale;

/** */
alias gtk_icon_info_get_base_size = c_gtk_icon_info_get_base_size;

/** */
alias gtk_icon_info_get_builtin_pixbuf = c_gtk_icon_info_get_builtin_pixbuf;

/** */
alias gtk_icon_info_get_display_name = c_gtk_icon_info_get_display_name;

/** */
alias gtk_icon_info_get_embedded_rect = c_gtk_icon_info_get_embedded_rect;

/** */
alias gtk_icon_info_get_filename = c_gtk_icon_info_get_filename;

/** */
alias gtk_icon_info_is_symbolic = c_gtk_icon_info_is_symbolic;

/** */
alias gtk_icon_info_load_icon = c_gtk_icon_info_load_icon;

/** */
alias gtk_icon_info_load_icon_async = c_gtk_icon_info_load_icon_async;

/** */
alias gtk_icon_info_load_icon_finish = c_gtk_icon_info_load_icon_finish;

/** */
alias gtk_icon_info_load_surface = c_gtk_icon_info_load_surface;

/** */
alias gtk_icon_info_load_symbolic = c_gtk_icon_info_load_symbolic;

/** */
alias gtk_icon_info_load_symbolic_async = c_gtk_icon_info_load_symbolic_async;

/** */
alias gtk_icon_info_load_symbolic_finish = c_gtk_icon_info_load_symbolic_finish;

/** */
alias gtk_icon_info_load_symbolic_for_context = c_gtk_icon_info_load_symbolic_for_context;

/** */
alias gtk_icon_info_load_symbolic_for_context_async = c_gtk_icon_info_load_symbolic_for_context_async;

/** */
alias gtk_icon_info_load_symbolic_for_context_finish = c_gtk_icon_info_load_symbolic_for_context_finish;

/** */
alias gtk_icon_info_load_symbolic_for_style = c_gtk_icon_info_load_symbolic_for_style;

/** */
alias gtk_icon_info_set_raw_coordinates = c_gtk_icon_info_set_raw_coordinates;

// IconSet

/** */
alias gtk_icon_set_get_type = c_gtk_icon_set_get_type;

/** */
alias gtk_icon_set_new = c_gtk_icon_set_new;

/** */
alias gtk_icon_set_new_from_pixbuf = c_gtk_icon_set_new_from_pixbuf;

/** */
alias gtk_icon_set_add_source = c_gtk_icon_set_add_source;

/** */
alias gtk_icon_set_copy = c_gtk_icon_set_copy;

/** */
alias gtk_icon_set_get_sizes = c_gtk_icon_set_get_sizes;

/** */
alias gtk_icon_set_ref = c_gtk_icon_set_ref;

/** */
alias gtk_icon_set_render_icon = c_gtk_icon_set_render_icon;

/** */
alias gtk_icon_set_render_icon_pixbuf = c_gtk_icon_set_render_icon_pixbuf;

/** */
alias gtk_icon_set_render_icon_surface = c_gtk_icon_set_render_icon_surface;

/** */
alias gtk_icon_set_unref = c_gtk_icon_set_unref;

// IconSource

/** */
alias gtk_icon_source_get_type = c_gtk_icon_source_get_type;

/** */
alias gtk_icon_source_new = c_gtk_icon_source_new;

/** */
alias gtk_icon_source_copy = c_gtk_icon_source_copy;

/** */
alias gtk_icon_source_free = c_gtk_icon_source_free;

/** */
alias gtk_icon_source_get_direction = c_gtk_icon_source_get_direction;

/** */
alias gtk_icon_source_get_direction_wildcarded = c_gtk_icon_source_get_direction_wildcarded;

/** */
alias gtk_icon_source_get_filename = c_gtk_icon_source_get_filename;

/** */
alias gtk_icon_source_get_icon_name = c_gtk_icon_source_get_icon_name;

/** */
alias gtk_icon_source_get_pixbuf = c_gtk_icon_source_get_pixbuf;

/** */
alias gtk_icon_source_get_size = c_gtk_icon_source_get_size;

/** */
alias gtk_icon_source_get_size_wildcarded = c_gtk_icon_source_get_size_wildcarded;

/** */
alias gtk_icon_source_get_state = c_gtk_icon_source_get_state;

/** */
alias gtk_icon_source_get_state_wildcarded = c_gtk_icon_source_get_state_wildcarded;

/** */
alias gtk_icon_source_set_direction = c_gtk_icon_source_set_direction;

/** */
alias gtk_icon_source_set_direction_wildcarded = c_gtk_icon_source_set_direction_wildcarded;

/** */
alias gtk_icon_source_set_filename = c_gtk_icon_source_set_filename;

/** */
alias gtk_icon_source_set_icon_name = c_gtk_icon_source_set_icon_name;

/** */
alias gtk_icon_source_set_pixbuf = c_gtk_icon_source_set_pixbuf;

/** */
alias gtk_icon_source_set_size = c_gtk_icon_source_set_size;

/** */
alias gtk_icon_source_set_size_wildcarded = c_gtk_icon_source_set_size_wildcarded;

/** */
alias gtk_icon_source_set_state = c_gtk_icon_source_set_state;

/** */
alias gtk_icon_source_set_state_wildcarded = c_gtk_icon_source_set_state_wildcarded;

// IconTheme

/** */
alias gtk_icon_theme_get_type = c_gtk_icon_theme_get_type;

/** */
alias gtk_icon_theme_new = c_gtk_icon_theme_new;

/** */
alias gtk_icon_theme_add_builtin_icon = c_gtk_icon_theme_add_builtin_icon;

/** */
alias gtk_icon_theme_get_default = c_gtk_icon_theme_get_default;

/** */
alias gtk_icon_theme_get_for_screen = c_gtk_icon_theme_get_for_screen;

/** */
alias gtk_icon_theme_add_resource_path = c_gtk_icon_theme_add_resource_path;

/** */
alias gtk_icon_theme_append_search_path = c_gtk_icon_theme_append_search_path;

/** */
alias gtk_icon_theme_choose_icon = c_gtk_icon_theme_choose_icon;

/** */
alias gtk_icon_theme_choose_icon_for_scale = c_gtk_icon_theme_choose_icon_for_scale;

/** */
alias gtk_icon_theme_get_example_icon_name = c_gtk_icon_theme_get_example_icon_name;

/** */
alias gtk_icon_theme_get_icon_sizes = c_gtk_icon_theme_get_icon_sizes;

/** */
alias gtk_icon_theme_get_search_path = c_gtk_icon_theme_get_search_path;

/** */
alias gtk_icon_theme_has_icon = c_gtk_icon_theme_has_icon;

/** */
alias gtk_icon_theme_list_contexts = c_gtk_icon_theme_list_contexts;

/** */
alias gtk_icon_theme_list_icons = c_gtk_icon_theme_list_icons;

/** */
alias gtk_icon_theme_load_icon = c_gtk_icon_theme_load_icon;

/** */
alias gtk_icon_theme_load_icon_for_scale = c_gtk_icon_theme_load_icon_for_scale;

/** */
alias gtk_icon_theme_load_surface = c_gtk_icon_theme_load_surface;

/** */
alias gtk_icon_theme_lookup_by_gicon = c_gtk_icon_theme_lookup_by_gicon;

/** */
alias gtk_icon_theme_lookup_by_gicon_for_scale = c_gtk_icon_theme_lookup_by_gicon_for_scale;

/** */
alias gtk_icon_theme_lookup_icon = c_gtk_icon_theme_lookup_icon;

/** */
alias gtk_icon_theme_lookup_icon_for_scale = c_gtk_icon_theme_lookup_icon_for_scale;

/** */
alias gtk_icon_theme_prepend_search_path = c_gtk_icon_theme_prepend_search_path;

/** */
alias gtk_icon_theme_rescan_if_needed = c_gtk_icon_theme_rescan_if_needed;

/** */
alias gtk_icon_theme_set_custom_theme = c_gtk_icon_theme_set_custom_theme;

/** */
alias gtk_icon_theme_set_screen = c_gtk_icon_theme_set_screen;

/** */
alias gtk_icon_theme_set_search_path = c_gtk_icon_theme_set_search_path;

// IconView

/** */
alias gtk_icon_view_get_type = c_gtk_icon_view_get_type;

/** */
alias gtk_icon_view_new = c_gtk_icon_view_new;

/** */
alias gtk_icon_view_new_with_area = c_gtk_icon_view_new_with_area;

/** */
alias gtk_icon_view_new_with_model = c_gtk_icon_view_new_with_model;

/** */
alias gtk_icon_view_convert_widget_to_bin_window_coords = c_gtk_icon_view_convert_widget_to_bin_window_coords;

/** */
alias gtk_icon_view_create_drag_icon = c_gtk_icon_view_create_drag_icon;

/** */
alias gtk_icon_view_enable_model_drag_dest = c_gtk_icon_view_enable_model_drag_dest;

/** */
alias gtk_icon_view_enable_model_drag_source = c_gtk_icon_view_enable_model_drag_source;

/** */
alias gtk_icon_view_get_activate_on_single_click = c_gtk_icon_view_get_activate_on_single_click;

/** */
alias gtk_icon_view_get_cell_rect = c_gtk_icon_view_get_cell_rect;

/** */
alias gtk_icon_view_get_column_spacing = c_gtk_icon_view_get_column_spacing;

/** */
alias gtk_icon_view_get_columns = c_gtk_icon_view_get_columns;

/** */
alias gtk_icon_view_get_cursor = c_gtk_icon_view_get_cursor;

/** */
alias gtk_icon_view_get_dest_item_at_pos = c_gtk_icon_view_get_dest_item_at_pos;

/** */
alias gtk_icon_view_get_drag_dest_item = c_gtk_icon_view_get_drag_dest_item;

/** */
alias gtk_icon_view_get_item_at_pos = c_gtk_icon_view_get_item_at_pos;

/** */
alias gtk_icon_view_get_item_column = c_gtk_icon_view_get_item_column;

/** */
alias gtk_icon_view_get_item_orientation = c_gtk_icon_view_get_item_orientation;

/** */
alias gtk_icon_view_get_item_padding = c_gtk_icon_view_get_item_padding;

/** */
alias gtk_icon_view_get_item_row = c_gtk_icon_view_get_item_row;

/** */
alias gtk_icon_view_get_item_width = c_gtk_icon_view_get_item_width;

/** */
alias gtk_icon_view_get_margin = c_gtk_icon_view_get_margin;

/** */
alias gtk_icon_view_get_markup_column = c_gtk_icon_view_get_markup_column;

/** */
alias gtk_icon_view_get_model = c_gtk_icon_view_get_model;

/** */
alias gtk_icon_view_get_path_at_pos = c_gtk_icon_view_get_path_at_pos;

/** */
alias gtk_icon_view_get_pixbuf_column = c_gtk_icon_view_get_pixbuf_column;

/** */
alias gtk_icon_view_get_reorderable = c_gtk_icon_view_get_reorderable;

/** */
alias gtk_icon_view_get_row_spacing = c_gtk_icon_view_get_row_spacing;

/** */
alias gtk_icon_view_get_selected_items = c_gtk_icon_view_get_selected_items;

/** */
alias gtk_icon_view_get_selection_mode = c_gtk_icon_view_get_selection_mode;

/** */
alias gtk_icon_view_get_spacing = c_gtk_icon_view_get_spacing;

/** */
alias gtk_icon_view_get_text_column = c_gtk_icon_view_get_text_column;

/** */
alias gtk_icon_view_get_tooltip_column = c_gtk_icon_view_get_tooltip_column;

/** */
alias gtk_icon_view_get_tooltip_context = c_gtk_icon_view_get_tooltip_context;

/** */
alias gtk_icon_view_get_visible_range = c_gtk_icon_view_get_visible_range;

/** */
alias gtk_icon_view_item_activated = c_gtk_icon_view_item_activated;

/** */
alias gtk_icon_view_path_is_selected = c_gtk_icon_view_path_is_selected;

/** */
alias gtk_icon_view_scroll_to_path = c_gtk_icon_view_scroll_to_path;

/** */
alias gtk_icon_view_select_all = c_gtk_icon_view_select_all;

/** */
alias gtk_icon_view_select_path = c_gtk_icon_view_select_path;

/** */
alias gtk_icon_view_selected_foreach = c_gtk_icon_view_selected_foreach;

/** */
alias gtk_icon_view_set_activate_on_single_click = c_gtk_icon_view_set_activate_on_single_click;

/** */
alias gtk_icon_view_set_column_spacing = c_gtk_icon_view_set_column_spacing;

/** */
alias gtk_icon_view_set_columns = c_gtk_icon_view_set_columns;

/** */
alias gtk_icon_view_set_cursor = c_gtk_icon_view_set_cursor;

/** */
alias gtk_icon_view_set_drag_dest_item = c_gtk_icon_view_set_drag_dest_item;

/** */
alias gtk_icon_view_set_item_orientation = c_gtk_icon_view_set_item_orientation;

/** */
alias gtk_icon_view_set_item_padding = c_gtk_icon_view_set_item_padding;

/** */
alias gtk_icon_view_set_item_width = c_gtk_icon_view_set_item_width;

/** */
alias gtk_icon_view_set_margin = c_gtk_icon_view_set_margin;

/** */
alias gtk_icon_view_set_markup_column = c_gtk_icon_view_set_markup_column;

/** */
alias gtk_icon_view_set_model = c_gtk_icon_view_set_model;

/** */
alias gtk_icon_view_set_pixbuf_column = c_gtk_icon_view_set_pixbuf_column;

/** */
alias gtk_icon_view_set_reorderable = c_gtk_icon_view_set_reorderable;

/** */
alias gtk_icon_view_set_row_spacing = c_gtk_icon_view_set_row_spacing;

/** */
alias gtk_icon_view_set_selection_mode = c_gtk_icon_view_set_selection_mode;

/** */
alias gtk_icon_view_set_spacing = c_gtk_icon_view_set_spacing;

/** */
alias gtk_icon_view_set_text_column = c_gtk_icon_view_set_text_column;

/** */
alias gtk_icon_view_set_tooltip_cell = c_gtk_icon_view_set_tooltip_cell;

/** */
alias gtk_icon_view_set_tooltip_column = c_gtk_icon_view_set_tooltip_column;

/** */
alias gtk_icon_view_set_tooltip_item = c_gtk_icon_view_set_tooltip_item;

/** */
alias gtk_icon_view_unselect_all = c_gtk_icon_view_unselect_all;

/** */
alias gtk_icon_view_unselect_path = c_gtk_icon_view_unselect_path;

/** */
alias gtk_icon_view_unset_model_drag_dest = c_gtk_icon_view_unset_model_drag_dest;

/** */
alias gtk_icon_view_unset_model_drag_source = c_gtk_icon_view_unset_model_drag_source;

// IconViewAccessible

/** */
alias gtk_icon_view_accessible_get_type = c_gtk_icon_view_accessible_get_type;

// Image

/** */
alias gtk_image_get_type = c_gtk_image_get_type;

/** */
alias gtk_image_new = c_gtk_image_new;

/** */
alias gtk_image_new_from_animation = c_gtk_image_new_from_animation;

/** */
alias gtk_image_new_from_file = c_gtk_image_new_from_file;

/** */
alias gtk_image_new_from_gicon = c_gtk_image_new_from_gicon;

/** */
alias gtk_image_new_from_icon_name = c_gtk_image_new_from_icon_name;

/** */
alias gtk_image_new_from_icon_set = c_gtk_image_new_from_icon_set;

/** */
alias gtk_image_new_from_pixbuf = c_gtk_image_new_from_pixbuf;

/** */
alias gtk_image_new_from_resource = c_gtk_image_new_from_resource;

/** */
alias gtk_image_new_from_stock = c_gtk_image_new_from_stock;

/** */
alias gtk_image_new_from_surface = c_gtk_image_new_from_surface;

/** */
alias gtk_image_clear = c_gtk_image_clear;

/** */
alias gtk_image_get_animation = c_gtk_image_get_animation;

/** */
alias gtk_image_get_gicon = c_gtk_image_get_gicon;

/** */
alias gtk_image_get_icon_name = c_gtk_image_get_icon_name;

/** */
alias gtk_image_get_icon_set = c_gtk_image_get_icon_set;

/** */
alias gtk_image_get_pixbuf = c_gtk_image_get_pixbuf;

/** */
alias gtk_image_get_pixel_size = c_gtk_image_get_pixel_size;

/** */
alias gtk_image_get_stock = c_gtk_image_get_stock;

/** */
alias gtk_image_get_storage_type = c_gtk_image_get_storage_type;

/** */
alias gtk_image_set_from_animation = c_gtk_image_set_from_animation;

/** */
alias gtk_image_set_from_file = c_gtk_image_set_from_file;

/** */
alias gtk_image_set_from_gicon = c_gtk_image_set_from_gicon;

/** */
alias gtk_image_set_from_icon_name = c_gtk_image_set_from_icon_name;

/** */
alias gtk_image_set_from_icon_set = c_gtk_image_set_from_icon_set;

/** */
alias gtk_image_set_from_pixbuf = c_gtk_image_set_from_pixbuf;

/** */
alias gtk_image_set_from_resource = c_gtk_image_set_from_resource;

/** */
alias gtk_image_set_from_stock = c_gtk_image_set_from_stock;

/** */
alias gtk_image_set_from_surface = c_gtk_image_set_from_surface;

/** */
alias gtk_image_set_pixel_size = c_gtk_image_set_pixel_size;

// ImageAccessible

/** */
alias gtk_image_accessible_get_type = c_gtk_image_accessible_get_type;

// ImageCellAccessible

/** */
alias gtk_image_cell_accessible_get_type = c_gtk_image_cell_accessible_get_type;

// ImageMenuItem

/** */
alias gtk_image_menu_item_get_type = c_gtk_image_menu_item_get_type;

/** */
alias gtk_image_menu_item_new = c_gtk_image_menu_item_new;

/** */
alias gtk_image_menu_item_new_from_stock = c_gtk_image_menu_item_new_from_stock;

/** */
alias gtk_image_menu_item_new_with_label = c_gtk_image_menu_item_new_with_label;

/** */
alias gtk_image_menu_item_new_with_mnemonic = c_gtk_image_menu_item_new_with_mnemonic;

/** */
alias gtk_image_menu_item_get_always_show_image = c_gtk_image_menu_item_get_always_show_image;

/** */
alias gtk_image_menu_item_get_image = c_gtk_image_menu_item_get_image;

/** */
alias gtk_image_menu_item_get_use_stock = c_gtk_image_menu_item_get_use_stock;

/** */
alias gtk_image_menu_item_set_accel_group = c_gtk_image_menu_item_set_accel_group;

/** */
alias gtk_image_menu_item_set_always_show_image = c_gtk_image_menu_item_set_always_show_image;

/** */
alias gtk_image_menu_item_set_image = c_gtk_image_menu_item_set_image;

/** */
alias gtk_image_menu_item_set_use_stock = c_gtk_image_menu_item_set_use_stock;

// InfoBar

/** */
alias gtk_info_bar_get_type = c_gtk_info_bar_get_type;

/** */
alias gtk_info_bar_new = c_gtk_info_bar_new;

/** */
alias gtk_info_bar_new_with_buttons = c_gtk_info_bar_new_with_buttons;

/** */
alias gtk_info_bar_add_action_widget = c_gtk_info_bar_add_action_widget;

/** */
alias gtk_info_bar_add_button = c_gtk_info_bar_add_button;

/** */
alias gtk_info_bar_add_buttons = c_gtk_info_bar_add_buttons;

/** */
alias gtk_info_bar_get_action_area = c_gtk_info_bar_get_action_area;

/** */
alias gtk_info_bar_get_content_area = c_gtk_info_bar_get_content_area;

/** */
alias gtk_info_bar_get_message_type = c_gtk_info_bar_get_message_type;

/** */
alias gtk_info_bar_get_revealed = c_gtk_info_bar_get_revealed;

/** */
alias gtk_info_bar_get_show_close_button = c_gtk_info_bar_get_show_close_button;

/** */
alias gtk_info_bar_response = c_gtk_info_bar_response;

/** */
alias gtk_info_bar_set_default_response = c_gtk_info_bar_set_default_response;

/** */
alias gtk_info_bar_set_message_type = c_gtk_info_bar_set_message_type;

/** */
alias gtk_info_bar_set_response_sensitive = c_gtk_info_bar_set_response_sensitive;

/** */
alias gtk_info_bar_set_revealed = c_gtk_info_bar_set_revealed;

/** */
alias gtk_info_bar_set_show_close_button = c_gtk_info_bar_set_show_close_button;

// Invisible

/** */
alias gtk_invisible_get_type = c_gtk_invisible_get_type;

/** */
alias gtk_invisible_new = c_gtk_invisible_new;

/** */
alias gtk_invisible_new_for_screen = c_gtk_invisible_new_for_screen;

/** */
alias gtk_invisible_get_screen = c_gtk_invisible_get_screen;

/** */
alias gtk_invisible_set_screen = c_gtk_invisible_set_screen;

// Label

/** */
alias gtk_label_get_type = c_gtk_label_get_type;

/** */
alias gtk_label_new = c_gtk_label_new;

/** */
alias gtk_label_new_with_mnemonic = c_gtk_label_new_with_mnemonic;

/** */
alias gtk_label_get_angle = c_gtk_label_get_angle;

/** */
alias gtk_label_get_attributes = c_gtk_label_get_attributes;

/** */
alias gtk_label_get_current_uri = c_gtk_label_get_current_uri;

/** */
alias gtk_label_get_ellipsize = c_gtk_label_get_ellipsize;

/** */
alias gtk_label_get_justify = c_gtk_label_get_justify;

/** */
alias gtk_label_get_label = c_gtk_label_get_label;

/** */
alias gtk_label_get_layout = c_gtk_label_get_layout;

/** */
alias gtk_label_get_layout_offsets = c_gtk_label_get_layout_offsets;

/** */
alias gtk_label_get_line_wrap = c_gtk_label_get_line_wrap;

/** */
alias gtk_label_get_line_wrap_mode = c_gtk_label_get_line_wrap_mode;

/** */
alias gtk_label_get_lines = c_gtk_label_get_lines;

/** */
alias gtk_label_get_max_width_chars = c_gtk_label_get_max_width_chars;

/** */
alias gtk_label_get_mnemonic_keyval = c_gtk_label_get_mnemonic_keyval;

/** */
alias gtk_label_get_mnemonic_widget = c_gtk_label_get_mnemonic_widget;

/** */
alias gtk_label_get_selectable = c_gtk_label_get_selectable;

/** */
alias gtk_label_get_selection_bounds = c_gtk_label_get_selection_bounds;

/** */
alias gtk_label_get_single_line_mode = c_gtk_label_get_single_line_mode;

/** */
alias gtk_label_get_text = c_gtk_label_get_text;

/** */
alias gtk_label_get_track_visited_links = c_gtk_label_get_track_visited_links;

/** */
alias gtk_label_get_use_markup = c_gtk_label_get_use_markup;

/** */
alias gtk_label_get_use_underline = c_gtk_label_get_use_underline;

/** */
alias gtk_label_get_width_chars = c_gtk_label_get_width_chars;

/** */
alias gtk_label_get_xalign = c_gtk_label_get_xalign;

/** */
alias gtk_label_get_yalign = c_gtk_label_get_yalign;

/** */
alias gtk_label_select_region = c_gtk_label_select_region;

/** */
alias gtk_label_set_angle = c_gtk_label_set_angle;

/** */
alias gtk_label_set_attributes = c_gtk_label_set_attributes;

/** */
alias gtk_label_set_ellipsize = c_gtk_label_set_ellipsize;

/** */
alias gtk_label_set_justify = c_gtk_label_set_justify;

/** */
alias gtk_label_set_label = c_gtk_label_set_label;

/** */
alias gtk_label_set_line_wrap = c_gtk_label_set_line_wrap;

/** */
alias gtk_label_set_line_wrap_mode = c_gtk_label_set_line_wrap_mode;

/** */
alias gtk_label_set_lines = c_gtk_label_set_lines;

/** */
alias gtk_label_set_markup = c_gtk_label_set_markup;

/** */
alias gtk_label_set_markup_with_mnemonic = c_gtk_label_set_markup_with_mnemonic;

/** */
alias gtk_label_set_max_width_chars = c_gtk_label_set_max_width_chars;

/** */
alias gtk_label_set_mnemonic_widget = c_gtk_label_set_mnemonic_widget;

/** */
alias gtk_label_set_pattern = c_gtk_label_set_pattern;

/** */
alias gtk_label_set_selectable = c_gtk_label_set_selectable;

/** */
alias gtk_label_set_single_line_mode = c_gtk_label_set_single_line_mode;

/** */
alias gtk_label_set_text = c_gtk_label_set_text;

/** */
alias gtk_label_set_text_with_mnemonic = c_gtk_label_set_text_with_mnemonic;

/** */
alias gtk_label_set_track_visited_links = c_gtk_label_set_track_visited_links;

/** */
alias gtk_label_set_use_markup = c_gtk_label_set_use_markup;

/** */
alias gtk_label_set_use_underline = c_gtk_label_set_use_underline;

/** */
alias gtk_label_set_width_chars = c_gtk_label_set_width_chars;

/** */
alias gtk_label_set_xalign = c_gtk_label_set_xalign;

/** */
alias gtk_label_set_yalign = c_gtk_label_set_yalign;

// LabelAccessible

/** */
alias gtk_label_accessible_get_type = c_gtk_label_accessible_get_type;

// Layout

/** */
alias gtk_layout_get_type = c_gtk_layout_get_type;

/** */
alias gtk_layout_new = c_gtk_layout_new;

/** */
alias gtk_layout_get_bin_window = c_gtk_layout_get_bin_window;

/** */
alias gtk_layout_get_hadjustment = c_gtk_layout_get_hadjustment;

/** */
alias gtk_layout_get_size = c_gtk_layout_get_size;

/** */
alias gtk_layout_get_vadjustment = c_gtk_layout_get_vadjustment;

/** */
alias gtk_layout_move = c_gtk_layout_move;

/** */
alias gtk_layout_put = c_gtk_layout_put;

/** */
alias gtk_layout_set_hadjustment = c_gtk_layout_set_hadjustment;

/** */
alias gtk_layout_set_size = c_gtk_layout_set_size;

/** */
alias gtk_layout_set_vadjustment = c_gtk_layout_set_vadjustment;

// LevelBar

/** */
alias gtk_level_bar_get_type = c_gtk_level_bar_get_type;

/** */
alias gtk_level_bar_new = c_gtk_level_bar_new;

/** */
alias gtk_level_bar_new_for_interval = c_gtk_level_bar_new_for_interval;

/** */
alias gtk_level_bar_add_offset_value = c_gtk_level_bar_add_offset_value;

/** */
alias gtk_level_bar_get_inverted = c_gtk_level_bar_get_inverted;

/** */
alias gtk_level_bar_get_max_value = c_gtk_level_bar_get_max_value;

/** */
alias gtk_level_bar_get_min_value = c_gtk_level_bar_get_min_value;

/** */
alias gtk_level_bar_get_mode = c_gtk_level_bar_get_mode;

/** */
alias gtk_level_bar_get_offset_value = c_gtk_level_bar_get_offset_value;

/** */
alias gtk_level_bar_get_value = c_gtk_level_bar_get_value;

/** */
alias gtk_level_bar_remove_offset_value = c_gtk_level_bar_remove_offset_value;

/** */
alias gtk_level_bar_set_inverted = c_gtk_level_bar_set_inverted;

/** */
alias gtk_level_bar_set_max_value = c_gtk_level_bar_set_max_value;

/** */
alias gtk_level_bar_set_min_value = c_gtk_level_bar_set_min_value;

/** */
alias gtk_level_bar_set_mode = c_gtk_level_bar_set_mode;

/** */
alias gtk_level_bar_set_value = c_gtk_level_bar_set_value;

// LevelBarAccessible

/** */
alias gtk_level_bar_accessible_get_type = c_gtk_level_bar_accessible_get_type;

// LinkButton

/** */
alias gtk_link_button_get_type = c_gtk_link_button_get_type;

/** */
alias gtk_link_button_new = c_gtk_link_button_new;

/** */
alias gtk_link_button_new_with_label = c_gtk_link_button_new_with_label;

/** */
alias gtk_link_button_get_uri = c_gtk_link_button_get_uri;

/** */
alias gtk_link_button_get_visited = c_gtk_link_button_get_visited;

/** */
alias gtk_link_button_set_uri = c_gtk_link_button_set_uri;

/** */
alias gtk_link_button_set_visited = c_gtk_link_button_set_visited;

// LinkButtonAccessible

/** */
alias gtk_link_button_accessible_get_type = c_gtk_link_button_accessible_get_type;

// ListBox

/** */
alias gtk_list_box_get_type = c_gtk_list_box_get_type;

/** */
alias gtk_list_box_new = c_gtk_list_box_new;

/** */
alias gtk_list_box_bind_model = c_gtk_list_box_bind_model;

/** */
alias gtk_list_box_drag_highlight_row = c_gtk_list_box_drag_highlight_row;

/** */
alias gtk_list_box_drag_unhighlight_row = c_gtk_list_box_drag_unhighlight_row;

/** */
alias gtk_list_box_get_activate_on_single_click = c_gtk_list_box_get_activate_on_single_click;

/** */
alias gtk_list_box_get_adjustment = c_gtk_list_box_get_adjustment;

/** */
alias gtk_list_box_get_row_at_index = c_gtk_list_box_get_row_at_index;

/** */
alias gtk_list_box_get_row_at_y = c_gtk_list_box_get_row_at_y;

/** */
alias gtk_list_box_get_selected_row = c_gtk_list_box_get_selected_row;

/** */
alias gtk_list_box_get_selected_rows = c_gtk_list_box_get_selected_rows;

/** */
alias gtk_list_box_get_selection_mode = c_gtk_list_box_get_selection_mode;

/** */
alias gtk_list_box_insert = c_gtk_list_box_insert;

/** */
alias gtk_list_box_invalidate_filter = c_gtk_list_box_invalidate_filter;

/** */
alias gtk_list_box_invalidate_headers = c_gtk_list_box_invalidate_headers;

/** */
alias gtk_list_box_invalidate_sort = c_gtk_list_box_invalidate_sort;

/** */
alias gtk_list_box_prepend = c_gtk_list_box_prepend;

/** */
alias gtk_list_box_select_all = c_gtk_list_box_select_all;

/** */
alias gtk_list_box_select_row = c_gtk_list_box_select_row;

/** */
alias gtk_list_box_selected_foreach = c_gtk_list_box_selected_foreach;

/** */
alias gtk_list_box_set_activate_on_single_click = c_gtk_list_box_set_activate_on_single_click;

/** */
alias gtk_list_box_set_adjustment = c_gtk_list_box_set_adjustment;

/** */
alias gtk_list_box_set_filter_func = c_gtk_list_box_set_filter_func;

/** */
alias gtk_list_box_set_header_func = c_gtk_list_box_set_header_func;

/** */
alias gtk_list_box_set_placeholder = c_gtk_list_box_set_placeholder;

/** */
alias gtk_list_box_set_selection_mode = c_gtk_list_box_set_selection_mode;

/** */
alias gtk_list_box_set_sort_func = c_gtk_list_box_set_sort_func;

/** */
alias gtk_list_box_unselect_all = c_gtk_list_box_unselect_all;

/** */
alias gtk_list_box_unselect_row = c_gtk_list_box_unselect_row;

// ListBoxAccessible

/** */
alias gtk_list_box_accessible_get_type = c_gtk_list_box_accessible_get_type;

// ListBoxRow

/** */
alias gtk_list_box_row_get_type = c_gtk_list_box_row_get_type;

/** */
alias gtk_list_box_row_new = c_gtk_list_box_row_new;

/** */
alias gtk_list_box_row_changed = c_gtk_list_box_row_changed;

/** */
alias gtk_list_box_row_get_activatable = c_gtk_list_box_row_get_activatable;

/** */
alias gtk_list_box_row_get_header = c_gtk_list_box_row_get_header;

/** */
alias gtk_list_box_row_get_index = c_gtk_list_box_row_get_index;

/** */
alias gtk_list_box_row_get_selectable = c_gtk_list_box_row_get_selectable;

/** */
alias gtk_list_box_row_is_selected = c_gtk_list_box_row_is_selected;

/** */
alias gtk_list_box_row_set_activatable = c_gtk_list_box_row_set_activatable;

/** */
alias gtk_list_box_row_set_header = c_gtk_list_box_row_set_header;

/** */
alias gtk_list_box_row_set_selectable = c_gtk_list_box_row_set_selectable;

// ListBoxRowAccessible

/** */
alias gtk_list_box_row_accessible_get_type = c_gtk_list_box_row_accessible_get_type;

// ListStore

/** */
alias gtk_list_store_get_type = c_gtk_list_store_get_type;

/** */
alias gtk_list_store_new = c_gtk_list_store_new;

/** */
alias gtk_list_store_newv = c_gtk_list_store_newv;

/** */
alias gtk_list_store_append = c_gtk_list_store_append;

/** */
alias gtk_list_store_clear = c_gtk_list_store_clear;

/** */
alias gtk_list_store_insert = c_gtk_list_store_insert;

/** */
alias gtk_list_store_insert_after = c_gtk_list_store_insert_after;

/** */
alias gtk_list_store_insert_before = c_gtk_list_store_insert_before;

/** */
alias gtk_list_store_insert_with_values = c_gtk_list_store_insert_with_values;

/** */
alias gtk_list_store_insert_with_valuesv = c_gtk_list_store_insert_with_valuesv;

/** */
alias gtk_list_store_iter_is_valid = c_gtk_list_store_iter_is_valid;

/** */
alias gtk_list_store_move_after = c_gtk_list_store_move_after;

/** */
alias gtk_list_store_move_before = c_gtk_list_store_move_before;

/** */
alias gtk_list_store_prepend = c_gtk_list_store_prepend;

/** */
alias gtk_list_store_remove = c_gtk_list_store_remove;

/** */
alias gtk_list_store_reorder = c_gtk_list_store_reorder;

/** */
alias gtk_list_store_set = c_gtk_list_store_set;

/** */
alias gtk_list_store_set_column_types = c_gtk_list_store_set_column_types;

/** */
alias gtk_list_store_set_valist = c_gtk_list_store_set_valist;

/** */
alias gtk_list_store_set_value = c_gtk_list_store_set_value;

/** */
alias gtk_list_store_set_valuesv = c_gtk_list_store_set_valuesv;

/** */
alias gtk_list_store_swap = c_gtk_list_store_swap;

// LockButton

/** */
alias gtk_lock_button_get_type = c_gtk_lock_button_get_type;

/** */
alias gtk_lock_button_new = c_gtk_lock_button_new;

/** */
alias gtk_lock_button_get_permission = c_gtk_lock_button_get_permission;

/** */
alias gtk_lock_button_set_permission = c_gtk_lock_button_set_permission;

// LockButtonAccessible

/** */
alias gtk_lock_button_accessible_get_type = c_gtk_lock_button_accessible_get_type;

// Menu

/** */
alias gtk_menu_get_type = c_gtk_menu_get_type;

/** */
alias gtk_menu_new = c_gtk_menu_new;

/** */
alias gtk_menu_new_from_model = c_gtk_menu_new_from_model;

/** */
alias gtk_menu_get_for_attach_widget = c_gtk_menu_get_for_attach_widget;

/** */
alias gtk_menu_attach = c_gtk_menu_attach;

/** */
alias gtk_menu_attach_to_widget = c_gtk_menu_attach_to_widget;

/** */
alias gtk_menu_detach = c_gtk_menu_detach;

/** */
alias gtk_menu_get_accel_group = c_gtk_menu_get_accel_group;

/** */
alias gtk_menu_get_accel_path = c_gtk_menu_get_accel_path;

/** */
alias gtk_menu_get_active = c_gtk_menu_get_active;

/** */
alias gtk_menu_get_attach_widget = c_gtk_menu_get_attach_widget;

/** */
alias gtk_menu_get_monitor = c_gtk_menu_get_monitor;

/** */
alias gtk_menu_get_reserve_toggle_size = c_gtk_menu_get_reserve_toggle_size;

/** */
alias gtk_menu_get_tearoff_state = c_gtk_menu_get_tearoff_state;

/** */
alias gtk_menu_get_title = c_gtk_menu_get_title;

/** */
alias gtk_menu_place_on_monitor = c_gtk_menu_place_on_monitor;

/** */
alias gtk_menu_popdown = c_gtk_menu_popdown;

/** */
alias gtk_menu_popup = c_gtk_menu_popup;

/** */
alias gtk_menu_popup_at_pointer = c_gtk_menu_popup_at_pointer;

/** */
alias gtk_menu_popup_at_rect = c_gtk_menu_popup_at_rect;

/** */
alias gtk_menu_popup_at_widget = c_gtk_menu_popup_at_widget;

/** */
alias gtk_menu_popup_for_device = c_gtk_menu_popup_for_device;

/** */
alias gtk_menu_reorder_child = c_gtk_menu_reorder_child;

/** */
alias gtk_menu_reposition = c_gtk_menu_reposition;

/** */
alias gtk_menu_set_accel_group = c_gtk_menu_set_accel_group;

/** */
alias gtk_menu_set_accel_path = c_gtk_menu_set_accel_path;

/** */
alias gtk_menu_set_active = c_gtk_menu_set_active;

/** */
alias gtk_menu_set_monitor = c_gtk_menu_set_monitor;

/** */
alias gtk_menu_set_reserve_toggle_size = c_gtk_menu_set_reserve_toggle_size;

/** */
alias gtk_menu_set_screen = c_gtk_menu_set_screen;

/** */
alias gtk_menu_set_tearoff_state = c_gtk_menu_set_tearoff_state;

/** */
alias gtk_menu_set_title = c_gtk_menu_set_title;

// MenuAccessible

/** */
alias gtk_menu_accessible_get_type = c_gtk_menu_accessible_get_type;

// MenuBar

/** */
alias gtk_menu_bar_get_type = c_gtk_menu_bar_get_type;

/** */
alias gtk_menu_bar_new = c_gtk_menu_bar_new;

/** */
alias gtk_menu_bar_new_from_model = c_gtk_menu_bar_new_from_model;

/** */
alias gtk_menu_bar_get_child_pack_direction = c_gtk_menu_bar_get_child_pack_direction;

/** */
alias gtk_menu_bar_get_pack_direction = c_gtk_menu_bar_get_pack_direction;

/** */
alias gtk_menu_bar_set_child_pack_direction = c_gtk_menu_bar_set_child_pack_direction;

/** */
alias gtk_menu_bar_set_pack_direction = c_gtk_menu_bar_set_pack_direction;

// MenuButton

/** */
alias gtk_menu_button_get_type = c_gtk_menu_button_get_type;

/** */
alias gtk_menu_button_new = c_gtk_menu_button_new;

/** */
alias gtk_menu_button_get_align_widget = c_gtk_menu_button_get_align_widget;

/** */
alias gtk_menu_button_get_direction = c_gtk_menu_button_get_direction;

/** */
alias gtk_menu_button_get_menu_model = c_gtk_menu_button_get_menu_model;

/** */
alias gtk_menu_button_get_popover = c_gtk_menu_button_get_popover;

/** */
alias gtk_menu_button_get_popup = c_gtk_menu_button_get_popup;

/** */
alias gtk_menu_button_get_use_popover = c_gtk_menu_button_get_use_popover;

/** */
alias gtk_menu_button_set_align_widget = c_gtk_menu_button_set_align_widget;

/** */
alias gtk_menu_button_set_direction = c_gtk_menu_button_set_direction;

/** */
alias gtk_menu_button_set_menu_model = c_gtk_menu_button_set_menu_model;

/** */
alias gtk_menu_button_set_popover = c_gtk_menu_button_set_popover;

/** */
alias gtk_menu_button_set_popup = c_gtk_menu_button_set_popup;

/** */
alias gtk_menu_button_set_use_popover = c_gtk_menu_button_set_use_popover;

// MenuButtonAccessible

/** */
alias gtk_menu_button_accessible_get_type = c_gtk_menu_button_accessible_get_type;

// MenuItem

/** */
alias gtk_menu_item_get_type = c_gtk_menu_item_get_type;

/** */
alias gtk_menu_item_new = c_gtk_menu_item_new;

/** */
alias gtk_menu_item_new_with_label = c_gtk_menu_item_new_with_label;

/** */
alias gtk_menu_item_new_with_mnemonic = c_gtk_menu_item_new_with_mnemonic;

/** */
alias gtk_menu_item_activate = c_gtk_menu_item_activate;

/** */
alias gtk_menu_item_deselect = c_gtk_menu_item_deselect;

/** */
alias gtk_menu_item_get_accel_path = c_gtk_menu_item_get_accel_path;

/** */
alias gtk_menu_item_get_label = c_gtk_menu_item_get_label;

/** */
alias gtk_menu_item_get_reserve_indicator = c_gtk_menu_item_get_reserve_indicator;

/** */
alias gtk_menu_item_get_right_justified = c_gtk_menu_item_get_right_justified;

/** */
alias gtk_menu_item_get_submenu = c_gtk_menu_item_get_submenu;

/** */
alias gtk_menu_item_get_use_underline = c_gtk_menu_item_get_use_underline;

/** */
alias gtk_menu_item_select = c_gtk_menu_item_select;

/** */
alias gtk_menu_item_set_accel_path = c_gtk_menu_item_set_accel_path;

/** */
alias gtk_menu_item_set_label = c_gtk_menu_item_set_label;

/** */
alias gtk_menu_item_set_reserve_indicator = c_gtk_menu_item_set_reserve_indicator;

/** */
alias gtk_menu_item_set_right_justified = c_gtk_menu_item_set_right_justified;

/** */
alias gtk_menu_item_set_submenu = c_gtk_menu_item_set_submenu;

/** */
alias gtk_menu_item_set_use_underline = c_gtk_menu_item_set_use_underline;

/** */
alias gtk_menu_item_toggle_size_allocate = c_gtk_menu_item_toggle_size_allocate;

/** */
alias gtk_menu_item_toggle_size_request = c_gtk_menu_item_toggle_size_request;

// MenuItemAccessible

/** */
alias gtk_menu_item_accessible_get_type = c_gtk_menu_item_accessible_get_type;

// MenuShell

/** */
alias gtk_menu_shell_get_type = c_gtk_menu_shell_get_type;

/** */
alias gtk_menu_shell_activate_item = c_gtk_menu_shell_activate_item;

/** */
alias gtk_menu_shell_append = c_gtk_menu_shell_append;

/** */
alias gtk_menu_shell_bind_model = c_gtk_menu_shell_bind_model;

/** */
alias gtk_menu_shell_cancel = c_gtk_menu_shell_cancel;

/** */
alias gtk_menu_shell_deactivate = c_gtk_menu_shell_deactivate;

/** */
alias gtk_menu_shell_deselect = c_gtk_menu_shell_deselect;

/** */
alias gtk_menu_shell_get_parent_shell = c_gtk_menu_shell_get_parent_shell;

/** */
alias gtk_menu_shell_get_selected_item = c_gtk_menu_shell_get_selected_item;

/** */
alias gtk_menu_shell_get_take_focus = c_gtk_menu_shell_get_take_focus;

/** */
alias gtk_menu_shell_insert = c_gtk_menu_shell_insert;

/** */
alias gtk_menu_shell_prepend = c_gtk_menu_shell_prepend;

/** */
alias gtk_menu_shell_select_first = c_gtk_menu_shell_select_first;

/** */
alias gtk_menu_shell_select_item = c_gtk_menu_shell_select_item;

/** */
alias gtk_menu_shell_set_take_focus = c_gtk_menu_shell_set_take_focus;

// MenuShellAccessible

/** */
alias gtk_menu_shell_accessible_get_type = c_gtk_menu_shell_accessible_get_type;

// MenuToolButton

/** */
alias gtk_menu_tool_button_get_type = c_gtk_menu_tool_button_get_type;

/** */
alias gtk_menu_tool_button_new = c_gtk_menu_tool_button_new;

/** */
alias gtk_menu_tool_button_new_from_stock = c_gtk_menu_tool_button_new_from_stock;

/** */
alias gtk_menu_tool_button_get_menu = c_gtk_menu_tool_button_get_menu;

/** */
alias gtk_menu_tool_button_set_arrow_tooltip_markup = c_gtk_menu_tool_button_set_arrow_tooltip_markup;

/** */
alias gtk_menu_tool_button_set_arrow_tooltip_text = c_gtk_menu_tool_button_set_arrow_tooltip_text;

/** */
alias gtk_menu_tool_button_set_menu = c_gtk_menu_tool_button_set_menu;

// MessageDialog

/** */
alias gtk_message_dialog_get_type = c_gtk_message_dialog_get_type;

/** */
alias gtk_message_dialog_new = c_gtk_message_dialog_new;

/** */
alias gtk_message_dialog_new_with_markup = c_gtk_message_dialog_new_with_markup;

/** */
alias gtk_message_dialog_format_secondary_markup = c_gtk_message_dialog_format_secondary_markup;

/** */
alias gtk_message_dialog_format_secondary_text = c_gtk_message_dialog_format_secondary_text;

/** */
alias gtk_message_dialog_get_image = c_gtk_message_dialog_get_image;

/** */
alias gtk_message_dialog_get_message_area = c_gtk_message_dialog_get_message_area;

/** */
alias gtk_message_dialog_set_image = c_gtk_message_dialog_set_image;

/** */
alias gtk_message_dialog_set_markup = c_gtk_message_dialog_set_markup;

// Misc

/** */
alias gtk_misc_get_type = c_gtk_misc_get_type;

/** */
alias gtk_misc_get_alignment = c_gtk_misc_get_alignment;

/** */
alias gtk_misc_get_padding = c_gtk_misc_get_padding;

/** */
alias gtk_misc_set_alignment = c_gtk_misc_set_alignment;

/** */
alias gtk_misc_set_padding = c_gtk_misc_set_padding;

// ModelButton

/** */
alias gtk_model_button_get_type = c_gtk_model_button_get_type;

/** */
alias gtk_model_button_new = c_gtk_model_button_new;

// MountOperation

/** */
alias gtk_mount_operation_get_type = c_gtk_mount_operation_get_type;

/** */
alias gtk_mount_operation_new = c_gtk_mount_operation_new;

/** */
alias gtk_mount_operation_get_parent = c_gtk_mount_operation_get_parent;

/** */
alias gtk_mount_operation_get_screen = c_gtk_mount_operation_get_screen;

/** */
alias gtk_mount_operation_is_showing = c_gtk_mount_operation_is_showing;

/** */
alias gtk_mount_operation_set_parent = c_gtk_mount_operation_set_parent;

/** */
alias gtk_mount_operation_set_screen = c_gtk_mount_operation_set_screen;

// NativeDialog

/** */
alias gtk_native_dialog_get_type = c_gtk_native_dialog_get_type;

/** */
alias gtk_native_dialog_destroy = c_gtk_native_dialog_destroy;

/** */
alias gtk_native_dialog_get_modal = c_gtk_native_dialog_get_modal;

/** */
alias gtk_native_dialog_get_title = c_gtk_native_dialog_get_title;

/** */
alias gtk_native_dialog_get_transient_for = c_gtk_native_dialog_get_transient_for;

/** */
alias gtk_native_dialog_get_visible = c_gtk_native_dialog_get_visible;

/** */
alias gtk_native_dialog_hide = c_gtk_native_dialog_hide;

/** */
alias gtk_native_dialog_run = c_gtk_native_dialog_run;

/** */
alias gtk_native_dialog_set_modal = c_gtk_native_dialog_set_modal;

/** */
alias gtk_native_dialog_set_title = c_gtk_native_dialog_set_title;

/** */
alias gtk_native_dialog_set_transient_for = c_gtk_native_dialog_set_transient_for;

/** */
alias gtk_native_dialog_show = c_gtk_native_dialog_show;

// Notebook

/** */
alias gtk_notebook_get_type = c_gtk_notebook_get_type;

/** */
alias gtk_notebook_new = c_gtk_notebook_new;

/** */
alias gtk_notebook_append_page = c_gtk_notebook_append_page;

/** */
alias gtk_notebook_append_page_menu = c_gtk_notebook_append_page_menu;

/** */
alias gtk_notebook_detach_tab = c_gtk_notebook_detach_tab;

/** */
alias gtk_notebook_get_action_widget = c_gtk_notebook_get_action_widget;

/** */
alias gtk_notebook_get_current_page = c_gtk_notebook_get_current_page;

/** */
alias gtk_notebook_get_group_name = c_gtk_notebook_get_group_name;

/** */
alias gtk_notebook_get_menu_label = c_gtk_notebook_get_menu_label;

/** */
alias gtk_notebook_get_menu_label_text = c_gtk_notebook_get_menu_label_text;

/** */
alias gtk_notebook_get_n_pages = c_gtk_notebook_get_n_pages;

/** */
alias gtk_notebook_get_nth_page = c_gtk_notebook_get_nth_page;

/** */
alias gtk_notebook_get_scrollable = c_gtk_notebook_get_scrollable;

/** */
alias gtk_notebook_get_show_border = c_gtk_notebook_get_show_border;

/** */
alias gtk_notebook_get_show_tabs = c_gtk_notebook_get_show_tabs;

/** */
alias gtk_notebook_get_tab_detachable = c_gtk_notebook_get_tab_detachable;

/** */
alias gtk_notebook_get_tab_hborder = c_gtk_notebook_get_tab_hborder;

/** */
alias gtk_notebook_get_tab_label = c_gtk_notebook_get_tab_label;

/** */
alias gtk_notebook_get_tab_label_text = c_gtk_notebook_get_tab_label_text;

/** */
alias gtk_notebook_get_tab_pos = c_gtk_notebook_get_tab_pos;

/** */
alias gtk_notebook_get_tab_reorderable = c_gtk_notebook_get_tab_reorderable;

/** */
alias gtk_notebook_get_tab_vborder = c_gtk_notebook_get_tab_vborder;

/** */
alias gtk_notebook_insert_page = c_gtk_notebook_insert_page;

/** */
alias gtk_notebook_insert_page_menu = c_gtk_notebook_insert_page_menu;

/** */
alias gtk_notebook_next_page = c_gtk_notebook_next_page;

/** */
alias gtk_notebook_page_num = c_gtk_notebook_page_num;

/** */
alias gtk_notebook_popup_disable = c_gtk_notebook_popup_disable;

/** */
alias gtk_notebook_popup_enable = c_gtk_notebook_popup_enable;

/** */
alias gtk_notebook_prepend_page = c_gtk_notebook_prepend_page;

/** */
alias gtk_notebook_prepend_page_menu = c_gtk_notebook_prepend_page_menu;

/** */
alias gtk_notebook_prev_page = c_gtk_notebook_prev_page;

/** */
alias gtk_notebook_remove_page = c_gtk_notebook_remove_page;

/** */
alias gtk_notebook_reorder_child = c_gtk_notebook_reorder_child;

/** */
alias gtk_notebook_set_action_widget = c_gtk_notebook_set_action_widget;

/** */
alias gtk_notebook_set_current_page = c_gtk_notebook_set_current_page;

/** */
alias gtk_notebook_set_group_name = c_gtk_notebook_set_group_name;

/** */
alias gtk_notebook_set_menu_label = c_gtk_notebook_set_menu_label;

/** */
alias gtk_notebook_set_menu_label_text = c_gtk_notebook_set_menu_label_text;

/** */
alias gtk_notebook_set_scrollable = c_gtk_notebook_set_scrollable;

/** */
alias gtk_notebook_set_show_border = c_gtk_notebook_set_show_border;

/** */
alias gtk_notebook_set_show_tabs = c_gtk_notebook_set_show_tabs;

/** */
alias gtk_notebook_set_tab_detachable = c_gtk_notebook_set_tab_detachable;

/** */
alias gtk_notebook_set_tab_label = c_gtk_notebook_set_tab_label;

/** */
alias gtk_notebook_set_tab_label_text = c_gtk_notebook_set_tab_label_text;

/** */
alias gtk_notebook_set_tab_pos = c_gtk_notebook_set_tab_pos;

/** */
alias gtk_notebook_set_tab_reorderable = c_gtk_notebook_set_tab_reorderable;

// NotebookAccessible

/** */
alias gtk_notebook_accessible_get_type = c_gtk_notebook_accessible_get_type;

// NotebookPageAccessible

/** */
alias gtk_notebook_page_accessible_get_type = c_gtk_notebook_page_accessible_get_type;

/** */
alias gtk_notebook_page_accessible_new = c_gtk_notebook_page_accessible_new;

/** */
alias gtk_notebook_page_accessible_invalidate = c_gtk_notebook_page_accessible_invalidate;

// NumerableIcon

/** */
alias gtk_numerable_icon_get_type = c_gtk_numerable_icon_get_type;

/** */
alias gtk_numerable_icon_new = c_gtk_numerable_icon_new;

/** */
alias gtk_numerable_icon_new_with_style_context = c_gtk_numerable_icon_new_with_style_context;

/** */
alias gtk_numerable_icon_get_background_gicon = c_gtk_numerable_icon_get_background_gicon;

/** */
alias gtk_numerable_icon_get_background_icon_name = c_gtk_numerable_icon_get_background_icon_name;

/** */
alias gtk_numerable_icon_get_count = c_gtk_numerable_icon_get_count;

/** */
alias gtk_numerable_icon_get_label = c_gtk_numerable_icon_get_label;

/** */
alias gtk_numerable_icon_get_style_context = c_gtk_numerable_icon_get_style_context;

/** */
alias gtk_numerable_icon_set_background_gicon = c_gtk_numerable_icon_set_background_gicon;

/** */
alias gtk_numerable_icon_set_background_icon_name = c_gtk_numerable_icon_set_background_icon_name;

/** */
alias gtk_numerable_icon_set_count = c_gtk_numerable_icon_set_count;

/** */
alias gtk_numerable_icon_set_label = c_gtk_numerable_icon_set_label;

/** */
alias gtk_numerable_icon_set_style_context = c_gtk_numerable_icon_set_style_context;

// OffscreenWindow

/** */
alias gtk_offscreen_window_get_type = c_gtk_offscreen_window_get_type;

/** */
alias gtk_offscreen_window_new = c_gtk_offscreen_window_new;

/** */
alias gtk_offscreen_window_get_pixbuf = c_gtk_offscreen_window_get_pixbuf;

/** */
alias gtk_offscreen_window_get_surface = c_gtk_offscreen_window_get_surface;

// Orientable

/** */
alias gtk_orientable_get_type = c_gtk_orientable_get_type;

/** */
alias gtk_orientable_get_orientation = c_gtk_orientable_get_orientation;

/** */
alias gtk_orientable_set_orientation = c_gtk_orientable_set_orientation;

// Overlay

/** */
alias gtk_overlay_get_type = c_gtk_overlay_get_type;

/** */
alias gtk_overlay_new = c_gtk_overlay_new;

/** */
alias gtk_overlay_add_overlay = c_gtk_overlay_add_overlay;

/** */
alias gtk_overlay_get_overlay_pass_through = c_gtk_overlay_get_overlay_pass_through;

/** */
alias gtk_overlay_reorder_overlay = c_gtk_overlay_reorder_overlay;

/** */
alias gtk_overlay_set_overlay_pass_through = c_gtk_overlay_set_overlay_pass_through;

// PadController

/** */
alias gtk_pad_controller_get_type = c_gtk_pad_controller_get_type;

/** */
alias gtk_pad_controller_new = c_gtk_pad_controller_new;

/** */
alias gtk_pad_controller_set_action = c_gtk_pad_controller_set_action;

/** */
alias gtk_pad_controller_set_action_entries = c_gtk_pad_controller_set_action_entries;

// PageSetup

/** */
alias gtk_page_setup_get_type = c_gtk_page_setup_get_type;

/** */
alias gtk_page_setup_new = c_gtk_page_setup_new;

/** */
alias gtk_page_setup_new_from_file = c_gtk_page_setup_new_from_file;

/** */
alias gtk_page_setup_new_from_gvariant = c_gtk_page_setup_new_from_gvariant;

/** */
alias gtk_page_setup_new_from_key_file = c_gtk_page_setup_new_from_key_file;

/** */
alias gtk_page_setup_copy = c_gtk_page_setup_copy;

/** */
alias gtk_page_setup_get_bottom_margin = c_gtk_page_setup_get_bottom_margin;

/** */
alias gtk_page_setup_get_left_margin = c_gtk_page_setup_get_left_margin;

/** */
alias gtk_page_setup_get_orientation = c_gtk_page_setup_get_orientation;

/** */
alias gtk_page_setup_get_page_height = c_gtk_page_setup_get_page_height;

/** */
alias gtk_page_setup_get_page_width = c_gtk_page_setup_get_page_width;

/** */
alias gtk_page_setup_get_paper_height = c_gtk_page_setup_get_paper_height;

/** */
alias gtk_page_setup_get_paper_size = c_gtk_page_setup_get_paper_size;

/** */
alias gtk_page_setup_get_paper_width = c_gtk_page_setup_get_paper_width;

/** */
alias gtk_page_setup_get_right_margin = c_gtk_page_setup_get_right_margin;

/** */
alias gtk_page_setup_get_top_margin = c_gtk_page_setup_get_top_margin;

/** */
alias gtk_page_setup_load_file = c_gtk_page_setup_load_file;

/** */
alias gtk_page_setup_load_key_file = c_gtk_page_setup_load_key_file;

/** */
alias gtk_page_setup_set_bottom_margin = c_gtk_page_setup_set_bottom_margin;

/** */
alias gtk_page_setup_set_left_margin = c_gtk_page_setup_set_left_margin;

/** */
alias gtk_page_setup_set_orientation = c_gtk_page_setup_set_orientation;

/** */
alias gtk_page_setup_set_paper_size = c_gtk_page_setup_set_paper_size;

/** */
alias gtk_page_setup_set_paper_size_and_default_margins = c_gtk_page_setup_set_paper_size_and_default_margins;

/** */
alias gtk_page_setup_set_right_margin = c_gtk_page_setup_set_right_margin;

/** */
alias gtk_page_setup_set_top_margin = c_gtk_page_setup_set_top_margin;

/** */
alias gtk_page_setup_to_file = c_gtk_page_setup_to_file;

/** */
alias gtk_page_setup_to_gvariant = c_gtk_page_setup_to_gvariant;

/** */
alias gtk_page_setup_to_key_file = c_gtk_page_setup_to_key_file;

// Paned

/** */
alias gtk_paned_get_type = c_gtk_paned_get_type;

/** */
alias gtk_paned_new = c_gtk_paned_new;

/** */
alias gtk_paned_add1 = c_gtk_paned_add1;

/** */
alias gtk_paned_add2 = c_gtk_paned_add2;

/** */
alias gtk_paned_get_child1 = c_gtk_paned_get_child1;

/** */
alias gtk_paned_get_child2 = c_gtk_paned_get_child2;

/** */
alias gtk_paned_get_handle_window = c_gtk_paned_get_handle_window;

/** */
alias gtk_paned_get_position = c_gtk_paned_get_position;

/** */
alias gtk_paned_get_wide_handle = c_gtk_paned_get_wide_handle;

/** */
alias gtk_paned_pack1 = c_gtk_paned_pack1;

/** */
alias gtk_paned_pack2 = c_gtk_paned_pack2;

/** */
alias gtk_paned_set_position = c_gtk_paned_set_position;

/** */
alias gtk_paned_set_wide_handle = c_gtk_paned_set_wide_handle;

// PanedAccessible

/** */
alias gtk_paned_accessible_get_type = c_gtk_paned_accessible_get_type;

// PaperSize

/** */
alias gtk_paper_size_get_type = c_gtk_paper_size_get_type;

/** */
alias gtk_paper_size_new = c_gtk_paper_size_new;

/** */
alias gtk_paper_size_new_custom = c_gtk_paper_size_new_custom;

/** */
alias gtk_paper_size_new_from_gvariant = c_gtk_paper_size_new_from_gvariant;

/** */
alias gtk_paper_size_new_from_ipp = c_gtk_paper_size_new_from_ipp;

/** */
alias gtk_paper_size_new_from_key_file = c_gtk_paper_size_new_from_key_file;

/** */
alias gtk_paper_size_new_from_ppd = c_gtk_paper_size_new_from_ppd;

/** */
alias gtk_paper_size_copy = c_gtk_paper_size_copy;

/** */
alias gtk_paper_size_free = c_gtk_paper_size_free;

/** */
alias gtk_paper_size_get_default_bottom_margin = c_gtk_paper_size_get_default_bottom_margin;

/** */
alias gtk_paper_size_get_default_left_margin = c_gtk_paper_size_get_default_left_margin;

/** */
alias gtk_paper_size_get_default_right_margin = c_gtk_paper_size_get_default_right_margin;

/** */
alias gtk_paper_size_get_default_top_margin = c_gtk_paper_size_get_default_top_margin;

/** */
alias gtk_paper_size_get_display_name = c_gtk_paper_size_get_display_name;

/** */
alias gtk_paper_size_get_height = c_gtk_paper_size_get_height;

/** */
alias gtk_paper_size_get_name = c_gtk_paper_size_get_name;

/** */
alias gtk_paper_size_get_ppd_name = c_gtk_paper_size_get_ppd_name;

/** */
alias gtk_paper_size_get_width = c_gtk_paper_size_get_width;

/** */
alias gtk_paper_size_is_custom = c_gtk_paper_size_is_custom;

/** */
alias gtk_paper_size_is_equal = c_gtk_paper_size_is_equal;

/** */
alias gtk_paper_size_is_ipp = c_gtk_paper_size_is_ipp;

/** */
alias gtk_paper_size_set_size = c_gtk_paper_size_set_size;

/** */
alias gtk_paper_size_to_gvariant = c_gtk_paper_size_to_gvariant;

/** */
alias gtk_paper_size_to_key_file = c_gtk_paper_size_to_key_file;

/** */
alias gtk_paper_size_get_default = c_gtk_paper_size_get_default;

/** */
alias gtk_paper_size_get_paper_sizes = c_gtk_paper_size_get_paper_sizes;

// PlacesSidebar

/** */
alias gtk_places_sidebar_get_type = c_gtk_places_sidebar_get_type;

/** */
alias gtk_places_sidebar_new = c_gtk_places_sidebar_new;

/** */
alias gtk_places_sidebar_add_shortcut = c_gtk_places_sidebar_add_shortcut;

/** */
alias gtk_places_sidebar_get_local_only = c_gtk_places_sidebar_get_local_only;

/** */
alias gtk_places_sidebar_get_location = c_gtk_places_sidebar_get_location;

/** */
alias gtk_places_sidebar_get_nth_bookmark = c_gtk_places_sidebar_get_nth_bookmark;

/** */
alias gtk_places_sidebar_get_open_flags = c_gtk_places_sidebar_get_open_flags;

/** */
alias gtk_places_sidebar_get_show_connect_to_server = c_gtk_places_sidebar_get_show_connect_to_server;

/** */
alias gtk_places_sidebar_get_show_desktop = c_gtk_places_sidebar_get_show_desktop;

/** */
alias gtk_places_sidebar_get_show_enter_location = c_gtk_places_sidebar_get_show_enter_location;

/** */
alias gtk_places_sidebar_get_show_other_locations = c_gtk_places_sidebar_get_show_other_locations;

/** */
alias gtk_places_sidebar_get_show_recent = c_gtk_places_sidebar_get_show_recent;

/** */
alias gtk_places_sidebar_get_show_starred_location = c_gtk_places_sidebar_get_show_starred_location;

/** */
alias gtk_places_sidebar_get_show_trash = c_gtk_places_sidebar_get_show_trash;

/** */
alias gtk_places_sidebar_list_shortcuts = c_gtk_places_sidebar_list_shortcuts;

/** */
alias gtk_places_sidebar_remove_shortcut = c_gtk_places_sidebar_remove_shortcut;

/** */
alias gtk_places_sidebar_set_drop_targets_visible = c_gtk_places_sidebar_set_drop_targets_visible;

/** */
alias gtk_places_sidebar_set_local_only = c_gtk_places_sidebar_set_local_only;

/** */
alias gtk_places_sidebar_set_location = c_gtk_places_sidebar_set_location;

/** */
alias gtk_places_sidebar_set_open_flags = c_gtk_places_sidebar_set_open_flags;

/** */
alias gtk_places_sidebar_set_show_connect_to_server = c_gtk_places_sidebar_set_show_connect_to_server;

/** */
alias gtk_places_sidebar_set_show_desktop = c_gtk_places_sidebar_set_show_desktop;

/** */
alias gtk_places_sidebar_set_show_enter_location = c_gtk_places_sidebar_set_show_enter_location;

/** */
alias gtk_places_sidebar_set_show_other_locations = c_gtk_places_sidebar_set_show_other_locations;

/** */
alias gtk_places_sidebar_set_show_recent = c_gtk_places_sidebar_set_show_recent;

/** */
alias gtk_places_sidebar_set_show_starred_location = c_gtk_places_sidebar_set_show_starred_location;

/** */
alias gtk_places_sidebar_set_show_trash = c_gtk_places_sidebar_set_show_trash;

// Plug

/** */
alias gtk_plug_get_type = c_gtk_plug_get_type;

/** */
alias gtk_plug_new = c_gtk_plug_new;

/** */
alias gtk_plug_new_for_display = c_gtk_plug_new_for_display;

/** */
alias gtk_plug_construct = c_gtk_plug_construct;

/** */
alias gtk_plug_construct_for_display = c_gtk_plug_construct_for_display;

/** */
alias gtk_plug_get_embedded = c_gtk_plug_get_embedded;

/** */
alias gtk_plug_get_id = c_gtk_plug_get_id;

/** */
alias gtk_plug_get_socket_window = c_gtk_plug_get_socket_window;

// PlugAccessible

/** */
alias gtk_plug_accessible_get_type = c_gtk_plug_accessible_get_type;

/** */
alias gtk_plug_accessible_get_id = c_gtk_plug_accessible_get_id;

// Popover

/** */
alias gtk_popover_get_type = c_gtk_popover_get_type;

/** */
alias gtk_popover_new = c_gtk_popover_new;

/** */
alias gtk_popover_new_from_model = c_gtk_popover_new_from_model;

/** */
alias gtk_popover_bind_model = c_gtk_popover_bind_model;

/** */
alias gtk_popover_get_constrain_to = c_gtk_popover_get_constrain_to;

/** */
alias gtk_popover_get_default_widget = c_gtk_popover_get_default_widget;

/** */
alias gtk_popover_get_modal = c_gtk_popover_get_modal;

/** */
alias gtk_popover_get_pointing_to = c_gtk_popover_get_pointing_to;

/** */
alias gtk_popover_get_position = c_gtk_popover_get_position;

/** */
alias gtk_popover_get_relative_to = c_gtk_popover_get_relative_to;

/** */
alias gtk_popover_get_transitions_enabled = c_gtk_popover_get_transitions_enabled;

/** */
alias gtk_popover_popdown = c_gtk_popover_popdown;

/** */
alias gtk_popover_popup = c_gtk_popover_popup;

/** */
alias gtk_popover_set_constrain_to = c_gtk_popover_set_constrain_to;

/** */
alias gtk_popover_set_default_widget = c_gtk_popover_set_default_widget;

/** */
alias gtk_popover_set_modal = c_gtk_popover_set_modal;

/** */
alias gtk_popover_set_pointing_to = c_gtk_popover_set_pointing_to;

/** */
alias gtk_popover_set_position = c_gtk_popover_set_position;

/** */
alias gtk_popover_set_relative_to = c_gtk_popover_set_relative_to;

/** */
alias gtk_popover_set_transitions_enabled = c_gtk_popover_set_transitions_enabled;

// PopoverAccessible

/** */
alias gtk_popover_accessible_get_type = c_gtk_popover_accessible_get_type;

// PopoverMenu

/** */
alias gtk_popover_menu_get_type = c_gtk_popover_menu_get_type;

/** */
alias gtk_popover_menu_new = c_gtk_popover_menu_new;

/** */
alias gtk_popover_menu_open_submenu = c_gtk_popover_menu_open_submenu;

// PrintContext

/** */
alias gtk_print_context_get_type = c_gtk_print_context_get_type;

/** */
alias gtk_print_context_create_pango_context = c_gtk_print_context_create_pango_context;

/** */
alias gtk_print_context_create_pango_layout = c_gtk_print_context_create_pango_layout;

/** */
alias gtk_print_context_get_cairo_context = c_gtk_print_context_get_cairo_context;

/** */
alias gtk_print_context_get_dpi_x = c_gtk_print_context_get_dpi_x;

/** */
alias gtk_print_context_get_dpi_y = c_gtk_print_context_get_dpi_y;

/** */
alias gtk_print_context_get_hard_margins = c_gtk_print_context_get_hard_margins;

/** */
alias gtk_print_context_get_height = c_gtk_print_context_get_height;

/** */
alias gtk_print_context_get_page_setup = c_gtk_print_context_get_page_setup;

/** */
alias gtk_print_context_get_pango_fontmap = c_gtk_print_context_get_pango_fontmap;

/** */
alias gtk_print_context_get_width = c_gtk_print_context_get_width;

/** */
alias gtk_print_context_set_cairo_context = c_gtk_print_context_set_cairo_context;

// PrintOperation

/** */
alias gtk_print_operation_get_type = c_gtk_print_operation_get_type;

/** */
alias gtk_print_operation_new = c_gtk_print_operation_new;

/** */
alias gtk_print_operation_cancel = c_gtk_print_operation_cancel;

/** */
alias gtk_print_operation_draw_page_finish = c_gtk_print_operation_draw_page_finish;

/** */
alias gtk_print_operation_get_default_page_setup = c_gtk_print_operation_get_default_page_setup;

/** */
alias gtk_print_operation_get_embed_page_setup = c_gtk_print_operation_get_embed_page_setup;

/** */
alias gtk_print_operation_get_error = c_gtk_print_operation_get_error;

/** */
alias gtk_print_operation_get_has_selection = c_gtk_print_operation_get_has_selection;

/** */
alias gtk_print_operation_get_n_pages_to_print = c_gtk_print_operation_get_n_pages_to_print;

/** */
alias gtk_print_operation_get_print_settings = c_gtk_print_operation_get_print_settings;

/** */
alias gtk_print_operation_get_status = c_gtk_print_operation_get_status;

/** */
alias gtk_print_operation_get_status_string = c_gtk_print_operation_get_status_string;

/** */
alias gtk_print_operation_get_support_selection = c_gtk_print_operation_get_support_selection;

/** */
alias gtk_print_operation_is_finished = c_gtk_print_operation_is_finished;

/** */
alias gtk_print_operation_run = c_gtk_print_operation_run;

/** */
alias gtk_print_operation_set_allow_async = c_gtk_print_operation_set_allow_async;

/** */
alias gtk_print_operation_set_current_page = c_gtk_print_operation_set_current_page;

/** */
alias gtk_print_operation_set_custom_tab_label = c_gtk_print_operation_set_custom_tab_label;

/** */
alias gtk_print_operation_set_default_page_setup = c_gtk_print_operation_set_default_page_setup;

/** */
alias gtk_print_operation_set_defer_drawing = c_gtk_print_operation_set_defer_drawing;

/** */
alias gtk_print_operation_set_embed_page_setup = c_gtk_print_operation_set_embed_page_setup;

/** */
alias gtk_print_operation_set_export_filename = c_gtk_print_operation_set_export_filename;

/** */
alias gtk_print_operation_set_has_selection = c_gtk_print_operation_set_has_selection;

/** */
alias gtk_print_operation_set_job_name = c_gtk_print_operation_set_job_name;

/** */
alias gtk_print_operation_set_n_pages = c_gtk_print_operation_set_n_pages;

/** */
alias gtk_print_operation_set_print_settings = c_gtk_print_operation_set_print_settings;

/** */
alias gtk_print_operation_set_show_progress = c_gtk_print_operation_set_show_progress;

/** */
alias gtk_print_operation_set_support_selection = c_gtk_print_operation_set_support_selection;

/** */
alias gtk_print_operation_set_track_print_status = c_gtk_print_operation_set_track_print_status;

/** */
alias gtk_print_operation_set_unit = c_gtk_print_operation_set_unit;

/** */
alias gtk_print_operation_set_use_full_page = c_gtk_print_operation_set_use_full_page;

// PrintOperationPreview

/** */
alias gtk_print_operation_preview_get_type = c_gtk_print_operation_preview_get_type;

/** */
alias gtk_print_operation_preview_end_preview = c_gtk_print_operation_preview_end_preview;

/** */
alias gtk_print_operation_preview_is_selected = c_gtk_print_operation_preview_is_selected;

/** */
alias gtk_print_operation_preview_render_page = c_gtk_print_operation_preview_render_page;

// PrintSettings

/** */
alias gtk_print_settings_get_type = c_gtk_print_settings_get_type;

/** */
alias gtk_print_settings_new = c_gtk_print_settings_new;

/** */
alias gtk_print_settings_new_from_file = c_gtk_print_settings_new_from_file;

/** */
alias gtk_print_settings_new_from_gvariant = c_gtk_print_settings_new_from_gvariant;

/** */
alias gtk_print_settings_new_from_key_file = c_gtk_print_settings_new_from_key_file;

/** */
alias gtk_print_settings_copy = c_gtk_print_settings_copy;

/** */
alias gtk_print_settings_foreach = c_gtk_print_settings_foreach;

/** */
alias gtk_print_settings_get = c_gtk_print_settings_get;

/** */
alias gtk_print_settings_get_bool = c_gtk_print_settings_get_bool;

/** */
alias gtk_print_settings_get_collate = c_gtk_print_settings_get_collate;

/** */
alias gtk_print_settings_get_default_source = c_gtk_print_settings_get_default_source;

/** */
alias gtk_print_settings_get_dither = c_gtk_print_settings_get_dither;

/** */
alias gtk_print_settings_get_double = c_gtk_print_settings_get_double;

/** */
alias gtk_print_settings_get_double_with_default = c_gtk_print_settings_get_double_with_default;

/** */
alias gtk_print_settings_get_duplex = c_gtk_print_settings_get_duplex;

/** */
alias gtk_print_settings_get_finishings = c_gtk_print_settings_get_finishings;

/** */
alias gtk_print_settings_get_int = c_gtk_print_settings_get_int;

/** */
alias gtk_print_settings_get_int_with_default = c_gtk_print_settings_get_int_with_default;

/** */
alias gtk_print_settings_get_length = c_gtk_print_settings_get_length;

/** */
alias gtk_print_settings_get_media_type = c_gtk_print_settings_get_media_type;

/** */
alias gtk_print_settings_get_n_copies = c_gtk_print_settings_get_n_copies;

/** */
alias gtk_print_settings_get_number_up = c_gtk_print_settings_get_number_up;

/** */
alias gtk_print_settings_get_number_up_layout = c_gtk_print_settings_get_number_up_layout;

/** */
alias gtk_print_settings_get_orientation = c_gtk_print_settings_get_orientation;

/** */
alias gtk_print_settings_get_output_bin = c_gtk_print_settings_get_output_bin;

/** */
alias gtk_print_settings_get_page_ranges = c_gtk_print_settings_get_page_ranges;

/** */
alias gtk_print_settings_get_page_set = c_gtk_print_settings_get_page_set;

/** */
alias gtk_print_settings_get_paper_height = c_gtk_print_settings_get_paper_height;

/** */
alias gtk_print_settings_get_paper_size = c_gtk_print_settings_get_paper_size;

/** */
alias gtk_print_settings_get_paper_width = c_gtk_print_settings_get_paper_width;

/** */
alias gtk_print_settings_get_print_pages = c_gtk_print_settings_get_print_pages;

/** */
alias gtk_print_settings_get_printer = c_gtk_print_settings_get_printer;

/** */
alias gtk_print_settings_get_printer_lpi = c_gtk_print_settings_get_printer_lpi;

/** */
alias gtk_print_settings_get_quality = c_gtk_print_settings_get_quality;

/** */
alias gtk_print_settings_get_resolution = c_gtk_print_settings_get_resolution;

/** */
alias gtk_print_settings_get_resolution_x = c_gtk_print_settings_get_resolution_x;

/** */
alias gtk_print_settings_get_resolution_y = c_gtk_print_settings_get_resolution_y;

/** */
alias gtk_print_settings_get_reverse = c_gtk_print_settings_get_reverse;

/** */
alias gtk_print_settings_get_scale = c_gtk_print_settings_get_scale;

/** */
alias gtk_print_settings_get_use_color = c_gtk_print_settings_get_use_color;

/** */
alias gtk_print_settings_has_key = c_gtk_print_settings_has_key;

/** */
alias gtk_print_settings_load_file = c_gtk_print_settings_load_file;

/** */
alias gtk_print_settings_load_key_file = c_gtk_print_settings_load_key_file;

/** */
alias gtk_print_settings_set = c_gtk_print_settings_set;

/** */
alias gtk_print_settings_set_bool = c_gtk_print_settings_set_bool;

/** */
alias gtk_print_settings_set_collate = c_gtk_print_settings_set_collate;

/** */
alias gtk_print_settings_set_default_source = c_gtk_print_settings_set_default_source;

/** */
alias gtk_print_settings_set_dither = c_gtk_print_settings_set_dither;

/** */
alias gtk_print_settings_set_double = c_gtk_print_settings_set_double;

/** */
alias gtk_print_settings_set_duplex = c_gtk_print_settings_set_duplex;

/** */
alias gtk_print_settings_set_finishings = c_gtk_print_settings_set_finishings;

/** */
alias gtk_print_settings_set_int = c_gtk_print_settings_set_int;

/** */
alias gtk_print_settings_set_length = c_gtk_print_settings_set_length;

/** */
alias gtk_print_settings_set_media_type = c_gtk_print_settings_set_media_type;

/** */
alias gtk_print_settings_set_n_copies = c_gtk_print_settings_set_n_copies;

/** */
alias gtk_print_settings_set_number_up = c_gtk_print_settings_set_number_up;

/** */
alias gtk_print_settings_set_number_up_layout = c_gtk_print_settings_set_number_up_layout;

/** */
alias gtk_print_settings_set_orientation = c_gtk_print_settings_set_orientation;

/** */
alias gtk_print_settings_set_output_bin = c_gtk_print_settings_set_output_bin;

/** */
alias gtk_print_settings_set_page_ranges = c_gtk_print_settings_set_page_ranges;

/** */
alias gtk_print_settings_set_page_set = c_gtk_print_settings_set_page_set;

/** */
alias gtk_print_settings_set_paper_height = c_gtk_print_settings_set_paper_height;

/** */
alias gtk_print_settings_set_paper_size = c_gtk_print_settings_set_paper_size;

/** */
alias gtk_print_settings_set_paper_width = c_gtk_print_settings_set_paper_width;

/** */
alias gtk_print_settings_set_print_pages = c_gtk_print_settings_set_print_pages;

/** */
alias gtk_print_settings_set_printer = c_gtk_print_settings_set_printer;

/** */
alias gtk_print_settings_set_printer_lpi = c_gtk_print_settings_set_printer_lpi;

/** */
alias gtk_print_settings_set_quality = c_gtk_print_settings_set_quality;

/** */
alias gtk_print_settings_set_resolution = c_gtk_print_settings_set_resolution;

/** */
alias gtk_print_settings_set_resolution_xy = c_gtk_print_settings_set_resolution_xy;

/** */
alias gtk_print_settings_set_reverse = c_gtk_print_settings_set_reverse;

/** */
alias gtk_print_settings_set_scale = c_gtk_print_settings_set_scale;

/** */
alias gtk_print_settings_set_use_color = c_gtk_print_settings_set_use_color;

/** */
alias gtk_print_settings_to_file = c_gtk_print_settings_to_file;

/** */
alias gtk_print_settings_to_gvariant = c_gtk_print_settings_to_gvariant;

/** */
alias gtk_print_settings_to_key_file = c_gtk_print_settings_to_key_file;

/** */
alias gtk_print_settings_unset = c_gtk_print_settings_unset;

// ProgressBar

/** */
alias gtk_progress_bar_get_type = c_gtk_progress_bar_get_type;

/** */
alias gtk_progress_bar_new = c_gtk_progress_bar_new;

/** */
alias gtk_progress_bar_get_ellipsize = c_gtk_progress_bar_get_ellipsize;

/** */
alias gtk_progress_bar_get_fraction = c_gtk_progress_bar_get_fraction;

/** */
alias gtk_progress_bar_get_inverted = c_gtk_progress_bar_get_inverted;

/** */
alias gtk_progress_bar_get_pulse_step = c_gtk_progress_bar_get_pulse_step;

/** */
alias gtk_progress_bar_get_show_text = c_gtk_progress_bar_get_show_text;

/** */
alias gtk_progress_bar_get_text = c_gtk_progress_bar_get_text;

/** */
alias gtk_progress_bar_pulse = c_gtk_progress_bar_pulse;

/** */
alias gtk_progress_bar_set_ellipsize = c_gtk_progress_bar_set_ellipsize;

/** */
alias gtk_progress_bar_set_fraction = c_gtk_progress_bar_set_fraction;

/** */
alias gtk_progress_bar_set_inverted = c_gtk_progress_bar_set_inverted;

/** */
alias gtk_progress_bar_set_pulse_step = c_gtk_progress_bar_set_pulse_step;

/** */
alias gtk_progress_bar_set_show_text = c_gtk_progress_bar_set_show_text;

/** */
alias gtk_progress_bar_set_text = c_gtk_progress_bar_set_text;

// ProgressBarAccessible

/** */
alias gtk_progress_bar_accessible_get_type = c_gtk_progress_bar_accessible_get_type;

// RadioAction

/** */
alias gtk_radio_action_get_type = c_gtk_radio_action_get_type;

/** */
alias gtk_radio_action_new = c_gtk_radio_action_new;

/** */
alias gtk_radio_action_get_current_value = c_gtk_radio_action_get_current_value;

/** */
alias gtk_radio_action_get_group = c_gtk_radio_action_get_group;

/** */
alias gtk_radio_action_join_group = c_gtk_radio_action_join_group;

/** */
alias gtk_radio_action_set_current_value = c_gtk_radio_action_set_current_value;

/** */
alias gtk_radio_action_set_group = c_gtk_radio_action_set_group;

// RadioButton

/** */
alias gtk_radio_button_get_type = c_gtk_radio_button_get_type;

/** */
alias gtk_radio_button_new = c_gtk_radio_button_new;

/** */
alias gtk_radio_button_new_from_widget = c_gtk_radio_button_new_from_widget;

/** */
alias gtk_radio_button_new_with_label = c_gtk_radio_button_new_with_label;

/** */
alias gtk_radio_button_new_with_label_from_widget = c_gtk_radio_button_new_with_label_from_widget;

/** */
alias gtk_radio_button_new_with_mnemonic = c_gtk_radio_button_new_with_mnemonic;

/** */
alias gtk_radio_button_new_with_mnemonic_from_widget = c_gtk_radio_button_new_with_mnemonic_from_widget;

/** */
alias gtk_radio_button_get_group = c_gtk_radio_button_get_group;

/** */
alias gtk_radio_button_join_group = c_gtk_radio_button_join_group;

/** */
alias gtk_radio_button_set_group = c_gtk_radio_button_set_group;

// RadioButtonAccessible

/** */
alias gtk_radio_button_accessible_get_type = c_gtk_radio_button_accessible_get_type;

// RadioMenuItem

/** */
alias gtk_radio_menu_item_get_type = c_gtk_radio_menu_item_get_type;

/** */
alias gtk_radio_menu_item_new = c_gtk_radio_menu_item_new;

/** */
alias gtk_radio_menu_item_new_from_widget = c_gtk_radio_menu_item_new_from_widget;

/** */
alias gtk_radio_menu_item_new_with_label = c_gtk_radio_menu_item_new_with_label;

/** */
alias gtk_radio_menu_item_new_with_label_from_widget = c_gtk_radio_menu_item_new_with_label_from_widget;

/** */
alias gtk_radio_menu_item_new_with_mnemonic = c_gtk_radio_menu_item_new_with_mnemonic;

/** */
alias gtk_radio_menu_item_new_with_mnemonic_from_widget = c_gtk_radio_menu_item_new_with_mnemonic_from_widget;

/** */
alias gtk_radio_menu_item_get_group = c_gtk_radio_menu_item_get_group;

/** */
alias gtk_radio_menu_item_join_group = c_gtk_radio_menu_item_join_group;

/** */
alias gtk_radio_menu_item_set_group = c_gtk_radio_menu_item_set_group;

// RadioMenuItemAccessible

/** */
alias gtk_radio_menu_item_accessible_get_type = c_gtk_radio_menu_item_accessible_get_type;

// RadioToolButton

/** */
alias gtk_radio_tool_button_get_type = c_gtk_radio_tool_button_get_type;

/** */
alias gtk_radio_tool_button_new = c_gtk_radio_tool_button_new;

/** */
alias gtk_radio_tool_button_new_from_stock = c_gtk_radio_tool_button_new_from_stock;

/** */
alias gtk_radio_tool_button_new_from_widget = c_gtk_radio_tool_button_new_from_widget;

/** */
alias gtk_radio_tool_button_new_with_stock_from_widget = c_gtk_radio_tool_button_new_with_stock_from_widget;

/** */
alias gtk_radio_tool_button_get_group = c_gtk_radio_tool_button_get_group;

/** */
alias gtk_radio_tool_button_set_group = c_gtk_radio_tool_button_set_group;

// Range

/** */
alias gtk_range_get_type = c_gtk_range_get_type;

/** */
alias gtk_range_get_adjustment = c_gtk_range_get_adjustment;

/** */
alias gtk_range_get_fill_level = c_gtk_range_get_fill_level;

/** */
alias gtk_range_get_flippable = c_gtk_range_get_flippable;

/** */
alias gtk_range_get_inverted = c_gtk_range_get_inverted;

/** */
alias gtk_range_get_lower_stepper_sensitivity = c_gtk_range_get_lower_stepper_sensitivity;

/** */
alias gtk_range_get_min_slider_size = c_gtk_range_get_min_slider_size;

/** */
alias gtk_range_get_range_rect = c_gtk_range_get_range_rect;

/** */
alias gtk_range_get_restrict_to_fill_level = c_gtk_range_get_restrict_to_fill_level;

/** */
alias gtk_range_get_round_digits = c_gtk_range_get_round_digits;

/** */
alias gtk_range_get_show_fill_level = c_gtk_range_get_show_fill_level;

/** */
alias gtk_range_get_slider_range = c_gtk_range_get_slider_range;

/** */
alias gtk_range_get_slider_size_fixed = c_gtk_range_get_slider_size_fixed;

/** */
alias gtk_range_get_upper_stepper_sensitivity = c_gtk_range_get_upper_stepper_sensitivity;

/** */
alias gtk_range_get_value = c_gtk_range_get_value;

/** */
alias gtk_range_set_adjustment = c_gtk_range_set_adjustment;

/** */
alias gtk_range_set_fill_level = c_gtk_range_set_fill_level;

/** */
alias gtk_range_set_flippable = c_gtk_range_set_flippable;

/** */
alias gtk_range_set_increments = c_gtk_range_set_increments;

/** */
alias gtk_range_set_inverted = c_gtk_range_set_inverted;

/** */
alias gtk_range_set_lower_stepper_sensitivity = c_gtk_range_set_lower_stepper_sensitivity;

/** */
alias gtk_range_set_min_slider_size = c_gtk_range_set_min_slider_size;

/** */
alias gtk_range_set_range = c_gtk_range_set_range;

/** */
alias gtk_range_set_restrict_to_fill_level = c_gtk_range_set_restrict_to_fill_level;

/** */
alias gtk_range_set_round_digits = c_gtk_range_set_round_digits;

/** */
alias gtk_range_set_show_fill_level = c_gtk_range_set_show_fill_level;

/** */
alias gtk_range_set_slider_size_fixed = c_gtk_range_set_slider_size_fixed;

/** */
alias gtk_range_set_upper_stepper_sensitivity = c_gtk_range_set_upper_stepper_sensitivity;

/** */
alias gtk_range_set_value = c_gtk_range_set_value;

// RangeAccessible

/** */
alias gtk_range_accessible_get_type = c_gtk_range_accessible_get_type;

// RcProperty

/** */
alias gtk_rc_property_parse_border = c_gtk_rc_property_parse_border;

/** */
alias gtk_rc_property_parse_color = c_gtk_rc_property_parse_color;

/** */
alias gtk_rc_property_parse_enum = c_gtk_rc_property_parse_enum;

/** */
alias gtk_rc_property_parse_flags = c_gtk_rc_property_parse_flags;

/** */
alias gtk_rc_property_parse_requisition = c_gtk_rc_property_parse_requisition;

// RcStyle

/** */
alias gtk_rc_style_get_type = c_gtk_rc_style_get_type;

/** */
alias gtk_rc_style_new = c_gtk_rc_style_new;

/** */
alias gtk_rc_style_copy = c_gtk_rc_style_copy;

// RecentAction

/** */
alias gtk_recent_action_get_type = c_gtk_recent_action_get_type;

/** */
alias gtk_recent_action_new = c_gtk_recent_action_new;

/** */
alias gtk_recent_action_new_for_manager = c_gtk_recent_action_new_for_manager;

/** */
alias gtk_recent_action_get_show_numbers = c_gtk_recent_action_get_show_numbers;

/** */
alias gtk_recent_action_set_show_numbers = c_gtk_recent_action_set_show_numbers;

// RecentChooser

/** */
alias gtk_recent_chooser_get_type = c_gtk_recent_chooser_get_type;

/** */
alias gtk_recent_chooser_add_filter = c_gtk_recent_chooser_add_filter;

/** */
alias gtk_recent_chooser_get_current_item = c_gtk_recent_chooser_get_current_item;

/** */
alias gtk_recent_chooser_get_current_uri = c_gtk_recent_chooser_get_current_uri;

/** */
alias gtk_recent_chooser_get_filter = c_gtk_recent_chooser_get_filter;

/** */
alias gtk_recent_chooser_get_items = c_gtk_recent_chooser_get_items;

/** */
alias gtk_recent_chooser_get_limit = c_gtk_recent_chooser_get_limit;

/** */
alias gtk_recent_chooser_get_local_only = c_gtk_recent_chooser_get_local_only;

/** */
alias gtk_recent_chooser_get_select_multiple = c_gtk_recent_chooser_get_select_multiple;

/** */
alias gtk_recent_chooser_get_show_icons = c_gtk_recent_chooser_get_show_icons;

/** */
alias gtk_recent_chooser_get_show_not_found = c_gtk_recent_chooser_get_show_not_found;

/** */
alias gtk_recent_chooser_get_show_private = c_gtk_recent_chooser_get_show_private;

/** */
alias gtk_recent_chooser_get_show_tips = c_gtk_recent_chooser_get_show_tips;

/** */
alias gtk_recent_chooser_get_sort_type = c_gtk_recent_chooser_get_sort_type;

/** */
alias gtk_recent_chooser_get_uris = c_gtk_recent_chooser_get_uris;

/** */
alias gtk_recent_chooser_list_filters = c_gtk_recent_chooser_list_filters;

/** */
alias gtk_recent_chooser_remove_filter = c_gtk_recent_chooser_remove_filter;

/** */
alias gtk_recent_chooser_select_all = c_gtk_recent_chooser_select_all;

/** */
alias gtk_recent_chooser_select_uri = c_gtk_recent_chooser_select_uri;

/** */
alias gtk_recent_chooser_set_current_uri = c_gtk_recent_chooser_set_current_uri;

/** */
alias gtk_recent_chooser_set_filter = c_gtk_recent_chooser_set_filter;

/** */
alias gtk_recent_chooser_set_limit = c_gtk_recent_chooser_set_limit;

/** */
alias gtk_recent_chooser_set_local_only = c_gtk_recent_chooser_set_local_only;

/** */
alias gtk_recent_chooser_set_select_multiple = c_gtk_recent_chooser_set_select_multiple;

/** */
alias gtk_recent_chooser_set_show_icons = c_gtk_recent_chooser_set_show_icons;

/** */
alias gtk_recent_chooser_set_show_not_found = c_gtk_recent_chooser_set_show_not_found;

/** */
alias gtk_recent_chooser_set_show_private = c_gtk_recent_chooser_set_show_private;

/** */
alias gtk_recent_chooser_set_show_tips = c_gtk_recent_chooser_set_show_tips;

/** */
alias gtk_recent_chooser_set_sort_func = c_gtk_recent_chooser_set_sort_func;

/** */
alias gtk_recent_chooser_set_sort_type = c_gtk_recent_chooser_set_sort_type;

/** */
alias gtk_recent_chooser_unselect_all = c_gtk_recent_chooser_unselect_all;

/** */
alias gtk_recent_chooser_unselect_uri = c_gtk_recent_chooser_unselect_uri;

// RecentChooserDialog

/** */
alias gtk_recent_chooser_dialog_get_type = c_gtk_recent_chooser_dialog_get_type;

/** */
alias gtk_recent_chooser_dialog_new = c_gtk_recent_chooser_dialog_new;

/** */
alias gtk_recent_chooser_dialog_new_for_manager = c_gtk_recent_chooser_dialog_new_for_manager;

// RecentChooserMenu

/** */
alias gtk_recent_chooser_menu_get_type = c_gtk_recent_chooser_menu_get_type;

/** */
alias gtk_recent_chooser_menu_new = c_gtk_recent_chooser_menu_new;

/** */
alias gtk_recent_chooser_menu_new_for_manager = c_gtk_recent_chooser_menu_new_for_manager;

/** */
alias gtk_recent_chooser_menu_get_show_numbers = c_gtk_recent_chooser_menu_get_show_numbers;

/** */
alias gtk_recent_chooser_menu_set_show_numbers = c_gtk_recent_chooser_menu_set_show_numbers;

// RecentChooserWidget

/** */
alias gtk_recent_chooser_widget_get_type = c_gtk_recent_chooser_widget_get_type;

/** */
alias gtk_recent_chooser_widget_new = c_gtk_recent_chooser_widget_new;

/** */
alias gtk_recent_chooser_widget_new_for_manager = c_gtk_recent_chooser_widget_new_for_manager;

// RecentFilter

/** */
alias gtk_recent_filter_get_type = c_gtk_recent_filter_get_type;

/** */
alias gtk_recent_filter_new = c_gtk_recent_filter_new;

/** */
alias gtk_recent_filter_add_age = c_gtk_recent_filter_add_age;

/** */
alias gtk_recent_filter_add_application = c_gtk_recent_filter_add_application;

/** */
alias gtk_recent_filter_add_custom = c_gtk_recent_filter_add_custom;

/** */
alias gtk_recent_filter_add_group = c_gtk_recent_filter_add_group;

/** */
alias gtk_recent_filter_add_mime_type = c_gtk_recent_filter_add_mime_type;

/** */
alias gtk_recent_filter_add_pattern = c_gtk_recent_filter_add_pattern;

/** */
alias gtk_recent_filter_add_pixbuf_formats = c_gtk_recent_filter_add_pixbuf_formats;

/** */
alias gtk_recent_filter_filter = c_gtk_recent_filter_filter;

/** */
alias gtk_recent_filter_get_name = c_gtk_recent_filter_get_name;

/** */
alias gtk_recent_filter_get_needed = c_gtk_recent_filter_get_needed;

/** */
alias gtk_recent_filter_set_name = c_gtk_recent_filter_set_name;

// RecentInfo

/** */
alias gtk_recent_info_get_type = c_gtk_recent_info_get_type;

/** */
alias gtk_recent_info_create_app_info = c_gtk_recent_info_create_app_info;

/** */
alias gtk_recent_info_exists = c_gtk_recent_info_exists;

/** */
alias gtk_recent_info_get_added = c_gtk_recent_info_get_added;

/** */
alias gtk_recent_info_get_age = c_gtk_recent_info_get_age;

/** */
alias gtk_recent_info_get_application_info = c_gtk_recent_info_get_application_info;

/** */
alias gtk_recent_info_get_applications = c_gtk_recent_info_get_applications;

/** */
alias gtk_recent_info_get_description = c_gtk_recent_info_get_description;

/** */
alias gtk_recent_info_get_display_name = c_gtk_recent_info_get_display_name;

/** */
alias gtk_recent_info_get_gicon = c_gtk_recent_info_get_gicon;

/** */
alias gtk_recent_info_get_groups = c_gtk_recent_info_get_groups;

/** */
alias gtk_recent_info_get_icon = c_gtk_recent_info_get_icon;

/** */
alias gtk_recent_info_get_mime_type = c_gtk_recent_info_get_mime_type;

/** */
alias gtk_recent_info_get_modified = c_gtk_recent_info_get_modified;

/** */
alias gtk_recent_info_get_private_hint = c_gtk_recent_info_get_private_hint;

/** */
alias gtk_recent_info_get_short_name = c_gtk_recent_info_get_short_name;

/** */
alias gtk_recent_info_get_uri = c_gtk_recent_info_get_uri;

/** */
alias gtk_recent_info_get_uri_display = c_gtk_recent_info_get_uri_display;

/** */
alias gtk_recent_info_get_visited = c_gtk_recent_info_get_visited;

/** */
alias gtk_recent_info_has_application = c_gtk_recent_info_has_application;

/** */
alias gtk_recent_info_has_group = c_gtk_recent_info_has_group;

/** */
alias gtk_recent_info_is_local = c_gtk_recent_info_is_local;

/** */
alias gtk_recent_info_last_application = c_gtk_recent_info_last_application;

/** */
alias gtk_recent_info_match = c_gtk_recent_info_match;

/** */
alias gtk_recent_info_ref = c_gtk_recent_info_ref;

/** */
alias gtk_recent_info_unref = c_gtk_recent_info_unref;

// RecentManager

/** */
alias gtk_recent_manager_get_type = c_gtk_recent_manager_get_type;

/** */
alias gtk_recent_manager_new = c_gtk_recent_manager_new;

/** */
alias gtk_recent_manager_get_default = c_gtk_recent_manager_get_default;

/** */
alias gtk_recent_manager_add_full = c_gtk_recent_manager_add_full;

/** */
alias gtk_recent_manager_add_item = c_gtk_recent_manager_add_item;

/** */
alias gtk_recent_manager_get_items = c_gtk_recent_manager_get_items;

/** */
alias gtk_recent_manager_has_item = c_gtk_recent_manager_has_item;

/** */
alias gtk_recent_manager_lookup_item = c_gtk_recent_manager_lookup_item;

/** */
alias gtk_recent_manager_move_item = c_gtk_recent_manager_move_item;

/** */
alias gtk_recent_manager_purge_items = c_gtk_recent_manager_purge_items;

/** */
alias gtk_recent_manager_remove_item = c_gtk_recent_manager_remove_item;

// RendererCellAccessible

/** */
alias gtk_renderer_cell_accessible_get_type = c_gtk_renderer_cell_accessible_get_type;

/** */
alias gtk_renderer_cell_accessible_new = c_gtk_renderer_cell_accessible_new;

// Requisition

/** */
alias gtk_requisition_get_type = c_gtk_requisition_get_type;

/** */
alias gtk_requisition_new = c_gtk_requisition_new;

/** */
alias gtk_requisition_copy = c_gtk_requisition_copy;

/** */
alias gtk_requisition_free = c_gtk_requisition_free;

// Revealer

/** */
alias gtk_revealer_get_type = c_gtk_revealer_get_type;

/** */
alias gtk_revealer_new = c_gtk_revealer_new;

/** */
alias gtk_revealer_get_child_revealed = c_gtk_revealer_get_child_revealed;

/** */
alias gtk_revealer_get_reveal_child = c_gtk_revealer_get_reveal_child;

/** */
alias gtk_revealer_get_transition_duration = c_gtk_revealer_get_transition_duration;

/** */
alias gtk_revealer_get_transition_type = c_gtk_revealer_get_transition_type;

/** */
alias gtk_revealer_set_reveal_child = c_gtk_revealer_set_reveal_child;

/** */
alias gtk_revealer_set_transition_duration = c_gtk_revealer_set_transition_duration;

/** */
alias gtk_revealer_set_transition_type = c_gtk_revealer_set_transition_type;

// Scale

/** */
alias gtk_scale_get_type = c_gtk_scale_get_type;

/** */
alias gtk_scale_new = c_gtk_scale_new;

/** */
alias gtk_scale_new_with_range = c_gtk_scale_new_with_range;

/** */
alias gtk_scale_add_mark = c_gtk_scale_add_mark;

/** */
alias gtk_scale_clear_marks = c_gtk_scale_clear_marks;

/** */
alias gtk_scale_get_digits = c_gtk_scale_get_digits;

/** */
alias gtk_scale_get_draw_value = c_gtk_scale_get_draw_value;

/** */
alias gtk_scale_get_has_origin = c_gtk_scale_get_has_origin;

/** */
alias gtk_scale_get_layout = c_gtk_scale_get_layout;

/** */
alias gtk_scale_get_layout_offsets = c_gtk_scale_get_layout_offsets;

/** */
alias gtk_scale_get_value_pos = c_gtk_scale_get_value_pos;

/** */
alias gtk_scale_set_digits = c_gtk_scale_set_digits;

/** */
alias gtk_scale_set_draw_value = c_gtk_scale_set_draw_value;

/** */
alias gtk_scale_set_has_origin = c_gtk_scale_set_has_origin;

/** */
alias gtk_scale_set_value_pos = c_gtk_scale_set_value_pos;

// ScaleAccessible

/** */
alias gtk_scale_accessible_get_type = c_gtk_scale_accessible_get_type;

// ScaleButton

/** */
alias gtk_scale_button_get_type = c_gtk_scale_button_get_type;

/** */
alias gtk_scale_button_new = c_gtk_scale_button_new;

/** */
alias gtk_scale_button_get_adjustment = c_gtk_scale_button_get_adjustment;

/** */
alias gtk_scale_button_get_minus_button = c_gtk_scale_button_get_minus_button;

/** */
alias gtk_scale_button_get_plus_button = c_gtk_scale_button_get_plus_button;

/** */
alias gtk_scale_button_get_popup = c_gtk_scale_button_get_popup;

/** */
alias gtk_scale_button_get_value = c_gtk_scale_button_get_value;

/** */
alias gtk_scale_button_set_adjustment = c_gtk_scale_button_set_adjustment;

/** */
alias gtk_scale_button_set_icons = c_gtk_scale_button_set_icons;

/** */
alias gtk_scale_button_set_value = c_gtk_scale_button_set_value;

// ScaleButtonAccessible

/** */
alias gtk_scale_button_accessible_get_type = c_gtk_scale_button_accessible_get_type;

// Scrollable

/** */
alias gtk_scrollable_get_type = c_gtk_scrollable_get_type;

/** */
alias gtk_scrollable_get_border = c_gtk_scrollable_get_border;

/** */
alias gtk_scrollable_get_hadjustment = c_gtk_scrollable_get_hadjustment;

/** */
alias gtk_scrollable_get_hscroll_policy = c_gtk_scrollable_get_hscroll_policy;

/** */
alias gtk_scrollable_get_vadjustment = c_gtk_scrollable_get_vadjustment;

/** */
alias gtk_scrollable_get_vscroll_policy = c_gtk_scrollable_get_vscroll_policy;

/** */
alias gtk_scrollable_set_hadjustment = c_gtk_scrollable_set_hadjustment;

/** */
alias gtk_scrollable_set_hscroll_policy = c_gtk_scrollable_set_hscroll_policy;

/** */
alias gtk_scrollable_set_vadjustment = c_gtk_scrollable_set_vadjustment;

/** */
alias gtk_scrollable_set_vscroll_policy = c_gtk_scrollable_set_vscroll_policy;

// Scrollbar

/** */
alias gtk_scrollbar_get_type = c_gtk_scrollbar_get_type;

/** */
alias gtk_scrollbar_new = c_gtk_scrollbar_new;

// ScrolledWindow

/** */
alias gtk_scrolled_window_get_type = c_gtk_scrolled_window_get_type;

/** */
alias gtk_scrolled_window_new = c_gtk_scrolled_window_new;

/** */
alias gtk_scrolled_window_add_with_viewport = c_gtk_scrolled_window_add_with_viewport;

/** */
alias gtk_scrolled_window_get_capture_button_press = c_gtk_scrolled_window_get_capture_button_press;

/** */
alias gtk_scrolled_window_get_hadjustment = c_gtk_scrolled_window_get_hadjustment;

/** */
alias gtk_scrolled_window_get_hscrollbar = c_gtk_scrolled_window_get_hscrollbar;

/** */
alias gtk_scrolled_window_get_kinetic_scrolling = c_gtk_scrolled_window_get_kinetic_scrolling;

/** */
alias gtk_scrolled_window_get_max_content_height = c_gtk_scrolled_window_get_max_content_height;

/** */
alias gtk_scrolled_window_get_max_content_width = c_gtk_scrolled_window_get_max_content_width;

/** */
alias gtk_scrolled_window_get_min_content_height = c_gtk_scrolled_window_get_min_content_height;

/** */
alias gtk_scrolled_window_get_min_content_width = c_gtk_scrolled_window_get_min_content_width;

/** */
alias gtk_scrolled_window_get_overlay_scrolling = c_gtk_scrolled_window_get_overlay_scrolling;

/** */
alias gtk_scrolled_window_get_placement = c_gtk_scrolled_window_get_placement;

/** */
alias gtk_scrolled_window_get_policy = c_gtk_scrolled_window_get_policy;

/** */
alias gtk_scrolled_window_get_propagate_natural_height = c_gtk_scrolled_window_get_propagate_natural_height;

/** */
alias gtk_scrolled_window_get_propagate_natural_width = c_gtk_scrolled_window_get_propagate_natural_width;

/** */
alias gtk_scrolled_window_get_shadow_type = c_gtk_scrolled_window_get_shadow_type;

/** */
alias gtk_scrolled_window_get_vadjustment = c_gtk_scrolled_window_get_vadjustment;

/** */
alias gtk_scrolled_window_get_vscrollbar = c_gtk_scrolled_window_get_vscrollbar;

/** */
alias gtk_scrolled_window_set_capture_button_press = c_gtk_scrolled_window_set_capture_button_press;

/** */
alias gtk_scrolled_window_set_hadjustment = c_gtk_scrolled_window_set_hadjustment;

/** */
alias gtk_scrolled_window_set_kinetic_scrolling = c_gtk_scrolled_window_set_kinetic_scrolling;

/** */
alias gtk_scrolled_window_set_max_content_height = c_gtk_scrolled_window_set_max_content_height;

/** */
alias gtk_scrolled_window_set_max_content_width = c_gtk_scrolled_window_set_max_content_width;

/** */
alias gtk_scrolled_window_set_min_content_height = c_gtk_scrolled_window_set_min_content_height;

/** */
alias gtk_scrolled_window_set_min_content_width = c_gtk_scrolled_window_set_min_content_width;

/** */
alias gtk_scrolled_window_set_overlay_scrolling = c_gtk_scrolled_window_set_overlay_scrolling;

/** */
alias gtk_scrolled_window_set_placement = c_gtk_scrolled_window_set_placement;

/** */
alias gtk_scrolled_window_set_policy = c_gtk_scrolled_window_set_policy;

/** */
alias gtk_scrolled_window_set_propagate_natural_height = c_gtk_scrolled_window_set_propagate_natural_height;

/** */
alias gtk_scrolled_window_set_propagate_natural_width = c_gtk_scrolled_window_set_propagate_natural_width;

/** */
alias gtk_scrolled_window_set_shadow_type = c_gtk_scrolled_window_set_shadow_type;

/** */
alias gtk_scrolled_window_set_vadjustment = c_gtk_scrolled_window_set_vadjustment;

/** */
alias gtk_scrolled_window_unset_placement = c_gtk_scrolled_window_unset_placement;

// ScrolledWindowAccessible

/** */
alias gtk_scrolled_window_accessible_get_type = c_gtk_scrolled_window_accessible_get_type;

// SearchBar

/** */
alias gtk_search_bar_get_type = c_gtk_search_bar_get_type;

/** */
alias gtk_search_bar_new = c_gtk_search_bar_new;

/** */
alias gtk_search_bar_connect_entry = c_gtk_search_bar_connect_entry;

/** */
alias gtk_search_bar_get_search_mode = c_gtk_search_bar_get_search_mode;

/** */
alias gtk_search_bar_get_show_close_button = c_gtk_search_bar_get_show_close_button;

/** */
alias gtk_search_bar_handle_event = c_gtk_search_bar_handle_event;

/** */
alias gtk_search_bar_set_search_mode = c_gtk_search_bar_set_search_mode;

/** */
alias gtk_search_bar_set_show_close_button = c_gtk_search_bar_set_show_close_button;

// SearchEntry

/** */
alias gtk_search_entry_get_type = c_gtk_search_entry_get_type;

/** */
alias gtk_search_entry_new = c_gtk_search_entry_new;

/** */
alias gtk_search_entry_handle_event = c_gtk_search_entry_handle_event;

// SelectionData

/** */
alias gtk_selection_data_get_type = c_gtk_selection_data_get_type;

/** */
alias gtk_selection_data_copy = c_gtk_selection_data_copy;

/** */
alias gtk_selection_data_free = c_gtk_selection_data_free;

/** */
alias gtk_selection_data_get_data = c_gtk_selection_data_get_data;

/** */
alias gtk_selection_data_get_data_type = c_gtk_selection_data_get_data_type;

/** */
alias gtk_selection_data_get_data_with_length = c_gtk_selection_data_get_data_with_length;

/** */
alias gtk_selection_data_get_display = c_gtk_selection_data_get_display;

/** */
alias gtk_selection_data_get_format = c_gtk_selection_data_get_format;

/** */
alias gtk_selection_data_get_length = c_gtk_selection_data_get_length;

/** */
alias gtk_selection_data_get_pixbuf = c_gtk_selection_data_get_pixbuf;

/** */
alias gtk_selection_data_get_selection = c_gtk_selection_data_get_selection;

/** */
alias gtk_selection_data_get_target = c_gtk_selection_data_get_target;

/** */
alias gtk_selection_data_get_targets = c_gtk_selection_data_get_targets;

/** */
alias gtk_selection_data_get_text = c_gtk_selection_data_get_text;

/** */
alias gtk_selection_data_get_uris = c_gtk_selection_data_get_uris;

/** */
alias gtk_selection_data_set = c_gtk_selection_data_set;

/** */
alias gtk_selection_data_set_pixbuf = c_gtk_selection_data_set_pixbuf;

/** */
alias gtk_selection_data_set_text = c_gtk_selection_data_set_text;

/** */
alias gtk_selection_data_set_uris = c_gtk_selection_data_set_uris;

/** */
alias gtk_selection_data_targets_include_image = c_gtk_selection_data_targets_include_image;

/** */
alias gtk_selection_data_targets_include_rich_text = c_gtk_selection_data_targets_include_rich_text;

/** */
alias gtk_selection_data_targets_include_text = c_gtk_selection_data_targets_include_text;

/** */
alias gtk_selection_data_targets_include_uri = c_gtk_selection_data_targets_include_uri;

// Separator

/** */
alias gtk_separator_get_type = c_gtk_separator_get_type;

/** */
alias gtk_separator_new = c_gtk_separator_new;

// SeparatorMenuItem

/** */
alias gtk_separator_menu_item_get_type = c_gtk_separator_menu_item_get_type;

/** */
alias gtk_separator_menu_item_new = c_gtk_separator_menu_item_new;

// SeparatorToolItem

/** */
alias gtk_separator_tool_item_get_type = c_gtk_separator_tool_item_get_type;

/** */
alias gtk_separator_tool_item_new = c_gtk_separator_tool_item_new;

/** */
alias gtk_separator_tool_item_get_draw = c_gtk_separator_tool_item_get_draw;

/** */
alias gtk_separator_tool_item_set_draw = c_gtk_separator_tool_item_set_draw;

// Settings

/** */
alias gtk_settings_get_type = c_gtk_settings_get_type;

/** */
alias gtk_settings_get_default = c_gtk_settings_get_default;

/** */
alias gtk_settings_get_for_screen = c_gtk_settings_get_for_screen;

/** */
alias gtk_settings_install_property = c_gtk_settings_install_property;

/** */
alias gtk_settings_install_property_parser = c_gtk_settings_install_property_parser;

/** */
alias gtk_settings_reset_property = c_gtk_settings_reset_property;

/** */
alias gtk_settings_set_double_property = c_gtk_settings_set_double_property;

/** */
alias gtk_settings_set_long_property = c_gtk_settings_set_long_property;

/** */
alias gtk_settings_set_property_value = c_gtk_settings_set_property_value;

/** */
alias gtk_settings_set_string_property = c_gtk_settings_set_string_property;

// ShortcutLabel

/** */
alias gtk_shortcut_label_get_type = c_gtk_shortcut_label_get_type;

/** */
alias gtk_shortcut_label_new = c_gtk_shortcut_label_new;

/** */
alias gtk_shortcut_label_get_accelerator = c_gtk_shortcut_label_get_accelerator;

/** */
alias gtk_shortcut_label_get_disabled_text = c_gtk_shortcut_label_get_disabled_text;

/** */
alias gtk_shortcut_label_set_accelerator = c_gtk_shortcut_label_set_accelerator;

/** */
alias gtk_shortcut_label_set_disabled_text = c_gtk_shortcut_label_set_disabled_text;

// ShortcutsGroup

/** */
alias gtk_shortcuts_group_get_type = c_gtk_shortcuts_group_get_type;

// ShortcutsSection

/** */
alias gtk_shortcuts_section_get_type = c_gtk_shortcuts_section_get_type;

// ShortcutsShortcut

/** */
alias gtk_shortcuts_shortcut_get_type = c_gtk_shortcuts_shortcut_get_type;

// ShortcutsWindow

/** */
alias gtk_shortcuts_window_get_type = c_gtk_shortcuts_window_get_type;

// SizeGroup

/** */
alias gtk_size_group_get_type = c_gtk_size_group_get_type;

/** */
alias gtk_size_group_new = c_gtk_size_group_new;

/** */
alias gtk_size_group_add_widget = c_gtk_size_group_add_widget;

/** */
alias gtk_size_group_get_ignore_hidden = c_gtk_size_group_get_ignore_hidden;

/** */
alias gtk_size_group_get_mode = c_gtk_size_group_get_mode;

/** */
alias gtk_size_group_get_widgets = c_gtk_size_group_get_widgets;

/** */
alias gtk_size_group_remove_widget = c_gtk_size_group_remove_widget;

/** */
alias gtk_size_group_set_ignore_hidden = c_gtk_size_group_set_ignore_hidden;

/** */
alias gtk_size_group_set_mode = c_gtk_size_group_set_mode;

// Socket

/** */
alias gtk_socket_get_type = c_gtk_socket_get_type;

/** */
alias gtk_socket_new = c_gtk_socket_new;

/** */
alias gtk_socket_add_id = c_gtk_socket_add_id;

/** */
alias gtk_socket_get_id = c_gtk_socket_get_id;

/** */
alias gtk_socket_get_plug_window = c_gtk_socket_get_plug_window;

// SocketAccessible

/** */
alias gtk_socket_accessible_get_type = c_gtk_socket_accessible_get_type;

/** */
alias gtk_socket_accessible_embed = c_gtk_socket_accessible_embed;

// SpinButton

/** */
alias gtk_spin_button_get_type = c_gtk_spin_button_get_type;

/** */
alias gtk_spin_button_new = c_gtk_spin_button_new;

/** */
alias gtk_spin_button_new_with_range = c_gtk_spin_button_new_with_range;

/** */
alias gtk_spin_button_configure = c_gtk_spin_button_configure;

/** */
alias gtk_spin_button_get_adjustment = c_gtk_spin_button_get_adjustment;

/** */
alias gtk_spin_button_get_digits = c_gtk_spin_button_get_digits;

/** */
alias gtk_spin_button_get_increments = c_gtk_spin_button_get_increments;

/** */
alias gtk_spin_button_get_numeric = c_gtk_spin_button_get_numeric;

/** */
alias gtk_spin_button_get_range = c_gtk_spin_button_get_range;

/** */
alias gtk_spin_button_get_snap_to_ticks = c_gtk_spin_button_get_snap_to_ticks;

/** */
alias gtk_spin_button_get_update_policy = c_gtk_spin_button_get_update_policy;

/** */
alias gtk_spin_button_get_value = c_gtk_spin_button_get_value;

/** */
alias gtk_spin_button_get_value_as_int = c_gtk_spin_button_get_value_as_int;

/** */
alias gtk_spin_button_get_wrap = c_gtk_spin_button_get_wrap;

/** */
alias gtk_spin_button_set_adjustment = c_gtk_spin_button_set_adjustment;

/** */
alias gtk_spin_button_set_digits = c_gtk_spin_button_set_digits;

/** */
alias gtk_spin_button_set_increments = c_gtk_spin_button_set_increments;

/** */
alias gtk_spin_button_set_numeric = c_gtk_spin_button_set_numeric;

/** */
alias gtk_spin_button_set_range = c_gtk_spin_button_set_range;

/** */
alias gtk_spin_button_set_snap_to_ticks = c_gtk_spin_button_set_snap_to_ticks;

/** */
alias gtk_spin_button_set_update_policy = c_gtk_spin_button_set_update_policy;

/** */
alias gtk_spin_button_set_value = c_gtk_spin_button_set_value;

/** */
alias gtk_spin_button_set_wrap = c_gtk_spin_button_set_wrap;

/** */
alias gtk_spin_button_spin = c_gtk_spin_button_spin;

/** */
alias gtk_spin_button_update = c_gtk_spin_button_update;

// SpinButtonAccessible

/** */
alias gtk_spin_button_accessible_get_type = c_gtk_spin_button_accessible_get_type;

// Spinner

/** */
alias gtk_spinner_get_type = c_gtk_spinner_get_type;

/** */
alias gtk_spinner_new = c_gtk_spinner_new;

/** */
alias gtk_spinner_start = c_gtk_spinner_start;

/** */
alias gtk_spinner_stop = c_gtk_spinner_stop;

// SpinnerAccessible

/** */
alias gtk_spinner_accessible_get_type = c_gtk_spinner_accessible_get_type;

// Stack

/** */
alias gtk_stack_get_type = c_gtk_stack_get_type;

/** */
alias gtk_stack_new = c_gtk_stack_new;

/** */
alias gtk_stack_add_named = c_gtk_stack_add_named;

/** */
alias gtk_stack_add_titled = c_gtk_stack_add_titled;

/** */
alias gtk_stack_get_child_by_name = c_gtk_stack_get_child_by_name;

/** */
alias gtk_stack_get_hhomogeneous = c_gtk_stack_get_hhomogeneous;

/** */
alias gtk_stack_get_homogeneous = c_gtk_stack_get_homogeneous;

/** */
alias gtk_stack_get_interpolate_size = c_gtk_stack_get_interpolate_size;

/** */
alias gtk_stack_get_transition_duration = c_gtk_stack_get_transition_duration;

/** */
alias gtk_stack_get_transition_running = c_gtk_stack_get_transition_running;

/** */
alias gtk_stack_get_transition_type = c_gtk_stack_get_transition_type;

/** */
alias gtk_stack_get_vhomogeneous = c_gtk_stack_get_vhomogeneous;

/** */
alias gtk_stack_get_visible_child = c_gtk_stack_get_visible_child;

/** */
alias gtk_stack_get_visible_child_name = c_gtk_stack_get_visible_child_name;

/** */
alias gtk_stack_set_hhomogeneous = c_gtk_stack_set_hhomogeneous;

/** */
alias gtk_stack_set_homogeneous = c_gtk_stack_set_homogeneous;

/** */
alias gtk_stack_set_interpolate_size = c_gtk_stack_set_interpolate_size;

/** */
alias gtk_stack_set_transition_duration = c_gtk_stack_set_transition_duration;

/** */
alias gtk_stack_set_transition_type = c_gtk_stack_set_transition_type;

/** */
alias gtk_stack_set_vhomogeneous = c_gtk_stack_set_vhomogeneous;

/** */
alias gtk_stack_set_visible_child = c_gtk_stack_set_visible_child;

/** */
alias gtk_stack_set_visible_child_full = c_gtk_stack_set_visible_child_full;

/** */
alias gtk_stack_set_visible_child_name = c_gtk_stack_set_visible_child_name;

// StackAccessible

/** */
alias gtk_stack_accessible_get_type = c_gtk_stack_accessible_get_type;

// StackSidebar

/** */
alias gtk_stack_sidebar_get_type = c_gtk_stack_sidebar_get_type;

/** */
alias gtk_stack_sidebar_new = c_gtk_stack_sidebar_new;

/** */
alias gtk_stack_sidebar_get_stack = c_gtk_stack_sidebar_get_stack;

/** */
alias gtk_stack_sidebar_set_stack = c_gtk_stack_sidebar_set_stack;

// StackSwitcher

/** */
alias gtk_stack_switcher_get_type = c_gtk_stack_switcher_get_type;

/** */
alias gtk_stack_switcher_new = c_gtk_stack_switcher_new;

/** */
alias gtk_stack_switcher_get_stack = c_gtk_stack_switcher_get_stack;

/** */
alias gtk_stack_switcher_set_stack = c_gtk_stack_switcher_set_stack;

// StatusIcon

/** */
alias gtk_status_icon_get_type = c_gtk_status_icon_get_type;

/** */
alias gtk_status_icon_new = c_gtk_status_icon_new;

/** */
alias gtk_status_icon_new_from_file = c_gtk_status_icon_new_from_file;

/** */
alias gtk_status_icon_new_from_gicon = c_gtk_status_icon_new_from_gicon;

/** */
alias gtk_status_icon_new_from_icon_name = c_gtk_status_icon_new_from_icon_name;

/** */
alias gtk_status_icon_new_from_pixbuf = c_gtk_status_icon_new_from_pixbuf;

/** */
alias gtk_status_icon_new_from_stock = c_gtk_status_icon_new_from_stock;

/** */
alias gtk_status_icon_position_menu = c_gtk_status_icon_position_menu;

/** */
alias gtk_status_icon_get_geometry = c_gtk_status_icon_get_geometry;

/** */
alias gtk_status_icon_get_gicon = c_gtk_status_icon_get_gicon;

/** */
alias gtk_status_icon_get_has_tooltip = c_gtk_status_icon_get_has_tooltip;

/** */
alias gtk_status_icon_get_icon_name = c_gtk_status_icon_get_icon_name;

/** */
alias gtk_status_icon_get_pixbuf = c_gtk_status_icon_get_pixbuf;

/** */
alias gtk_status_icon_get_screen = c_gtk_status_icon_get_screen;

/** */
alias gtk_status_icon_get_size = c_gtk_status_icon_get_size;

/** */
alias gtk_status_icon_get_stock = c_gtk_status_icon_get_stock;

/** */
alias gtk_status_icon_get_storage_type = c_gtk_status_icon_get_storage_type;

/** */
alias gtk_status_icon_get_title = c_gtk_status_icon_get_title;

/** */
alias gtk_status_icon_get_tooltip_markup = c_gtk_status_icon_get_tooltip_markup;

/** */
alias gtk_status_icon_get_tooltip_text = c_gtk_status_icon_get_tooltip_text;

/** */
alias gtk_status_icon_get_visible = c_gtk_status_icon_get_visible;

/** */
alias gtk_status_icon_get_x11_window_id = c_gtk_status_icon_get_x11_window_id;

/** */
alias gtk_status_icon_is_embedded = c_gtk_status_icon_is_embedded;

/** */
alias gtk_status_icon_set_from_file = c_gtk_status_icon_set_from_file;

/** */
alias gtk_status_icon_set_from_gicon = c_gtk_status_icon_set_from_gicon;

/** */
alias gtk_status_icon_set_from_icon_name = c_gtk_status_icon_set_from_icon_name;

/** */
alias gtk_status_icon_set_from_pixbuf = c_gtk_status_icon_set_from_pixbuf;

/** */
alias gtk_status_icon_set_from_stock = c_gtk_status_icon_set_from_stock;

/** */
alias gtk_status_icon_set_has_tooltip = c_gtk_status_icon_set_has_tooltip;

/** */
alias gtk_status_icon_set_name = c_gtk_status_icon_set_name;

/** */
alias gtk_status_icon_set_screen = c_gtk_status_icon_set_screen;

/** */
alias gtk_status_icon_set_title = c_gtk_status_icon_set_title;

/** */
alias gtk_status_icon_set_tooltip_markup = c_gtk_status_icon_set_tooltip_markup;

/** */
alias gtk_status_icon_set_tooltip_text = c_gtk_status_icon_set_tooltip_text;

/** */
alias gtk_status_icon_set_visible = c_gtk_status_icon_set_visible;

// Statusbar

/** */
alias gtk_statusbar_get_type = c_gtk_statusbar_get_type;

/** */
alias gtk_statusbar_new = c_gtk_statusbar_new;

/** */
alias gtk_statusbar_get_context_id = c_gtk_statusbar_get_context_id;

/** */
alias gtk_statusbar_get_message_area = c_gtk_statusbar_get_message_area;

/** */
alias gtk_statusbar_pop = c_gtk_statusbar_pop;

/** */
alias gtk_statusbar_push = c_gtk_statusbar_push;

/** */
alias gtk_statusbar_remove = c_gtk_statusbar_remove;

/** */
alias gtk_statusbar_remove_all = c_gtk_statusbar_remove_all;

// StatusbarAccessible

/** */
alias gtk_statusbar_accessible_get_type = c_gtk_statusbar_accessible_get_type;

// StockItem

/** */
alias gtk_stock_item_copy = c_gtk_stock_item_copy;

/** */
alias gtk_stock_item_free = c_gtk_stock_item_free;

// Style

/** */
alias gtk_style_get_type = c_gtk_style_get_type;

/** */
alias gtk_style_new = c_gtk_style_new;

/** */
alias gtk_style_apply_default_background = c_gtk_style_apply_default_background;

/** */
alias gtk_style_attach = c_gtk_style_attach;

/** */
alias gtk_style_copy = c_gtk_style_copy;

/** */
alias gtk_style_detach = c_gtk_style_detach;

/** */
alias gtk_style_get = c_gtk_style_get;

/** */
alias gtk_style_get_style_property = c_gtk_style_get_style_property;

/** */
alias gtk_style_get_valist = c_gtk_style_get_valist;

/** */
alias gtk_style_has_context = c_gtk_style_has_context;

/** */
alias gtk_style_lookup_color = c_gtk_style_lookup_color;

/** */
alias gtk_style_lookup_icon_set = c_gtk_style_lookup_icon_set;

/** */
alias gtk_style_render_icon = c_gtk_style_render_icon;

/** */
alias gtk_style_set_background = c_gtk_style_set_background;

// StyleContext

/** */
alias gtk_style_context_get_type = c_gtk_style_context_get_type;

/** */
alias gtk_style_context_new = c_gtk_style_context_new;

/** */
alias gtk_style_context_add_provider_for_screen = c_gtk_style_context_add_provider_for_screen;

/** */
alias gtk_style_context_remove_provider_for_screen = c_gtk_style_context_remove_provider_for_screen;

/** */
alias gtk_style_context_reset_widgets = c_gtk_style_context_reset_widgets;

/** */
alias gtk_style_context_add_class = c_gtk_style_context_add_class;

/** */
alias gtk_style_context_add_provider = c_gtk_style_context_add_provider;

/** */
alias gtk_style_context_add_region = c_gtk_style_context_add_region;

/** */
alias gtk_style_context_cancel_animations = c_gtk_style_context_cancel_animations;

/** */
alias gtk_style_context_get = c_gtk_style_context_get;

/** */
alias gtk_style_context_get_background_color = c_gtk_style_context_get_background_color;

/** */
alias gtk_style_context_get_border = c_gtk_style_context_get_border;

/** */
alias gtk_style_context_get_border_color = c_gtk_style_context_get_border_color;

/** */
alias gtk_style_context_get_color = c_gtk_style_context_get_color;

/** */
alias gtk_style_context_get_direction = c_gtk_style_context_get_direction;

/** */
alias gtk_style_context_get_font = c_gtk_style_context_get_font;

/** */
alias gtk_style_context_get_frame_clock = c_gtk_style_context_get_frame_clock;

/** */
alias gtk_style_context_get_junction_sides = c_gtk_style_context_get_junction_sides;

/** */
alias gtk_style_context_get_margin = c_gtk_style_context_get_margin;

/** */
alias gtk_style_context_get_padding = c_gtk_style_context_get_padding;

/** */
alias gtk_style_context_get_parent = c_gtk_style_context_get_parent;

/** */
alias gtk_style_context_get_path = c_gtk_style_context_get_path;

/** */
alias gtk_style_context_get_property = c_gtk_style_context_get_property;

/** */
alias gtk_style_context_get_scale = c_gtk_style_context_get_scale;

/** */
alias gtk_style_context_get_screen = c_gtk_style_context_get_screen;

/** */
alias gtk_style_context_get_section = c_gtk_style_context_get_section;

/** */
alias gtk_style_context_get_state = c_gtk_style_context_get_state;

/** */
alias gtk_style_context_get_style = c_gtk_style_context_get_style;

/** */
alias gtk_style_context_get_style_property = c_gtk_style_context_get_style_property;

/** */
alias gtk_style_context_get_style_valist = c_gtk_style_context_get_style_valist;

/** */
alias gtk_style_context_get_valist = c_gtk_style_context_get_valist;

/** */
alias gtk_style_context_has_class = c_gtk_style_context_has_class;

/** */
alias gtk_style_context_has_region = c_gtk_style_context_has_region;

/** */
alias gtk_style_context_invalidate = c_gtk_style_context_invalidate;

/** */
alias gtk_style_context_list_classes = c_gtk_style_context_list_classes;

/** */
alias gtk_style_context_list_regions = c_gtk_style_context_list_regions;

/** */
alias gtk_style_context_lookup_color = c_gtk_style_context_lookup_color;

/** */
alias gtk_style_context_lookup_icon_set = c_gtk_style_context_lookup_icon_set;

/** */
alias gtk_style_context_notify_state_change = c_gtk_style_context_notify_state_change;

/** */
alias gtk_style_context_pop_animatable_region = c_gtk_style_context_pop_animatable_region;

/** */
alias gtk_style_context_push_animatable_region = c_gtk_style_context_push_animatable_region;

/** */
alias gtk_style_context_remove_class = c_gtk_style_context_remove_class;

/** */
alias gtk_style_context_remove_provider = c_gtk_style_context_remove_provider;

/** */
alias gtk_style_context_remove_region = c_gtk_style_context_remove_region;

/** */
alias gtk_style_context_restore = c_gtk_style_context_restore;

/** */
alias gtk_style_context_save = c_gtk_style_context_save;

/** */
alias gtk_style_context_scroll_animations = c_gtk_style_context_scroll_animations;

/** */
alias gtk_style_context_set_background = c_gtk_style_context_set_background;

/** */
alias gtk_style_context_set_direction = c_gtk_style_context_set_direction;

/** */
alias gtk_style_context_set_frame_clock = c_gtk_style_context_set_frame_clock;

/** */
alias gtk_style_context_set_junction_sides = c_gtk_style_context_set_junction_sides;

/** */
alias gtk_style_context_set_parent = c_gtk_style_context_set_parent;

/** */
alias gtk_style_context_set_path = c_gtk_style_context_set_path;

/** */
alias gtk_style_context_set_scale = c_gtk_style_context_set_scale;

/** */
alias gtk_style_context_set_screen = c_gtk_style_context_set_screen;

/** */
alias gtk_style_context_set_state = c_gtk_style_context_set_state;

/** */
alias gtk_style_context_state_is_running = c_gtk_style_context_state_is_running;

/** */
alias gtk_style_context_to_string = c_gtk_style_context_to_string;

// StyleProperties

/** */
alias gtk_style_properties_get_type = c_gtk_style_properties_get_type;

/** */
alias gtk_style_properties_new = c_gtk_style_properties_new;

/** */
alias gtk_style_properties_lookup_property = c_gtk_style_properties_lookup_property;

/** */
alias gtk_style_properties_register_property = c_gtk_style_properties_register_property;

/** */
alias gtk_style_properties_clear = c_gtk_style_properties_clear;

/** */
alias gtk_style_properties_get = c_gtk_style_properties_get;

/** */
alias gtk_style_properties_get_property = c_gtk_style_properties_get_property;

/** */
alias gtk_style_properties_get_valist = c_gtk_style_properties_get_valist;

/** */
alias gtk_style_properties_lookup_color = c_gtk_style_properties_lookup_color;

/** */
alias gtk_style_properties_map_color = c_gtk_style_properties_map_color;

/** */
alias gtk_style_properties_merge = c_gtk_style_properties_merge;

/** */
alias gtk_style_properties_set = c_gtk_style_properties_set;

/** */
alias gtk_style_properties_set_property = c_gtk_style_properties_set_property;

/** */
alias gtk_style_properties_set_valist = c_gtk_style_properties_set_valist;

/** */
alias gtk_style_properties_unset_property = c_gtk_style_properties_unset_property;

// StyleProvider

/** */
alias gtk_style_provider_get_type = c_gtk_style_provider_get_type;

/** */
alias gtk_style_provider_get_icon_factory = c_gtk_style_provider_get_icon_factory;

/** */
alias gtk_style_provider_get_style = c_gtk_style_provider_get_style;

/** */
alias gtk_style_provider_get_style_property = c_gtk_style_provider_get_style_property;

// Switch

/** */
alias gtk_switch_get_type = c_gtk_switch_get_type;

/** */
alias gtk_switch_new = c_gtk_switch_new;

/** */
alias gtk_switch_get_active = c_gtk_switch_get_active;

/** */
alias gtk_switch_get_state = c_gtk_switch_get_state;

/** */
alias gtk_switch_set_active = c_gtk_switch_set_active;

/** */
alias gtk_switch_set_state = c_gtk_switch_set_state;

// SwitchAccessible

/** */
alias gtk_switch_accessible_get_type = c_gtk_switch_accessible_get_type;

// SymbolicColor

/** */
alias gtk_symbolic_color_get_type = c_gtk_symbolic_color_get_type;

/** */
alias gtk_symbolic_color_new_alpha = c_gtk_symbolic_color_new_alpha;

/** */
alias gtk_symbolic_color_new_literal = c_gtk_symbolic_color_new_literal;

/** */
alias gtk_symbolic_color_new_mix = c_gtk_symbolic_color_new_mix;

/** */
alias gtk_symbolic_color_new_name = c_gtk_symbolic_color_new_name;

/** */
alias gtk_symbolic_color_new_shade = c_gtk_symbolic_color_new_shade;

/** */
alias gtk_symbolic_color_new_win32 = c_gtk_symbolic_color_new_win32;

/** */
alias gtk_symbolic_color_ref = c_gtk_symbolic_color_ref;

/** */
alias gtk_symbolic_color_resolve = c_gtk_symbolic_color_resolve;

/** */
alias gtk_symbolic_color_to_string = c_gtk_symbolic_color_to_string;

/** */
alias gtk_symbolic_color_unref = c_gtk_symbolic_color_unref;

// Table

/** */
alias gtk_table_get_type = c_gtk_table_get_type;

/** */
alias gtk_table_new = c_gtk_table_new;

/** */
alias gtk_table_attach = c_gtk_table_attach;

/** */
alias gtk_table_attach_defaults = c_gtk_table_attach_defaults;

/** */
alias gtk_table_get_col_spacing = c_gtk_table_get_col_spacing;

/** */
alias gtk_table_get_default_col_spacing = c_gtk_table_get_default_col_spacing;

/** */
alias gtk_table_get_default_row_spacing = c_gtk_table_get_default_row_spacing;

/** */
alias gtk_table_get_homogeneous = c_gtk_table_get_homogeneous;

/** */
alias gtk_table_get_row_spacing = c_gtk_table_get_row_spacing;

/** */
alias gtk_table_get_size = c_gtk_table_get_size;

/** */
alias gtk_table_resize = c_gtk_table_resize;

/** */
alias gtk_table_set_col_spacing = c_gtk_table_set_col_spacing;

/** */
alias gtk_table_set_col_spacings = c_gtk_table_set_col_spacings;

/** */
alias gtk_table_set_homogeneous = c_gtk_table_set_homogeneous;

/** */
alias gtk_table_set_row_spacing = c_gtk_table_set_row_spacing;

/** */
alias gtk_table_set_row_spacings = c_gtk_table_set_row_spacings;

// TargetEntry

/** */
alias gtk_target_entry_get_type = c_gtk_target_entry_get_type;

/** */
alias gtk_target_entry_new = c_gtk_target_entry_new;

/** */
alias gtk_target_entry_copy = c_gtk_target_entry_copy;

/** */
alias gtk_target_entry_free = c_gtk_target_entry_free;

// TargetList

/** */
alias gtk_target_list_get_type = c_gtk_target_list_get_type;

/** */
alias gtk_target_list_new = c_gtk_target_list_new;

/** */
alias gtk_target_list_add = c_gtk_target_list_add;

/** */
alias gtk_target_list_add_image_targets = c_gtk_target_list_add_image_targets;

/** */
alias gtk_target_list_add_rich_text_targets = c_gtk_target_list_add_rich_text_targets;

/** */
alias gtk_target_list_add_table = c_gtk_target_list_add_table;

/** */
alias gtk_target_list_add_text_targets = c_gtk_target_list_add_text_targets;

/** */
alias gtk_target_list_add_uri_targets = c_gtk_target_list_add_uri_targets;

/** */
alias gtk_target_list_find = c_gtk_target_list_find;

/** */
alias gtk_target_list_ref = c_gtk_target_list_ref;

/** */
alias gtk_target_list_remove = c_gtk_target_list_remove;

/** */
alias gtk_target_list_unref = c_gtk_target_list_unref;

// TearoffMenuItem

/** */
alias gtk_tearoff_menu_item_get_type = c_gtk_tearoff_menu_item_get_type;

/** */
alias gtk_tearoff_menu_item_new = c_gtk_tearoff_menu_item_new;

// TextAttributes

/** */
alias gtk_text_attributes_get_type = c_gtk_text_attributes_get_type;

/** */
alias gtk_text_attributes_new = c_gtk_text_attributes_new;

/** */
alias gtk_text_attributes_copy = c_gtk_text_attributes_copy;

/** */
alias gtk_text_attributes_copy_values = c_gtk_text_attributes_copy_values;

/** */
alias gtk_text_attributes_ref = c_gtk_text_attributes_ref;

/** */
alias gtk_text_attributes_unref = c_gtk_text_attributes_unref;

// TextBuffer

/** */
alias gtk_text_buffer_get_type = c_gtk_text_buffer_get_type;

/** */
alias gtk_text_buffer_new = c_gtk_text_buffer_new;

/** */
alias gtk_text_buffer_add_mark = c_gtk_text_buffer_add_mark;

/** */
alias gtk_text_buffer_add_selection_clipboard = c_gtk_text_buffer_add_selection_clipboard;

/** */
alias gtk_text_buffer_apply_tag = c_gtk_text_buffer_apply_tag;

/** */
alias gtk_text_buffer_apply_tag_by_name = c_gtk_text_buffer_apply_tag_by_name;

/** */
alias gtk_text_buffer_backspace = c_gtk_text_buffer_backspace;

/** */
alias gtk_text_buffer_begin_user_action = c_gtk_text_buffer_begin_user_action;

/** */
alias gtk_text_buffer_copy_clipboard = c_gtk_text_buffer_copy_clipboard;

/** */
alias gtk_text_buffer_create_child_anchor = c_gtk_text_buffer_create_child_anchor;

/** */
alias gtk_text_buffer_create_mark = c_gtk_text_buffer_create_mark;

/** */
alias gtk_text_buffer_create_tag = c_gtk_text_buffer_create_tag;

/** */
alias gtk_text_buffer_cut_clipboard = c_gtk_text_buffer_cut_clipboard;

/** */
alias gtk_text_buffer_delete = c_gtk_text_buffer_delete;

/** */
alias gtk_text_buffer_delete_interactive = c_gtk_text_buffer_delete_interactive;

/** */
alias gtk_text_buffer_delete_mark = c_gtk_text_buffer_delete_mark;

/** */
alias gtk_text_buffer_delete_mark_by_name = c_gtk_text_buffer_delete_mark_by_name;

/** */
alias gtk_text_buffer_delete_selection = c_gtk_text_buffer_delete_selection;

/** */
alias gtk_text_buffer_deserialize = c_gtk_text_buffer_deserialize;

/** */
alias gtk_text_buffer_deserialize_get_can_create_tags = c_gtk_text_buffer_deserialize_get_can_create_tags;

/** */
alias gtk_text_buffer_deserialize_set_can_create_tags = c_gtk_text_buffer_deserialize_set_can_create_tags;

/** */
alias gtk_text_buffer_end_user_action = c_gtk_text_buffer_end_user_action;

/** */
alias gtk_text_buffer_get_bounds = c_gtk_text_buffer_get_bounds;

/** */
alias gtk_text_buffer_get_char_count = c_gtk_text_buffer_get_char_count;

/** */
alias gtk_text_buffer_get_copy_target_list = c_gtk_text_buffer_get_copy_target_list;

/** */
alias gtk_text_buffer_get_deserialize_formats = c_gtk_text_buffer_get_deserialize_formats;

/** */
alias gtk_text_buffer_get_end_iter = c_gtk_text_buffer_get_end_iter;

/** */
alias gtk_text_buffer_get_has_selection = c_gtk_text_buffer_get_has_selection;

/** */
alias gtk_text_buffer_get_insert = c_gtk_text_buffer_get_insert;

/** */
alias gtk_text_buffer_get_iter_at_child_anchor = c_gtk_text_buffer_get_iter_at_child_anchor;

/** */
alias gtk_text_buffer_get_iter_at_line = c_gtk_text_buffer_get_iter_at_line;

/** */
alias gtk_text_buffer_get_iter_at_line_index = c_gtk_text_buffer_get_iter_at_line_index;

/** */
alias gtk_text_buffer_get_iter_at_line_offset = c_gtk_text_buffer_get_iter_at_line_offset;

/** */
alias gtk_text_buffer_get_iter_at_mark = c_gtk_text_buffer_get_iter_at_mark;

/** */
alias gtk_text_buffer_get_iter_at_offset = c_gtk_text_buffer_get_iter_at_offset;

/** */
alias gtk_text_buffer_get_line_count = c_gtk_text_buffer_get_line_count;

/** */
alias gtk_text_buffer_get_mark = c_gtk_text_buffer_get_mark;

/** */
alias gtk_text_buffer_get_modified = c_gtk_text_buffer_get_modified;

/** */
alias gtk_text_buffer_get_paste_target_list = c_gtk_text_buffer_get_paste_target_list;

/** */
alias gtk_text_buffer_get_selection_bound = c_gtk_text_buffer_get_selection_bound;

/** */
alias gtk_text_buffer_get_selection_bounds = c_gtk_text_buffer_get_selection_bounds;

/** */
alias gtk_text_buffer_get_serialize_formats = c_gtk_text_buffer_get_serialize_formats;

/** */
alias gtk_text_buffer_get_slice = c_gtk_text_buffer_get_slice;

/** */
alias gtk_text_buffer_get_start_iter = c_gtk_text_buffer_get_start_iter;

/** */
alias gtk_text_buffer_get_tag_table = c_gtk_text_buffer_get_tag_table;

/** */
alias gtk_text_buffer_get_text = c_gtk_text_buffer_get_text;

/** */
alias gtk_text_buffer_insert = c_gtk_text_buffer_insert;

/** */
alias gtk_text_buffer_insert_at_cursor = c_gtk_text_buffer_insert_at_cursor;

/** */
alias gtk_text_buffer_insert_child_anchor = c_gtk_text_buffer_insert_child_anchor;

/** */
alias gtk_text_buffer_insert_interactive = c_gtk_text_buffer_insert_interactive;

/** */
alias gtk_text_buffer_insert_interactive_at_cursor = c_gtk_text_buffer_insert_interactive_at_cursor;

/** */
alias gtk_text_buffer_insert_markup = c_gtk_text_buffer_insert_markup;

/** */
alias gtk_text_buffer_insert_pixbuf = c_gtk_text_buffer_insert_pixbuf;

/** */
alias gtk_text_buffer_insert_range = c_gtk_text_buffer_insert_range;

/** */
alias gtk_text_buffer_insert_range_interactive = c_gtk_text_buffer_insert_range_interactive;

/** */
alias gtk_text_buffer_insert_with_tags = c_gtk_text_buffer_insert_with_tags;

/** */
alias gtk_text_buffer_insert_with_tags_by_name = c_gtk_text_buffer_insert_with_tags_by_name;

/** */
alias gtk_text_buffer_move_mark = c_gtk_text_buffer_move_mark;

/** */
alias gtk_text_buffer_move_mark_by_name = c_gtk_text_buffer_move_mark_by_name;

/** */
alias gtk_text_buffer_paste_clipboard = c_gtk_text_buffer_paste_clipboard;

/** */
alias gtk_text_buffer_place_cursor = c_gtk_text_buffer_place_cursor;

/** */
alias gtk_text_buffer_register_deserialize_format = c_gtk_text_buffer_register_deserialize_format;

/** */
alias gtk_text_buffer_register_deserialize_tagset = c_gtk_text_buffer_register_deserialize_tagset;

/** */
alias gtk_text_buffer_register_serialize_format = c_gtk_text_buffer_register_serialize_format;

/** */
alias gtk_text_buffer_register_serialize_tagset = c_gtk_text_buffer_register_serialize_tagset;

/** */
alias gtk_text_buffer_remove_all_tags = c_gtk_text_buffer_remove_all_tags;

/** */
alias gtk_text_buffer_remove_selection_clipboard = c_gtk_text_buffer_remove_selection_clipboard;

/** */
alias gtk_text_buffer_remove_tag = c_gtk_text_buffer_remove_tag;

/** */
alias gtk_text_buffer_remove_tag_by_name = c_gtk_text_buffer_remove_tag_by_name;

/** */
alias gtk_text_buffer_select_range = c_gtk_text_buffer_select_range;

/** */
alias gtk_text_buffer_serialize = c_gtk_text_buffer_serialize;

/** */
alias gtk_text_buffer_set_modified = c_gtk_text_buffer_set_modified;

/** */
alias gtk_text_buffer_set_text = c_gtk_text_buffer_set_text;

/** */
alias gtk_text_buffer_unregister_deserialize_format = c_gtk_text_buffer_unregister_deserialize_format;

/** */
alias gtk_text_buffer_unregister_serialize_format = c_gtk_text_buffer_unregister_serialize_format;

// TextCellAccessible

/** */
alias gtk_text_cell_accessible_get_type = c_gtk_text_cell_accessible_get_type;

// TextChildAnchor

/** */
alias gtk_text_child_anchor_get_type = c_gtk_text_child_anchor_get_type;

/** */
alias gtk_text_child_anchor_new = c_gtk_text_child_anchor_new;

/** */
alias gtk_text_child_anchor_get_deleted = c_gtk_text_child_anchor_get_deleted;

/** */
alias gtk_text_child_anchor_get_widgets = c_gtk_text_child_anchor_get_widgets;

// TextIter

/** */
alias gtk_text_iter_get_type = c_gtk_text_iter_get_type;

/** */
alias gtk_text_iter_assign = c_gtk_text_iter_assign;

/** */
alias gtk_text_iter_backward_char = c_gtk_text_iter_backward_char;

/** */
alias gtk_text_iter_backward_chars = c_gtk_text_iter_backward_chars;

/** */
alias gtk_text_iter_backward_cursor_position = c_gtk_text_iter_backward_cursor_position;

/** */
alias gtk_text_iter_backward_cursor_positions = c_gtk_text_iter_backward_cursor_positions;

/** */
alias gtk_text_iter_backward_find_char = c_gtk_text_iter_backward_find_char;

/** */
alias gtk_text_iter_backward_line = c_gtk_text_iter_backward_line;

/** */
alias gtk_text_iter_backward_lines = c_gtk_text_iter_backward_lines;

/** */
alias gtk_text_iter_backward_search = c_gtk_text_iter_backward_search;

/** */
alias gtk_text_iter_backward_sentence_start = c_gtk_text_iter_backward_sentence_start;

/** */
alias gtk_text_iter_backward_sentence_starts = c_gtk_text_iter_backward_sentence_starts;

/** */
alias gtk_text_iter_backward_to_tag_toggle = c_gtk_text_iter_backward_to_tag_toggle;

/** */
alias gtk_text_iter_backward_visible_cursor_position = c_gtk_text_iter_backward_visible_cursor_position;

/** */
alias gtk_text_iter_backward_visible_cursor_positions = c_gtk_text_iter_backward_visible_cursor_positions;

/** */
alias gtk_text_iter_backward_visible_line = c_gtk_text_iter_backward_visible_line;

/** */
alias gtk_text_iter_backward_visible_lines = c_gtk_text_iter_backward_visible_lines;

/** */
alias gtk_text_iter_backward_visible_word_start = c_gtk_text_iter_backward_visible_word_start;

/** */
alias gtk_text_iter_backward_visible_word_starts = c_gtk_text_iter_backward_visible_word_starts;

/** */
alias gtk_text_iter_backward_word_start = c_gtk_text_iter_backward_word_start;

/** */
alias gtk_text_iter_backward_word_starts = c_gtk_text_iter_backward_word_starts;

/** */
alias gtk_text_iter_begins_tag = c_gtk_text_iter_begins_tag;

/** */
alias gtk_text_iter_can_insert = c_gtk_text_iter_can_insert;

/** */
alias gtk_text_iter_compare = c_gtk_text_iter_compare;

/** */
alias gtk_text_iter_copy = c_gtk_text_iter_copy;

/** */
alias gtk_text_iter_editable = c_gtk_text_iter_editable;

/** */
alias gtk_text_iter_ends_line = c_gtk_text_iter_ends_line;

/** */
alias gtk_text_iter_ends_sentence = c_gtk_text_iter_ends_sentence;

/** */
alias gtk_text_iter_ends_tag = c_gtk_text_iter_ends_tag;

/** */
alias gtk_text_iter_ends_word = c_gtk_text_iter_ends_word;

/** */
alias gtk_text_iter_equal = c_gtk_text_iter_equal;

/** */
alias gtk_text_iter_forward_char = c_gtk_text_iter_forward_char;

/** */
alias gtk_text_iter_forward_chars = c_gtk_text_iter_forward_chars;

/** */
alias gtk_text_iter_forward_cursor_position = c_gtk_text_iter_forward_cursor_position;

/** */
alias gtk_text_iter_forward_cursor_positions = c_gtk_text_iter_forward_cursor_positions;

/** */
alias gtk_text_iter_forward_find_char = c_gtk_text_iter_forward_find_char;

/** */
alias gtk_text_iter_forward_line = c_gtk_text_iter_forward_line;

/** */
alias gtk_text_iter_forward_lines = c_gtk_text_iter_forward_lines;

/** */
alias gtk_text_iter_forward_search = c_gtk_text_iter_forward_search;

/** */
alias gtk_text_iter_forward_sentence_end = c_gtk_text_iter_forward_sentence_end;

/** */
alias gtk_text_iter_forward_sentence_ends = c_gtk_text_iter_forward_sentence_ends;

/** */
alias gtk_text_iter_forward_to_end = c_gtk_text_iter_forward_to_end;

/** */
alias gtk_text_iter_forward_to_line_end = c_gtk_text_iter_forward_to_line_end;

/** */
alias gtk_text_iter_forward_to_tag_toggle = c_gtk_text_iter_forward_to_tag_toggle;

/** */
alias gtk_text_iter_forward_visible_cursor_position = c_gtk_text_iter_forward_visible_cursor_position;

/** */
alias gtk_text_iter_forward_visible_cursor_positions = c_gtk_text_iter_forward_visible_cursor_positions;

/** */
alias gtk_text_iter_forward_visible_line = c_gtk_text_iter_forward_visible_line;

/** */
alias gtk_text_iter_forward_visible_lines = c_gtk_text_iter_forward_visible_lines;

/** */
alias gtk_text_iter_forward_visible_word_end = c_gtk_text_iter_forward_visible_word_end;

/** */
alias gtk_text_iter_forward_visible_word_ends = c_gtk_text_iter_forward_visible_word_ends;

/** */
alias gtk_text_iter_forward_word_end = c_gtk_text_iter_forward_word_end;

/** */
alias gtk_text_iter_forward_word_ends = c_gtk_text_iter_forward_word_ends;

/** */
alias gtk_text_iter_free = c_gtk_text_iter_free;

/** */
alias gtk_text_iter_get_attributes = c_gtk_text_iter_get_attributes;

/** */
alias gtk_text_iter_get_buffer = c_gtk_text_iter_get_buffer;

/** */
alias gtk_text_iter_get_bytes_in_line = c_gtk_text_iter_get_bytes_in_line;

/** */
alias gtk_text_iter_get_char = c_gtk_text_iter_get_char;

/** */
alias gtk_text_iter_get_chars_in_line = c_gtk_text_iter_get_chars_in_line;

/** */
alias gtk_text_iter_get_child_anchor = c_gtk_text_iter_get_child_anchor;

/** */
alias gtk_text_iter_get_language = c_gtk_text_iter_get_language;

/** */
alias gtk_text_iter_get_line = c_gtk_text_iter_get_line;

/** */
alias gtk_text_iter_get_line_index = c_gtk_text_iter_get_line_index;

/** */
alias gtk_text_iter_get_line_offset = c_gtk_text_iter_get_line_offset;

/** */
alias gtk_text_iter_get_marks = c_gtk_text_iter_get_marks;

/** */
alias gtk_text_iter_get_offset = c_gtk_text_iter_get_offset;

/** */
alias gtk_text_iter_get_pixbuf = c_gtk_text_iter_get_pixbuf;

/** */
alias gtk_text_iter_get_slice = c_gtk_text_iter_get_slice;

/** */
alias gtk_text_iter_get_tags = c_gtk_text_iter_get_tags;

/** */
alias gtk_text_iter_get_text = c_gtk_text_iter_get_text;

/** */
alias gtk_text_iter_get_toggled_tags = c_gtk_text_iter_get_toggled_tags;

/** */
alias gtk_text_iter_get_visible_line_index = c_gtk_text_iter_get_visible_line_index;

/** */
alias gtk_text_iter_get_visible_line_offset = c_gtk_text_iter_get_visible_line_offset;

/** */
alias gtk_text_iter_get_visible_slice = c_gtk_text_iter_get_visible_slice;

/** */
alias gtk_text_iter_get_visible_text = c_gtk_text_iter_get_visible_text;

/** */
alias gtk_text_iter_has_tag = c_gtk_text_iter_has_tag;

/** */
alias gtk_text_iter_in_range = c_gtk_text_iter_in_range;

/** */
alias gtk_text_iter_inside_sentence = c_gtk_text_iter_inside_sentence;

/** */
alias gtk_text_iter_inside_word = c_gtk_text_iter_inside_word;

/** */
alias gtk_text_iter_is_cursor_position = c_gtk_text_iter_is_cursor_position;

/** */
alias gtk_text_iter_is_end = c_gtk_text_iter_is_end;

/** */
alias gtk_text_iter_is_start = c_gtk_text_iter_is_start;

/** */
alias gtk_text_iter_order = c_gtk_text_iter_order;

/** */
alias gtk_text_iter_set_line = c_gtk_text_iter_set_line;

/** */
alias gtk_text_iter_set_line_index = c_gtk_text_iter_set_line_index;

/** */
alias gtk_text_iter_set_line_offset = c_gtk_text_iter_set_line_offset;

/** */
alias gtk_text_iter_set_offset = c_gtk_text_iter_set_offset;

/** */
alias gtk_text_iter_set_visible_line_index = c_gtk_text_iter_set_visible_line_index;

/** */
alias gtk_text_iter_set_visible_line_offset = c_gtk_text_iter_set_visible_line_offset;

/** */
alias gtk_text_iter_starts_line = c_gtk_text_iter_starts_line;

/** */
alias gtk_text_iter_starts_sentence = c_gtk_text_iter_starts_sentence;

/** */
alias gtk_text_iter_starts_tag = c_gtk_text_iter_starts_tag;

/** */
alias gtk_text_iter_starts_word = c_gtk_text_iter_starts_word;

/** */
alias gtk_text_iter_toggles_tag = c_gtk_text_iter_toggles_tag;

// TextMark

/** */
alias gtk_text_mark_get_type = c_gtk_text_mark_get_type;

/** */
alias gtk_text_mark_new = c_gtk_text_mark_new;

/** */
alias gtk_text_mark_get_buffer = c_gtk_text_mark_get_buffer;

/** */
alias gtk_text_mark_get_deleted = c_gtk_text_mark_get_deleted;

/** */
alias gtk_text_mark_get_left_gravity = c_gtk_text_mark_get_left_gravity;

/** */
alias gtk_text_mark_get_name = c_gtk_text_mark_get_name;

/** */
alias gtk_text_mark_get_visible = c_gtk_text_mark_get_visible;

/** */
alias gtk_text_mark_set_visible = c_gtk_text_mark_set_visible;

// TextTag

/** */
alias gtk_text_tag_get_type = c_gtk_text_tag_get_type;

/** */
alias gtk_text_tag_new = c_gtk_text_tag_new;

/** */
alias gtk_text_tag_changed = c_gtk_text_tag_changed;

/** */
alias gtk_text_tag_event = c_gtk_text_tag_event;

/** */
alias gtk_text_tag_get_priority = c_gtk_text_tag_get_priority;

/** */
alias gtk_text_tag_set_priority = c_gtk_text_tag_set_priority;

// TextTagTable

/** */
alias gtk_text_tag_table_get_type = c_gtk_text_tag_table_get_type;

/** */
alias gtk_text_tag_table_new = c_gtk_text_tag_table_new;

/** */
alias gtk_text_tag_table_add = c_gtk_text_tag_table_add;

/** */
alias gtk_text_tag_table_foreach = c_gtk_text_tag_table_foreach;

/** */
alias gtk_text_tag_table_get_size = c_gtk_text_tag_table_get_size;

/** */
alias gtk_text_tag_table_lookup = c_gtk_text_tag_table_lookup;

/** */
alias gtk_text_tag_table_remove = c_gtk_text_tag_table_remove;

// TextView

/** */
alias gtk_text_view_get_type = c_gtk_text_view_get_type;

/** */
alias gtk_text_view_new = c_gtk_text_view_new;

/** */
alias gtk_text_view_new_with_buffer = c_gtk_text_view_new_with_buffer;

/** */
alias gtk_text_view_add_child_at_anchor = c_gtk_text_view_add_child_at_anchor;

/** */
alias gtk_text_view_add_child_in_window = c_gtk_text_view_add_child_in_window;

/** */
alias gtk_text_view_backward_display_line = c_gtk_text_view_backward_display_line;

/** */
alias gtk_text_view_backward_display_line_start = c_gtk_text_view_backward_display_line_start;

/** */
alias gtk_text_view_buffer_to_window_coords = c_gtk_text_view_buffer_to_window_coords;

/** */
alias gtk_text_view_forward_display_line = c_gtk_text_view_forward_display_line;

/** */
alias gtk_text_view_forward_display_line_end = c_gtk_text_view_forward_display_line_end;

/** */
alias gtk_text_view_get_accepts_tab = c_gtk_text_view_get_accepts_tab;

/** */
alias gtk_text_view_get_border_window_size = c_gtk_text_view_get_border_window_size;

/** */
alias gtk_text_view_get_bottom_margin = c_gtk_text_view_get_bottom_margin;

/** */
alias gtk_text_view_get_buffer = c_gtk_text_view_get_buffer;

/** */
alias gtk_text_view_get_cursor_locations = c_gtk_text_view_get_cursor_locations;

/** */
alias gtk_text_view_get_cursor_visible = c_gtk_text_view_get_cursor_visible;

/** */
alias gtk_text_view_get_default_attributes = c_gtk_text_view_get_default_attributes;

/** */
alias gtk_text_view_get_editable = c_gtk_text_view_get_editable;

/** */
alias gtk_text_view_get_hadjustment = c_gtk_text_view_get_hadjustment;

/** */
alias gtk_text_view_get_indent = c_gtk_text_view_get_indent;

/** */
alias gtk_text_view_get_input_hints = c_gtk_text_view_get_input_hints;

/** */
alias gtk_text_view_get_input_purpose = c_gtk_text_view_get_input_purpose;

/** */
alias gtk_text_view_get_iter_at_location = c_gtk_text_view_get_iter_at_location;

/** */
alias gtk_text_view_get_iter_at_position = c_gtk_text_view_get_iter_at_position;

/** */
alias gtk_text_view_get_iter_location = c_gtk_text_view_get_iter_location;

/** */
alias gtk_text_view_get_justification = c_gtk_text_view_get_justification;

/** */
alias gtk_text_view_get_left_margin = c_gtk_text_view_get_left_margin;

/** */
alias gtk_text_view_get_line_at_y = c_gtk_text_view_get_line_at_y;

/** */
alias gtk_text_view_get_line_yrange = c_gtk_text_view_get_line_yrange;

/** */
alias gtk_text_view_get_monospace = c_gtk_text_view_get_monospace;

/** */
alias gtk_text_view_get_overwrite = c_gtk_text_view_get_overwrite;

/** */
alias gtk_text_view_get_pixels_above_lines = c_gtk_text_view_get_pixels_above_lines;

/** */
alias gtk_text_view_get_pixels_below_lines = c_gtk_text_view_get_pixels_below_lines;

/** */
alias gtk_text_view_get_pixels_inside_wrap = c_gtk_text_view_get_pixels_inside_wrap;

/** */
alias gtk_text_view_get_right_margin = c_gtk_text_view_get_right_margin;

/** */
alias gtk_text_view_get_tabs = c_gtk_text_view_get_tabs;

/** */
alias gtk_text_view_get_top_margin = c_gtk_text_view_get_top_margin;

/** */
alias gtk_text_view_get_vadjustment = c_gtk_text_view_get_vadjustment;

/** */
alias gtk_text_view_get_visible_rect = c_gtk_text_view_get_visible_rect;

/** */
alias gtk_text_view_get_window = c_gtk_text_view_get_window;

/** */
alias gtk_text_view_get_window_type = c_gtk_text_view_get_window_type;

/** */
alias gtk_text_view_get_wrap_mode = c_gtk_text_view_get_wrap_mode;

/** */
alias gtk_text_view_im_context_filter_keypress = c_gtk_text_view_im_context_filter_keypress;

/** */
alias gtk_text_view_move_child = c_gtk_text_view_move_child;

/** */
alias gtk_text_view_move_mark_onscreen = c_gtk_text_view_move_mark_onscreen;

/** */
alias gtk_text_view_move_visually = c_gtk_text_view_move_visually;

/** */
alias gtk_text_view_place_cursor_onscreen = c_gtk_text_view_place_cursor_onscreen;

/** */
alias gtk_text_view_reset_cursor_blink = c_gtk_text_view_reset_cursor_blink;

/** */
alias gtk_text_view_reset_im_context = c_gtk_text_view_reset_im_context;

/** */
alias gtk_text_view_scroll_mark_onscreen = c_gtk_text_view_scroll_mark_onscreen;

/** */
alias gtk_text_view_scroll_to_iter = c_gtk_text_view_scroll_to_iter;

/** */
alias gtk_text_view_scroll_to_mark = c_gtk_text_view_scroll_to_mark;

/** */
alias gtk_text_view_set_accepts_tab = c_gtk_text_view_set_accepts_tab;

/** */
alias gtk_text_view_set_border_window_size = c_gtk_text_view_set_border_window_size;

/** */
alias gtk_text_view_set_bottom_margin = c_gtk_text_view_set_bottom_margin;

/** */
alias gtk_text_view_set_buffer = c_gtk_text_view_set_buffer;

/** */
alias gtk_text_view_set_cursor_visible = c_gtk_text_view_set_cursor_visible;

/** */
alias gtk_text_view_set_editable = c_gtk_text_view_set_editable;

/** */
alias gtk_text_view_set_indent = c_gtk_text_view_set_indent;

/** */
alias gtk_text_view_set_input_hints = c_gtk_text_view_set_input_hints;

/** */
alias gtk_text_view_set_input_purpose = c_gtk_text_view_set_input_purpose;

/** */
alias gtk_text_view_set_justification = c_gtk_text_view_set_justification;

/** */
alias gtk_text_view_set_left_margin = c_gtk_text_view_set_left_margin;

/** */
alias gtk_text_view_set_monospace = c_gtk_text_view_set_monospace;

/** */
alias gtk_text_view_set_overwrite = c_gtk_text_view_set_overwrite;

/** */
alias gtk_text_view_set_pixels_above_lines = c_gtk_text_view_set_pixels_above_lines;

/** */
alias gtk_text_view_set_pixels_below_lines = c_gtk_text_view_set_pixels_below_lines;

/** */
alias gtk_text_view_set_pixels_inside_wrap = c_gtk_text_view_set_pixels_inside_wrap;

/** */
alias gtk_text_view_set_right_margin = c_gtk_text_view_set_right_margin;

/** */
alias gtk_text_view_set_tabs = c_gtk_text_view_set_tabs;

/** */
alias gtk_text_view_set_top_margin = c_gtk_text_view_set_top_margin;

/** */
alias gtk_text_view_set_wrap_mode = c_gtk_text_view_set_wrap_mode;

/** */
alias gtk_text_view_starts_display_line = c_gtk_text_view_starts_display_line;

/** */
alias gtk_text_view_window_to_buffer_coords = c_gtk_text_view_window_to_buffer_coords;

// TextViewAccessible

/** */
alias gtk_text_view_accessible_get_type = c_gtk_text_view_accessible_get_type;

// ThemingEngine

/** */
alias gtk_theming_engine_get_type = c_gtk_theming_engine_get_type;

/** */
alias gtk_theming_engine_load = c_gtk_theming_engine_load;

/** */
alias gtk_theming_engine_register_property = c_gtk_theming_engine_register_property;

/** */
alias gtk_theming_engine_get = c_gtk_theming_engine_get;

/** */
alias gtk_theming_engine_get_background_color = c_gtk_theming_engine_get_background_color;

/** */
alias gtk_theming_engine_get_border = c_gtk_theming_engine_get_border;

/** */
alias gtk_theming_engine_get_border_color = c_gtk_theming_engine_get_border_color;

/** */
alias gtk_theming_engine_get_color = c_gtk_theming_engine_get_color;

/** */
alias gtk_theming_engine_get_direction = c_gtk_theming_engine_get_direction;

/** */
alias gtk_theming_engine_get_font = c_gtk_theming_engine_get_font;

/** */
alias gtk_theming_engine_get_junction_sides = c_gtk_theming_engine_get_junction_sides;

/** */
alias gtk_theming_engine_get_margin = c_gtk_theming_engine_get_margin;

/** */
alias gtk_theming_engine_get_padding = c_gtk_theming_engine_get_padding;

/** */
alias gtk_theming_engine_get_path = c_gtk_theming_engine_get_path;

/** */
alias gtk_theming_engine_get_property = c_gtk_theming_engine_get_property;

/** */
alias gtk_theming_engine_get_screen = c_gtk_theming_engine_get_screen;

/** */
alias gtk_theming_engine_get_state = c_gtk_theming_engine_get_state;

/** */
alias gtk_theming_engine_get_style = c_gtk_theming_engine_get_style;

/** */
alias gtk_theming_engine_get_style_property = c_gtk_theming_engine_get_style_property;

/** */
alias gtk_theming_engine_get_style_valist = c_gtk_theming_engine_get_style_valist;

/** */
alias gtk_theming_engine_get_valist = c_gtk_theming_engine_get_valist;

/** */
alias gtk_theming_engine_has_class = c_gtk_theming_engine_has_class;

/** */
alias gtk_theming_engine_has_region = c_gtk_theming_engine_has_region;

/** */
alias gtk_theming_engine_lookup_color = c_gtk_theming_engine_lookup_color;

/** */
alias gtk_theming_engine_state_is_running = c_gtk_theming_engine_state_is_running;

// ToggleAction

/** */
alias gtk_toggle_action_get_type = c_gtk_toggle_action_get_type;

/** */
alias gtk_toggle_action_new = c_gtk_toggle_action_new;

/** */
alias gtk_toggle_action_get_active = c_gtk_toggle_action_get_active;

/** */
alias gtk_toggle_action_get_draw_as_radio = c_gtk_toggle_action_get_draw_as_radio;

/** */
alias gtk_toggle_action_set_active = c_gtk_toggle_action_set_active;

/** */
alias gtk_toggle_action_set_draw_as_radio = c_gtk_toggle_action_set_draw_as_radio;

/** */
alias gtk_toggle_action_toggled = c_gtk_toggle_action_toggled;

// ToggleButton

/** */
alias gtk_toggle_button_get_type = c_gtk_toggle_button_get_type;

/** */
alias gtk_toggle_button_new = c_gtk_toggle_button_new;

/** */
alias gtk_toggle_button_new_with_label = c_gtk_toggle_button_new_with_label;

/** */
alias gtk_toggle_button_new_with_mnemonic = c_gtk_toggle_button_new_with_mnemonic;

/** */
alias gtk_toggle_button_get_active = c_gtk_toggle_button_get_active;

/** */
alias gtk_toggle_button_get_inconsistent = c_gtk_toggle_button_get_inconsistent;

/** */
alias gtk_toggle_button_get_mode = c_gtk_toggle_button_get_mode;

/** */
alias gtk_toggle_button_set_active = c_gtk_toggle_button_set_active;

/** */
alias gtk_toggle_button_set_inconsistent = c_gtk_toggle_button_set_inconsistent;

/** */
alias gtk_toggle_button_set_mode = c_gtk_toggle_button_set_mode;

/** */
alias gtk_toggle_button_toggled = c_gtk_toggle_button_toggled;

// ToggleButtonAccessible

/** */
alias gtk_toggle_button_accessible_get_type = c_gtk_toggle_button_accessible_get_type;

// ToggleToolButton

/** */
alias gtk_toggle_tool_button_get_type = c_gtk_toggle_tool_button_get_type;

/** */
alias gtk_toggle_tool_button_new = c_gtk_toggle_tool_button_new;

/** */
alias gtk_toggle_tool_button_new_from_stock = c_gtk_toggle_tool_button_new_from_stock;

/** */
alias gtk_toggle_tool_button_get_active = c_gtk_toggle_tool_button_get_active;

/** */
alias gtk_toggle_tool_button_set_active = c_gtk_toggle_tool_button_set_active;

// ToolButton

/** */
alias gtk_tool_button_get_type = c_gtk_tool_button_get_type;

/** */
alias gtk_tool_button_new = c_gtk_tool_button_new;

/** */
alias gtk_tool_button_new_from_stock = c_gtk_tool_button_new_from_stock;

/** */
alias gtk_tool_button_get_icon_name = c_gtk_tool_button_get_icon_name;

/** */
alias gtk_tool_button_get_icon_widget = c_gtk_tool_button_get_icon_widget;

/** */
alias gtk_tool_button_get_label = c_gtk_tool_button_get_label;

/** */
alias gtk_tool_button_get_label_widget = c_gtk_tool_button_get_label_widget;

/** */
alias gtk_tool_button_get_stock_id = c_gtk_tool_button_get_stock_id;

/** */
alias gtk_tool_button_get_use_underline = c_gtk_tool_button_get_use_underline;

/** */
alias gtk_tool_button_set_icon_name = c_gtk_tool_button_set_icon_name;

/** */
alias gtk_tool_button_set_icon_widget = c_gtk_tool_button_set_icon_widget;

/** */
alias gtk_tool_button_set_label = c_gtk_tool_button_set_label;

/** */
alias gtk_tool_button_set_label_widget = c_gtk_tool_button_set_label_widget;

/** */
alias gtk_tool_button_set_stock_id = c_gtk_tool_button_set_stock_id;

/** */
alias gtk_tool_button_set_use_underline = c_gtk_tool_button_set_use_underline;

// ToolItem

/** */
alias gtk_tool_item_get_type = c_gtk_tool_item_get_type;

/** */
alias gtk_tool_item_new = c_gtk_tool_item_new;

/** */
alias gtk_tool_item_get_ellipsize_mode = c_gtk_tool_item_get_ellipsize_mode;

/** */
alias gtk_tool_item_get_expand = c_gtk_tool_item_get_expand;

/** */
alias gtk_tool_item_get_homogeneous = c_gtk_tool_item_get_homogeneous;

/** */
alias gtk_tool_item_get_icon_size = c_gtk_tool_item_get_icon_size;

/** */
alias gtk_tool_item_get_is_important = c_gtk_tool_item_get_is_important;

/** */
alias gtk_tool_item_get_orientation = c_gtk_tool_item_get_orientation;

/** */
alias gtk_tool_item_get_proxy_menu_item = c_gtk_tool_item_get_proxy_menu_item;

/** */
alias gtk_tool_item_get_relief_style = c_gtk_tool_item_get_relief_style;

/** */
alias gtk_tool_item_get_text_alignment = c_gtk_tool_item_get_text_alignment;

/** */
alias gtk_tool_item_get_text_orientation = c_gtk_tool_item_get_text_orientation;

/** */
alias gtk_tool_item_get_text_size_group = c_gtk_tool_item_get_text_size_group;

/** */
alias gtk_tool_item_get_toolbar_style = c_gtk_tool_item_get_toolbar_style;

/** */
alias gtk_tool_item_get_use_drag_window = c_gtk_tool_item_get_use_drag_window;

/** */
alias gtk_tool_item_get_visible_horizontal = c_gtk_tool_item_get_visible_horizontal;

/** */
alias gtk_tool_item_get_visible_vertical = c_gtk_tool_item_get_visible_vertical;

/** */
alias gtk_tool_item_rebuild_menu = c_gtk_tool_item_rebuild_menu;

/** */
alias gtk_tool_item_retrieve_proxy_menu_item = c_gtk_tool_item_retrieve_proxy_menu_item;

/** */
alias gtk_tool_item_set_expand = c_gtk_tool_item_set_expand;

/** */
alias gtk_tool_item_set_homogeneous = c_gtk_tool_item_set_homogeneous;

/** */
alias gtk_tool_item_set_is_important = c_gtk_tool_item_set_is_important;

/** */
alias gtk_tool_item_set_proxy_menu_item = c_gtk_tool_item_set_proxy_menu_item;

/** */
alias gtk_tool_item_set_tooltip_markup = c_gtk_tool_item_set_tooltip_markup;

/** */
alias gtk_tool_item_set_tooltip_text = c_gtk_tool_item_set_tooltip_text;

/** */
alias gtk_tool_item_set_use_drag_window = c_gtk_tool_item_set_use_drag_window;

/** */
alias gtk_tool_item_set_visible_horizontal = c_gtk_tool_item_set_visible_horizontal;

/** */
alias gtk_tool_item_set_visible_vertical = c_gtk_tool_item_set_visible_vertical;

/** */
alias gtk_tool_item_toolbar_reconfigured = c_gtk_tool_item_toolbar_reconfigured;

// ToolItemGroup

/** */
alias gtk_tool_item_group_get_type = c_gtk_tool_item_group_get_type;

/** */
alias gtk_tool_item_group_new = c_gtk_tool_item_group_new;

/** */
alias gtk_tool_item_group_get_collapsed = c_gtk_tool_item_group_get_collapsed;

/** */
alias gtk_tool_item_group_get_drop_item = c_gtk_tool_item_group_get_drop_item;

/** */
alias gtk_tool_item_group_get_ellipsize = c_gtk_tool_item_group_get_ellipsize;

/** */
alias gtk_tool_item_group_get_header_relief = c_gtk_tool_item_group_get_header_relief;

/** */
alias gtk_tool_item_group_get_item_position = c_gtk_tool_item_group_get_item_position;

/** */
alias gtk_tool_item_group_get_label = c_gtk_tool_item_group_get_label;

/** */
alias gtk_tool_item_group_get_label_widget = c_gtk_tool_item_group_get_label_widget;

/** */
alias gtk_tool_item_group_get_n_items = c_gtk_tool_item_group_get_n_items;

/** */
alias gtk_tool_item_group_get_nth_item = c_gtk_tool_item_group_get_nth_item;

/** */
alias gtk_tool_item_group_insert = c_gtk_tool_item_group_insert;

/** */
alias gtk_tool_item_group_set_collapsed = c_gtk_tool_item_group_set_collapsed;

/** */
alias gtk_tool_item_group_set_ellipsize = c_gtk_tool_item_group_set_ellipsize;

/** */
alias gtk_tool_item_group_set_header_relief = c_gtk_tool_item_group_set_header_relief;

/** */
alias gtk_tool_item_group_set_item_position = c_gtk_tool_item_group_set_item_position;

/** */
alias gtk_tool_item_group_set_label = c_gtk_tool_item_group_set_label;

/** */
alias gtk_tool_item_group_set_label_widget = c_gtk_tool_item_group_set_label_widget;

// ToolPalette

/** */
alias gtk_tool_palette_get_type = c_gtk_tool_palette_get_type;

/** */
alias gtk_tool_palette_new = c_gtk_tool_palette_new;

/** */
alias gtk_tool_palette_get_drag_target_group = c_gtk_tool_palette_get_drag_target_group;

/** */
alias gtk_tool_palette_get_drag_target_item = c_gtk_tool_palette_get_drag_target_item;

/** */
alias gtk_tool_palette_add_drag_dest = c_gtk_tool_palette_add_drag_dest;

/** */
alias gtk_tool_palette_get_drag_item = c_gtk_tool_palette_get_drag_item;

/** */
alias gtk_tool_palette_get_drop_group = c_gtk_tool_palette_get_drop_group;

/** */
alias gtk_tool_palette_get_drop_item = c_gtk_tool_palette_get_drop_item;

/** */
alias gtk_tool_palette_get_exclusive = c_gtk_tool_palette_get_exclusive;

/** */
alias gtk_tool_palette_get_expand = c_gtk_tool_palette_get_expand;

/** */
alias gtk_tool_palette_get_group_position = c_gtk_tool_palette_get_group_position;

/** */
alias gtk_tool_palette_get_hadjustment = c_gtk_tool_palette_get_hadjustment;

/** */
alias gtk_tool_palette_get_icon_size = c_gtk_tool_palette_get_icon_size;

/** */
alias gtk_tool_palette_get_style = c_gtk_tool_palette_get_style;

/** */
alias gtk_tool_palette_get_vadjustment = c_gtk_tool_palette_get_vadjustment;

/** */
alias gtk_tool_palette_set_drag_source = c_gtk_tool_palette_set_drag_source;

/** */
alias gtk_tool_palette_set_exclusive = c_gtk_tool_palette_set_exclusive;

/** */
alias gtk_tool_palette_set_expand = c_gtk_tool_palette_set_expand;

/** */
alias gtk_tool_palette_set_group_position = c_gtk_tool_palette_set_group_position;

/** */
alias gtk_tool_palette_set_icon_size = c_gtk_tool_palette_set_icon_size;

/** */
alias gtk_tool_palette_set_style = c_gtk_tool_palette_set_style;

/** */
alias gtk_tool_palette_unset_icon_size = c_gtk_tool_palette_unset_icon_size;

/** */
alias gtk_tool_palette_unset_style = c_gtk_tool_palette_unset_style;

// ToolShell

/** */
alias gtk_tool_shell_get_type = c_gtk_tool_shell_get_type;

/** */
alias gtk_tool_shell_get_ellipsize_mode = c_gtk_tool_shell_get_ellipsize_mode;

/** */
alias gtk_tool_shell_get_icon_size = c_gtk_tool_shell_get_icon_size;

/** */
alias gtk_tool_shell_get_orientation = c_gtk_tool_shell_get_orientation;

/** */
alias gtk_tool_shell_get_relief_style = c_gtk_tool_shell_get_relief_style;

/** */
alias gtk_tool_shell_get_style = c_gtk_tool_shell_get_style;

/** */
alias gtk_tool_shell_get_text_alignment = c_gtk_tool_shell_get_text_alignment;

/** */
alias gtk_tool_shell_get_text_orientation = c_gtk_tool_shell_get_text_orientation;

/** */
alias gtk_tool_shell_get_text_size_group = c_gtk_tool_shell_get_text_size_group;

/** */
alias gtk_tool_shell_rebuild_menu = c_gtk_tool_shell_rebuild_menu;

// Toolbar

/** */
alias gtk_toolbar_get_type = c_gtk_toolbar_get_type;

/** */
alias gtk_toolbar_new = c_gtk_toolbar_new;

/** */
alias gtk_toolbar_get_drop_index = c_gtk_toolbar_get_drop_index;

/** */
alias gtk_toolbar_get_icon_size = c_gtk_toolbar_get_icon_size;

/** */
alias gtk_toolbar_get_item_index = c_gtk_toolbar_get_item_index;

/** */
alias gtk_toolbar_get_n_items = c_gtk_toolbar_get_n_items;

/** */
alias gtk_toolbar_get_nth_item = c_gtk_toolbar_get_nth_item;

/** */
alias gtk_toolbar_get_relief_style = c_gtk_toolbar_get_relief_style;

/** */
alias gtk_toolbar_get_show_arrow = c_gtk_toolbar_get_show_arrow;

/** */
alias gtk_toolbar_get_style = c_gtk_toolbar_get_style;

/** */
alias gtk_toolbar_insert = c_gtk_toolbar_insert;

/** */
alias gtk_toolbar_set_drop_highlight_item = c_gtk_toolbar_set_drop_highlight_item;

/** */
alias gtk_toolbar_set_icon_size = c_gtk_toolbar_set_icon_size;

/** */
alias gtk_toolbar_set_show_arrow = c_gtk_toolbar_set_show_arrow;

/** */
alias gtk_toolbar_set_style = c_gtk_toolbar_set_style;

/** */
alias gtk_toolbar_unset_icon_size = c_gtk_toolbar_unset_icon_size;

/** */
alias gtk_toolbar_unset_style = c_gtk_toolbar_unset_style;

// Tooltip

/** */
alias gtk_tooltip_get_type = c_gtk_tooltip_get_type;

/** */
alias gtk_tooltip_trigger_tooltip_query = c_gtk_tooltip_trigger_tooltip_query;

/** */
alias gtk_tooltip_set_custom = c_gtk_tooltip_set_custom;

/** */
alias gtk_tooltip_set_icon = c_gtk_tooltip_set_icon;

/** */
alias gtk_tooltip_set_icon_from_gicon = c_gtk_tooltip_set_icon_from_gicon;

/** */
alias gtk_tooltip_set_icon_from_icon_name = c_gtk_tooltip_set_icon_from_icon_name;

/** */
alias gtk_tooltip_set_icon_from_stock = c_gtk_tooltip_set_icon_from_stock;

/** */
alias gtk_tooltip_set_markup = c_gtk_tooltip_set_markup;

/** */
alias gtk_tooltip_set_text = c_gtk_tooltip_set_text;

/** */
alias gtk_tooltip_set_tip_area = c_gtk_tooltip_set_tip_area;

// ToplevelAccessible

/** */
alias gtk_toplevel_accessible_get_type = c_gtk_toplevel_accessible_get_type;

/** */
alias gtk_toplevel_accessible_get_children = c_gtk_toplevel_accessible_get_children;

// TreeDragDest

/** */
alias gtk_tree_drag_dest_get_type = c_gtk_tree_drag_dest_get_type;

/** */
alias gtk_tree_drag_dest_drag_data_received = c_gtk_tree_drag_dest_drag_data_received;

/** */
alias gtk_tree_drag_dest_row_drop_possible = c_gtk_tree_drag_dest_row_drop_possible;

// TreeDragSource

/** */
alias gtk_tree_drag_source_get_type = c_gtk_tree_drag_source_get_type;

/** */
alias gtk_tree_drag_source_drag_data_delete = c_gtk_tree_drag_source_drag_data_delete;

/** */
alias gtk_tree_drag_source_drag_data_get = c_gtk_tree_drag_source_drag_data_get;

/** */
alias gtk_tree_drag_source_row_draggable = c_gtk_tree_drag_source_row_draggable;

// TreeIter

/** */
alias gtk_tree_iter_get_type = c_gtk_tree_iter_get_type;

/** */
alias gtk_tree_iter_copy = c_gtk_tree_iter_copy;

/** */
alias gtk_tree_iter_free = c_gtk_tree_iter_free;

// TreeModel

/** */
alias gtk_tree_model_get_type = c_gtk_tree_model_get_type;

/** */
alias gtk_tree_model_filter_new = c_gtk_tree_model_filter_new;

/** */
alias gtk_tree_model_foreach = c_gtk_tree_model_foreach;

/** */
alias gtk_tree_model_get = c_gtk_tree_model_get;

/** */
alias gtk_tree_model_get_column_type = c_gtk_tree_model_get_column_type;

/** */
alias gtk_tree_model_get_flags = c_gtk_tree_model_get_flags;

/** */
alias gtk_tree_model_get_iter = c_gtk_tree_model_get_iter;

/** */
alias gtk_tree_model_get_iter_first = c_gtk_tree_model_get_iter_first;

/** */
alias gtk_tree_model_get_iter_from_string = c_gtk_tree_model_get_iter_from_string;

/** */
alias gtk_tree_model_get_n_columns = c_gtk_tree_model_get_n_columns;

/** */
alias gtk_tree_model_get_path = c_gtk_tree_model_get_path;

/** */
alias gtk_tree_model_get_string_from_iter = c_gtk_tree_model_get_string_from_iter;

/** */
alias gtk_tree_model_get_valist = c_gtk_tree_model_get_valist;

/** */
alias gtk_tree_model_get_value = c_gtk_tree_model_get_value;

/** */
alias gtk_tree_model_iter_children = c_gtk_tree_model_iter_children;

/** */
alias gtk_tree_model_iter_has_child = c_gtk_tree_model_iter_has_child;

/** */
alias gtk_tree_model_iter_n_children = c_gtk_tree_model_iter_n_children;

/** */
alias gtk_tree_model_iter_next = c_gtk_tree_model_iter_next;

/** */
alias gtk_tree_model_iter_nth_child = c_gtk_tree_model_iter_nth_child;

/** */
alias gtk_tree_model_iter_parent = c_gtk_tree_model_iter_parent;

/** */
alias gtk_tree_model_iter_previous = c_gtk_tree_model_iter_previous;

/** */
alias gtk_tree_model_ref_node = c_gtk_tree_model_ref_node;

/** */
alias gtk_tree_model_row_changed = c_gtk_tree_model_row_changed;

/** */
alias gtk_tree_model_row_deleted = c_gtk_tree_model_row_deleted;

/** */
alias gtk_tree_model_row_has_child_toggled = c_gtk_tree_model_row_has_child_toggled;

/** */
alias gtk_tree_model_row_inserted = c_gtk_tree_model_row_inserted;

/** */
alias gtk_tree_model_rows_reordered = c_gtk_tree_model_rows_reordered;

/** */
alias gtk_tree_model_rows_reordered_with_length = c_gtk_tree_model_rows_reordered_with_length;

/** */
alias gtk_tree_model_unref_node = c_gtk_tree_model_unref_node;

// TreeModelFilter

/** */
alias gtk_tree_model_filter_get_type = c_gtk_tree_model_filter_get_type;

/** */
alias gtk_tree_model_filter_clear_cache = c_gtk_tree_model_filter_clear_cache;

/** */
alias gtk_tree_model_filter_convert_child_iter_to_iter = c_gtk_tree_model_filter_convert_child_iter_to_iter;

/** */
alias gtk_tree_model_filter_convert_child_path_to_path = c_gtk_tree_model_filter_convert_child_path_to_path;

/** */
alias gtk_tree_model_filter_convert_iter_to_child_iter = c_gtk_tree_model_filter_convert_iter_to_child_iter;

/** */
alias gtk_tree_model_filter_convert_path_to_child_path = c_gtk_tree_model_filter_convert_path_to_child_path;

/** */
alias gtk_tree_model_filter_get_model = c_gtk_tree_model_filter_get_model;

/** */
alias gtk_tree_model_filter_refilter = c_gtk_tree_model_filter_refilter;

/** */
alias gtk_tree_model_filter_set_modify_func = c_gtk_tree_model_filter_set_modify_func;

/** */
alias gtk_tree_model_filter_set_visible_column = c_gtk_tree_model_filter_set_visible_column;

/** */
alias gtk_tree_model_filter_set_visible_func = c_gtk_tree_model_filter_set_visible_func;

// TreeModelSort

/** */
alias gtk_tree_model_sort_get_type = c_gtk_tree_model_sort_get_type;

/** */
alias gtk_tree_model_sort_new_with_model = c_gtk_tree_model_sort_new_with_model;

/** */
alias gtk_tree_model_sort_clear_cache = c_gtk_tree_model_sort_clear_cache;

/** */
alias gtk_tree_model_sort_convert_child_iter_to_iter = c_gtk_tree_model_sort_convert_child_iter_to_iter;

/** */
alias gtk_tree_model_sort_convert_child_path_to_path = c_gtk_tree_model_sort_convert_child_path_to_path;

/** */
alias gtk_tree_model_sort_convert_iter_to_child_iter = c_gtk_tree_model_sort_convert_iter_to_child_iter;

/** */
alias gtk_tree_model_sort_convert_path_to_child_path = c_gtk_tree_model_sort_convert_path_to_child_path;

/** */
alias gtk_tree_model_sort_get_model = c_gtk_tree_model_sort_get_model;

/** */
alias gtk_tree_model_sort_iter_is_valid = c_gtk_tree_model_sort_iter_is_valid;

/** */
alias gtk_tree_model_sort_reset_default_sort_func = c_gtk_tree_model_sort_reset_default_sort_func;

// TreePath

/** */
alias gtk_tree_path_get_type = c_gtk_tree_path_get_type;

/** */
alias gtk_tree_path_new = c_gtk_tree_path_new;

/** */
alias gtk_tree_path_new_first = c_gtk_tree_path_new_first;

/** */
alias gtk_tree_path_new_from_indices = c_gtk_tree_path_new_from_indices;

/** */
alias gtk_tree_path_new_from_indicesv = c_gtk_tree_path_new_from_indicesv;

/** */
alias gtk_tree_path_new_from_string = c_gtk_tree_path_new_from_string;

/** */
alias gtk_tree_path_append_index = c_gtk_tree_path_append_index;

/** */
alias gtk_tree_path_compare = c_gtk_tree_path_compare;

/** */
alias gtk_tree_path_copy = c_gtk_tree_path_copy;

/** */
alias gtk_tree_path_down = c_gtk_tree_path_down;

/** */
alias gtk_tree_path_free = c_gtk_tree_path_free;

/** */
alias gtk_tree_path_get_depth = c_gtk_tree_path_get_depth;

/** */
alias gtk_tree_path_get_indices = c_gtk_tree_path_get_indices;

/** */
alias gtk_tree_path_get_indices_with_depth = c_gtk_tree_path_get_indices_with_depth;

/** */
alias gtk_tree_path_is_ancestor = c_gtk_tree_path_is_ancestor;

/** */
alias gtk_tree_path_is_descendant = c_gtk_tree_path_is_descendant;

/** */
alias gtk_tree_path_next = c_gtk_tree_path_next;

/** */
alias gtk_tree_path_prepend_index = c_gtk_tree_path_prepend_index;

/** */
alias gtk_tree_path_prev = c_gtk_tree_path_prev;

/** */
alias gtk_tree_path_to_string = c_gtk_tree_path_to_string;

/** */
alias gtk_tree_path_up = c_gtk_tree_path_up;

// TreeRowReference

/** */
alias gtk_tree_row_reference_get_type = c_gtk_tree_row_reference_get_type;

/** */
alias gtk_tree_row_reference_new = c_gtk_tree_row_reference_new;

/** */
alias gtk_tree_row_reference_new_proxy = c_gtk_tree_row_reference_new_proxy;

/** */
alias gtk_tree_row_reference_copy = c_gtk_tree_row_reference_copy;

/** */
alias gtk_tree_row_reference_free = c_gtk_tree_row_reference_free;

/** */
alias gtk_tree_row_reference_get_model = c_gtk_tree_row_reference_get_model;

/** */
alias gtk_tree_row_reference_get_path = c_gtk_tree_row_reference_get_path;

/** */
alias gtk_tree_row_reference_valid = c_gtk_tree_row_reference_valid;

/** */
alias gtk_tree_row_reference_deleted = c_gtk_tree_row_reference_deleted;

/** */
alias gtk_tree_row_reference_inserted = c_gtk_tree_row_reference_inserted;

/** */
alias gtk_tree_row_reference_reordered = c_gtk_tree_row_reference_reordered;

// TreeSelection

/** */
alias gtk_tree_selection_get_type = c_gtk_tree_selection_get_type;

/** */
alias gtk_tree_selection_count_selected_rows = c_gtk_tree_selection_count_selected_rows;

/** */
alias gtk_tree_selection_get_mode = c_gtk_tree_selection_get_mode;

/** */
alias gtk_tree_selection_get_select_function = c_gtk_tree_selection_get_select_function;

/** */
alias gtk_tree_selection_get_selected = c_gtk_tree_selection_get_selected;

/** */
alias gtk_tree_selection_get_selected_rows = c_gtk_tree_selection_get_selected_rows;

/** */
alias gtk_tree_selection_get_tree_view = c_gtk_tree_selection_get_tree_view;

/** */
alias gtk_tree_selection_get_user_data = c_gtk_tree_selection_get_user_data;

/** */
alias gtk_tree_selection_iter_is_selected = c_gtk_tree_selection_iter_is_selected;

/** */
alias gtk_tree_selection_path_is_selected = c_gtk_tree_selection_path_is_selected;

/** */
alias gtk_tree_selection_select_all = c_gtk_tree_selection_select_all;

/** */
alias gtk_tree_selection_select_iter = c_gtk_tree_selection_select_iter;

/** */
alias gtk_tree_selection_select_path = c_gtk_tree_selection_select_path;

/** */
alias gtk_tree_selection_select_range = c_gtk_tree_selection_select_range;

/** */
alias gtk_tree_selection_selected_foreach = c_gtk_tree_selection_selected_foreach;

/** */
alias gtk_tree_selection_set_mode = c_gtk_tree_selection_set_mode;

/** */
alias gtk_tree_selection_set_select_function = c_gtk_tree_selection_set_select_function;

/** */
alias gtk_tree_selection_unselect_all = c_gtk_tree_selection_unselect_all;

/** */
alias gtk_tree_selection_unselect_iter = c_gtk_tree_selection_unselect_iter;

/** */
alias gtk_tree_selection_unselect_path = c_gtk_tree_selection_unselect_path;

/** */
alias gtk_tree_selection_unselect_range = c_gtk_tree_selection_unselect_range;

// TreeSortable

/** */
alias gtk_tree_sortable_get_type = c_gtk_tree_sortable_get_type;

/** */
alias gtk_tree_sortable_get_sort_column_id = c_gtk_tree_sortable_get_sort_column_id;

/** */
alias gtk_tree_sortable_has_default_sort_func = c_gtk_tree_sortable_has_default_sort_func;

/** */
alias gtk_tree_sortable_set_default_sort_func = c_gtk_tree_sortable_set_default_sort_func;

/** */
alias gtk_tree_sortable_set_sort_column_id = c_gtk_tree_sortable_set_sort_column_id;

/** */
alias gtk_tree_sortable_set_sort_func = c_gtk_tree_sortable_set_sort_func;

/** */
alias gtk_tree_sortable_sort_column_changed = c_gtk_tree_sortable_sort_column_changed;

// TreeStore

/** */
alias gtk_tree_store_get_type = c_gtk_tree_store_get_type;

/** */
alias gtk_tree_store_new = c_gtk_tree_store_new;

/** */
alias gtk_tree_store_newv = c_gtk_tree_store_newv;

/** */
alias gtk_tree_store_append = c_gtk_tree_store_append;

/** */
alias gtk_tree_store_clear = c_gtk_tree_store_clear;

/** */
alias gtk_tree_store_insert = c_gtk_tree_store_insert;

/** */
alias gtk_tree_store_insert_after = c_gtk_tree_store_insert_after;

/** */
alias gtk_tree_store_insert_before = c_gtk_tree_store_insert_before;

/** */
alias gtk_tree_store_insert_with_values = c_gtk_tree_store_insert_with_values;

/** */
alias gtk_tree_store_insert_with_valuesv = c_gtk_tree_store_insert_with_valuesv;

/** */
alias gtk_tree_store_is_ancestor = c_gtk_tree_store_is_ancestor;

/** */
alias gtk_tree_store_iter_depth = c_gtk_tree_store_iter_depth;

/** */
alias gtk_tree_store_iter_is_valid = c_gtk_tree_store_iter_is_valid;

/** */
alias gtk_tree_store_move_after = c_gtk_tree_store_move_after;

/** */
alias gtk_tree_store_move_before = c_gtk_tree_store_move_before;

/** */
alias gtk_tree_store_prepend = c_gtk_tree_store_prepend;

/** */
alias gtk_tree_store_remove = c_gtk_tree_store_remove;

/** */
alias gtk_tree_store_reorder = c_gtk_tree_store_reorder;

/** */
alias gtk_tree_store_set = c_gtk_tree_store_set;

/** */
alias gtk_tree_store_set_column_types = c_gtk_tree_store_set_column_types;

/** */
alias gtk_tree_store_set_valist = c_gtk_tree_store_set_valist;

/** */
alias gtk_tree_store_set_value = c_gtk_tree_store_set_value;

/** */
alias gtk_tree_store_set_valuesv = c_gtk_tree_store_set_valuesv;

/** */
alias gtk_tree_store_swap = c_gtk_tree_store_swap;

// TreeView

/** */
alias gtk_tree_view_get_type = c_gtk_tree_view_get_type;

/** */
alias gtk_tree_view_new = c_gtk_tree_view_new;

/** */
alias gtk_tree_view_new_with_model = c_gtk_tree_view_new_with_model;

/** */
alias gtk_tree_view_append_column = c_gtk_tree_view_append_column;

/** */
alias gtk_tree_view_collapse_all = c_gtk_tree_view_collapse_all;

/** */
alias gtk_tree_view_collapse_row = c_gtk_tree_view_collapse_row;

/** */
alias gtk_tree_view_columns_autosize = c_gtk_tree_view_columns_autosize;

/** */
alias gtk_tree_view_convert_bin_window_to_tree_coords = c_gtk_tree_view_convert_bin_window_to_tree_coords;

/** */
alias gtk_tree_view_convert_bin_window_to_widget_coords = c_gtk_tree_view_convert_bin_window_to_widget_coords;

/** */
alias gtk_tree_view_convert_tree_to_bin_window_coords = c_gtk_tree_view_convert_tree_to_bin_window_coords;

/** */
alias gtk_tree_view_convert_tree_to_widget_coords = c_gtk_tree_view_convert_tree_to_widget_coords;

/** */
alias gtk_tree_view_convert_widget_to_bin_window_coords = c_gtk_tree_view_convert_widget_to_bin_window_coords;

/** */
alias gtk_tree_view_convert_widget_to_tree_coords = c_gtk_tree_view_convert_widget_to_tree_coords;

/** */
alias gtk_tree_view_create_row_drag_icon = c_gtk_tree_view_create_row_drag_icon;

/** */
alias gtk_tree_view_enable_model_drag_dest = c_gtk_tree_view_enable_model_drag_dest;

/** */
alias gtk_tree_view_enable_model_drag_source = c_gtk_tree_view_enable_model_drag_source;

/** */
alias gtk_tree_view_expand_all = c_gtk_tree_view_expand_all;

/** */
alias gtk_tree_view_expand_row = c_gtk_tree_view_expand_row;

/** */
alias gtk_tree_view_expand_to_path = c_gtk_tree_view_expand_to_path;

/** */
alias gtk_tree_view_get_activate_on_single_click = c_gtk_tree_view_get_activate_on_single_click;

/** */
alias gtk_tree_view_get_background_area = c_gtk_tree_view_get_background_area;

/** */
alias gtk_tree_view_get_bin_window = c_gtk_tree_view_get_bin_window;

/** */
alias gtk_tree_view_get_cell_area = c_gtk_tree_view_get_cell_area;

/** */
alias gtk_tree_view_get_column = c_gtk_tree_view_get_column;

/** */
alias gtk_tree_view_get_columns = c_gtk_tree_view_get_columns;

/** */
alias gtk_tree_view_get_cursor = c_gtk_tree_view_get_cursor;

/** */
alias gtk_tree_view_get_dest_row_at_pos = c_gtk_tree_view_get_dest_row_at_pos;

/** */
alias gtk_tree_view_get_drag_dest_row = c_gtk_tree_view_get_drag_dest_row;

/** */
alias gtk_tree_view_get_enable_search = c_gtk_tree_view_get_enable_search;

/** */
alias gtk_tree_view_get_enable_tree_lines = c_gtk_tree_view_get_enable_tree_lines;

/** */
alias gtk_tree_view_get_expander_column = c_gtk_tree_view_get_expander_column;

/** */
alias gtk_tree_view_get_fixed_height_mode = c_gtk_tree_view_get_fixed_height_mode;

/** */
alias gtk_tree_view_get_grid_lines = c_gtk_tree_view_get_grid_lines;

/** */
alias gtk_tree_view_get_hadjustment = c_gtk_tree_view_get_hadjustment;

/** */
alias gtk_tree_view_get_headers_clickable = c_gtk_tree_view_get_headers_clickable;

/** */
alias gtk_tree_view_get_headers_visible = c_gtk_tree_view_get_headers_visible;

/** */
alias gtk_tree_view_get_hover_expand = c_gtk_tree_view_get_hover_expand;

/** */
alias gtk_tree_view_get_hover_selection = c_gtk_tree_view_get_hover_selection;

/** */
alias gtk_tree_view_get_level_indentation = c_gtk_tree_view_get_level_indentation;

/** */
alias gtk_tree_view_get_model = c_gtk_tree_view_get_model;

/** */
alias gtk_tree_view_get_n_columns = c_gtk_tree_view_get_n_columns;

/** */
alias gtk_tree_view_get_path_at_pos = c_gtk_tree_view_get_path_at_pos;

/** */
alias gtk_tree_view_get_reorderable = c_gtk_tree_view_get_reorderable;

/** */
alias gtk_tree_view_get_row_separator_func = c_gtk_tree_view_get_row_separator_func;

/** */
alias gtk_tree_view_get_rubber_banding = c_gtk_tree_view_get_rubber_banding;

/** */
alias gtk_tree_view_get_rules_hint = c_gtk_tree_view_get_rules_hint;

/** */
alias gtk_tree_view_get_search_column = c_gtk_tree_view_get_search_column;

/** */
alias gtk_tree_view_get_search_entry = c_gtk_tree_view_get_search_entry;

/** */
alias gtk_tree_view_get_search_equal_func = c_gtk_tree_view_get_search_equal_func;

/** */
alias gtk_tree_view_get_search_position_func = c_gtk_tree_view_get_search_position_func;

/** */
alias gtk_tree_view_get_selection = c_gtk_tree_view_get_selection;

/** */
alias gtk_tree_view_get_show_expanders = c_gtk_tree_view_get_show_expanders;

/** */
alias gtk_tree_view_get_tooltip_column = c_gtk_tree_view_get_tooltip_column;

/** */
alias gtk_tree_view_get_tooltip_context = c_gtk_tree_view_get_tooltip_context;

/** */
alias gtk_tree_view_get_vadjustment = c_gtk_tree_view_get_vadjustment;

/** */
alias gtk_tree_view_get_visible_range = c_gtk_tree_view_get_visible_range;

/** */
alias gtk_tree_view_get_visible_rect = c_gtk_tree_view_get_visible_rect;

/** */
alias gtk_tree_view_insert_column = c_gtk_tree_view_insert_column;

/** */
alias gtk_tree_view_insert_column_with_attributes = c_gtk_tree_view_insert_column_with_attributes;

/** */
alias gtk_tree_view_insert_column_with_data_func = c_gtk_tree_view_insert_column_with_data_func;

/** */
alias gtk_tree_view_is_blank_at_pos = c_gtk_tree_view_is_blank_at_pos;

/** */
alias gtk_tree_view_is_rubber_banding_active = c_gtk_tree_view_is_rubber_banding_active;

/** */
alias gtk_tree_view_map_expanded_rows = c_gtk_tree_view_map_expanded_rows;

/** */
alias gtk_tree_view_move_column_after = c_gtk_tree_view_move_column_after;

/** */
alias gtk_tree_view_remove_column = c_gtk_tree_view_remove_column;

/** */
alias gtk_tree_view_row_activated = c_gtk_tree_view_row_activated;

/** */
alias gtk_tree_view_row_expanded = c_gtk_tree_view_row_expanded;

/** */
alias gtk_tree_view_scroll_to_cell = c_gtk_tree_view_scroll_to_cell;

/** */
alias gtk_tree_view_scroll_to_point = c_gtk_tree_view_scroll_to_point;

/** */
alias gtk_tree_view_set_activate_on_single_click = c_gtk_tree_view_set_activate_on_single_click;

/** */
alias gtk_tree_view_set_column_drag_function = c_gtk_tree_view_set_column_drag_function;

/** */
alias gtk_tree_view_set_cursor = c_gtk_tree_view_set_cursor;

/** */
alias gtk_tree_view_set_cursor_on_cell = c_gtk_tree_view_set_cursor_on_cell;

/** */
alias gtk_tree_view_set_destroy_count_func = c_gtk_tree_view_set_destroy_count_func;

/** */
alias gtk_tree_view_set_drag_dest_row = c_gtk_tree_view_set_drag_dest_row;

/** */
alias gtk_tree_view_set_enable_search = c_gtk_tree_view_set_enable_search;

/** */
alias gtk_tree_view_set_enable_tree_lines = c_gtk_tree_view_set_enable_tree_lines;

/** */
alias gtk_tree_view_set_expander_column = c_gtk_tree_view_set_expander_column;

/** */
alias gtk_tree_view_set_fixed_height_mode = c_gtk_tree_view_set_fixed_height_mode;

/** */
alias gtk_tree_view_set_grid_lines = c_gtk_tree_view_set_grid_lines;

/** */
alias gtk_tree_view_set_hadjustment = c_gtk_tree_view_set_hadjustment;

/** */
alias gtk_tree_view_set_headers_clickable = c_gtk_tree_view_set_headers_clickable;

/** */
alias gtk_tree_view_set_headers_visible = c_gtk_tree_view_set_headers_visible;

/** */
alias gtk_tree_view_set_hover_expand = c_gtk_tree_view_set_hover_expand;

/** */
alias gtk_tree_view_set_hover_selection = c_gtk_tree_view_set_hover_selection;

/** */
alias gtk_tree_view_set_level_indentation = c_gtk_tree_view_set_level_indentation;

/** */
alias gtk_tree_view_set_model = c_gtk_tree_view_set_model;

/** */
alias gtk_tree_view_set_reorderable = c_gtk_tree_view_set_reorderable;

/** */
alias gtk_tree_view_set_row_separator_func = c_gtk_tree_view_set_row_separator_func;

/** */
alias gtk_tree_view_set_rubber_banding = c_gtk_tree_view_set_rubber_banding;

/** */
alias gtk_tree_view_set_rules_hint = c_gtk_tree_view_set_rules_hint;

/** */
alias gtk_tree_view_set_search_column = c_gtk_tree_view_set_search_column;

/** */
alias gtk_tree_view_set_search_entry = c_gtk_tree_view_set_search_entry;

/** */
alias gtk_tree_view_set_search_equal_func = c_gtk_tree_view_set_search_equal_func;

/** */
alias gtk_tree_view_set_search_position_func = c_gtk_tree_view_set_search_position_func;

/** */
alias gtk_tree_view_set_show_expanders = c_gtk_tree_view_set_show_expanders;

/** */
alias gtk_tree_view_set_tooltip_cell = c_gtk_tree_view_set_tooltip_cell;

/** */
alias gtk_tree_view_set_tooltip_column = c_gtk_tree_view_set_tooltip_column;

/** */
alias gtk_tree_view_set_tooltip_row = c_gtk_tree_view_set_tooltip_row;

/** */
alias gtk_tree_view_set_vadjustment = c_gtk_tree_view_set_vadjustment;

/** */
alias gtk_tree_view_unset_rows_drag_dest = c_gtk_tree_view_unset_rows_drag_dest;

/** */
alias gtk_tree_view_unset_rows_drag_source = c_gtk_tree_view_unset_rows_drag_source;

// TreeViewAccessible

/** */
alias gtk_tree_view_accessible_get_type = c_gtk_tree_view_accessible_get_type;

// TreeViewColumn

/** */
alias gtk_tree_view_column_get_type = c_gtk_tree_view_column_get_type;

/** */
alias gtk_tree_view_column_new = c_gtk_tree_view_column_new;

/** */
alias gtk_tree_view_column_new_with_area = c_gtk_tree_view_column_new_with_area;

/** */
alias gtk_tree_view_column_new_with_attributes = c_gtk_tree_view_column_new_with_attributes;

/** */
alias gtk_tree_view_column_add_attribute = c_gtk_tree_view_column_add_attribute;

/** */
alias gtk_tree_view_column_cell_get_position = c_gtk_tree_view_column_cell_get_position;

/** */
alias gtk_tree_view_column_cell_get_size = c_gtk_tree_view_column_cell_get_size;

/** */
alias gtk_tree_view_column_cell_is_visible = c_gtk_tree_view_column_cell_is_visible;

/** */
alias gtk_tree_view_column_cell_set_cell_data = c_gtk_tree_view_column_cell_set_cell_data;

/** */
alias gtk_tree_view_column_clear = c_gtk_tree_view_column_clear;

/** */
alias gtk_tree_view_column_clear_attributes = c_gtk_tree_view_column_clear_attributes;

/** */
alias gtk_tree_view_column_clicked = c_gtk_tree_view_column_clicked;

/** */
alias gtk_tree_view_column_focus_cell = c_gtk_tree_view_column_focus_cell;

/** */
alias gtk_tree_view_column_get_alignment = c_gtk_tree_view_column_get_alignment;

/** */
alias gtk_tree_view_column_get_button = c_gtk_tree_view_column_get_button;

/** */
alias gtk_tree_view_column_get_clickable = c_gtk_tree_view_column_get_clickable;

/** */
alias gtk_tree_view_column_get_expand = c_gtk_tree_view_column_get_expand;

/** */
alias gtk_tree_view_column_get_fixed_width = c_gtk_tree_view_column_get_fixed_width;

/** */
alias gtk_tree_view_column_get_max_width = c_gtk_tree_view_column_get_max_width;

/** */
alias gtk_tree_view_column_get_min_width = c_gtk_tree_view_column_get_min_width;

/** */
alias gtk_tree_view_column_get_reorderable = c_gtk_tree_view_column_get_reorderable;

/** */
alias gtk_tree_view_column_get_resizable = c_gtk_tree_view_column_get_resizable;

/** */
alias gtk_tree_view_column_get_sizing = c_gtk_tree_view_column_get_sizing;

/** */
alias gtk_tree_view_column_get_sort_column_id = c_gtk_tree_view_column_get_sort_column_id;

/** */
alias gtk_tree_view_column_get_sort_indicator = c_gtk_tree_view_column_get_sort_indicator;

/** */
alias gtk_tree_view_column_get_sort_order = c_gtk_tree_view_column_get_sort_order;

/** */
alias gtk_tree_view_column_get_spacing = c_gtk_tree_view_column_get_spacing;

/** */
alias gtk_tree_view_column_get_title = c_gtk_tree_view_column_get_title;

/** */
alias gtk_tree_view_column_get_tree_view = c_gtk_tree_view_column_get_tree_view;

/** */
alias gtk_tree_view_column_get_visible = c_gtk_tree_view_column_get_visible;

/** */
alias gtk_tree_view_column_get_widget = c_gtk_tree_view_column_get_widget;

/** */
alias gtk_tree_view_column_get_width = c_gtk_tree_view_column_get_width;

/** */
alias gtk_tree_view_column_get_x_offset = c_gtk_tree_view_column_get_x_offset;

/** */
alias gtk_tree_view_column_pack_end = c_gtk_tree_view_column_pack_end;

/** */
alias gtk_tree_view_column_pack_start = c_gtk_tree_view_column_pack_start;

/** */
alias gtk_tree_view_column_queue_resize = c_gtk_tree_view_column_queue_resize;

/** */
alias gtk_tree_view_column_set_alignment = c_gtk_tree_view_column_set_alignment;

/** */
alias gtk_tree_view_column_set_attributes = c_gtk_tree_view_column_set_attributes;

/** */
alias gtk_tree_view_column_set_cell_data_func = c_gtk_tree_view_column_set_cell_data_func;

/** */
alias gtk_tree_view_column_set_clickable = c_gtk_tree_view_column_set_clickable;

/** */
alias gtk_tree_view_column_set_expand = c_gtk_tree_view_column_set_expand;

/** */
alias gtk_tree_view_column_set_fixed_width = c_gtk_tree_view_column_set_fixed_width;

/** */
alias gtk_tree_view_column_set_max_width = c_gtk_tree_view_column_set_max_width;

/** */
alias gtk_tree_view_column_set_min_width = c_gtk_tree_view_column_set_min_width;

/** */
alias gtk_tree_view_column_set_reorderable = c_gtk_tree_view_column_set_reorderable;

/** */
alias gtk_tree_view_column_set_resizable = c_gtk_tree_view_column_set_resizable;

/** */
alias gtk_tree_view_column_set_sizing = c_gtk_tree_view_column_set_sizing;

/** */
alias gtk_tree_view_column_set_sort_column_id = c_gtk_tree_view_column_set_sort_column_id;

/** */
alias gtk_tree_view_column_set_sort_indicator = c_gtk_tree_view_column_set_sort_indicator;

/** */
alias gtk_tree_view_column_set_sort_order = c_gtk_tree_view_column_set_sort_order;

/** */
alias gtk_tree_view_column_set_spacing = c_gtk_tree_view_column_set_spacing;

/** */
alias gtk_tree_view_column_set_title = c_gtk_tree_view_column_set_title;

/** */
alias gtk_tree_view_column_set_visible = c_gtk_tree_view_column_set_visible;

/** */
alias gtk_tree_view_column_set_widget = c_gtk_tree_view_column_set_widget;

// UIManager

/** */
alias gtk_ui_manager_get_type = c_gtk_ui_manager_get_type;

/** */
alias gtk_ui_manager_new = c_gtk_ui_manager_new;

/** */
alias gtk_ui_manager_add_ui = c_gtk_ui_manager_add_ui;

/** */
alias gtk_ui_manager_add_ui_from_file = c_gtk_ui_manager_add_ui_from_file;

/** */
alias gtk_ui_manager_add_ui_from_resource = c_gtk_ui_manager_add_ui_from_resource;

/** */
alias gtk_ui_manager_add_ui_from_string = c_gtk_ui_manager_add_ui_from_string;

/** */
alias gtk_ui_manager_ensure_update = c_gtk_ui_manager_ensure_update;

/** */
alias gtk_ui_manager_get_accel_group = c_gtk_ui_manager_get_accel_group;

/** */
alias gtk_ui_manager_get_action = c_gtk_ui_manager_get_action;

/** */
alias gtk_ui_manager_get_action_groups = c_gtk_ui_manager_get_action_groups;

/** */
alias gtk_ui_manager_get_add_tearoffs = c_gtk_ui_manager_get_add_tearoffs;

/** */
alias gtk_ui_manager_get_toplevels = c_gtk_ui_manager_get_toplevels;

/** */
alias gtk_ui_manager_get_ui = c_gtk_ui_manager_get_ui;

/** */
alias gtk_ui_manager_get_widget = c_gtk_ui_manager_get_widget;

/** */
alias gtk_ui_manager_insert_action_group = c_gtk_ui_manager_insert_action_group;

/** */
alias gtk_ui_manager_new_merge_id = c_gtk_ui_manager_new_merge_id;

/** */
alias gtk_ui_manager_remove_action_group = c_gtk_ui_manager_remove_action_group;

/** */
alias gtk_ui_manager_remove_ui = c_gtk_ui_manager_remove_ui;

/** */
alias gtk_ui_manager_set_add_tearoffs = c_gtk_ui_manager_set_add_tearoffs;

// VBox

/** */
alias gtk_vbox_get_type = c_gtk_vbox_get_type;

/** */
alias gtk_vbox_new = c_gtk_vbox_new;

// VButtonBox

/** */
alias gtk_vbutton_box_get_type = c_gtk_vbutton_box_get_type;

/** */
alias gtk_vbutton_box_new = c_gtk_vbutton_box_new;

// VPaned

/** */
alias gtk_vpaned_get_type = c_gtk_vpaned_get_type;

/** */
alias gtk_vpaned_new = c_gtk_vpaned_new;

// VScale

/** */
alias gtk_vscale_get_type = c_gtk_vscale_get_type;

/** */
alias gtk_vscale_new = c_gtk_vscale_new;

/** */
alias gtk_vscale_new_with_range = c_gtk_vscale_new_with_range;

// VScrollbar

/** */
alias gtk_vscrollbar_get_type = c_gtk_vscrollbar_get_type;

/** */
alias gtk_vscrollbar_new = c_gtk_vscrollbar_new;

// VSeparator

/** */
alias gtk_vseparator_get_type = c_gtk_vseparator_get_type;

/** */
alias gtk_vseparator_new = c_gtk_vseparator_new;

// Viewport

/** */
alias gtk_viewport_get_type = c_gtk_viewport_get_type;

/** */
alias gtk_viewport_new = c_gtk_viewport_new;

/** */
alias gtk_viewport_get_bin_window = c_gtk_viewport_get_bin_window;

/** */
alias gtk_viewport_get_hadjustment = c_gtk_viewport_get_hadjustment;

/** */
alias gtk_viewport_get_shadow_type = c_gtk_viewport_get_shadow_type;

/** */
alias gtk_viewport_get_vadjustment = c_gtk_viewport_get_vadjustment;

/** */
alias gtk_viewport_get_view_window = c_gtk_viewport_get_view_window;

/** */
alias gtk_viewport_set_hadjustment = c_gtk_viewport_set_hadjustment;

/** */
alias gtk_viewport_set_shadow_type = c_gtk_viewport_set_shadow_type;

/** */
alias gtk_viewport_set_vadjustment = c_gtk_viewport_set_vadjustment;

// VolumeButton

/** */
alias gtk_volume_button_get_type = c_gtk_volume_button_get_type;

/** */
alias gtk_volume_button_new = c_gtk_volume_button_new;

// Widget

/** */
alias gtk_widget_get_type = c_gtk_widget_get_type;

/** */
alias gtk_widget_new = c_gtk_widget_new;

/** */
alias gtk_widget_get_default_direction = c_gtk_widget_get_default_direction;

/** */
alias gtk_widget_get_default_style = c_gtk_widget_get_default_style;

/** */
alias gtk_widget_pop_composite_child = c_gtk_widget_pop_composite_child;

/** */
alias gtk_widget_push_composite_child = c_gtk_widget_push_composite_child;

/** */
alias gtk_widget_set_default_direction = c_gtk_widget_set_default_direction;

/** */
alias gtk_widget_activate = c_gtk_widget_activate;

/** */
alias gtk_widget_add_accelerator = c_gtk_widget_add_accelerator;

/** */
alias gtk_widget_add_device_events = c_gtk_widget_add_device_events;

/** */
alias gtk_widget_add_events = c_gtk_widget_add_events;

/** */
alias gtk_widget_add_mnemonic_label = c_gtk_widget_add_mnemonic_label;

/** */
alias gtk_widget_add_tick_callback = c_gtk_widget_add_tick_callback;

/** */
alias gtk_widget_can_activate_accel = c_gtk_widget_can_activate_accel;

/** */
alias gtk_widget_child_focus = c_gtk_widget_child_focus;

/** */
alias gtk_widget_child_notify = c_gtk_widget_child_notify;

/** */
alias gtk_widget_class_path = c_gtk_widget_class_path;

/** */
alias gtk_widget_compute_expand = c_gtk_widget_compute_expand;

/** */
alias gtk_widget_create_pango_context = c_gtk_widget_create_pango_context;

/** */
alias gtk_widget_create_pango_layout = c_gtk_widget_create_pango_layout;

/** */
alias gtk_widget_destroy = c_gtk_widget_destroy;

/** */
alias gtk_widget_destroyed = c_gtk_widget_destroyed;

/** */
alias gtk_widget_device_is_shadowed = c_gtk_widget_device_is_shadowed;

/** */
alias gtk_drag_begin = c_gtk_drag_begin;

/** */
alias gtk_drag_begin_with_coordinates = c_gtk_drag_begin_with_coordinates;

/** */
alias gtk_drag_check_threshold = c_gtk_drag_check_threshold;

/** */
alias gtk_drag_dest_add_image_targets = c_gtk_drag_dest_add_image_targets;

/** */
alias gtk_drag_dest_add_text_targets = c_gtk_drag_dest_add_text_targets;

/** */
alias gtk_drag_dest_add_uri_targets = c_gtk_drag_dest_add_uri_targets;

/** */
alias gtk_drag_dest_find_target = c_gtk_drag_dest_find_target;

/** */
alias gtk_drag_dest_get_target_list = c_gtk_drag_dest_get_target_list;

/** */
alias gtk_drag_dest_get_track_motion = c_gtk_drag_dest_get_track_motion;

/** */
alias gtk_drag_dest_set = c_gtk_drag_dest_set;

/** */
alias gtk_drag_dest_set_proxy = c_gtk_drag_dest_set_proxy;

/** */
alias gtk_drag_dest_set_target_list = c_gtk_drag_dest_set_target_list;

/** */
alias gtk_drag_dest_set_track_motion = c_gtk_drag_dest_set_track_motion;

/** */
alias gtk_drag_dest_unset = c_gtk_drag_dest_unset;

/** */
alias gtk_drag_get_data = c_gtk_drag_get_data;

/** */
alias gtk_drag_highlight = c_gtk_drag_highlight;

/** */
alias gtk_drag_source_add_image_targets = c_gtk_drag_source_add_image_targets;

/** */
alias gtk_drag_source_add_text_targets = c_gtk_drag_source_add_text_targets;

/** */
alias gtk_drag_source_add_uri_targets = c_gtk_drag_source_add_uri_targets;

/** */
alias gtk_drag_source_get_target_list = c_gtk_drag_source_get_target_list;

/** */
alias gtk_drag_source_set = c_gtk_drag_source_set;

/** */
alias gtk_drag_source_set_icon_gicon = c_gtk_drag_source_set_icon_gicon;

/** */
alias gtk_drag_source_set_icon_name = c_gtk_drag_source_set_icon_name;

/** */
alias gtk_drag_source_set_icon_pixbuf = c_gtk_drag_source_set_icon_pixbuf;

/** */
alias gtk_drag_source_set_icon_stock = c_gtk_drag_source_set_icon_stock;

/** */
alias gtk_drag_source_set_target_list = c_gtk_drag_source_set_target_list;

/** */
alias gtk_drag_source_unset = c_gtk_drag_source_unset;

/** */
alias gtk_drag_unhighlight = c_gtk_drag_unhighlight;

/** */
alias gtk_widget_draw = c_gtk_widget_draw;

/** */
alias gtk_widget_ensure_style = c_gtk_widget_ensure_style;

/** */
alias gtk_widget_error_bell = c_gtk_widget_error_bell;

/** */
alias gtk_widget_event = c_gtk_widget_event;

/** */
alias gtk_widget_freeze_child_notify = c_gtk_widget_freeze_child_notify;

/** */
alias gtk_widget_get_accessible = c_gtk_widget_get_accessible;

/** */
alias gtk_widget_get_action_group = c_gtk_widget_get_action_group;

/** */
alias gtk_widget_get_allocated_baseline = c_gtk_widget_get_allocated_baseline;

/** */
alias gtk_widget_get_allocated_height = c_gtk_widget_get_allocated_height;

/** */
alias gtk_widget_get_allocated_size = c_gtk_widget_get_allocated_size;

/** */
alias gtk_widget_get_allocated_width = c_gtk_widget_get_allocated_width;

/** */
alias gtk_widget_get_allocation = c_gtk_widget_get_allocation;

/** */
alias gtk_widget_get_ancestor = c_gtk_widget_get_ancestor;

/** */
alias gtk_widget_get_app_paintable = c_gtk_widget_get_app_paintable;

/** */
alias gtk_widget_get_can_default = c_gtk_widget_get_can_default;

/** */
alias gtk_widget_get_can_focus = c_gtk_widget_get_can_focus;

/** */
alias gtk_widget_get_child_requisition = c_gtk_widget_get_child_requisition;

/** */
alias gtk_widget_get_child_visible = c_gtk_widget_get_child_visible;

/** */
alias gtk_widget_get_clip = c_gtk_widget_get_clip;

/** */
alias gtk_widget_get_clipboard = c_gtk_widget_get_clipboard;

/** */
alias gtk_widget_get_composite_name = c_gtk_widget_get_composite_name;

/** */
alias gtk_widget_get_device_enabled = c_gtk_widget_get_device_enabled;

/** */
alias gtk_widget_get_device_events = c_gtk_widget_get_device_events;

/** */
alias gtk_widget_get_direction = c_gtk_widget_get_direction;

/** */
alias gtk_widget_get_display = c_gtk_widget_get_display;

/** */
alias gtk_widget_get_double_buffered = c_gtk_widget_get_double_buffered;

/** */
alias gtk_widget_get_events = c_gtk_widget_get_events;

/** */
alias gtk_widget_get_focus_on_click = c_gtk_widget_get_focus_on_click;

/** */
alias gtk_widget_get_font_map = c_gtk_widget_get_font_map;

/** */
alias gtk_widget_get_font_options = c_gtk_widget_get_font_options;

/** */
alias gtk_widget_get_frame_clock = c_gtk_widget_get_frame_clock;

/** */
alias gtk_widget_get_halign = c_gtk_widget_get_halign;

/** */
alias gtk_widget_get_has_tooltip = c_gtk_widget_get_has_tooltip;

/** */
alias gtk_widget_get_has_window = c_gtk_widget_get_has_window;

/** */
alias gtk_widget_get_hexpand = c_gtk_widget_get_hexpand;

/** */
alias gtk_widget_get_hexpand_set = c_gtk_widget_get_hexpand_set;

/** */
alias gtk_widget_get_mapped = c_gtk_widget_get_mapped;

/** */
alias gtk_widget_get_margin_bottom = c_gtk_widget_get_margin_bottom;

/** */
alias gtk_widget_get_margin_end = c_gtk_widget_get_margin_end;

/** */
alias gtk_widget_get_margin_left = c_gtk_widget_get_margin_left;

/** */
alias gtk_widget_get_margin_right = c_gtk_widget_get_margin_right;

/** */
alias gtk_widget_get_margin_start = c_gtk_widget_get_margin_start;

/** */
alias gtk_widget_get_margin_top = c_gtk_widget_get_margin_top;

/** */
alias gtk_widget_get_modifier_mask = c_gtk_widget_get_modifier_mask;

/** */
alias gtk_widget_get_modifier_style = c_gtk_widget_get_modifier_style;

/** */
alias gtk_widget_get_name = c_gtk_widget_get_name;

/** */
alias gtk_widget_get_no_show_all = c_gtk_widget_get_no_show_all;

/** */
alias gtk_widget_get_opacity = c_gtk_widget_get_opacity;

/** */
alias gtk_widget_get_pango_context = c_gtk_widget_get_pango_context;

/** */
alias gtk_widget_get_parent = c_gtk_widget_get_parent;

/** */
alias gtk_widget_get_parent_window = c_gtk_widget_get_parent_window;

/** */
alias gtk_widget_get_path = c_gtk_widget_get_path;

/** */
alias gtk_widget_get_pointer = c_gtk_widget_get_pointer;

/** */
alias gtk_widget_get_preferred_height = c_gtk_widget_get_preferred_height;

/** */
alias gtk_widget_get_preferred_height_and_baseline_for_width = c_gtk_widget_get_preferred_height_and_baseline_for_width;

/** */
alias gtk_widget_get_preferred_height_for_width = c_gtk_widget_get_preferred_height_for_width;

/** */
alias gtk_widget_get_preferred_size = c_gtk_widget_get_preferred_size;

/** */
alias gtk_widget_get_preferred_width = c_gtk_widget_get_preferred_width;

/** */
alias gtk_widget_get_preferred_width_for_height = c_gtk_widget_get_preferred_width_for_height;

/** */
alias gtk_widget_get_realized = c_gtk_widget_get_realized;

/** */
alias gtk_widget_get_receives_default = c_gtk_widget_get_receives_default;

/** */
alias gtk_widget_get_request_mode = c_gtk_widget_get_request_mode;

/** */
alias gtk_widget_get_requisition = c_gtk_widget_get_requisition;

/** */
alias gtk_widget_get_root_window = c_gtk_widget_get_root_window;

/** */
alias gtk_widget_get_scale_factor = c_gtk_widget_get_scale_factor;

/** */
alias gtk_widget_get_screen = c_gtk_widget_get_screen;

/** */
alias gtk_widget_get_sensitive = c_gtk_widget_get_sensitive;

/** */
alias gtk_widget_get_settings = c_gtk_widget_get_settings;

/** */
alias gtk_widget_get_size_request = c_gtk_widget_get_size_request;

/** */
alias gtk_widget_get_state = c_gtk_widget_get_state;

/** */
alias gtk_widget_get_state_flags = c_gtk_widget_get_state_flags;

/** */
alias gtk_widget_get_style = c_gtk_widget_get_style;

/** */
alias gtk_widget_get_style_context = c_gtk_widget_get_style_context;

/** */
alias gtk_widget_get_support_multidevice = c_gtk_widget_get_support_multidevice;

/** */
alias gtk_widget_get_template_child = c_gtk_widget_get_template_child;

/** */
alias gtk_widget_get_tooltip_markup = c_gtk_widget_get_tooltip_markup;

/** */
alias gtk_widget_get_tooltip_text = c_gtk_widget_get_tooltip_text;

/** */
alias gtk_widget_get_tooltip_window = c_gtk_widget_get_tooltip_window;

/** */
alias gtk_widget_get_toplevel = c_gtk_widget_get_toplevel;

/** */
alias gtk_widget_get_valign = c_gtk_widget_get_valign;

/** */
alias gtk_widget_get_valign_with_baseline = c_gtk_widget_get_valign_with_baseline;

/** */
alias gtk_widget_get_vexpand = c_gtk_widget_get_vexpand;

/** */
alias gtk_widget_get_vexpand_set = c_gtk_widget_get_vexpand_set;

/** */
alias gtk_widget_get_visible = c_gtk_widget_get_visible;

/** */
alias gtk_widget_get_visual = c_gtk_widget_get_visual;

/** */
alias gtk_widget_get_window = c_gtk_widget_get_window;

/** */
alias gtk_grab_add = c_gtk_grab_add;

/** */
alias gtk_widget_grab_default = c_gtk_widget_grab_default;

/** */
alias gtk_widget_grab_focus = c_gtk_widget_grab_focus;

/** */
alias gtk_grab_remove = c_gtk_grab_remove;

/** */
alias gtk_widget_has_default = c_gtk_widget_has_default;

/** */
alias gtk_widget_has_focus = c_gtk_widget_has_focus;

/** */
alias gtk_widget_has_grab = c_gtk_widget_has_grab;

/** */
alias gtk_widget_has_rc_style = c_gtk_widget_has_rc_style;

/** */
alias gtk_widget_has_screen = c_gtk_widget_has_screen;

/** */
alias gtk_widget_has_visible_focus = c_gtk_widget_has_visible_focus;

/** */
alias gtk_widget_hide = c_gtk_widget_hide;

/** */
alias gtk_widget_hide_on_delete = c_gtk_widget_hide_on_delete;

/** */
alias gtk_widget_in_destruction = c_gtk_widget_in_destruction;

/** */
alias gtk_widget_init_template = c_gtk_widget_init_template;

/** */
alias gtk_widget_input_shape_combine_region = c_gtk_widget_input_shape_combine_region;

/** */
alias gtk_widget_insert_action_group = c_gtk_widget_insert_action_group;

/** */
alias gtk_widget_intersect = c_gtk_widget_intersect;

/** */
alias gtk_widget_is_ancestor = c_gtk_widget_is_ancestor;

/** */
alias gtk_widget_is_composited = c_gtk_widget_is_composited;

/** */
alias gtk_widget_is_drawable = c_gtk_widget_is_drawable;

/** */
alias gtk_widget_is_focus = c_gtk_widget_is_focus;

/** */
alias gtk_widget_is_sensitive = c_gtk_widget_is_sensitive;

/** */
alias gtk_widget_is_toplevel = c_gtk_widget_is_toplevel;

/** */
alias gtk_widget_is_visible = c_gtk_widget_is_visible;

/** */
alias gtk_widget_keynav_failed = c_gtk_widget_keynav_failed;

/** */
alias gtk_widget_list_accel_closures = c_gtk_widget_list_accel_closures;

/** */
alias gtk_widget_list_action_prefixes = c_gtk_widget_list_action_prefixes;

/** */
alias gtk_widget_list_mnemonic_labels = c_gtk_widget_list_mnemonic_labels;

/** */
alias gtk_widget_map = c_gtk_widget_map;

/** */
alias gtk_widget_mnemonic_activate = c_gtk_widget_mnemonic_activate;

/** */
alias gtk_widget_modify_base = c_gtk_widget_modify_base;

/** */
alias gtk_widget_modify_bg = c_gtk_widget_modify_bg;

/** */
alias gtk_widget_modify_cursor = c_gtk_widget_modify_cursor;

/** */
alias gtk_widget_modify_fg = c_gtk_widget_modify_fg;

/** */
alias gtk_widget_modify_font = c_gtk_widget_modify_font;

/** */
alias gtk_widget_modify_style = c_gtk_widget_modify_style;

/** */
alias gtk_widget_modify_text = c_gtk_widget_modify_text;

/** */
alias gtk_widget_override_background_color = c_gtk_widget_override_background_color;

/** */
alias gtk_widget_override_color = c_gtk_widget_override_color;

/** */
alias gtk_widget_override_cursor = c_gtk_widget_override_cursor;

/** */
alias gtk_widget_override_font = c_gtk_widget_override_font;

/** */
alias gtk_widget_override_symbolic_color = c_gtk_widget_override_symbolic_color;

/** */
alias gtk_widget_path = c_gtk_widget_path;

/** */
alias gtk_widget_queue_allocate = c_gtk_widget_queue_allocate;

/** */
alias gtk_widget_queue_compute_expand = c_gtk_widget_queue_compute_expand;

/** */
alias gtk_widget_queue_draw = c_gtk_widget_queue_draw;

/** */
alias gtk_widget_queue_draw_area = c_gtk_widget_queue_draw_area;

/** */
alias gtk_widget_queue_draw_region = c_gtk_widget_queue_draw_region;

/** */
alias gtk_widget_queue_resize = c_gtk_widget_queue_resize;

/** */
alias gtk_widget_queue_resize_no_redraw = c_gtk_widget_queue_resize_no_redraw;

/** */
alias gtk_widget_realize = c_gtk_widget_realize;

/** */
alias gtk_widget_region_intersect = c_gtk_widget_region_intersect;

/** */
alias gtk_widget_register_window = c_gtk_widget_register_window;

/** */
alias gtk_widget_remove_accelerator = c_gtk_widget_remove_accelerator;

/** */
alias gtk_widget_remove_mnemonic_label = c_gtk_widget_remove_mnemonic_label;

/** */
alias gtk_widget_remove_tick_callback = c_gtk_widget_remove_tick_callback;

/** */
alias gtk_widget_render_icon = c_gtk_widget_render_icon;

/** */
alias gtk_widget_render_icon_pixbuf = c_gtk_widget_render_icon_pixbuf;

/** */
alias gtk_widget_reparent = c_gtk_widget_reparent;

/** */
alias gtk_widget_reset_rc_styles = c_gtk_widget_reset_rc_styles;

/** */
alias gtk_widget_reset_style = c_gtk_widget_reset_style;

/** */
alias gtk_widget_send_expose = c_gtk_widget_send_expose;

/** */
alias gtk_widget_send_focus_change = c_gtk_widget_send_focus_change;

/** */
alias gtk_widget_set_accel_path = c_gtk_widget_set_accel_path;

/** */
alias gtk_widget_set_allocation = c_gtk_widget_set_allocation;

/** */
alias gtk_widget_set_app_paintable = c_gtk_widget_set_app_paintable;

/** */
alias gtk_widget_set_can_default = c_gtk_widget_set_can_default;

/** */
alias gtk_widget_set_can_focus = c_gtk_widget_set_can_focus;

/** */
alias gtk_widget_set_child_visible = c_gtk_widget_set_child_visible;

/** */
alias gtk_widget_set_clip = c_gtk_widget_set_clip;

/** */
alias gtk_widget_set_composite_name = c_gtk_widget_set_composite_name;

/** */
alias gtk_widget_set_device_enabled = c_gtk_widget_set_device_enabled;

/** */
alias gtk_widget_set_device_events = c_gtk_widget_set_device_events;

/** */
alias gtk_widget_set_direction = c_gtk_widget_set_direction;

/** */
alias gtk_widget_set_double_buffered = c_gtk_widget_set_double_buffered;

/** */
alias gtk_widget_set_events = c_gtk_widget_set_events;

/** */
alias gtk_widget_set_focus_on_click = c_gtk_widget_set_focus_on_click;

/** */
alias gtk_widget_set_font_map = c_gtk_widget_set_font_map;

/** */
alias gtk_widget_set_font_options = c_gtk_widget_set_font_options;

/** */
alias gtk_widget_set_halign = c_gtk_widget_set_halign;

/** */
alias gtk_widget_set_has_tooltip = c_gtk_widget_set_has_tooltip;

/** */
alias gtk_widget_set_has_window = c_gtk_widget_set_has_window;

/** */
alias gtk_widget_set_hexpand = c_gtk_widget_set_hexpand;

/** */
alias gtk_widget_set_hexpand_set = c_gtk_widget_set_hexpand_set;

/** */
alias gtk_widget_set_mapped = c_gtk_widget_set_mapped;

/** */
alias gtk_widget_set_margin_bottom = c_gtk_widget_set_margin_bottom;

/** */
alias gtk_widget_set_margin_end = c_gtk_widget_set_margin_end;

/** */
alias gtk_widget_set_margin_left = c_gtk_widget_set_margin_left;

/** */
alias gtk_widget_set_margin_right = c_gtk_widget_set_margin_right;

/** */
alias gtk_widget_set_margin_start = c_gtk_widget_set_margin_start;

/** */
alias gtk_widget_set_margin_top = c_gtk_widget_set_margin_top;

/** */
alias gtk_widget_set_name = c_gtk_widget_set_name;

/** */
alias gtk_widget_set_no_show_all = c_gtk_widget_set_no_show_all;

/** */
alias gtk_widget_set_opacity = c_gtk_widget_set_opacity;

/** */
alias gtk_widget_set_parent = c_gtk_widget_set_parent;

/** */
alias gtk_widget_set_parent_window = c_gtk_widget_set_parent_window;

/** */
alias gtk_widget_set_realized = c_gtk_widget_set_realized;

/** */
alias gtk_widget_set_receives_default = c_gtk_widget_set_receives_default;

/** */
alias gtk_widget_set_redraw_on_allocate = c_gtk_widget_set_redraw_on_allocate;

/** */
alias gtk_widget_set_sensitive = c_gtk_widget_set_sensitive;

/** */
alias gtk_widget_set_size_request = c_gtk_widget_set_size_request;

/** */
alias gtk_widget_set_state = c_gtk_widget_set_state;

/** */
alias gtk_widget_set_state_flags = c_gtk_widget_set_state_flags;

/** */
alias gtk_widget_set_style = c_gtk_widget_set_style;

/** */
alias gtk_widget_set_support_multidevice = c_gtk_widget_set_support_multidevice;

/** */
alias gtk_widget_set_tooltip_markup = c_gtk_widget_set_tooltip_markup;

/** */
alias gtk_widget_set_tooltip_text = c_gtk_widget_set_tooltip_text;

/** */
alias gtk_widget_set_tooltip_window = c_gtk_widget_set_tooltip_window;

/** */
alias gtk_widget_set_valign = c_gtk_widget_set_valign;

/** */
alias gtk_widget_set_vexpand = c_gtk_widget_set_vexpand;

/** */
alias gtk_widget_set_vexpand_set = c_gtk_widget_set_vexpand_set;

/** */
alias gtk_widget_set_visible = c_gtk_widget_set_visible;

/** */
alias gtk_widget_set_visual = c_gtk_widget_set_visual;

/** */
alias gtk_widget_set_window = c_gtk_widget_set_window;

/** */
alias gtk_widget_shape_combine_region = c_gtk_widget_shape_combine_region;

/** */
alias gtk_widget_show = c_gtk_widget_show;

/** */
alias gtk_widget_show_all = c_gtk_widget_show_all;

/** */
alias gtk_widget_show_now = c_gtk_widget_show_now;

/** */
alias gtk_widget_size_allocate = c_gtk_widget_size_allocate;

/** */
alias gtk_widget_size_allocate_with_baseline = c_gtk_widget_size_allocate_with_baseline;

/** */
alias gtk_widget_size_request = c_gtk_widget_size_request;

/** */
alias gtk_widget_style_attach = c_gtk_widget_style_attach;

/** */
alias gtk_widget_style_get = c_gtk_widget_style_get;

/** */
alias gtk_widget_style_get_property = c_gtk_widget_style_get_property;

/** */
alias gtk_widget_style_get_valist = c_gtk_widget_style_get_valist;

/** */
alias gtk_widget_thaw_child_notify = c_gtk_widget_thaw_child_notify;

/** */
alias gtk_widget_translate_coordinates = c_gtk_widget_translate_coordinates;

/** */
alias gtk_widget_trigger_tooltip_query = c_gtk_widget_trigger_tooltip_query;

/** */
alias gtk_widget_unmap = c_gtk_widget_unmap;

/** */
alias gtk_widget_unparent = c_gtk_widget_unparent;

/** */
alias gtk_widget_unrealize = c_gtk_widget_unrealize;

/** */
alias gtk_widget_unregister_window = c_gtk_widget_unregister_window;

/** */
alias gtk_widget_unset_state_flags = c_gtk_widget_unset_state_flags;

// WidgetAccessible

/** */
alias gtk_widget_accessible_get_type = c_gtk_widget_accessible_get_type;

// WidgetClass

/** */
alias gtk_widget_class_bind_template_callback_full = c_gtk_widget_class_bind_template_callback_full;

/** */
alias gtk_widget_class_bind_template_child_full = c_gtk_widget_class_bind_template_child_full;

/** */
alias gtk_widget_class_find_style_property = c_gtk_widget_class_find_style_property;

/** */
alias gtk_widget_class_get_css_name = c_gtk_widget_class_get_css_name;

/** */
alias gtk_widget_class_install_style_property = c_gtk_widget_class_install_style_property;

/** */
alias gtk_widget_class_install_style_property_parser = c_gtk_widget_class_install_style_property_parser;

/** */
alias gtk_widget_class_list_style_properties = c_gtk_widget_class_list_style_properties;

/** */
alias gtk_widget_class_set_accessible_role = c_gtk_widget_class_set_accessible_role;

/** */
alias gtk_widget_class_set_accessible_type = c_gtk_widget_class_set_accessible_type;

/** */
alias gtk_widget_class_set_connect_func = c_gtk_widget_class_set_connect_func;

/** */
alias gtk_widget_class_set_css_name = c_gtk_widget_class_set_css_name;

/** */
alias gtk_widget_class_set_template = c_gtk_widget_class_set_template;

/** */
alias gtk_widget_class_set_template_from_resource = c_gtk_widget_class_set_template_from_resource;

// WidgetPath

/** */
alias gtk_widget_path_get_type = c_gtk_widget_path_get_type;

/** */
alias gtk_widget_path_new = c_gtk_widget_path_new;

/** */
alias gtk_widget_path_append_for_widget = c_gtk_widget_path_append_for_widget;

/** */
alias gtk_widget_path_append_type = c_gtk_widget_path_append_type;

/** */
alias gtk_widget_path_append_with_siblings = c_gtk_widget_path_append_with_siblings;

/** */
alias gtk_widget_path_copy = c_gtk_widget_path_copy;

/** */
alias gtk_widget_path_free = c_gtk_widget_path_free;

/** */
alias gtk_widget_path_get_object_type = c_gtk_widget_path_get_object_type;

/** */
alias gtk_widget_path_has_parent = c_gtk_widget_path_has_parent;

/** */
alias gtk_widget_path_is_type = c_gtk_widget_path_is_type;

/** */
alias gtk_widget_path_iter_add_class = c_gtk_widget_path_iter_add_class;

/** */
alias gtk_widget_path_iter_add_region = c_gtk_widget_path_iter_add_region;

/** */
alias gtk_widget_path_iter_clear_classes = c_gtk_widget_path_iter_clear_classes;

/** */
alias gtk_widget_path_iter_clear_regions = c_gtk_widget_path_iter_clear_regions;

/** */
alias gtk_widget_path_iter_get_name = c_gtk_widget_path_iter_get_name;

/** */
alias gtk_widget_path_iter_get_object_name = c_gtk_widget_path_iter_get_object_name;

/** */
alias gtk_widget_path_iter_get_object_type = c_gtk_widget_path_iter_get_object_type;

/** */
alias gtk_widget_path_iter_get_sibling_index = c_gtk_widget_path_iter_get_sibling_index;

/** */
alias gtk_widget_path_iter_get_siblings = c_gtk_widget_path_iter_get_siblings;

/** */
alias gtk_widget_path_iter_get_state = c_gtk_widget_path_iter_get_state;

/** */
alias gtk_widget_path_iter_has_class = c_gtk_widget_path_iter_has_class;

/** */
alias gtk_widget_path_iter_has_name = c_gtk_widget_path_iter_has_name;

/** */
alias gtk_widget_path_iter_has_qclass = c_gtk_widget_path_iter_has_qclass;

/** */
alias gtk_widget_path_iter_has_qname = c_gtk_widget_path_iter_has_qname;

/** */
alias gtk_widget_path_iter_has_qregion = c_gtk_widget_path_iter_has_qregion;

/** */
alias gtk_widget_path_iter_has_region = c_gtk_widget_path_iter_has_region;

/** */
alias gtk_widget_path_iter_list_classes = c_gtk_widget_path_iter_list_classes;

/** */
alias gtk_widget_path_iter_list_regions = c_gtk_widget_path_iter_list_regions;

/** */
alias gtk_widget_path_iter_remove_class = c_gtk_widget_path_iter_remove_class;

/** */
alias gtk_widget_path_iter_remove_region = c_gtk_widget_path_iter_remove_region;

/** */
alias gtk_widget_path_iter_set_name = c_gtk_widget_path_iter_set_name;

/** */
alias gtk_widget_path_iter_set_object_name = c_gtk_widget_path_iter_set_object_name;

/** */
alias gtk_widget_path_iter_set_object_type = c_gtk_widget_path_iter_set_object_type;

/** */
alias gtk_widget_path_iter_set_state = c_gtk_widget_path_iter_set_state;

/** */
alias gtk_widget_path_length = c_gtk_widget_path_length;

/** */
alias gtk_widget_path_prepend_type = c_gtk_widget_path_prepend_type;

/** */
alias gtk_widget_path_ref = c_gtk_widget_path_ref;

/** */
alias gtk_widget_path_to_string = c_gtk_widget_path_to_string;

/** */
alias gtk_widget_path_unref = c_gtk_widget_path_unref;

// Window

/** */
alias gtk_window_get_type = c_gtk_window_get_type;

/** */
alias gtk_window_new = c_gtk_window_new;

/** */
alias gtk_window_get_default_icon_list = c_gtk_window_get_default_icon_list;

/** */
alias gtk_window_get_default_icon_name = c_gtk_window_get_default_icon_name;

/** */
alias gtk_window_list_toplevels = c_gtk_window_list_toplevels;

/** */
alias gtk_window_set_auto_startup_notification = c_gtk_window_set_auto_startup_notification;

/** */
alias gtk_window_set_default_icon = c_gtk_window_set_default_icon;

/** */
alias gtk_window_set_default_icon_from_file = c_gtk_window_set_default_icon_from_file;

/** */
alias gtk_window_set_default_icon_list = c_gtk_window_set_default_icon_list;

/** */
alias gtk_window_set_default_icon_name = c_gtk_window_set_default_icon_name;

/** */
alias gtk_window_set_interactive_debugging = c_gtk_window_set_interactive_debugging;

/** */
alias gtk_window_activate_default = c_gtk_window_activate_default;

/** */
alias gtk_window_activate_focus = c_gtk_window_activate_focus;

/** */
alias gtk_window_activate_key = c_gtk_window_activate_key;

/** */
alias gtk_window_add_accel_group = c_gtk_window_add_accel_group;

/** */
alias gtk_window_add_mnemonic = c_gtk_window_add_mnemonic;

/** */
alias gtk_window_begin_move_drag = c_gtk_window_begin_move_drag;

/** */
alias gtk_window_begin_resize_drag = c_gtk_window_begin_resize_drag;

/** */
alias gtk_window_close = c_gtk_window_close;

/** */
alias gtk_window_deiconify = c_gtk_window_deiconify;

/** */
alias gtk_window_fullscreen = c_gtk_window_fullscreen;

/** */
alias gtk_window_fullscreen_on_monitor = c_gtk_window_fullscreen_on_monitor;

/** */
alias gtk_window_get_accept_focus = c_gtk_window_get_accept_focus;

/** */
alias gtk_window_get_application = c_gtk_window_get_application;

/** */
alias gtk_window_get_attached_to = c_gtk_window_get_attached_to;

/** */
alias gtk_window_get_decorated = c_gtk_window_get_decorated;

/** */
alias gtk_window_get_default_size = c_gtk_window_get_default_size;

/** */
alias gtk_window_get_default_widget = c_gtk_window_get_default_widget;

/** */
alias gtk_window_get_deletable = c_gtk_window_get_deletable;

/** */
alias gtk_window_get_destroy_with_parent = c_gtk_window_get_destroy_with_parent;

/** */
alias gtk_window_get_focus = c_gtk_window_get_focus;

/** */
alias gtk_window_get_focus_on_map = c_gtk_window_get_focus_on_map;

/** */
alias gtk_window_get_focus_visible = c_gtk_window_get_focus_visible;

/** */
alias gtk_window_get_gravity = c_gtk_window_get_gravity;

/** */
alias gtk_window_get_group = c_gtk_window_get_group;

/** */
alias gtk_window_get_has_resize_grip = c_gtk_window_get_has_resize_grip;

/** */
alias gtk_window_get_hide_titlebar_when_maximized = c_gtk_window_get_hide_titlebar_when_maximized;

/** */
alias gtk_window_get_icon = c_gtk_window_get_icon;

/** */
alias gtk_window_get_icon_list = c_gtk_window_get_icon_list;

/** */
alias gtk_window_get_icon_name = c_gtk_window_get_icon_name;

/** */
alias gtk_window_get_mnemonic_modifier = c_gtk_window_get_mnemonic_modifier;

/** */
alias gtk_window_get_mnemonics_visible = c_gtk_window_get_mnemonics_visible;

/** */
alias gtk_window_get_modal = c_gtk_window_get_modal;

/** */
alias gtk_window_get_opacity = c_gtk_window_get_opacity;

/** */
alias gtk_window_get_position = c_gtk_window_get_position;

/** */
alias gtk_window_get_resizable = c_gtk_window_get_resizable;

/** */
alias gtk_window_get_resize_grip_area = c_gtk_window_get_resize_grip_area;

/** */
alias gtk_window_get_role = c_gtk_window_get_role;

/** */
alias gtk_window_get_screen = c_gtk_window_get_screen;

/** */
alias gtk_window_get_size = c_gtk_window_get_size;

/** */
alias gtk_window_get_skip_pager_hint = c_gtk_window_get_skip_pager_hint;

/** */
alias gtk_window_get_skip_taskbar_hint = c_gtk_window_get_skip_taskbar_hint;

/** */
alias gtk_window_get_title = c_gtk_window_get_title;

/** */
alias gtk_window_get_titlebar = c_gtk_window_get_titlebar;

/** */
alias gtk_window_get_transient_for = c_gtk_window_get_transient_for;

/** */
alias gtk_window_get_type_hint = c_gtk_window_get_type_hint;

/** */
alias gtk_window_get_urgency_hint = c_gtk_window_get_urgency_hint;

/** */
alias gtk_window_get_window_type = c_gtk_window_get_window_type;

/** */
alias gtk_window_has_group = c_gtk_window_has_group;

/** */
alias gtk_window_has_toplevel_focus = c_gtk_window_has_toplevel_focus;

/** */
alias gtk_window_iconify = c_gtk_window_iconify;

/** */
alias gtk_window_is_active = c_gtk_window_is_active;

/** */
alias gtk_window_is_maximized = c_gtk_window_is_maximized;

/** */
alias gtk_window_maximize = c_gtk_window_maximize;

/** */
alias gtk_window_mnemonic_activate = c_gtk_window_mnemonic_activate;

/** */
alias gtk_window_move = c_gtk_window_move;

/** */
alias gtk_window_parse_geometry = c_gtk_window_parse_geometry;

/** */
alias gtk_window_present = c_gtk_window_present;

/** */
alias gtk_window_present_with_time = c_gtk_window_present_with_time;

/** */
alias gtk_window_propagate_key_event = c_gtk_window_propagate_key_event;

/** */
alias gtk_window_remove_accel_group = c_gtk_window_remove_accel_group;

/** */
alias gtk_window_remove_mnemonic = c_gtk_window_remove_mnemonic;

/** */
alias gtk_window_reshow_with_initial_size = c_gtk_window_reshow_with_initial_size;

/** */
alias gtk_window_resize = c_gtk_window_resize;

/** */
alias gtk_window_resize_grip_is_visible = c_gtk_window_resize_grip_is_visible;

/** */
alias gtk_window_resize_to_geometry = c_gtk_window_resize_to_geometry;

/** */
alias gtk_window_set_accept_focus = c_gtk_window_set_accept_focus;

/** */
alias gtk_window_set_application = c_gtk_window_set_application;

/** */
alias gtk_window_set_attached_to = c_gtk_window_set_attached_to;

/** */
alias gtk_window_set_decorated = c_gtk_window_set_decorated;

/** */
alias gtk_window_set_default = c_gtk_window_set_default;

/** */
alias gtk_window_set_default_geometry = c_gtk_window_set_default_geometry;

/** */
alias gtk_window_set_default_size = c_gtk_window_set_default_size;

/** */
alias gtk_window_set_deletable = c_gtk_window_set_deletable;

/** */
alias gtk_window_set_destroy_with_parent = c_gtk_window_set_destroy_with_parent;

/** */
alias gtk_window_set_focus = c_gtk_window_set_focus;

/** */
alias gtk_window_set_focus_on_map = c_gtk_window_set_focus_on_map;

/** */
alias gtk_window_set_focus_visible = c_gtk_window_set_focus_visible;

/** */
alias gtk_window_set_geometry_hints = c_gtk_window_set_geometry_hints;

/** */
alias gtk_window_set_gravity = c_gtk_window_set_gravity;

/** */
alias gtk_window_set_has_resize_grip = c_gtk_window_set_has_resize_grip;

/** */
alias gtk_window_set_has_user_ref_count = c_gtk_window_set_has_user_ref_count;

/** */
alias gtk_window_set_hide_titlebar_when_maximized = c_gtk_window_set_hide_titlebar_when_maximized;

/** */
alias gtk_window_set_icon = c_gtk_window_set_icon;

/** */
alias gtk_window_set_icon_from_file = c_gtk_window_set_icon_from_file;

/** */
alias gtk_window_set_icon_list = c_gtk_window_set_icon_list;

/** */
alias gtk_window_set_icon_name = c_gtk_window_set_icon_name;

/** */
alias gtk_window_set_keep_above = c_gtk_window_set_keep_above;

/** */
alias gtk_window_set_keep_below = c_gtk_window_set_keep_below;

/** */
alias gtk_window_set_mnemonic_modifier = c_gtk_window_set_mnemonic_modifier;

/** */
alias gtk_window_set_mnemonics_visible = c_gtk_window_set_mnemonics_visible;

/** */
alias gtk_window_set_modal = c_gtk_window_set_modal;

/** */
alias gtk_window_set_opacity = c_gtk_window_set_opacity;

/** */
alias gtk_window_set_position = c_gtk_window_set_position;

/** */
alias gtk_window_set_resizable = c_gtk_window_set_resizable;

/** */
alias gtk_window_set_role = c_gtk_window_set_role;

/** */
alias gtk_window_set_screen = c_gtk_window_set_screen;

/** */
alias gtk_window_set_skip_pager_hint = c_gtk_window_set_skip_pager_hint;

/** */
alias gtk_window_set_skip_taskbar_hint = c_gtk_window_set_skip_taskbar_hint;

/** */
alias gtk_window_set_startup_id = c_gtk_window_set_startup_id;

/** */
alias gtk_window_set_title = c_gtk_window_set_title;

/** */
alias gtk_window_set_titlebar = c_gtk_window_set_titlebar;

/** */
alias gtk_window_set_transient_for = c_gtk_window_set_transient_for;

/** */
alias gtk_window_set_type_hint = c_gtk_window_set_type_hint;

/** */
alias gtk_window_set_urgency_hint = c_gtk_window_set_urgency_hint;

/** */
alias gtk_window_set_wmclass = c_gtk_window_set_wmclass;

/** */
alias gtk_window_stick = c_gtk_window_stick;

/** */
alias gtk_window_unfullscreen = c_gtk_window_unfullscreen;

/** */
alias gtk_window_unmaximize = c_gtk_window_unmaximize;

/** */
alias gtk_window_unstick = c_gtk_window_unstick;

// WindowAccessible

/** */
alias gtk_window_accessible_get_type = c_gtk_window_accessible_get_type;

// WindowGroup

/** */
alias gtk_window_group_get_type = c_gtk_window_group_get_type;

/** */
alias gtk_window_group_new = c_gtk_window_group_new;

/** */
alias gtk_window_group_add_window = c_gtk_window_group_add_window;

/** */
alias gtk_window_group_get_current_device_grab = c_gtk_window_group_get_current_device_grab;

/** */
alias gtk_window_group_get_current_grab = c_gtk_window_group_get_current_grab;

/** */
alias gtk_window_group_list_windows = c_gtk_window_group_list_windows;

/** */
alias gtk_window_group_remove_window = c_gtk_window_group_remove_window;

// global

/** */
alias gtk_accel_groups_activate = c_gtk_accel_groups_activate;

/** */
alias gtk_accel_groups_from_object = c_gtk_accel_groups_from_object;

/** */
alias gtk_accelerator_get_default_mod_mask = c_gtk_accelerator_get_default_mod_mask;

/** */
alias gtk_accelerator_get_label = c_gtk_accelerator_get_label;

/** */
alias gtk_accelerator_get_label_with_keycode = c_gtk_accelerator_get_label_with_keycode;

/** */
alias gtk_accelerator_name = c_gtk_accelerator_name;

/** */
alias gtk_accelerator_name_with_keycode = c_gtk_accelerator_name_with_keycode;

/** */
alias gtk_accelerator_parse = c_gtk_accelerator_parse;

/** */
alias gtk_accelerator_parse_with_keycode = c_gtk_accelerator_parse_with_keycode;

/** */
alias gtk_accelerator_set_default_mod_mask = c_gtk_accelerator_set_default_mod_mask;

/** */
alias gtk_accelerator_valid = c_gtk_accelerator_valid;

/** */
alias gtk_alternative_dialog_button_order = c_gtk_alternative_dialog_button_order;

/** */
alias gtk_bindings_activate = c_gtk_bindings_activate;

/** */
alias gtk_bindings_activate_event = c_gtk_bindings_activate_event;

/** */
alias gtk_cairo_should_draw_window = c_gtk_cairo_should_draw_window;

/** */
alias gtk_cairo_transform_to_window = c_gtk_cairo_transform_to_window;

/** */
alias gtk_check_version = c_gtk_check_version;

/** */
alias gtk_device_grab_add = c_gtk_device_grab_add;

/** */
alias gtk_device_grab_remove = c_gtk_device_grab_remove;

/** */
alias gtk_disable_setlocale = c_gtk_disable_setlocale;

/** */
alias gtk_distribute_natural_allocation = c_gtk_distribute_natural_allocation;

/** */
alias gtk_drag_cancel = c_gtk_drag_cancel;

/** */
alias gtk_drag_finish = c_gtk_drag_finish;

/** */
alias gtk_drag_get_source_widget = c_gtk_drag_get_source_widget;

/** */
alias gtk_drag_set_icon_default = c_gtk_drag_set_icon_default;

/** */
alias gtk_drag_set_icon_gicon = c_gtk_drag_set_icon_gicon;

/** */
alias gtk_drag_set_icon_name = c_gtk_drag_set_icon_name;

/** */
alias gtk_drag_set_icon_pixbuf = c_gtk_drag_set_icon_pixbuf;

/** */
alias gtk_drag_set_icon_stock = c_gtk_drag_set_icon_stock;

/** */
alias gtk_drag_set_icon_surface = c_gtk_drag_set_icon_surface;

/** */
alias gtk_drag_set_icon_widget = c_gtk_drag_set_icon_widget;

/** */
alias gtk_draw_insertion_cursor = c_gtk_draw_insertion_cursor;

/** */
alias gtk_events_pending = c_gtk_events_pending;

/** */
alias gtk_false = c_gtk_false;

/** */
alias gtk_get_binary_age = c_gtk_get_binary_age;

/** */
alias gtk_get_current_event = c_gtk_get_current_event;

/** */
alias gtk_get_current_event_device = c_gtk_get_current_event_device;

/** */
alias gtk_get_current_event_state = c_gtk_get_current_event_state;

/** */
alias gtk_get_current_event_time = c_gtk_get_current_event_time;

/** */
alias gtk_get_debug_flags = c_gtk_get_debug_flags;

/** */
alias gtk_get_default_language = c_gtk_get_default_language;

/** */
alias gtk_get_event_widget = c_gtk_get_event_widget;

/** */
alias gtk_get_interface_age = c_gtk_get_interface_age;

/** */
alias gtk_get_locale_direction = c_gtk_get_locale_direction;

/** */
alias gtk_get_major_version = c_gtk_get_major_version;

/** */
alias gtk_get_micro_version = c_gtk_get_micro_version;

/** */
alias gtk_get_minor_version = c_gtk_get_minor_version;

/** */
alias gtk_get_option_group = c_gtk_get_option_group;

/** */
alias gtk_grab_get_current = c_gtk_grab_get_current;

/** */
alias gtk_init = c_gtk_init;

/** */
alias gtk_init_check = c_gtk_init_check;

/** */
alias gtk_init_with_args = c_gtk_init_with_args;

/** */
alias gtk_key_snooper_install = c_gtk_key_snooper_install;

/** */
alias gtk_key_snooper_remove = c_gtk_key_snooper_remove;

/** */
alias gtk_main = c_gtk_main;

/** */
alias gtk_main_do_event = c_gtk_main_do_event;

/** */
alias gtk_main_iteration = c_gtk_main_iteration;

/** */
alias gtk_main_iteration_do = c_gtk_main_iteration_do;

/** */
alias gtk_main_level = c_gtk_main_level;

/** */
alias gtk_main_quit = c_gtk_main_quit;

/** */
alias gtk_paint_arrow = c_gtk_paint_arrow;

/** */
alias gtk_paint_box = c_gtk_paint_box;

/** */
alias gtk_paint_box_gap = c_gtk_paint_box_gap;

/** */
alias gtk_paint_check = c_gtk_paint_check;

/** */
alias gtk_paint_diamond = c_gtk_paint_diamond;

/** */
alias gtk_paint_expander = c_gtk_paint_expander;

/** */
alias gtk_paint_extension = c_gtk_paint_extension;

/** */
alias gtk_paint_flat_box = c_gtk_paint_flat_box;

/** */
alias gtk_paint_focus = c_gtk_paint_focus;

/** */
alias gtk_paint_handle = c_gtk_paint_handle;

/** */
alias gtk_paint_hline = c_gtk_paint_hline;

/** */
alias gtk_paint_layout = c_gtk_paint_layout;

/** */
alias gtk_paint_option = c_gtk_paint_option;

/** */
alias gtk_paint_resize_grip = c_gtk_paint_resize_grip;

/** */
alias gtk_paint_shadow = c_gtk_paint_shadow;

/** */
alias gtk_paint_shadow_gap = c_gtk_paint_shadow_gap;

/** */
alias gtk_paint_slider = c_gtk_paint_slider;

/** */
alias gtk_paint_spinner = c_gtk_paint_spinner;

/** */
alias gtk_paint_tab = c_gtk_paint_tab;

/** */
alias gtk_paint_vline = c_gtk_paint_vline;

/** */
alias gtk_parse_args = c_gtk_parse_args;

/** */
alias gtk_print_run_page_setup_dialog = c_gtk_print_run_page_setup_dialog;

/** */
alias gtk_print_run_page_setup_dialog_async = c_gtk_print_run_page_setup_dialog_async;

/** */
alias gtk_propagate_event = c_gtk_propagate_event;

/** */
alias gtk_rc_add_default_file = c_gtk_rc_add_default_file;

/** */
alias gtk_rc_find_module_in_path = c_gtk_rc_find_module_in_path;

/** */
alias gtk_rc_find_pixmap_in_path = c_gtk_rc_find_pixmap_in_path;

/** */
alias gtk_rc_get_default_files = c_gtk_rc_get_default_files;

/** */
alias gtk_rc_get_im_module_file = c_gtk_rc_get_im_module_file;

/** */
alias gtk_rc_get_im_module_path = c_gtk_rc_get_im_module_path;

/** */
alias gtk_rc_get_module_dir = c_gtk_rc_get_module_dir;

/** */
alias gtk_rc_get_style = c_gtk_rc_get_style;

/** */
alias gtk_rc_get_style_by_paths = c_gtk_rc_get_style_by_paths;

/** */
alias gtk_rc_get_theme_dir = c_gtk_rc_get_theme_dir;

/** */
alias gtk_rc_parse = c_gtk_rc_parse;

/** */
alias gtk_rc_parse_color = c_gtk_rc_parse_color;

/** */
alias gtk_rc_parse_color_full = c_gtk_rc_parse_color_full;

/** */
alias gtk_rc_parse_priority = c_gtk_rc_parse_priority;

/** */
alias gtk_rc_parse_state = c_gtk_rc_parse_state;

/** */
alias gtk_rc_parse_string = c_gtk_rc_parse_string;

/** */
alias gtk_rc_reparse_all = c_gtk_rc_reparse_all;

/** */
alias gtk_rc_reparse_all_for_settings = c_gtk_rc_reparse_all_for_settings;

/** */
alias gtk_rc_reset_styles = c_gtk_rc_reset_styles;

/** */
alias gtk_rc_scanner_new = c_gtk_rc_scanner_new;

/** */
alias gtk_rc_set_default_files = c_gtk_rc_set_default_files;

/** */
alias gtk_render_activity = c_gtk_render_activity;

/** */
alias gtk_render_arrow = c_gtk_render_arrow;

/** */
alias gtk_render_background = c_gtk_render_background;

/** */
alias gtk_render_background_get_clip = c_gtk_render_background_get_clip;

/** */
alias gtk_render_check = c_gtk_render_check;

/** */
alias gtk_render_expander = c_gtk_render_expander;

/** */
alias gtk_render_extension = c_gtk_render_extension;

/** */
alias gtk_render_focus = c_gtk_render_focus;

/** */
alias gtk_render_frame = c_gtk_render_frame;

/** */
alias gtk_render_frame_gap = c_gtk_render_frame_gap;

/** */
alias gtk_render_handle = c_gtk_render_handle;

/** */
alias gtk_render_icon = c_gtk_render_icon;

/** */
alias gtk_render_icon_pixbuf = c_gtk_render_icon_pixbuf;

/** */
alias gtk_render_icon_surface = c_gtk_render_icon_surface;

/** */
alias gtk_render_insertion_cursor = c_gtk_render_insertion_cursor;

/** */
alias gtk_render_layout = c_gtk_render_layout;

/** */
alias gtk_render_line = c_gtk_render_line;

/** */
alias gtk_render_option = c_gtk_render_option;

/** */
alias gtk_render_slider = c_gtk_render_slider;

/** */
alias gtk_rgb_to_hsv = c_gtk_rgb_to_hsv;

/** */
alias gtk_selection_add_target = c_gtk_selection_add_target;

/** */
alias gtk_selection_add_targets = c_gtk_selection_add_targets;

/** */
alias gtk_selection_clear_targets = c_gtk_selection_clear_targets;

/** */
alias gtk_selection_convert = c_gtk_selection_convert;

/** */
alias gtk_selection_owner_set = c_gtk_selection_owner_set;

/** */
alias gtk_selection_owner_set_for_display = c_gtk_selection_owner_set_for_display;

/** */
alias gtk_selection_remove_all = c_gtk_selection_remove_all;

/** */
alias gtk_set_debug_flags = c_gtk_set_debug_flags;

/** */
alias gtk_show_about_dialog = c_gtk_show_about_dialog;

/** */
alias gtk_show_uri = c_gtk_show_uri;

/** */
alias gtk_show_uri_on_window = c_gtk_show_uri_on_window;

/** */
alias gtk_stock_add = c_gtk_stock_add;

/** */
alias gtk_stock_add_static = c_gtk_stock_add_static;

/** */
alias gtk_stock_list_ids = c_gtk_stock_list_ids;

/** */
alias gtk_stock_lookup = c_gtk_stock_lookup;

/** */
alias gtk_stock_set_translate_func = c_gtk_stock_set_translate_func;

/** */
alias gtk_target_table_free = c_gtk_target_table_free;

/** */
alias gtk_target_table_new_from_list = c_gtk_target_table_new_from_list;

/** */
alias gtk_targets_include_image = c_gtk_targets_include_image;

/** */
alias gtk_targets_include_rich_text = c_gtk_targets_include_rich_text;

/** */
alias gtk_targets_include_text = c_gtk_targets_include_text;

/** */
alias gtk_targets_include_uri = c_gtk_targets_include_uri;

/** */
alias gtk_test_create_simple_window = c_gtk_test_create_simple_window;

/** */
alias gtk_test_create_widget = c_gtk_test_create_widget;

/** */
alias gtk_test_display_button_window = c_gtk_test_display_button_window;

/** */
alias gtk_test_find_label = c_gtk_test_find_label;

/** */
alias gtk_test_find_sibling = c_gtk_test_find_sibling;

/** */
alias gtk_test_find_widget = c_gtk_test_find_widget;

/** */
alias gtk_test_init = c_gtk_test_init;

/** */
alias gtk_test_list_all_types = c_gtk_test_list_all_types;

/** */
alias gtk_test_register_all_types = c_gtk_test_register_all_types;

/** */
alias gtk_test_slider_get_value = c_gtk_test_slider_get_value;

/** */
alias gtk_test_slider_set_perc = c_gtk_test_slider_set_perc;

/** */
alias gtk_test_spin_button_click = c_gtk_test_spin_button_click;

/** */
alias gtk_test_text_get = c_gtk_test_text_get;

/** */
alias gtk_test_text_set = c_gtk_test_text_set;

/** */
alias gtk_test_widget_click = c_gtk_test_widget_click;

/** */
alias gtk_test_widget_send_key = c_gtk_test_widget_send_key;

/** */
alias gtk_test_widget_wait_for_draw = c_gtk_test_widget_wait_for_draw;

/** */
alias gtk_tree_get_row_drag_data = c_gtk_tree_get_row_drag_data;

/** */
alias gtk_tree_set_row_drag_data = c_gtk_tree_set_row_drag_data;

/** */
alias gtk_true = c_gtk_true;

shared static this()
{
  // AboutDialog
  gidLink(cast(void**)&gtk_about_dialog_get_type, "gtk_about_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_new, "gtk_about_dialog_new", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_add_credit_section, "gtk_about_dialog_add_credit_section", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_artists, "gtk_about_dialog_get_artists", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_authors, "gtk_about_dialog_get_authors", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_comments, "gtk_about_dialog_get_comments", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_copyright, "gtk_about_dialog_get_copyright", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_documenters, "gtk_about_dialog_get_documenters", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_license, "gtk_about_dialog_get_license", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_license_type, "gtk_about_dialog_get_license_type", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_logo, "gtk_about_dialog_get_logo", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_logo_icon_name, "gtk_about_dialog_get_logo_icon_name", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_program_name, "gtk_about_dialog_get_program_name", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_translator_credits, "gtk_about_dialog_get_translator_credits", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_version, "gtk_about_dialog_get_version", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_website, "gtk_about_dialog_get_website", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_website_label, "gtk_about_dialog_get_website_label", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_get_wrap_license, "gtk_about_dialog_get_wrap_license", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_artists, "gtk_about_dialog_set_artists", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_authors, "gtk_about_dialog_set_authors", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_comments, "gtk_about_dialog_set_comments", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_copyright, "gtk_about_dialog_set_copyright", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_documenters, "gtk_about_dialog_set_documenters", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_license, "gtk_about_dialog_set_license", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_license_type, "gtk_about_dialog_set_license_type", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_logo, "gtk_about_dialog_set_logo", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_logo_icon_name, "gtk_about_dialog_set_logo_icon_name", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_program_name, "gtk_about_dialog_set_program_name", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_translator_credits, "gtk_about_dialog_set_translator_credits", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_version, "gtk_about_dialog_set_version", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_website, "gtk_about_dialog_set_website", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_website_label, "gtk_about_dialog_set_website_label", LIBS);
  gidLink(cast(void**)&gtk_about_dialog_set_wrap_license, "gtk_about_dialog_set_wrap_license", LIBS);

  // AccelGroup
  gidLink(cast(void**)&gtk_accel_group_get_type, "gtk_accel_group_get_type", LIBS);
  gidLink(cast(void**)&gtk_accel_group_new, "gtk_accel_group_new", LIBS);
  gidLink(cast(void**)&gtk_accel_group_from_accel_closure, "gtk_accel_group_from_accel_closure", LIBS);
  gidLink(cast(void**)&gtk_accel_group_activate, "gtk_accel_group_activate", LIBS);
  gidLink(cast(void**)&gtk_accel_group_connect, "gtk_accel_group_connect", LIBS);
  gidLink(cast(void**)&gtk_accel_group_connect_by_path, "gtk_accel_group_connect_by_path", LIBS);
  gidLink(cast(void**)&gtk_accel_group_disconnect, "gtk_accel_group_disconnect", LIBS);
  gidLink(cast(void**)&gtk_accel_group_disconnect_key, "gtk_accel_group_disconnect_key", LIBS);
  gidLink(cast(void**)&gtk_accel_group_find, "gtk_accel_group_find", LIBS);
  gidLink(cast(void**)&gtk_accel_group_get_is_locked, "gtk_accel_group_get_is_locked", LIBS);
  gidLink(cast(void**)&gtk_accel_group_get_modifier_mask, "gtk_accel_group_get_modifier_mask", LIBS);
  gidLink(cast(void**)&gtk_accel_group_lock, "gtk_accel_group_lock", LIBS);
  gidLink(cast(void**)&gtk_accel_group_query, "gtk_accel_group_query", LIBS);
  gidLink(cast(void**)&gtk_accel_group_unlock, "gtk_accel_group_unlock", LIBS);

  // AccelLabel
  gidLink(cast(void**)&gtk_accel_label_get_type, "gtk_accel_label_get_type", LIBS);
  gidLink(cast(void**)&gtk_accel_label_new, "gtk_accel_label_new", LIBS);
  gidLink(cast(void**)&gtk_accel_label_get_accel, "gtk_accel_label_get_accel", LIBS);
  gidLink(cast(void**)&gtk_accel_label_get_accel_widget, "gtk_accel_label_get_accel_widget", LIBS);
  gidLink(cast(void**)&gtk_accel_label_get_accel_width, "gtk_accel_label_get_accel_width", LIBS);
  gidLink(cast(void**)&gtk_accel_label_refetch, "gtk_accel_label_refetch", LIBS);
  gidLink(cast(void**)&gtk_accel_label_set_accel, "gtk_accel_label_set_accel", LIBS);
  gidLink(cast(void**)&gtk_accel_label_set_accel_closure, "gtk_accel_label_set_accel_closure", LIBS);
  gidLink(cast(void**)&gtk_accel_label_set_accel_widget, "gtk_accel_label_set_accel_widget", LIBS);

  // AccelMap
  gidLink(cast(void**)&gtk_accel_map_get_type, "gtk_accel_map_get_type", LIBS);
  gidLink(cast(void**)&gtk_accel_map_add_entry, "gtk_accel_map_add_entry", LIBS);
  gidLink(cast(void**)&gtk_accel_map_add_filter, "gtk_accel_map_add_filter", LIBS);
  gidLink(cast(void**)&gtk_accel_map_change_entry, "gtk_accel_map_change_entry", LIBS);
  gidLink(cast(void**)&gtk_accel_map_foreach, "gtk_accel_map_foreach", LIBS);
  gidLink(cast(void**)&gtk_accel_map_foreach_unfiltered, "gtk_accel_map_foreach_unfiltered", LIBS);
  gidLink(cast(void**)&gtk_accel_map_get, "gtk_accel_map_get", LIBS);
  gidLink(cast(void**)&gtk_accel_map_load, "gtk_accel_map_load", LIBS);
  gidLink(cast(void**)&gtk_accel_map_load_fd, "gtk_accel_map_load_fd", LIBS);
  gidLink(cast(void**)&gtk_accel_map_load_scanner, "gtk_accel_map_load_scanner", LIBS);
  gidLink(cast(void**)&gtk_accel_map_lock_path, "gtk_accel_map_lock_path", LIBS);
  gidLink(cast(void**)&gtk_accel_map_lookup_entry, "gtk_accel_map_lookup_entry", LIBS);
  gidLink(cast(void**)&gtk_accel_map_save, "gtk_accel_map_save", LIBS);
  gidLink(cast(void**)&gtk_accel_map_save_fd, "gtk_accel_map_save_fd", LIBS);
  gidLink(cast(void**)&gtk_accel_map_unlock_path, "gtk_accel_map_unlock_path", LIBS);

  // Accessible
  gidLink(cast(void**)&gtk_accessible_get_type, "gtk_accessible_get_type", LIBS);
  gidLink(cast(void**)&gtk_accessible_connect_widget_destroyed, "gtk_accessible_connect_widget_destroyed", LIBS);
  gidLink(cast(void**)&gtk_accessible_get_widget, "gtk_accessible_get_widget", LIBS);
  gidLink(cast(void**)&gtk_accessible_set_widget, "gtk_accessible_set_widget", LIBS);

  // Action
  gidLink(cast(void**)&gtk_action_get_type, "gtk_action_get_type", LIBS);
  gidLink(cast(void**)&gtk_action_new, "gtk_action_new", LIBS);
  gidLink(cast(void**)&gtk_action_activate, "gtk_action_activate", LIBS);
  gidLink(cast(void**)&gtk_action_block_activate, "gtk_action_block_activate", LIBS);
  gidLink(cast(void**)&gtk_action_connect_accelerator, "gtk_action_connect_accelerator", LIBS);
  gidLink(cast(void**)&gtk_action_create_icon, "gtk_action_create_icon", LIBS);
  gidLink(cast(void**)&gtk_action_create_menu, "gtk_action_create_menu", LIBS);
  gidLink(cast(void**)&gtk_action_create_menu_item, "gtk_action_create_menu_item", LIBS);
  gidLink(cast(void**)&gtk_action_create_tool_item, "gtk_action_create_tool_item", LIBS);
  gidLink(cast(void**)&gtk_action_disconnect_accelerator, "gtk_action_disconnect_accelerator", LIBS);
  gidLink(cast(void**)&gtk_action_get_accel_closure, "gtk_action_get_accel_closure", LIBS);
  gidLink(cast(void**)&gtk_action_get_accel_path, "gtk_action_get_accel_path", LIBS);
  gidLink(cast(void**)&gtk_action_get_always_show_image, "gtk_action_get_always_show_image", LIBS);
  gidLink(cast(void**)&gtk_action_get_gicon, "gtk_action_get_gicon", LIBS);
  gidLink(cast(void**)&gtk_action_get_icon_name, "gtk_action_get_icon_name", LIBS);
  gidLink(cast(void**)&gtk_action_get_is_important, "gtk_action_get_is_important", LIBS);
  gidLink(cast(void**)&gtk_action_get_label, "gtk_action_get_label", LIBS);
  gidLink(cast(void**)&gtk_action_get_name, "gtk_action_get_name", LIBS);
  gidLink(cast(void**)&gtk_action_get_proxies, "gtk_action_get_proxies", LIBS);
  gidLink(cast(void**)&gtk_action_get_sensitive, "gtk_action_get_sensitive", LIBS);
  gidLink(cast(void**)&gtk_action_get_short_label, "gtk_action_get_short_label", LIBS);
  gidLink(cast(void**)&gtk_action_get_stock_id, "gtk_action_get_stock_id", LIBS);
  gidLink(cast(void**)&gtk_action_get_tooltip, "gtk_action_get_tooltip", LIBS);
  gidLink(cast(void**)&gtk_action_get_visible, "gtk_action_get_visible", LIBS);
  gidLink(cast(void**)&gtk_action_get_visible_horizontal, "gtk_action_get_visible_horizontal", LIBS);
  gidLink(cast(void**)&gtk_action_get_visible_vertical, "gtk_action_get_visible_vertical", LIBS);
  gidLink(cast(void**)&gtk_action_is_sensitive, "gtk_action_is_sensitive", LIBS);
  gidLink(cast(void**)&gtk_action_is_visible, "gtk_action_is_visible", LIBS);
  gidLink(cast(void**)&gtk_action_set_accel_group, "gtk_action_set_accel_group", LIBS);
  gidLink(cast(void**)&gtk_action_set_accel_path, "gtk_action_set_accel_path", LIBS);
  gidLink(cast(void**)&gtk_action_set_always_show_image, "gtk_action_set_always_show_image", LIBS);
  gidLink(cast(void**)&gtk_action_set_gicon, "gtk_action_set_gicon", LIBS);
  gidLink(cast(void**)&gtk_action_set_icon_name, "gtk_action_set_icon_name", LIBS);
  gidLink(cast(void**)&gtk_action_set_is_important, "gtk_action_set_is_important", LIBS);
  gidLink(cast(void**)&gtk_action_set_label, "gtk_action_set_label", LIBS);
  gidLink(cast(void**)&gtk_action_set_sensitive, "gtk_action_set_sensitive", LIBS);
  gidLink(cast(void**)&gtk_action_set_short_label, "gtk_action_set_short_label", LIBS);
  gidLink(cast(void**)&gtk_action_set_stock_id, "gtk_action_set_stock_id", LIBS);
  gidLink(cast(void**)&gtk_action_set_tooltip, "gtk_action_set_tooltip", LIBS);
  gidLink(cast(void**)&gtk_action_set_visible, "gtk_action_set_visible", LIBS);
  gidLink(cast(void**)&gtk_action_set_visible_horizontal, "gtk_action_set_visible_horizontal", LIBS);
  gidLink(cast(void**)&gtk_action_set_visible_vertical, "gtk_action_set_visible_vertical", LIBS);
  gidLink(cast(void**)&gtk_action_unblock_activate, "gtk_action_unblock_activate", LIBS);

  // ActionBar
  gidLink(cast(void**)&gtk_action_bar_get_type, "gtk_action_bar_get_type", LIBS);
  gidLink(cast(void**)&gtk_action_bar_new, "gtk_action_bar_new", LIBS);
  gidLink(cast(void**)&gtk_action_bar_get_center_widget, "gtk_action_bar_get_center_widget", LIBS);
  gidLink(cast(void**)&gtk_action_bar_pack_end, "gtk_action_bar_pack_end", LIBS);
  gidLink(cast(void**)&gtk_action_bar_pack_start, "gtk_action_bar_pack_start", LIBS);
  gidLink(cast(void**)&gtk_action_bar_set_center_widget, "gtk_action_bar_set_center_widget", LIBS);

  // ActionGroup
  gidLink(cast(void**)&gtk_action_group_get_type, "gtk_action_group_get_type", LIBS);
  gidLink(cast(void**)&gtk_action_group_new, "gtk_action_group_new", LIBS);
  gidLink(cast(void**)&gtk_action_group_add_action, "gtk_action_group_add_action", LIBS);
  gidLink(cast(void**)&gtk_action_group_add_action_with_accel, "gtk_action_group_add_action_with_accel", LIBS);
  gidLink(cast(void**)&gtk_action_group_add_actions, "gtk_action_group_add_actions", LIBS);
  gidLink(cast(void**)&gtk_action_group_add_actions_full, "gtk_action_group_add_actions_full", LIBS);
  gidLink(cast(void**)&gtk_action_group_add_radio_actions, "gtk_action_group_add_radio_actions", LIBS);
  gidLink(cast(void**)&gtk_action_group_add_radio_actions_full, "gtk_action_group_add_radio_actions_full", LIBS);
  gidLink(cast(void**)&gtk_action_group_add_toggle_actions, "gtk_action_group_add_toggle_actions", LIBS);
  gidLink(cast(void**)&gtk_action_group_add_toggle_actions_full, "gtk_action_group_add_toggle_actions_full", LIBS);
  gidLink(cast(void**)&gtk_action_group_get_accel_group, "gtk_action_group_get_accel_group", LIBS);
  gidLink(cast(void**)&gtk_action_group_get_action, "gtk_action_group_get_action", LIBS);
  gidLink(cast(void**)&gtk_action_group_get_name, "gtk_action_group_get_name", LIBS);
  gidLink(cast(void**)&gtk_action_group_get_sensitive, "gtk_action_group_get_sensitive", LIBS);
  gidLink(cast(void**)&gtk_action_group_get_visible, "gtk_action_group_get_visible", LIBS);
  gidLink(cast(void**)&gtk_action_group_list_actions, "gtk_action_group_list_actions", LIBS);
  gidLink(cast(void**)&gtk_action_group_remove_action, "gtk_action_group_remove_action", LIBS);
  gidLink(cast(void**)&gtk_action_group_set_accel_group, "gtk_action_group_set_accel_group", LIBS);
  gidLink(cast(void**)&gtk_action_group_set_sensitive, "gtk_action_group_set_sensitive", LIBS);
  gidLink(cast(void**)&gtk_action_group_set_translate_func, "gtk_action_group_set_translate_func", LIBS);
  gidLink(cast(void**)&gtk_action_group_set_translation_domain, "gtk_action_group_set_translation_domain", LIBS);
  gidLink(cast(void**)&gtk_action_group_set_visible, "gtk_action_group_set_visible", LIBS);
  gidLink(cast(void**)&gtk_action_group_translate_string, "gtk_action_group_translate_string", LIBS);

  // Actionable
  gidLink(cast(void**)&gtk_actionable_get_type, "gtk_actionable_get_type", LIBS);
  gidLink(cast(void**)&gtk_actionable_get_action_name, "gtk_actionable_get_action_name", LIBS);
  gidLink(cast(void**)&gtk_actionable_get_action_target_value, "gtk_actionable_get_action_target_value", LIBS);
  gidLink(cast(void**)&gtk_actionable_set_action_name, "gtk_actionable_set_action_name", LIBS);
  gidLink(cast(void**)&gtk_actionable_set_action_target, "gtk_actionable_set_action_target", LIBS);
  gidLink(cast(void**)&gtk_actionable_set_action_target_value, "gtk_actionable_set_action_target_value", LIBS);
  gidLink(cast(void**)&gtk_actionable_set_detailed_action_name, "gtk_actionable_set_detailed_action_name", LIBS);

  // Activatable
  gidLink(cast(void**)&gtk_activatable_get_type, "gtk_activatable_get_type", LIBS);
  gidLink(cast(void**)&gtk_activatable_do_set_related_action, "gtk_activatable_do_set_related_action", LIBS);
  gidLink(cast(void**)&gtk_activatable_get_related_action, "gtk_activatable_get_related_action", LIBS);
  gidLink(cast(void**)&gtk_activatable_get_use_action_appearance, "gtk_activatable_get_use_action_appearance", LIBS);
  gidLink(cast(void**)&gtk_activatable_set_related_action, "gtk_activatable_set_related_action", LIBS);
  gidLink(cast(void**)&gtk_activatable_set_use_action_appearance, "gtk_activatable_set_use_action_appearance", LIBS);
  gidLink(cast(void**)&gtk_activatable_sync_action_properties, "gtk_activatable_sync_action_properties", LIBS);

  // Adjustment
  gidLink(cast(void**)&gtk_adjustment_get_type, "gtk_adjustment_get_type", LIBS);
  gidLink(cast(void**)&gtk_adjustment_new, "gtk_adjustment_new", LIBS);
  gidLink(cast(void**)&gtk_adjustment_changed, "gtk_adjustment_changed", LIBS);
  gidLink(cast(void**)&gtk_adjustment_clamp_page, "gtk_adjustment_clamp_page", LIBS);
  gidLink(cast(void**)&gtk_adjustment_configure, "gtk_adjustment_configure", LIBS);
  gidLink(cast(void**)&gtk_adjustment_get_lower, "gtk_adjustment_get_lower", LIBS);
  gidLink(cast(void**)&gtk_adjustment_get_minimum_increment, "gtk_adjustment_get_minimum_increment", LIBS);
  gidLink(cast(void**)&gtk_adjustment_get_page_increment, "gtk_adjustment_get_page_increment", LIBS);
  gidLink(cast(void**)&gtk_adjustment_get_page_size, "gtk_adjustment_get_page_size", LIBS);
  gidLink(cast(void**)&gtk_adjustment_get_step_increment, "gtk_adjustment_get_step_increment", LIBS);
  gidLink(cast(void**)&gtk_adjustment_get_upper, "gtk_adjustment_get_upper", LIBS);
  gidLink(cast(void**)&gtk_adjustment_get_value, "gtk_adjustment_get_value", LIBS);
  gidLink(cast(void**)&gtk_adjustment_set_lower, "gtk_adjustment_set_lower", LIBS);
  gidLink(cast(void**)&gtk_adjustment_set_page_increment, "gtk_adjustment_set_page_increment", LIBS);
  gidLink(cast(void**)&gtk_adjustment_set_page_size, "gtk_adjustment_set_page_size", LIBS);
  gidLink(cast(void**)&gtk_adjustment_set_step_increment, "gtk_adjustment_set_step_increment", LIBS);
  gidLink(cast(void**)&gtk_adjustment_set_upper, "gtk_adjustment_set_upper", LIBS);
  gidLink(cast(void**)&gtk_adjustment_set_value, "gtk_adjustment_set_value", LIBS);
  gidLink(cast(void**)&gtk_adjustment_value_changed, "gtk_adjustment_value_changed", LIBS);

  // Alignment
  gidLink(cast(void**)&gtk_alignment_get_type, "gtk_alignment_get_type", LIBS);
  gidLink(cast(void**)&gtk_alignment_new, "gtk_alignment_new", LIBS);
  gidLink(cast(void**)&gtk_alignment_get_padding, "gtk_alignment_get_padding", LIBS);
  gidLink(cast(void**)&gtk_alignment_set, "gtk_alignment_set", LIBS);
  gidLink(cast(void**)&gtk_alignment_set_padding, "gtk_alignment_set_padding", LIBS);

  // AppChooser
  gidLink(cast(void**)&gtk_app_chooser_get_type, "gtk_app_chooser_get_type", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_get_app_info, "gtk_app_chooser_get_app_info", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_get_content_type, "gtk_app_chooser_get_content_type", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_refresh, "gtk_app_chooser_refresh", LIBS);

  // AppChooserButton
  gidLink(cast(void**)&gtk_app_chooser_button_get_type, "gtk_app_chooser_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_button_new, "gtk_app_chooser_button_new", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_button_append_custom_item, "gtk_app_chooser_button_append_custom_item", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_button_append_separator, "gtk_app_chooser_button_append_separator", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_button_get_heading, "gtk_app_chooser_button_get_heading", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_button_get_show_default_item, "gtk_app_chooser_button_get_show_default_item", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_button_get_show_dialog_item, "gtk_app_chooser_button_get_show_dialog_item", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_button_set_active_custom_item, "gtk_app_chooser_button_set_active_custom_item", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_button_set_heading, "gtk_app_chooser_button_set_heading", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_button_set_show_default_item, "gtk_app_chooser_button_set_show_default_item", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_button_set_show_dialog_item, "gtk_app_chooser_button_set_show_dialog_item", LIBS);

  // AppChooserDialog
  gidLink(cast(void**)&gtk_app_chooser_dialog_get_type, "gtk_app_chooser_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_dialog_new, "gtk_app_chooser_dialog_new", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_dialog_new_for_content_type, "gtk_app_chooser_dialog_new_for_content_type", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_dialog_get_heading, "gtk_app_chooser_dialog_get_heading", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_dialog_get_widget, "gtk_app_chooser_dialog_get_widget", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_dialog_set_heading, "gtk_app_chooser_dialog_set_heading", LIBS);

  // AppChooserWidget
  gidLink(cast(void**)&gtk_app_chooser_widget_get_type, "gtk_app_chooser_widget_get_type", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_new, "gtk_app_chooser_widget_new", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_get_default_text, "gtk_app_chooser_widget_get_default_text", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_get_show_all, "gtk_app_chooser_widget_get_show_all", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_get_show_default, "gtk_app_chooser_widget_get_show_default", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_get_show_fallback, "gtk_app_chooser_widget_get_show_fallback", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_get_show_other, "gtk_app_chooser_widget_get_show_other", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_get_show_recommended, "gtk_app_chooser_widget_get_show_recommended", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_set_default_text, "gtk_app_chooser_widget_set_default_text", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_set_show_all, "gtk_app_chooser_widget_set_show_all", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_set_show_default, "gtk_app_chooser_widget_set_show_default", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_set_show_fallback, "gtk_app_chooser_widget_set_show_fallback", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_set_show_other, "gtk_app_chooser_widget_set_show_other", LIBS);
  gidLink(cast(void**)&gtk_app_chooser_widget_set_show_recommended, "gtk_app_chooser_widget_set_show_recommended", LIBS);

  // Application
  gidLink(cast(void**)&gtk_application_get_type, "gtk_application_get_type", LIBS);
  gidLink(cast(void**)&gtk_application_new, "gtk_application_new", LIBS);
  gidLink(cast(void**)&gtk_application_add_accelerator, "gtk_application_add_accelerator", LIBS);
  gidLink(cast(void**)&gtk_application_add_window, "gtk_application_add_window", LIBS);
  gidLink(cast(void**)&gtk_application_get_accels_for_action, "gtk_application_get_accels_for_action", LIBS);
  gidLink(cast(void**)&gtk_application_get_actions_for_accel, "gtk_application_get_actions_for_accel", LIBS);
  gidLink(cast(void**)&gtk_application_get_active_window, "gtk_application_get_active_window", LIBS);
  gidLink(cast(void**)&gtk_application_get_app_menu, "gtk_application_get_app_menu", LIBS);
  gidLink(cast(void**)&gtk_application_get_menu_by_id, "gtk_application_get_menu_by_id", LIBS);
  gidLink(cast(void**)&gtk_application_get_menubar, "gtk_application_get_menubar", LIBS);
  gidLink(cast(void**)&gtk_application_get_window_by_id, "gtk_application_get_window_by_id", LIBS);
  gidLink(cast(void**)&gtk_application_get_windows, "gtk_application_get_windows", LIBS);
  gidLink(cast(void**)&gtk_application_inhibit, "gtk_application_inhibit", LIBS);
  gidLink(cast(void**)&gtk_application_is_inhibited, "gtk_application_is_inhibited", LIBS);
  gidLink(cast(void**)&gtk_application_list_action_descriptions, "gtk_application_list_action_descriptions", LIBS);
  gidLink(cast(void**)&gtk_application_prefers_app_menu, "gtk_application_prefers_app_menu", LIBS);
  gidLink(cast(void**)&gtk_application_remove_accelerator, "gtk_application_remove_accelerator", LIBS);
  gidLink(cast(void**)&gtk_application_remove_window, "gtk_application_remove_window", LIBS);
  gidLink(cast(void**)&gtk_application_set_accels_for_action, "gtk_application_set_accels_for_action", LIBS);
  gidLink(cast(void**)&gtk_application_set_app_menu, "gtk_application_set_app_menu", LIBS);
  gidLink(cast(void**)&gtk_application_set_menubar, "gtk_application_set_menubar", LIBS);
  gidLink(cast(void**)&gtk_application_uninhibit, "gtk_application_uninhibit", LIBS);

  // ApplicationWindow
  gidLink(cast(void**)&gtk_application_window_get_type, "gtk_application_window_get_type", LIBS);
  gidLink(cast(void**)&gtk_application_window_new, "gtk_application_window_new", LIBS);
  gidLink(cast(void**)&gtk_application_window_get_help_overlay, "gtk_application_window_get_help_overlay", LIBS);
  gidLink(cast(void**)&gtk_application_window_get_id, "gtk_application_window_get_id", LIBS);
  gidLink(cast(void**)&gtk_application_window_get_show_menubar, "gtk_application_window_get_show_menubar", LIBS);
  gidLink(cast(void**)&gtk_application_window_set_help_overlay, "gtk_application_window_set_help_overlay", LIBS);
  gidLink(cast(void**)&gtk_application_window_set_show_menubar, "gtk_application_window_set_show_menubar", LIBS);

  // Arrow
  gidLink(cast(void**)&gtk_arrow_get_type, "gtk_arrow_get_type", LIBS);
  gidLink(cast(void**)&gtk_arrow_new, "gtk_arrow_new", LIBS);
  gidLink(cast(void**)&gtk_arrow_set, "gtk_arrow_set", LIBS);

  // ArrowAccessible
  gidLink(cast(void**)&gtk_arrow_accessible_get_type, "gtk_arrow_accessible_get_type", LIBS);

  // AspectFrame
  gidLink(cast(void**)&gtk_aspect_frame_get_type, "gtk_aspect_frame_get_type", LIBS);
  gidLink(cast(void**)&gtk_aspect_frame_new, "gtk_aspect_frame_new", LIBS);
  gidLink(cast(void**)&gtk_aspect_frame_set, "gtk_aspect_frame_set", LIBS);

  // Assistant
  gidLink(cast(void**)&gtk_assistant_get_type, "gtk_assistant_get_type", LIBS);
  gidLink(cast(void**)&gtk_assistant_new, "gtk_assistant_new", LIBS);
  gidLink(cast(void**)&gtk_assistant_add_action_widget, "gtk_assistant_add_action_widget", LIBS);
  gidLink(cast(void**)&gtk_assistant_append_page, "gtk_assistant_append_page", LIBS);
  gidLink(cast(void**)&gtk_assistant_commit, "gtk_assistant_commit", LIBS);
  gidLink(cast(void**)&gtk_assistant_get_current_page, "gtk_assistant_get_current_page", LIBS);
  gidLink(cast(void**)&gtk_assistant_get_n_pages, "gtk_assistant_get_n_pages", LIBS);
  gidLink(cast(void**)&gtk_assistant_get_nth_page, "gtk_assistant_get_nth_page", LIBS);
  gidLink(cast(void**)&gtk_assistant_get_page_complete, "gtk_assistant_get_page_complete", LIBS);
  gidLink(cast(void**)&gtk_assistant_get_page_has_padding, "gtk_assistant_get_page_has_padding", LIBS);
  gidLink(cast(void**)&gtk_assistant_get_page_header_image, "gtk_assistant_get_page_header_image", LIBS);
  gidLink(cast(void**)&gtk_assistant_get_page_side_image, "gtk_assistant_get_page_side_image", LIBS);
  gidLink(cast(void**)&gtk_assistant_get_page_title, "gtk_assistant_get_page_title", LIBS);
  gidLink(cast(void**)&gtk_assistant_get_page_type, "gtk_assistant_get_page_type", LIBS);
  gidLink(cast(void**)&gtk_assistant_insert_page, "gtk_assistant_insert_page", LIBS);
  gidLink(cast(void**)&gtk_assistant_next_page, "gtk_assistant_next_page", LIBS);
  gidLink(cast(void**)&gtk_assistant_prepend_page, "gtk_assistant_prepend_page", LIBS);
  gidLink(cast(void**)&gtk_assistant_previous_page, "gtk_assistant_previous_page", LIBS);
  gidLink(cast(void**)&gtk_assistant_remove_action_widget, "gtk_assistant_remove_action_widget", LIBS);
  gidLink(cast(void**)&gtk_assistant_remove_page, "gtk_assistant_remove_page", LIBS);
  gidLink(cast(void**)&gtk_assistant_set_current_page, "gtk_assistant_set_current_page", LIBS);
  gidLink(cast(void**)&gtk_assistant_set_forward_page_func, "gtk_assistant_set_forward_page_func", LIBS);
  gidLink(cast(void**)&gtk_assistant_set_page_complete, "gtk_assistant_set_page_complete", LIBS);
  gidLink(cast(void**)&gtk_assistant_set_page_has_padding, "gtk_assistant_set_page_has_padding", LIBS);
  gidLink(cast(void**)&gtk_assistant_set_page_header_image, "gtk_assistant_set_page_header_image", LIBS);
  gidLink(cast(void**)&gtk_assistant_set_page_side_image, "gtk_assistant_set_page_side_image", LIBS);
  gidLink(cast(void**)&gtk_assistant_set_page_title, "gtk_assistant_set_page_title", LIBS);
  gidLink(cast(void**)&gtk_assistant_set_page_type, "gtk_assistant_set_page_type", LIBS);
  gidLink(cast(void**)&gtk_assistant_update_buttons_state, "gtk_assistant_update_buttons_state", LIBS);

  // Bin
  gidLink(cast(void**)&gtk_bin_get_type, "gtk_bin_get_type", LIBS);
  gidLink(cast(void**)&gtk_bin_get_child, "gtk_bin_get_child", LIBS);

  // BindingEntry
  gidLink(cast(void**)&gtk_binding_entry_add_signal, "gtk_binding_entry_add_signal", LIBS);
  gidLink(cast(void**)&gtk_binding_entry_add_signal_from_string, "gtk_binding_entry_add_signal_from_string", LIBS);
  gidLink(cast(void**)&gtk_binding_entry_add_signall, "gtk_binding_entry_add_signall", LIBS);
  gidLink(cast(void**)&gtk_binding_entry_remove, "gtk_binding_entry_remove", LIBS);
  gidLink(cast(void**)&gtk_binding_entry_skip, "gtk_binding_entry_skip", LIBS);

  // BindingSet
  gidLink(cast(void**)&gtk_binding_set_activate, "gtk_binding_set_activate", LIBS);
  gidLink(cast(void**)&gtk_binding_set_add_path, "gtk_binding_set_add_path", LIBS);
  gidLink(cast(void**)&gtk_binding_set_by_class, "gtk_binding_set_by_class", LIBS);
  gidLink(cast(void**)&gtk_binding_set_find, "gtk_binding_set_find", LIBS);
  gidLink(cast(void**)&gtk_binding_set_new, "gtk_binding_set_new", LIBS);

  // BooleanCellAccessible
  gidLink(cast(void**)&gtk_boolean_cell_accessible_get_type, "gtk_boolean_cell_accessible_get_type", LIBS);

  // Border
  gidLink(cast(void**)&gtk_border_get_type, "gtk_border_get_type", LIBS);
  gidLink(cast(void**)&gtk_border_new, "gtk_border_new", LIBS);
  gidLink(cast(void**)&gtk_border_copy, "gtk_border_copy", LIBS);
  gidLink(cast(void**)&gtk_border_free, "gtk_border_free", LIBS);

  // Box
  gidLink(cast(void**)&gtk_box_get_type, "gtk_box_get_type", LIBS);
  gidLink(cast(void**)&gtk_box_new, "gtk_box_new", LIBS);
  gidLink(cast(void**)&gtk_box_get_baseline_position, "gtk_box_get_baseline_position", LIBS);
  gidLink(cast(void**)&gtk_box_get_center_widget, "gtk_box_get_center_widget", LIBS);
  gidLink(cast(void**)&gtk_box_get_homogeneous, "gtk_box_get_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_box_get_spacing, "gtk_box_get_spacing", LIBS);
  gidLink(cast(void**)&gtk_box_pack_end, "gtk_box_pack_end", LIBS);
  gidLink(cast(void**)&gtk_box_pack_start, "gtk_box_pack_start", LIBS);
  gidLink(cast(void**)&gtk_box_query_child_packing, "gtk_box_query_child_packing", LIBS);
  gidLink(cast(void**)&gtk_box_reorder_child, "gtk_box_reorder_child", LIBS);
  gidLink(cast(void**)&gtk_box_set_baseline_position, "gtk_box_set_baseline_position", LIBS);
  gidLink(cast(void**)&gtk_box_set_center_widget, "gtk_box_set_center_widget", LIBS);
  gidLink(cast(void**)&gtk_box_set_child_packing, "gtk_box_set_child_packing", LIBS);
  gidLink(cast(void**)&gtk_box_set_homogeneous, "gtk_box_set_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_box_set_spacing, "gtk_box_set_spacing", LIBS);

  // Buildable
  gidLink(cast(void**)&gtk_buildable_get_type, "gtk_buildable_get_type", LIBS);
  gidLink(cast(void**)&gtk_buildable_add_child, "gtk_buildable_add_child", LIBS);
  gidLink(cast(void**)&gtk_buildable_construct_child, "gtk_buildable_construct_child", LIBS);
  gidLink(cast(void**)&gtk_buildable_custom_finished, "gtk_buildable_custom_finished", LIBS);
  gidLink(cast(void**)&gtk_buildable_custom_tag_end, "gtk_buildable_custom_tag_end", LIBS);
  gidLink(cast(void**)&gtk_buildable_custom_tag_start, "gtk_buildable_custom_tag_start", LIBS);
  gidLink(cast(void**)&gtk_buildable_get_internal_child, "gtk_buildable_get_internal_child", LIBS);
  gidLink(cast(void**)&gtk_buildable_get_name, "gtk_buildable_get_name", LIBS);
  gidLink(cast(void**)&gtk_buildable_parser_finished, "gtk_buildable_parser_finished", LIBS);
  gidLink(cast(void**)&gtk_buildable_set_buildable_property, "gtk_buildable_set_buildable_property", LIBS);
  gidLink(cast(void**)&gtk_buildable_set_name, "gtk_buildable_set_name", LIBS);

  // Builder
  gidLink(cast(void**)&gtk_builder_get_type, "gtk_builder_get_type", LIBS);
  gidLink(cast(void**)&gtk_builder_new, "gtk_builder_new", LIBS);
  gidLink(cast(void**)&gtk_builder_new_from_file, "gtk_builder_new_from_file", LIBS);
  gidLink(cast(void**)&gtk_builder_new_from_resource, "gtk_builder_new_from_resource", LIBS);
  gidLink(cast(void**)&gtk_builder_new_from_string, "gtk_builder_new_from_string", LIBS);
  gidLink(cast(void**)&gtk_builder_add_callback_symbol, "gtk_builder_add_callback_symbol", LIBS);
  gidLink(cast(void**)&gtk_builder_add_callback_symbols, "gtk_builder_add_callback_symbols", LIBS);
  gidLink(cast(void**)&gtk_builder_add_from_file, "gtk_builder_add_from_file", LIBS);
  gidLink(cast(void**)&gtk_builder_add_from_resource, "gtk_builder_add_from_resource", LIBS);
  gidLink(cast(void**)&gtk_builder_add_from_string, "gtk_builder_add_from_string", LIBS);
  gidLink(cast(void**)&gtk_builder_add_objects_from_file, "gtk_builder_add_objects_from_file", LIBS);
  gidLink(cast(void**)&gtk_builder_add_objects_from_resource, "gtk_builder_add_objects_from_resource", LIBS);
  gidLink(cast(void**)&gtk_builder_add_objects_from_string, "gtk_builder_add_objects_from_string", LIBS);
  gidLink(cast(void**)&gtk_builder_connect_signals, "gtk_builder_connect_signals", LIBS);
  gidLink(cast(void**)&gtk_builder_connect_signals_full, "gtk_builder_connect_signals_full", LIBS);
  gidLink(cast(void**)&gtk_builder_expose_object, "gtk_builder_expose_object", LIBS);
  gidLink(cast(void**)&gtk_builder_extend_with_template, "gtk_builder_extend_with_template", LIBS);
  gidLink(cast(void**)&gtk_builder_get_application, "gtk_builder_get_application", LIBS);
  gidLink(cast(void**)&gtk_builder_get_object, "gtk_builder_get_object", LIBS);
  gidLink(cast(void**)&gtk_builder_get_objects, "gtk_builder_get_objects", LIBS);
  gidLink(cast(void**)&gtk_builder_get_translation_domain, "gtk_builder_get_translation_domain", LIBS);
  gidLink(cast(void**)&gtk_builder_get_type_from_name, "gtk_builder_get_type_from_name", LIBS);
  gidLink(cast(void**)&gtk_builder_lookup_callback_symbol, "gtk_builder_lookup_callback_symbol", LIBS);
  gidLink(cast(void**)&gtk_builder_set_application, "gtk_builder_set_application", LIBS);
  gidLink(cast(void**)&gtk_builder_set_translation_domain, "gtk_builder_set_translation_domain", LIBS);
  gidLink(cast(void**)&gtk_builder_value_from_string, "gtk_builder_value_from_string", LIBS);
  gidLink(cast(void**)&gtk_builder_value_from_string_type, "gtk_builder_value_from_string_type", LIBS);

  // Button
  gidLink(cast(void**)&gtk_button_get_type, "gtk_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_button_new, "gtk_button_new", LIBS);
  gidLink(cast(void**)&gtk_button_new_from_icon_name, "gtk_button_new_from_icon_name", LIBS);
  gidLink(cast(void**)&gtk_button_new_from_stock, "gtk_button_new_from_stock", LIBS);
  gidLink(cast(void**)&gtk_button_new_with_label, "gtk_button_new_with_label", LIBS);
  gidLink(cast(void**)&gtk_button_new_with_mnemonic, "gtk_button_new_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_button_clicked, "gtk_button_clicked", LIBS);
  gidLink(cast(void**)&gtk_button_enter, "gtk_button_enter", LIBS);
  gidLink(cast(void**)&gtk_button_get_alignment, "gtk_button_get_alignment", LIBS);
  gidLink(cast(void**)&gtk_button_get_always_show_image, "gtk_button_get_always_show_image", LIBS);
  gidLink(cast(void**)&gtk_button_get_event_window, "gtk_button_get_event_window", LIBS);
  gidLink(cast(void**)&gtk_button_get_focus_on_click, "gtk_button_get_focus_on_click", LIBS);
  gidLink(cast(void**)&gtk_button_get_image, "gtk_button_get_image", LIBS);
  gidLink(cast(void**)&gtk_button_get_image_position, "gtk_button_get_image_position", LIBS);
  gidLink(cast(void**)&gtk_button_get_label, "gtk_button_get_label", LIBS);
  gidLink(cast(void**)&gtk_button_get_relief, "gtk_button_get_relief", LIBS);
  gidLink(cast(void**)&gtk_button_get_use_stock, "gtk_button_get_use_stock", LIBS);
  gidLink(cast(void**)&gtk_button_get_use_underline, "gtk_button_get_use_underline", LIBS);
  gidLink(cast(void**)&gtk_button_leave, "gtk_button_leave", LIBS);
  gidLink(cast(void**)&gtk_button_pressed, "gtk_button_pressed", LIBS);
  gidLink(cast(void**)&gtk_button_released, "gtk_button_released", LIBS);
  gidLink(cast(void**)&gtk_button_set_alignment, "gtk_button_set_alignment", LIBS);
  gidLink(cast(void**)&gtk_button_set_always_show_image, "gtk_button_set_always_show_image", LIBS);
  gidLink(cast(void**)&gtk_button_set_focus_on_click, "gtk_button_set_focus_on_click", LIBS);
  gidLink(cast(void**)&gtk_button_set_image, "gtk_button_set_image", LIBS);
  gidLink(cast(void**)&gtk_button_set_image_position, "gtk_button_set_image_position", LIBS);
  gidLink(cast(void**)&gtk_button_set_label, "gtk_button_set_label", LIBS);
  gidLink(cast(void**)&gtk_button_set_relief, "gtk_button_set_relief", LIBS);
  gidLink(cast(void**)&gtk_button_set_use_stock, "gtk_button_set_use_stock", LIBS);
  gidLink(cast(void**)&gtk_button_set_use_underline, "gtk_button_set_use_underline", LIBS);

  // ButtonAccessible
  gidLink(cast(void**)&gtk_button_accessible_get_type, "gtk_button_accessible_get_type", LIBS);

  // ButtonBox
  gidLink(cast(void**)&gtk_button_box_get_type, "gtk_button_box_get_type", LIBS);
  gidLink(cast(void**)&gtk_button_box_new, "gtk_button_box_new", LIBS);
  gidLink(cast(void**)&gtk_button_box_get_child_non_homogeneous, "gtk_button_box_get_child_non_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_button_box_get_child_secondary, "gtk_button_box_get_child_secondary", LIBS);
  gidLink(cast(void**)&gtk_button_box_get_layout, "gtk_button_box_get_layout", LIBS);
  gidLink(cast(void**)&gtk_button_box_set_child_non_homogeneous, "gtk_button_box_set_child_non_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_button_box_set_child_secondary, "gtk_button_box_set_child_secondary", LIBS);
  gidLink(cast(void**)&gtk_button_box_set_layout, "gtk_button_box_set_layout", LIBS);

  // Calendar
  gidLink(cast(void**)&gtk_calendar_get_type, "gtk_calendar_get_type", LIBS);
  gidLink(cast(void**)&gtk_calendar_new, "gtk_calendar_new", LIBS);
  gidLink(cast(void**)&gtk_calendar_clear_marks, "gtk_calendar_clear_marks", LIBS);
  gidLink(cast(void**)&gtk_calendar_get_date, "gtk_calendar_get_date", LIBS);
  gidLink(cast(void**)&gtk_calendar_get_day_is_marked, "gtk_calendar_get_day_is_marked", LIBS);
  gidLink(cast(void**)&gtk_calendar_get_detail_height_rows, "gtk_calendar_get_detail_height_rows", LIBS);
  gidLink(cast(void**)&gtk_calendar_get_detail_width_chars, "gtk_calendar_get_detail_width_chars", LIBS);
  gidLink(cast(void**)&gtk_calendar_get_display_options, "gtk_calendar_get_display_options", LIBS);
  gidLink(cast(void**)&gtk_calendar_mark_day, "gtk_calendar_mark_day", LIBS);
  gidLink(cast(void**)&gtk_calendar_select_day, "gtk_calendar_select_day", LIBS);
  gidLink(cast(void**)&gtk_calendar_select_month, "gtk_calendar_select_month", LIBS);
  gidLink(cast(void**)&gtk_calendar_set_detail_func, "gtk_calendar_set_detail_func", LIBS);
  gidLink(cast(void**)&gtk_calendar_set_detail_height_rows, "gtk_calendar_set_detail_height_rows", LIBS);
  gidLink(cast(void**)&gtk_calendar_set_detail_width_chars, "gtk_calendar_set_detail_width_chars", LIBS);
  gidLink(cast(void**)&gtk_calendar_set_display_options, "gtk_calendar_set_display_options", LIBS);
  gidLink(cast(void**)&gtk_calendar_unmark_day, "gtk_calendar_unmark_day", LIBS);

  // CellAccessible
  gidLink(cast(void**)&gtk_cell_accessible_get_type, "gtk_cell_accessible_get_type", LIBS);

  // CellAccessibleParent
  gidLink(cast(void**)&gtk_cell_accessible_parent_get_type, "gtk_cell_accessible_parent_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_activate, "gtk_cell_accessible_parent_activate", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_edit, "gtk_cell_accessible_parent_edit", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_expand_collapse, "gtk_cell_accessible_parent_expand_collapse", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_get_cell_area, "gtk_cell_accessible_parent_get_cell_area", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_get_cell_extents, "gtk_cell_accessible_parent_get_cell_extents", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_get_cell_position, "gtk_cell_accessible_parent_get_cell_position", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_get_child_index, "gtk_cell_accessible_parent_get_child_index", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_get_column_header_cells, "gtk_cell_accessible_parent_get_column_header_cells", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_get_renderer_state, "gtk_cell_accessible_parent_get_renderer_state", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_get_row_header_cells, "gtk_cell_accessible_parent_get_row_header_cells", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_grab_focus, "gtk_cell_accessible_parent_grab_focus", LIBS);
  gidLink(cast(void**)&gtk_cell_accessible_parent_update_relationset, "gtk_cell_accessible_parent_update_relationset", LIBS);

  // CellArea
  gidLink(cast(void**)&gtk_cell_area_get_type, "gtk_cell_area_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_area_activate, "gtk_cell_area_activate", LIBS);
  gidLink(cast(void**)&gtk_cell_area_activate_cell, "gtk_cell_area_activate_cell", LIBS);
  gidLink(cast(void**)&gtk_cell_area_add, "gtk_cell_area_add", LIBS);
  gidLink(cast(void**)&gtk_cell_area_add_focus_sibling, "gtk_cell_area_add_focus_sibling", LIBS);
  gidLink(cast(void**)&gtk_cell_area_add_with_properties, "gtk_cell_area_add_with_properties", LIBS);
  gidLink(cast(void**)&gtk_cell_area_apply_attributes, "gtk_cell_area_apply_attributes", LIBS);
  gidLink(cast(void**)&gtk_cell_area_attribute_connect, "gtk_cell_area_attribute_connect", LIBS);
  gidLink(cast(void**)&gtk_cell_area_attribute_disconnect, "gtk_cell_area_attribute_disconnect", LIBS);
  gidLink(cast(void**)&gtk_cell_area_attribute_get_column, "gtk_cell_area_attribute_get_column", LIBS);
  gidLink(cast(void**)&gtk_cell_area_cell_get, "gtk_cell_area_cell_get", LIBS);
  gidLink(cast(void**)&gtk_cell_area_cell_get_property, "gtk_cell_area_cell_get_property", LIBS);
  gidLink(cast(void**)&gtk_cell_area_cell_get_valist, "gtk_cell_area_cell_get_valist", LIBS);
  gidLink(cast(void**)&gtk_cell_area_cell_set, "gtk_cell_area_cell_set", LIBS);
  gidLink(cast(void**)&gtk_cell_area_cell_set_property, "gtk_cell_area_cell_set_property", LIBS);
  gidLink(cast(void**)&gtk_cell_area_cell_set_valist, "gtk_cell_area_cell_set_valist", LIBS);
  gidLink(cast(void**)&gtk_cell_area_copy_context, "gtk_cell_area_copy_context", LIBS);
  gidLink(cast(void**)&gtk_cell_area_create_context, "gtk_cell_area_create_context", LIBS);
  gidLink(cast(void**)&gtk_cell_area_event, "gtk_cell_area_event", LIBS);
  gidLink(cast(void**)&gtk_cell_area_focus, "gtk_cell_area_focus", LIBS);
  gidLink(cast(void**)&gtk_cell_area_foreach, "gtk_cell_area_foreach", LIBS);
  gidLink(cast(void**)&gtk_cell_area_foreach_alloc, "gtk_cell_area_foreach_alloc", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_cell_allocation, "gtk_cell_area_get_cell_allocation", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_cell_at_position, "gtk_cell_area_get_cell_at_position", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_current_path_string, "gtk_cell_area_get_current_path_string", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_edit_widget, "gtk_cell_area_get_edit_widget", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_edited_cell, "gtk_cell_area_get_edited_cell", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_focus_cell, "gtk_cell_area_get_focus_cell", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_focus_from_sibling, "gtk_cell_area_get_focus_from_sibling", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_focus_siblings, "gtk_cell_area_get_focus_siblings", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_preferred_height, "gtk_cell_area_get_preferred_height", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_preferred_height_for_width, "gtk_cell_area_get_preferred_height_for_width", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_preferred_width, "gtk_cell_area_get_preferred_width", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_preferred_width_for_height, "gtk_cell_area_get_preferred_width_for_height", LIBS);
  gidLink(cast(void**)&gtk_cell_area_get_request_mode, "gtk_cell_area_get_request_mode", LIBS);
  gidLink(cast(void**)&gtk_cell_area_has_renderer, "gtk_cell_area_has_renderer", LIBS);
  gidLink(cast(void**)&gtk_cell_area_inner_cell_area, "gtk_cell_area_inner_cell_area", LIBS);
  gidLink(cast(void**)&gtk_cell_area_is_activatable, "gtk_cell_area_is_activatable", LIBS);
  gidLink(cast(void**)&gtk_cell_area_is_focus_sibling, "gtk_cell_area_is_focus_sibling", LIBS);
  gidLink(cast(void**)&gtk_cell_area_remove, "gtk_cell_area_remove", LIBS);
  gidLink(cast(void**)&gtk_cell_area_remove_focus_sibling, "gtk_cell_area_remove_focus_sibling", LIBS);
  gidLink(cast(void**)&gtk_cell_area_render, "gtk_cell_area_render", LIBS);
  gidLink(cast(void**)&gtk_cell_area_request_renderer, "gtk_cell_area_request_renderer", LIBS);
  gidLink(cast(void**)&gtk_cell_area_set_focus_cell, "gtk_cell_area_set_focus_cell", LIBS);
  gidLink(cast(void**)&gtk_cell_area_stop_editing, "gtk_cell_area_stop_editing", LIBS);

  // CellAreaBox
  gidLink(cast(void**)&gtk_cell_area_box_get_type, "gtk_cell_area_box_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_area_box_new, "gtk_cell_area_box_new", LIBS);
  gidLink(cast(void**)&gtk_cell_area_box_get_spacing, "gtk_cell_area_box_get_spacing", LIBS);
  gidLink(cast(void**)&gtk_cell_area_box_pack_end, "gtk_cell_area_box_pack_end", LIBS);
  gidLink(cast(void**)&gtk_cell_area_box_pack_start, "gtk_cell_area_box_pack_start", LIBS);
  gidLink(cast(void**)&gtk_cell_area_box_set_spacing, "gtk_cell_area_box_set_spacing", LIBS);

  // CellAreaClass
  gidLink(cast(void**)&gtk_cell_area_class_find_cell_property, "gtk_cell_area_class_find_cell_property", LIBS);
  gidLink(cast(void**)&gtk_cell_area_class_install_cell_property, "gtk_cell_area_class_install_cell_property", LIBS);
  gidLink(cast(void**)&gtk_cell_area_class_list_cell_properties, "gtk_cell_area_class_list_cell_properties", LIBS);

  // CellAreaContext
  gidLink(cast(void**)&gtk_cell_area_context_get_type, "gtk_cell_area_context_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_area_context_allocate, "gtk_cell_area_context_allocate", LIBS);
  gidLink(cast(void**)&gtk_cell_area_context_get_allocation, "gtk_cell_area_context_get_allocation", LIBS);
  gidLink(cast(void**)&gtk_cell_area_context_get_area, "gtk_cell_area_context_get_area", LIBS);
  gidLink(cast(void**)&gtk_cell_area_context_get_preferred_height, "gtk_cell_area_context_get_preferred_height", LIBS);
  gidLink(cast(void**)&gtk_cell_area_context_get_preferred_height_for_width, "gtk_cell_area_context_get_preferred_height_for_width", LIBS);
  gidLink(cast(void**)&gtk_cell_area_context_get_preferred_width, "gtk_cell_area_context_get_preferred_width", LIBS);
  gidLink(cast(void**)&gtk_cell_area_context_get_preferred_width_for_height, "gtk_cell_area_context_get_preferred_width_for_height", LIBS);
  gidLink(cast(void**)&gtk_cell_area_context_push_preferred_height, "gtk_cell_area_context_push_preferred_height", LIBS);
  gidLink(cast(void**)&gtk_cell_area_context_push_preferred_width, "gtk_cell_area_context_push_preferred_width", LIBS);
  gidLink(cast(void**)&gtk_cell_area_context_reset, "gtk_cell_area_context_reset", LIBS);

  // CellEditable
  gidLink(cast(void**)&gtk_cell_editable_get_type, "gtk_cell_editable_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_editable_editing_done, "gtk_cell_editable_editing_done", LIBS);
  gidLink(cast(void**)&gtk_cell_editable_remove_widget, "gtk_cell_editable_remove_widget", LIBS);
  gidLink(cast(void**)&gtk_cell_editable_start_editing, "gtk_cell_editable_start_editing", LIBS);

  // CellLayout
  gidLink(cast(void**)&gtk_cell_layout_get_type, "gtk_cell_layout_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_layout_add_attribute, "gtk_cell_layout_add_attribute", LIBS);
  gidLink(cast(void**)&gtk_cell_layout_clear, "gtk_cell_layout_clear", LIBS);
  gidLink(cast(void**)&gtk_cell_layout_clear_attributes, "gtk_cell_layout_clear_attributes", LIBS);
  gidLink(cast(void**)&gtk_cell_layout_get_area, "gtk_cell_layout_get_area", LIBS);
  gidLink(cast(void**)&gtk_cell_layout_get_cells, "gtk_cell_layout_get_cells", LIBS);
  gidLink(cast(void**)&gtk_cell_layout_pack_end, "gtk_cell_layout_pack_end", LIBS);
  gidLink(cast(void**)&gtk_cell_layout_pack_start, "gtk_cell_layout_pack_start", LIBS);
  gidLink(cast(void**)&gtk_cell_layout_reorder, "gtk_cell_layout_reorder", LIBS);
  gidLink(cast(void**)&gtk_cell_layout_set_attributes, "gtk_cell_layout_set_attributes", LIBS);
  gidLink(cast(void**)&gtk_cell_layout_set_cell_data_func, "gtk_cell_layout_set_cell_data_func", LIBS);

  // CellRenderer
  gidLink(cast(void**)&gtk_cell_renderer_get_type, "gtk_cell_renderer_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_activate, "gtk_cell_renderer_activate", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_aligned_area, "gtk_cell_renderer_get_aligned_area", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_alignment, "gtk_cell_renderer_get_alignment", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_fixed_size, "gtk_cell_renderer_get_fixed_size", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_padding, "gtk_cell_renderer_get_padding", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_preferred_height, "gtk_cell_renderer_get_preferred_height", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_preferred_height_for_width, "gtk_cell_renderer_get_preferred_height_for_width", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_preferred_size, "gtk_cell_renderer_get_preferred_size", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_preferred_width, "gtk_cell_renderer_get_preferred_width", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_preferred_width_for_height, "gtk_cell_renderer_get_preferred_width_for_height", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_request_mode, "gtk_cell_renderer_get_request_mode", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_sensitive, "gtk_cell_renderer_get_sensitive", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_size, "gtk_cell_renderer_get_size", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_state, "gtk_cell_renderer_get_state", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_get_visible, "gtk_cell_renderer_get_visible", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_is_activatable, "gtk_cell_renderer_is_activatable", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_render, "gtk_cell_renderer_render", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_set_alignment, "gtk_cell_renderer_set_alignment", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_set_fixed_size, "gtk_cell_renderer_set_fixed_size", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_set_padding, "gtk_cell_renderer_set_padding", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_set_sensitive, "gtk_cell_renderer_set_sensitive", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_set_visible, "gtk_cell_renderer_set_visible", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_start_editing, "gtk_cell_renderer_start_editing", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_stop_editing, "gtk_cell_renderer_stop_editing", LIBS);

  // CellRendererAccel
  gidLink(cast(void**)&gtk_cell_renderer_accel_get_type, "gtk_cell_renderer_accel_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_accel_new, "gtk_cell_renderer_accel_new", LIBS);

  // CellRendererClass
  gidLink(cast(void**)&gtk_cell_renderer_class_set_accessible_type, "gtk_cell_renderer_class_set_accessible_type", LIBS);

  // CellRendererCombo
  gidLink(cast(void**)&gtk_cell_renderer_combo_get_type, "gtk_cell_renderer_combo_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_combo_new, "gtk_cell_renderer_combo_new", LIBS);

  // CellRendererPixbuf
  gidLink(cast(void**)&gtk_cell_renderer_pixbuf_get_type, "gtk_cell_renderer_pixbuf_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_pixbuf_new, "gtk_cell_renderer_pixbuf_new", LIBS);

  // CellRendererProgress
  gidLink(cast(void**)&gtk_cell_renderer_progress_get_type, "gtk_cell_renderer_progress_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_progress_new, "gtk_cell_renderer_progress_new", LIBS);

  // CellRendererSpin
  gidLink(cast(void**)&gtk_cell_renderer_spin_get_type, "gtk_cell_renderer_spin_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_spin_new, "gtk_cell_renderer_spin_new", LIBS);

  // CellRendererSpinner
  gidLink(cast(void**)&gtk_cell_renderer_spinner_get_type, "gtk_cell_renderer_spinner_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_spinner_new, "gtk_cell_renderer_spinner_new", LIBS);

  // CellRendererText
  gidLink(cast(void**)&gtk_cell_renderer_text_get_type, "gtk_cell_renderer_text_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_text_new, "gtk_cell_renderer_text_new", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_text_set_fixed_height_from_font, "gtk_cell_renderer_text_set_fixed_height_from_font", LIBS);

  // CellRendererToggle
  gidLink(cast(void**)&gtk_cell_renderer_toggle_get_type, "gtk_cell_renderer_toggle_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_toggle_new, "gtk_cell_renderer_toggle_new", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_toggle_get_activatable, "gtk_cell_renderer_toggle_get_activatable", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_toggle_get_active, "gtk_cell_renderer_toggle_get_active", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_toggle_get_radio, "gtk_cell_renderer_toggle_get_radio", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_toggle_set_activatable, "gtk_cell_renderer_toggle_set_activatable", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_toggle_set_active, "gtk_cell_renderer_toggle_set_active", LIBS);
  gidLink(cast(void**)&gtk_cell_renderer_toggle_set_radio, "gtk_cell_renderer_toggle_set_radio", LIBS);

  // CellView
  gidLink(cast(void**)&gtk_cell_view_get_type, "gtk_cell_view_get_type", LIBS);
  gidLink(cast(void**)&gtk_cell_view_new, "gtk_cell_view_new", LIBS);
  gidLink(cast(void**)&gtk_cell_view_new_with_context, "gtk_cell_view_new_with_context", LIBS);
  gidLink(cast(void**)&gtk_cell_view_new_with_markup, "gtk_cell_view_new_with_markup", LIBS);
  gidLink(cast(void**)&gtk_cell_view_new_with_pixbuf, "gtk_cell_view_new_with_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_cell_view_new_with_text, "gtk_cell_view_new_with_text", LIBS);
  gidLink(cast(void**)&gtk_cell_view_get_displayed_row, "gtk_cell_view_get_displayed_row", LIBS);
  gidLink(cast(void**)&gtk_cell_view_get_draw_sensitive, "gtk_cell_view_get_draw_sensitive", LIBS);
  gidLink(cast(void**)&gtk_cell_view_get_fit_model, "gtk_cell_view_get_fit_model", LIBS);
  gidLink(cast(void**)&gtk_cell_view_get_model, "gtk_cell_view_get_model", LIBS);
  gidLink(cast(void**)&gtk_cell_view_get_size_of_row, "gtk_cell_view_get_size_of_row", LIBS);
  gidLink(cast(void**)&gtk_cell_view_set_background_color, "gtk_cell_view_set_background_color", LIBS);
  gidLink(cast(void**)&gtk_cell_view_set_background_rgba, "gtk_cell_view_set_background_rgba", LIBS);
  gidLink(cast(void**)&gtk_cell_view_set_displayed_row, "gtk_cell_view_set_displayed_row", LIBS);
  gidLink(cast(void**)&gtk_cell_view_set_draw_sensitive, "gtk_cell_view_set_draw_sensitive", LIBS);
  gidLink(cast(void**)&gtk_cell_view_set_fit_model, "gtk_cell_view_set_fit_model", LIBS);
  gidLink(cast(void**)&gtk_cell_view_set_model, "gtk_cell_view_set_model", LIBS);

  // CheckButton
  gidLink(cast(void**)&gtk_check_button_get_type, "gtk_check_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_check_button_new, "gtk_check_button_new", LIBS);
  gidLink(cast(void**)&gtk_check_button_new_with_label, "gtk_check_button_new_with_label", LIBS);
  gidLink(cast(void**)&gtk_check_button_new_with_mnemonic, "gtk_check_button_new_with_mnemonic", LIBS);

  // CheckMenuItem
  gidLink(cast(void**)&gtk_check_menu_item_get_type, "gtk_check_menu_item_get_type", LIBS);
  gidLink(cast(void**)&gtk_check_menu_item_new, "gtk_check_menu_item_new", LIBS);
  gidLink(cast(void**)&gtk_check_menu_item_new_with_label, "gtk_check_menu_item_new_with_label", LIBS);
  gidLink(cast(void**)&gtk_check_menu_item_new_with_mnemonic, "gtk_check_menu_item_new_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_check_menu_item_get_active, "gtk_check_menu_item_get_active", LIBS);
  gidLink(cast(void**)&gtk_check_menu_item_get_draw_as_radio, "gtk_check_menu_item_get_draw_as_radio", LIBS);
  gidLink(cast(void**)&gtk_check_menu_item_get_inconsistent, "gtk_check_menu_item_get_inconsistent", LIBS);
  gidLink(cast(void**)&gtk_check_menu_item_set_active, "gtk_check_menu_item_set_active", LIBS);
  gidLink(cast(void**)&gtk_check_menu_item_set_draw_as_radio, "gtk_check_menu_item_set_draw_as_radio", LIBS);
  gidLink(cast(void**)&gtk_check_menu_item_set_inconsistent, "gtk_check_menu_item_set_inconsistent", LIBS);
  gidLink(cast(void**)&gtk_check_menu_item_toggled, "gtk_check_menu_item_toggled", LIBS);

  // CheckMenuItemAccessible
  gidLink(cast(void**)&gtk_check_menu_item_accessible_get_type, "gtk_check_menu_item_accessible_get_type", LIBS);

  // Clipboard
  gidLink(cast(void**)&gtk_clipboard_get_type, "gtk_clipboard_get_type", LIBS);
  gidLink(cast(void**)&gtk_clipboard_get, "gtk_clipboard_get", LIBS);
  gidLink(cast(void**)&gtk_clipboard_get_default, "gtk_clipboard_get_default", LIBS);
  gidLink(cast(void**)&gtk_clipboard_get_for_display, "gtk_clipboard_get_for_display", LIBS);
  gidLink(cast(void**)&gtk_clipboard_clear, "gtk_clipboard_clear", LIBS);
  gidLink(cast(void**)&gtk_clipboard_get_display, "gtk_clipboard_get_display", LIBS);
  gidLink(cast(void**)&gtk_clipboard_get_owner, "gtk_clipboard_get_owner", LIBS);
  gidLink(cast(void**)&gtk_clipboard_get_selection, "gtk_clipboard_get_selection", LIBS);
  gidLink(cast(void**)&gtk_clipboard_request_contents, "gtk_clipboard_request_contents", LIBS);
  gidLink(cast(void**)&gtk_clipboard_request_image, "gtk_clipboard_request_image", LIBS);
  gidLink(cast(void**)&gtk_clipboard_request_rich_text, "gtk_clipboard_request_rich_text", LIBS);
  gidLink(cast(void**)&gtk_clipboard_request_targets, "gtk_clipboard_request_targets", LIBS);
  gidLink(cast(void**)&gtk_clipboard_request_text, "gtk_clipboard_request_text", LIBS);
  gidLink(cast(void**)&gtk_clipboard_request_uris, "gtk_clipboard_request_uris", LIBS);
  gidLink(cast(void**)&gtk_clipboard_set_can_store, "gtk_clipboard_set_can_store", LIBS);
  gidLink(cast(void**)&gtk_clipboard_set_image, "gtk_clipboard_set_image", LIBS);
  gidLink(cast(void**)&gtk_clipboard_set_text, "gtk_clipboard_set_text", LIBS);
  gidLink(cast(void**)&gtk_clipboard_set_with_data, "gtk_clipboard_set_with_data", LIBS);
  gidLink(cast(void**)&gtk_clipboard_set_with_owner, "gtk_clipboard_set_with_owner", LIBS);
  gidLink(cast(void**)&gtk_clipboard_store, "gtk_clipboard_store", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_for_contents, "gtk_clipboard_wait_for_contents", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_for_image, "gtk_clipboard_wait_for_image", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_for_rich_text, "gtk_clipboard_wait_for_rich_text", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_for_targets, "gtk_clipboard_wait_for_targets", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_for_text, "gtk_clipboard_wait_for_text", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_for_uris, "gtk_clipboard_wait_for_uris", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_is_image_available, "gtk_clipboard_wait_is_image_available", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_is_rich_text_available, "gtk_clipboard_wait_is_rich_text_available", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_is_target_available, "gtk_clipboard_wait_is_target_available", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_is_text_available, "gtk_clipboard_wait_is_text_available", LIBS);
  gidLink(cast(void**)&gtk_clipboard_wait_is_uris_available, "gtk_clipboard_wait_is_uris_available", LIBS);

  // ColorButton
  gidLink(cast(void**)&gtk_color_button_get_type, "gtk_color_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_color_button_new, "gtk_color_button_new", LIBS);
  gidLink(cast(void**)&gtk_color_button_new_with_color, "gtk_color_button_new_with_color", LIBS);
  gidLink(cast(void**)&gtk_color_button_new_with_rgba, "gtk_color_button_new_with_rgba", LIBS);
  gidLink(cast(void**)&gtk_color_button_get_alpha, "gtk_color_button_get_alpha", LIBS);
  gidLink(cast(void**)&gtk_color_button_get_color, "gtk_color_button_get_color", LIBS);
  gidLink(cast(void**)&gtk_color_button_get_rgba, "gtk_color_button_get_rgba", LIBS);
  gidLink(cast(void**)&gtk_color_button_get_title, "gtk_color_button_get_title", LIBS);
  gidLink(cast(void**)&gtk_color_button_get_use_alpha, "gtk_color_button_get_use_alpha", LIBS);
  gidLink(cast(void**)&gtk_color_button_set_alpha, "gtk_color_button_set_alpha", LIBS);
  gidLink(cast(void**)&gtk_color_button_set_color, "gtk_color_button_set_color", LIBS);
  gidLink(cast(void**)&gtk_color_button_set_rgba, "gtk_color_button_set_rgba", LIBS);
  gidLink(cast(void**)&gtk_color_button_set_title, "gtk_color_button_set_title", LIBS);
  gidLink(cast(void**)&gtk_color_button_set_use_alpha, "gtk_color_button_set_use_alpha", LIBS);

  // ColorChooser
  gidLink(cast(void**)&gtk_color_chooser_get_type, "gtk_color_chooser_get_type", LIBS);
  gidLink(cast(void**)&gtk_color_chooser_add_palette, "gtk_color_chooser_add_palette", LIBS);
  gidLink(cast(void**)&gtk_color_chooser_get_rgba, "gtk_color_chooser_get_rgba", LIBS);
  gidLink(cast(void**)&gtk_color_chooser_get_use_alpha, "gtk_color_chooser_get_use_alpha", LIBS);
  gidLink(cast(void**)&gtk_color_chooser_set_rgba, "gtk_color_chooser_set_rgba", LIBS);
  gidLink(cast(void**)&gtk_color_chooser_set_use_alpha, "gtk_color_chooser_set_use_alpha", LIBS);

  // ColorChooserDialog
  gidLink(cast(void**)&gtk_color_chooser_dialog_get_type, "gtk_color_chooser_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_color_chooser_dialog_new, "gtk_color_chooser_dialog_new", LIBS);

  // ColorChooserWidget
  gidLink(cast(void**)&gtk_color_chooser_widget_get_type, "gtk_color_chooser_widget_get_type", LIBS);
  gidLink(cast(void**)&gtk_color_chooser_widget_new, "gtk_color_chooser_widget_new", LIBS);

  // ColorSelection
  gidLink(cast(void**)&gtk_color_selection_get_type, "gtk_color_selection_get_type", LIBS);
  gidLink(cast(void**)&gtk_color_selection_new, "gtk_color_selection_new", LIBS);
  gidLink(cast(void**)&gtk_color_selection_palette_from_string, "gtk_color_selection_palette_from_string", LIBS);
  gidLink(cast(void**)&gtk_color_selection_palette_to_string, "gtk_color_selection_palette_to_string", LIBS);
  gidLink(cast(void**)&gtk_color_selection_set_change_palette_with_screen_hook, "gtk_color_selection_set_change_palette_with_screen_hook", LIBS);
  gidLink(cast(void**)&gtk_color_selection_get_current_alpha, "gtk_color_selection_get_current_alpha", LIBS);
  gidLink(cast(void**)&gtk_color_selection_get_current_color, "gtk_color_selection_get_current_color", LIBS);
  gidLink(cast(void**)&gtk_color_selection_get_current_rgba, "gtk_color_selection_get_current_rgba", LIBS);
  gidLink(cast(void**)&gtk_color_selection_get_has_opacity_control, "gtk_color_selection_get_has_opacity_control", LIBS);
  gidLink(cast(void**)&gtk_color_selection_get_has_palette, "gtk_color_selection_get_has_palette", LIBS);
  gidLink(cast(void**)&gtk_color_selection_get_previous_alpha, "gtk_color_selection_get_previous_alpha", LIBS);
  gidLink(cast(void**)&gtk_color_selection_get_previous_color, "gtk_color_selection_get_previous_color", LIBS);
  gidLink(cast(void**)&gtk_color_selection_get_previous_rgba, "gtk_color_selection_get_previous_rgba", LIBS);
  gidLink(cast(void**)&gtk_color_selection_is_adjusting, "gtk_color_selection_is_adjusting", LIBS);
  gidLink(cast(void**)&gtk_color_selection_set_current_alpha, "gtk_color_selection_set_current_alpha", LIBS);
  gidLink(cast(void**)&gtk_color_selection_set_current_color, "gtk_color_selection_set_current_color", LIBS);
  gidLink(cast(void**)&gtk_color_selection_set_current_rgba, "gtk_color_selection_set_current_rgba", LIBS);
  gidLink(cast(void**)&gtk_color_selection_set_has_opacity_control, "gtk_color_selection_set_has_opacity_control", LIBS);
  gidLink(cast(void**)&gtk_color_selection_set_has_palette, "gtk_color_selection_set_has_palette", LIBS);
  gidLink(cast(void**)&gtk_color_selection_set_previous_alpha, "gtk_color_selection_set_previous_alpha", LIBS);
  gidLink(cast(void**)&gtk_color_selection_set_previous_color, "gtk_color_selection_set_previous_color", LIBS);
  gidLink(cast(void**)&gtk_color_selection_set_previous_rgba, "gtk_color_selection_set_previous_rgba", LIBS);

  // ColorSelectionDialog
  gidLink(cast(void**)&gtk_color_selection_dialog_get_type, "gtk_color_selection_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_color_selection_dialog_new, "gtk_color_selection_dialog_new", LIBS);
  gidLink(cast(void**)&gtk_color_selection_dialog_get_color_selection, "gtk_color_selection_dialog_get_color_selection", LIBS);

  // ComboBox
  gidLink(cast(void**)&gtk_combo_box_get_type, "gtk_combo_box_get_type", LIBS);
  gidLink(cast(void**)&gtk_combo_box_new, "gtk_combo_box_new", LIBS);
  gidLink(cast(void**)&gtk_combo_box_new_with_area, "gtk_combo_box_new_with_area", LIBS);
  gidLink(cast(void**)&gtk_combo_box_new_with_area_and_entry, "gtk_combo_box_new_with_area_and_entry", LIBS);
  gidLink(cast(void**)&gtk_combo_box_new_with_entry, "gtk_combo_box_new_with_entry", LIBS);
  gidLink(cast(void**)&gtk_combo_box_new_with_model, "gtk_combo_box_new_with_model", LIBS);
  gidLink(cast(void**)&gtk_combo_box_new_with_model_and_entry, "gtk_combo_box_new_with_model_and_entry", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_active, "gtk_combo_box_get_active", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_active_id, "gtk_combo_box_get_active_id", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_active_iter, "gtk_combo_box_get_active_iter", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_add_tearoffs, "gtk_combo_box_get_add_tearoffs", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_button_sensitivity, "gtk_combo_box_get_button_sensitivity", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_column_span_column, "gtk_combo_box_get_column_span_column", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_entry_text_column, "gtk_combo_box_get_entry_text_column", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_focus_on_click, "gtk_combo_box_get_focus_on_click", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_has_entry, "gtk_combo_box_get_has_entry", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_id_column, "gtk_combo_box_get_id_column", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_model, "gtk_combo_box_get_model", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_popup_accessible, "gtk_combo_box_get_popup_accessible", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_popup_fixed_width, "gtk_combo_box_get_popup_fixed_width", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_row_separator_func, "gtk_combo_box_get_row_separator_func", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_row_span_column, "gtk_combo_box_get_row_span_column", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_title, "gtk_combo_box_get_title", LIBS);
  gidLink(cast(void**)&gtk_combo_box_get_wrap_width, "gtk_combo_box_get_wrap_width", LIBS);
  gidLink(cast(void**)&gtk_combo_box_popdown, "gtk_combo_box_popdown", LIBS);
  gidLink(cast(void**)&gtk_combo_box_popup, "gtk_combo_box_popup", LIBS);
  gidLink(cast(void**)&gtk_combo_box_popup_for_device, "gtk_combo_box_popup_for_device", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_active, "gtk_combo_box_set_active", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_active_id, "gtk_combo_box_set_active_id", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_active_iter, "gtk_combo_box_set_active_iter", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_add_tearoffs, "gtk_combo_box_set_add_tearoffs", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_button_sensitivity, "gtk_combo_box_set_button_sensitivity", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_column_span_column, "gtk_combo_box_set_column_span_column", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_entry_text_column, "gtk_combo_box_set_entry_text_column", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_focus_on_click, "gtk_combo_box_set_focus_on_click", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_id_column, "gtk_combo_box_set_id_column", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_model, "gtk_combo_box_set_model", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_popup_fixed_width, "gtk_combo_box_set_popup_fixed_width", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_row_separator_func, "gtk_combo_box_set_row_separator_func", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_row_span_column, "gtk_combo_box_set_row_span_column", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_title, "gtk_combo_box_set_title", LIBS);
  gidLink(cast(void**)&gtk_combo_box_set_wrap_width, "gtk_combo_box_set_wrap_width", LIBS);

  // ComboBoxAccessible
  gidLink(cast(void**)&gtk_combo_box_accessible_get_type, "gtk_combo_box_accessible_get_type", LIBS);

  // ComboBoxText
  gidLink(cast(void**)&gtk_combo_box_text_get_type, "gtk_combo_box_text_get_type", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_new, "gtk_combo_box_text_new", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_new_with_entry, "gtk_combo_box_text_new_with_entry", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_append, "gtk_combo_box_text_append", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_append_text, "gtk_combo_box_text_append_text", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_get_active_text, "gtk_combo_box_text_get_active_text", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_insert, "gtk_combo_box_text_insert", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_insert_text, "gtk_combo_box_text_insert_text", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_prepend, "gtk_combo_box_text_prepend", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_prepend_text, "gtk_combo_box_text_prepend_text", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_remove, "gtk_combo_box_text_remove", LIBS);
  gidLink(cast(void**)&gtk_combo_box_text_remove_all, "gtk_combo_box_text_remove_all", LIBS);

  // Container
  gidLink(cast(void**)&gtk_container_get_type, "gtk_container_get_type", LIBS);
  gidLink(cast(void**)&gtk_container_add, "gtk_container_add", LIBS);
  gidLink(cast(void**)&gtk_container_add_with_properties, "gtk_container_add_with_properties", LIBS);
  gidLink(cast(void**)&gtk_container_check_resize, "gtk_container_check_resize", LIBS);
  gidLink(cast(void**)&gtk_container_child_get, "gtk_container_child_get", LIBS);
  gidLink(cast(void**)&gtk_container_child_get_property, "gtk_container_child_get_property", LIBS);
  gidLink(cast(void**)&gtk_container_child_get_valist, "gtk_container_child_get_valist", LIBS);
  gidLink(cast(void**)&gtk_container_child_notify, "gtk_container_child_notify", LIBS);
  gidLink(cast(void**)&gtk_container_child_notify_by_pspec, "gtk_container_child_notify_by_pspec", LIBS);
  gidLink(cast(void**)&gtk_container_child_set, "gtk_container_child_set", LIBS);
  gidLink(cast(void**)&gtk_container_child_set_property, "gtk_container_child_set_property", LIBS);
  gidLink(cast(void**)&gtk_container_child_set_valist, "gtk_container_child_set_valist", LIBS);
  gidLink(cast(void**)&gtk_container_child_type, "gtk_container_child_type", LIBS);
  gidLink(cast(void**)&gtk_container_forall, "gtk_container_forall", LIBS);
  gidLink(cast(void**)&gtk_container_foreach, "gtk_container_foreach", LIBS);
  gidLink(cast(void**)&gtk_container_get_border_width, "gtk_container_get_border_width", LIBS);
  gidLink(cast(void**)&gtk_container_get_children, "gtk_container_get_children", LIBS);
  gidLink(cast(void**)&gtk_container_get_focus_chain, "gtk_container_get_focus_chain", LIBS);
  gidLink(cast(void**)&gtk_container_get_focus_child, "gtk_container_get_focus_child", LIBS);
  gidLink(cast(void**)&gtk_container_get_focus_hadjustment, "gtk_container_get_focus_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_container_get_focus_vadjustment, "gtk_container_get_focus_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_container_get_path_for_child, "gtk_container_get_path_for_child", LIBS);
  gidLink(cast(void**)&gtk_container_get_resize_mode, "gtk_container_get_resize_mode", LIBS);
  gidLink(cast(void**)&gtk_container_propagate_draw, "gtk_container_propagate_draw", LIBS);
  gidLink(cast(void**)&gtk_container_remove, "gtk_container_remove", LIBS);
  gidLink(cast(void**)&gtk_container_resize_children, "gtk_container_resize_children", LIBS);
  gidLink(cast(void**)&gtk_container_set_border_width, "gtk_container_set_border_width", LIBS);
  gidLink(cast(void**)&gtk_container_set_focus_chain, "gtk_container_set_focus_chain", LIBS);
  gidLink(cast(void**)&gtk_container_set_focus_child, "gtk_container_set_focus_child", LIBS);
  gidLink(cast(void**)&gtk_container_set_focus_hadjustment, "gtk_container_set_focus_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_container_set_focus_vadjustment, "gtk_container_set_focus_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_container_set_reallocate_redraws, "gtk_container_set_reallocate_redraws", LIBS);
  gidLink(cast(void**)&gtk_container_set_resize_mode, "gtk_container_set_resize_mode", LIBS);
  gidLink(cast(void**)&gtk_container_unset_focus_chain, "gtk_container_unset_focus_chain", LIBS);

  // ContainerAccessible
  gidLink(cast(void**)&gtk_container_accessible_get_type, "gtk_container_accessible_get_type", LIBS);

  // ContainerCellAccessible
  gidLink(cast(void**)&gtk_container_cell_accessible_get_type, "gtk_container_cell_accessible_get_type", LIBS);
  gidLink(cast(void**)&gtk_container_cell_accessible_new, "gtk_container_cell_accessible_new", LIBS);
  gidLink(cast(void**)&gtk_container_cell_accessible_add_child, "gtk_container_cell_accessible_add_child", LIBS);
  gidLink(cast(void**)&gtk_container_cell_accessible_get_children, "gtk_container_cell_accessible_get_children", LIBS);
  gidLink(cast(void**)&gtk_container_cell_accessible_remove_child, "gtk_container_cell_accessible_remove_child", LIBS);

  // ContainerClass
  gidLink(cast(void**)&gtk_container_class_find_child_property, "gtk_container_class_find_child_property", LIBS);
  gidLink(cast(void**)&gtk_container_class_handle_border_width, "gtk_container_class_handle_border_width", LIBS);
  gidLink(cast(void**)&gtk_container_class_install_child_properties, "gtk_container_class_install_child_properties", LIBS);
  gidLink(cast(void**)&gtk_container_class_install_child_property, "gtk_container_class_install_child_property", LIBS);
  gidLink(cast(void**)&gtk_container_class_list_child_properties, "gtk_container_class_list_child_properties", LIBS);

  // CssProvider
  gidLink(cast(void**)&gtk_css_provider_get_type, "gtk_css_provider_get_type", LIBS);
  gidLink(cast(void**)&gtk_css_provider_new, "gtk_css_provider_new", LIBS);
  gidLink(cast(void**)&gtk_css_provider_get_default, "gtk_css_provider_get_default", LIBS);
  gidLink(cast(void**)&gtk_css_provider_get_named, "gtk_css_provider_get_named", LIBS);
  gidLink(cast(void**)&gtk_css_provider_load_from_data, "gtk_css_provider_load_from_data", LIBS);
  gidLink(cast(void**)&gtk_css_provider_load_from_file, "gtk_css_provider_load_from_file", LIBS);
  gidLink(cast(void**)&gtk_css_provider_load_from_path, "gtk_css_provider_load_from_path", LIBS);
  gidLink(cast(void**)&gtk_css_provider_load_from_resource, "gtk_css_provider_load_from_resource", LIBS);
  gidLink(cast(void**)&gtk_css_provider_to_string, "gtk_css_provider_to_string", LIBS);

  // CssSection
  gidLink(cast(void**)&gtk_css_section_get_type, "gtk_css_section_get_type", LIBS);
  gidLink(cast(void**)&gtk_css_section_get_end_line, "gtk_css_section_get_end_line", LIBS);
  gidLink(cast(void**)&gtk_css_section_get_end_position, "gtk_css_section_get_end_position", LIBS);
  gidLink(cast(void**)&gtk_css_section_get_file, "gtk_css_section_get_file", LIBS);
  gidLink(cast(void**)&gtk_css_section_get_parent, "gtk_css_section_get_parent", LIBS);
  gidLink(cast(void**)&gtk_css_section_get_section_type, "gtk_css_section_get_section_type", LIBS);
  gidLink(cast(void**)&gtk_css_section_get_start_line, "gtk_css_section_get_start_line", LIBS);
  gidLink(cast(void**)&gtk_css_section_get_start_position, "gtk_css_section_get_start_position", LIBS);
  gidLink(cast(void**)&gtk_css_section_ref, "gtk_css_section_ref", LIBS);
  gidLink(cast(void**)&gtk_css_section_unref, "gtk_css_section_unref", LIBS);

  // Dialog
  gidLink(cast(void**)&gtk_dialog_get_type, "gtk_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_dialog_new, "gtk_dialog_new", LIBS);
  gidLink(cast(void**)&gtk_dialog_new_with_buttons, "gtk_dialog_new_with_buttons", LIBS);
  gidLink(cast(void**)&gtk_dialog_add_action_widget, "gtk_dialog_add_action_widget", LIBS);
  gidLink(cast(void**)&gtk_dialog_add_button, "gtk_dialog_add_button", LIBS);
  gidLink(cast(void**)&gtk_dialog_add_buttons, "gtk_dialog_add_buttons", LIBS);
  gidLink(cast(void**)&gtk_dialog_get_action_area, "gtk_dialog_get_action_area", LIBS);
  gidLink(cast(void**)&gtk_dialog_get_content_area, "gtk_dialog_get_content_area", LIBS);
  gidLink(cast(void**)&gtk_dialog_get_header_bar, "gtk_dialog_get_header_bar", LIBS);
  gidLink(cast(void**)&gtk_dialog_get_response_for_widget, "gtk_dialog_get_response_for_widget", LIBS);
  gidLink(cast(void**)&gtk_dialog_get_widget_for_response, "gtk_dialog_get_widget_for_response", LIBS);
  gidLink(cast(void**)&gtk_dialog_response, "gtk_dialog_response", LIBS);
  gidLink(cast(void**)&gtk_dialog_run, "gtk_dialog_run", LIBS);
  gidLink(cast(void**)&gtk_dialog_set_alternative_button_order, "gtk_dialog_set_alternative_button_order", LIBS);
  gidLink(cast(void**)&gtk_dialog_set_alternative_button_order_from_array, "gtk_dialog_set_alternative_button_order_from_array", LIBS);
  gidLink(cast(void**)&gtk_dialog_set_default_response, "gtk_dialog_set_default_response", LIBS);
  gidLink(cast(void**)&gtk_dialog_set_response_sensitive, "gtk_dialog_set_response_sensitive", LIBS);

  // DrawingArea
  gidLink(cast(void**)&gtk_drawing_area_get_type, "gtk_drawing_area_get_type", LIBS);
  gidLink(cast(void**)&gtk_drawing_area_new, "gtk_drawing_area_new", LIBS);

  // Editable
  gidLink(cast(void**)&gtk_editable_get_type, "gtk_editable_get_type", LIBS);
  gidLink(cast(void**)&gtk_editable_copy_clipboard, "gtk_editable_copy_clipboard", LIBS);
  gidLink(cast(void**)&gtk_editable_cut_clipboard, "gtk_editable_cut_clipboard", LIBS);
  gidLink(cast(void**)&gtk_editable_delete_selection, "gtk_editable_delete_selection", LIBS);
  gidLink(cast(void**)&gtk_editable_delete_text, "gtk_editable_delete_text", LIBS);
  gidLink(cast(void**)&gtk_editable_get_chars, "gtk_editable_get_chars", LIBS);
  gidLink(cast(void**)&gtk_editable_get_editable, "gtk_editable_get_editable", LIBS);
  gidLink(cast(void**)&gtk_editable_get_position, "gtk_editable_get_position", LIBS);
  gidLink(cast(void**)&gtk_editable_get_selection_bounds, "gtk_editable_get_selection_bounds", LIBS);
  gidLink(cast(void**)&gtk_editable_insert_text, "gtk_editable_insert_text", LIBS);
  gidLink(cast(void**)&gtk_editable_paste_clipboard, "gtk_editable_paste_clipboard", LIBS);
  gidLink(cast(void**)&gtk_editable_select_region, "gtk_editable_select_region", LIBS);
  gidLink(cast(void**)&gtk_editable_set_editable, "gtk_editable_set_editable", LIBS);
  gidLink(cast(void**)&gtk_editable_set_position, "gtk_editable_set_position", LIBS);

  // Entry
  gidLink(cast(void**)&gtk_entry_get_type, "gtk_entry_get_type", LIBS);
  gidLink(cast(void**)&gtk_entry_new, "gtk_entry_new", LIBS);
  gidLink(cast(void**)&gtk_entry_new_with_buffer, "gtk_entry_new_with_buffer", LIBS);
  gidLink(cast(void**)&gtk_entry_get_activates_default, "gtk_entry_get_activates_default", LIBS);
  gidLink(cast(void**)&gtk_entry_get_alignment, "gtk_entry_get_alignment", LIBS);
  gidLink(cast(void**)&gtk_entry_get_attributes, "gtk_entry_get_attributes", LIBS);
  gidLink(cast(void**)&gtk_entry_get_buffer, "gtk_entry_get_buffer", LIBS);
  gidLink(cast(void**)&gtk_entry_get_completion, "gtk_entry_get_completion", LIBS);
  gidLink(cast(void**)&gtk_entry_get_current_icon_drag_source, "gtk_entry_get_current_icon_drag_source", LIBS);
  gidLink(cast(void**)&gtk_entry_get_cursor_hadjustment, "gtk_entry_get_cursor_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_entry_get_has_frame, "gtk_entry_get_has_frame", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_activatable, "gtk_entry_get_icon_activatable", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_area, "gtk_entry_get_icon_area", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_at_pos, "gtk_entry_get_icon_at_pos", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_gicon, "gtk_entry_get_icon_gicon", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_name, "gtk_entry_get_icon_name", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_pixbuf, "gtk_entry_get_icon_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_sensitive, "gtk_entry_get_icon_sensitive", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_stock, "gtk_entry_get_icon_stock", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_storage_type, "gtk_entry_get_icon_storage_type", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_tooltip_markup, "gtk_entry_get_icon_tooltip_markup", LIBS);
  gidLink(cast(void**)&gtk_entry_get_icon_tooltip_text, "gtk_entry_get_icon_tooltip_text", LIBS);
  gidLink(cast(void**)&gtk_entry_get_inner_border, "gtk_entry_get_inner_border", LIBS);
  gidLink(cast(void**)&gtk_entry_get_input_hints, "gtk_entry_get_input_hints", LIBS);
  gidLink(cast(void**)&gtk_entry_get_input_purpose, "gtk_entry_get_input_purpose", LIBS);
  gidLink(cast(void**)&gtk_entry_get_invisible_char, "gtk_entry_get_invisible_char", LIBS);
  gidLink(cast(void**)&gtk_entry_get_layout, "gtk_entry_get_layout", LIBS);
  gidLink(cast(void**)&gtk_entry_get_layout_offsets, "gtk_entry_get_layout_offsets", LIBS);
  gidLink(cast(void**)&gtk_entry_get_max_length, "gtk_entry_get_max_length", LIBS);
  gidLink(cast(void**)&gtk_entry_get_max_width_chars, "gtk_entry_get_max_width_chars", LIBS);
  gidLink(cast(void**)&gtk_entry_get_overwrite_mode, "gtk_entry_get_overwrite_mode", LIBS);
  gidLink(cast(void**)&gtk_entry_get_placeholder_text, "gtk_entry_get_placeholder_text", LIBS);
  gidLink(cast(void**)&gtk_entry_get_progress_fraction, "gtk_entry_get_progress_fraction", LIBS);
  gidLink(cast(void**)&gtk_entry_get_progress_pulse_step, "gtk_entry_get_progress_pulse_step", LIBS);
  gidLink(cast(void**)&gtk_entry_get_tabs, "gtk_entry_get_tabs", LIBS);
  gidLink(cast(void**)&gtk_entry_get_text, "gtk_entry_get_text", LIBS);
  gidLink(cast(void**)&gtk_entry_get_text_area, "gtk_entry_get_text_area", LIBS);
  gidLink(cast(void**)&gtk_entry_get_text_length, "gtk_entry_get_text_length", LIBS);
  gidLink(cast(void**)&gtk_entry_get_visibility, "gtk_entry_get_visibility", LIBS);
  gidLink(cast(void**)&gtk_entry_get_width_chars, "gtk_entry_get_width_chars", LIBS);
  gidLink(cast(void**)&gtk_entry_grab_focus_without_selecting, "gtk_entry_grab_focus_without_selecting", LIBS);
  gidLink(cast(void**)&gtk_entry_im_context_filter_keypress, "gtk_entry_im_context_filter_keypress", LIBS);
  gidLink(cast(void**)&gtk_entry_layout_index_to_text_index, "gtk_entry_layout_index_to_text_index", LIBS);
  gidLink(cast(void**)&gtk_entry_progress_pulse, "gtk_entry_progress_pulse", LIBS);
  gidLink(cast(void**)&gtk_entry_reset_im_context, "gtk_entry_reset_im_context", LIBS);
  gidLink(cast(void**)&gtk_entry_set_activates_default, "gtk_entry_set_activates_default", LIBS);
  gidLink(cast(void**)&gtk_entry_set_alignment, "gtk_entry_set_alignment", LIBS);
  gidLink(cast(void**)&gtk_entry_set_attributes, "gtk_entry_set_attributes", LIBS);
  gidLink(cast(void**)&gtk_entry_set_buffer, "gtk_entry_set_buffer", LIBS);
  gidLink(cast(void**)&gtk_entry_set_completion, "gtk_entry_set_completion", LIBS);
  gidLink(cast(void**)&gtk_entry_set_cursor_hadjustment, "gtk_entry_set_cursor_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_entry_set_has_frame, "gtk_entry_set_has_frame", LIBS);
  gidLink(cast(void**)&gtk_entry_set_icon_activatable, "gtk_entry_set_icon_activatable", LIBS);
  gidLink(cast(void**)&gtk_entry_set_icon_drag_source, "gtk_entry_set_icon_drag_source", LIBS);
  gidLink(cast(void**)&gtk_entry_set_icon_from_gicon, "gtk_entry_set_icon_from_gicon", LIBS);
  gidLink(cast(void**)&gtk_entry_set_icon_from_icon_name, "gtk_entry_set_icon_from_icon_name", LIBS);
  gidLink(cast(void**)&gtk_entry_set_icon_from_pixbuf, "gtk_entry_set_icon_from_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_entry_set_icon_from_stock, "gtk_entry_set_icon_from_stock", LIBS);
  gidLink(cast(void**)&gtk_entry_set_icon_sensitive, "gtk_entry_set_icon_sensitive", LIBS);
  gidLink(cast(void**)&gtk_entry_set_icon_tooltip_markup, "gtk_entry_set_icon_tooltip_markup", LIBS);
  gidLink(cast(void**)&gtk_entry_set_icon_tooltip_text, "gtk_entry_set_icon_tooltip_text", LIBS);
  gidLink(cast(void**)&gtk_entry_set_inner_border, "gtk_entry_set_inner_border", LIBS);
  gidLink(cast(void**)&gtk_entry_set_input_hints, "gtk_entry_set_input_hints", LIBS);
  gidLink(cast(void**)&gtk_entry_set_input_purpose, "gtk_entry_set_input_purpose", LIBS);
  gidLink(cast(void**)&gtk_entry_set_invisible_char, "gtk_entry_set_invisible_char", LIBS);
  gidLink(cast(void**)&gtk_entry_set_max_length, "gtk_entry_set_max_length", LIBS);
  gidLink(cast(void**)&gtk_entry_set_max_width_chars, "gtk_entry_set_max_width_chars", LIBS);
  gidLink(cast(void**)&gtk_entry_set_overwrite_mode, "gtk_entry_set_overwrite_mode", LIBS);
  gidLink(cast(void**)&gtk_entry_set_placeholder_text, "gtk_entry_set_placeholder_text", LIBS);
  gidLink(cast(void**)&gtk_entry_set_progress_fraction, "gtk_entry_set_progress_fraction", LIBS);
  gidLink(cast(void**)&gtk_entry_set_progress_pulse_step, "gtk_entry_set_progress_pulse_step", LIBS);
  gidLink(cast(void**)&gtk_entry_set_tabs, "gtk_entry_set_tabs", LIBS);
  gidLink(cast(void**)&gtk_entry_set_text, "gtk_entry_set_text", LIBS);
  gidLink(cast(void**)&gtk_entry_set_visibility, "gtk_entry_set_visibility", LIBS);
  gidLink(cast(void**)&gtk_entry_set_width_chars, "gtk_entry_set_width_chars", LIBS);
  gidLink(cast(void**)&gtk_entry_text_index_to_layout_index, "gtk_entry_text_index_to_layout_index", LIBS);
  gidLink(cast(void**)&gtk_entry_unset_invisible_char, "gtk_entry_unset_invisible_char", LIBS);

  // EntryAccessible
  gidLink(cast(void**)&gtk_entry_accessible_get_type, "gtk_entry_accessible_get_type", LIBS);

  // EntryBuffer
  gidLink(cast(void**)&gtk_entry_buffer_get_type, "gtk_entry_buffer_get_type", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_new, "gtk_entry_buffer_new", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_delete_text, "gtk_entry_buffer_delete_text", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_emit_deleted_text, "gtk_entry_buffer_emit_deleted_text", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_emit_inserted_text, "gtk_entry_buffer_emit_inserted_text", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_get_bytes, "gtk_entry_buffer_get_bytes", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_get_length, "gtk_entry_buffer_get_length", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_get_max_length, "gtk_entry_buffer_get_max_length", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_get_text, "gtk_entry_buffer_get_text", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_insert_text, "gtk_entry_buffer_insert_text", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_set_max_length, "gtk_entry_buffer_set_max_length", LIBS);
  gidLink(cast(void**)&gtk_entry_buffer_set_text, "gtk_entry_buffer_set_text", LIBS);

  // EntryCompletion
  gidLink(cast(void**)&gtk_entry_completion_get_type, "gtk_entry_completion_get_type", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_new, "gtk_entry_completion_new", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_new_with_area, "gtk_entry_completion_new_with_area", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_complete, "gtk_entry_completion_complete", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_compute_prefix, "gtk_entry_completion_compute_prefix", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_delete_action, "gtk_entry_completion_delete_action", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_get_completion_prefix, "gtk_entry_completion_get_completion_prefix", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_get_entry, "gtk_entry_completion_get_entry", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_get_inline_completion, "gtk_entry_completion_get_inline_completion", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_get_inline_selection, "gtk_entry_completion_get_inline_selection", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_get_minimum_key_length, "gtk_entry_completion_get_minimum_key_length", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_get_model, "gtk_entry_completion_get_model", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_get_popup_completion, "gtk_entry_completion_get_popup_completion", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_get_popup_set_width, "gtk_entry_completion_get_popup_set_width", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_get_popup_single_match, "gtk_entry_completion_get_popup_single_match", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_get_text_column, "gtk_entry_completion_get_text_column", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_insert_action_markup, "gtk_entry_completion_insert_action_markup", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_insert_action_text, "gtk_entry_completion_insert_action_text", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_insert_prefix, "gtk_entry_completion_insert_prefix", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_set_inline_completion, "gtk_entry_completion_set_inline_completion", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_set_inline_selection, "gtk_entry_completion_set_inline_selection", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_set_match_func, "gtk_entry_completion_set_match_func", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_set_minimum_key_length, "gtk_entry_completion_set_minimum_key_length", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_set_model, "gtk_entry_completion_set_model", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_set_popup_completion, "gtk_entry_completion_set_popup_completion", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_set_popup_set_width, "gtk_entry_completion_set_popup_set_width", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_set_popup_single_match, "gtk_entry_completion_set_popup_single_match", LIBS);
  gidLink(cast(void**)&gtk_entry_completion_set_text_column, "gtk_entry_completion_set_text_column", LIBS);

  // EntryIconAccessible
  gidLink(cast(void**)&gtk_entry_icon_accessible_get_type, "gtk_entry_icon_accessible_get_type", LIBS);

  // EventBox
  gidLink(cast(void**)&gtk_event_box_get_type, "gtk_event_box_get_type", LIBS);
  gidLink(cast(void**)&gtk_event_box_new, "gtk_event_box_new", LIBS);
  gidLink(cast(void**)&gtk_event_box_get_above_child, "gtk_event_box_get_above_child", LIBS);
  gidLink(cast(void**)&gtk_event_box_get_visible_window, "gtk_event_box_get_visible_window", LIBS);
  gidLink(cast(void**)&gtk_event_box_set_above_child, "gtk_event_box_set_above_child", LIBS);
  gidLink(cast(void**)&gtk_event_box_set_visible_window, "gtk_event_box_set_visible_window", LIBS);

  // EventController
  gidLink(cast(void**)&gtk_event_controller_get_type, "gtk_event_controller_get_type", LIBS);
  gidLink(cast(void**)&gtk_event_controller_get_propagation_phase, "gtk_event_controller_get_propagation_phase", LIBS);
  gidLink(cast(void**)&gtk_event_controller_get_widget, "gtk_event_controller_get_widget", LIBS);
  gidLink(cast(void**)&gtk_event_controller_handle_event, "gtk_event_controller_handle_event", LIBS);
  gidLink(cast(void**)&gtk_event_controller_reset, "gtk_event_controller_reset", LIBS);
  gidLink(cast(void**)&gtk_event_controller_set_propagation_phase, "gtk_event_controller_set_propagation_phase", LIBS);

  // EventControllerKey
  gidLink(cast(void**)&gtk_event_controller_key_get_type, "gtk_event_controller_key_get_type", LIBS);
  gidLink(cast(void**)&gtk_event_controller_key_new, "gtk_event_controller_key_new", LIBS);
  gidLink(cast(void**)&gtk_event_controller_key_forward, "gtk_event_controller_key_forward", LIBS);
  gidLink(cast(void**)&gtk_event_controller_key_get_group, "gtk_event_controller_key_get_group", LIBS);
  gidLink(cast(void**)&gtk_event_controller_key_get_im_context, "gtk_event_controller_key_get_im_context", LIBS);
  gidLink(cast(void**)&gtk_event_controller_key_set_im_context, "gtk_event_controller_key_set_im_context", LIBS);

  // EventControllerMotion
  gidLink(cast(void**)&gtk_event_controller_motion_get_type, "gtk_event_controller_motion_get_type", LIBS);
  gidLink(cast(void**)&gtk_event_controller_motion_new, "gtk_event_controller_motion_new", LIBS);

  // EventControllerScroll
  gidLink(cast(void**)&gtk_event_controller_scroll_get_type, "gtk_event_controller_scroll_get_type", LIBS);
  gidLink(cast(void**)&gtk_event_controller_scroll_new, "gtk_event_controller_scroll_new", LIBS);
  gidLink(cast(void**)&gtk_event_controller_scroll_get_flags, "gtk_event_controller_scroll_get_flags", LIBS);
  gidLink(cast(void**)&gtk_event_controller_scroll_set_flags, "gtk_event_controller_scroll_set_flags", LIBS);

  // Expander
  gidLink(cast(void**)&gtk_expander_get_type, "gtk_expander_get_type", LIBS);
  gidLink(cast(void**)&gtk_expander_new, "gtk_expander_new", LIBS);
  gidLink(cast(void**)&gtk_expander_new_with_mnemonic, "gtk_expander_new_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_expander_get_expanded, "gtk_expander_get_expanded", LIBS);
  gidLink(cast(void**)&gtk_expander_get_label, "gtk_expander_get_label", LIBS);
  gidLink(cast(void**)&gtk_expander_get_label_fill, "gtk_expander_get_label_fill", LIBS);
  gidLink(cast(void**)&gtk_expander_get_label_widget, "gtk_expander_get_label_widget", LIBS);
  gidLink(cast(void**)&gtk_expander_get_resize_toplevel, "gtk_expander_get_resize_toplevel", LIBS);
  gidLink(cast(void**)&gtk_expander_get_spacing, "gtk_expander_get_spacing", LIBS);
  gidLink(cast(void**)&gtk_expander_get_use_markup, "gtk_expander_get_use_markup", LIBS);
  gidLink(cast(void**)&gtk_expander_get_use_underline, "gtk_expander_get_use_underline", LIBS);
  gidLink(cast(void**)&gtk_expander_set_expanded, "gtk_expander_set_expanded", LIBS);
  gidLink(cast(void**)&gtk_expander_set_label, "gtk_expander_set_label", LIBS);
  gidLink(cast(void**)&gtk_expander_set_label_fill, "gtk_expander_set_label_fill", LIBS);
  gidLink(cast(void**)&gtk_expander_set_label_widget, "gtk_expander_set_label_widget", LIBS);
  gidLink(cast(void**)&gtk_expander_set_resize_toplevel, "gtk_expander_set_resize_toplevel", LIBS);
  gidLink(cast(void**)&gtk_expander_set_spacing, "gtk_expander_set_spacing", LIBS);
  gidLink(cast(void**)&gtk_expander_set_use_markup, "gtk_expander_set_use_markup", LIBS);
  gidLink(cast(void**)&gtk_expander_set_use_underline, "gtk_expander_set_use_underline", LIBS);

  // ExpanderAccessible
  gidLink(cast(void**)&gtk_expander_accessible_get_type, "gtk_expander_accessible_get_type", LIBS);

  // FileChooser
  gidLink(cast(void**)&gtk_file_chooser_get_type, "gtk_file_chooser_get_type", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_add_choice, "gtk_file_chooser_add_choice", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_add_filter, "gtk_file_chooser_add_filter", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_add_shortcut_folder, "gtk_file_chooser_add_shortcut_folder", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_add_shortcut_folder_uri, "gtk_file_chooser_add_shortcut_folder_uri", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_action, "gtk_file_chooser_get_action", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_choice, "gtk_file_chooser_get_choice", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_create_folders, "gtk_file_chooser_get_create_folders", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_current_folder, "gtk_file_chooser_get_current_folder", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_current_folder_file, "gtk_file_chooser_get_current_folder_file", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_current_folder_uri, "gtk_file_chooser_get_current_folder_uri", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_current_name, "gtk_file_chooser_get_current_name", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_do_overwrite_confirmation, "gtk_file_chooser_get_do_overwrite_confirmation", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_extra_widget, "gtk_file_chooser_get_extra_widget", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_file, "gtk_file_chooser_get_file", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_filename, "gtk_file_chooser_get_filename", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_filenames, "gtk_file_chooser_get_filenames", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_files, "gtk_file_chooser_get_files", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_filter, "gtk_file_chooser_get_filter", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_local_only, "gtk_file_chooser_get_local_only", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_preview_file, "gtk_file_chooser_get_preview_file", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_preview_filename, "gtk_file_chooser_get_preview_filename", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_preview_uri, "gtk_file_chooser_get_preview_uri", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_preview_widget, "gtk_file_chooser_get_preview_widget", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_preview_widget_active, "gtk_file_chooser_get_preview_widget_active", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_select_multiple, "gtk_file_chooser_get_select_multiple", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_show_hidden, "gtk_file_chooser_get_show_hidden", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_uri, "gtk_file_chooser_get_uri", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_uris, "gtk_file_chooser_get_uris", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_get_use_preview_label, "gtk_file_chooser_get_use_preview_label", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_list_filters, "gtk_file_chooser_list_filters", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_list_shortcut_folder_uris, "gtk_file_chooser_list_shortcut_folder_uris", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_list_shortcut_folders, "gtk_file_chooser_list_shortcut_folders", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_remove_choice, "gtk_file_chooser_remove_choice", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_remove_filter, "gtk_file_chooser_remove_filter", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_remove_shortcut_folder, "gtk_file_chooser_remove_shortcut_folder", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_remove_shortcut_folder_uri, "gtk_file_chooser_remove_shortcut_folder_uri", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_select_all, "gtk_file_chooser_select_all", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_select_file, "gtk_file_chooser_select_file", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_select_filename, "gtk_file_chooser_select_filename", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_select_uri, "gtk_file_chooser_select_uri", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_action, "gtk_file_chooser_set_action", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_choice, "gtk_file_chooser_set_choice", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_create_folders, "gtk_file_chooser_set_create_folders", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_current_folder, "gtk_file_chooser_set_current_folder", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_current_folder_file, "gtk_file_chooser_set_current_folder_file", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_current_folder_uri, "gtk_file_chooser_set_current_folder_uri", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_current_name, "gtk_file_chooser_set_current_name", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_do_overwrite_confirmation, "gtk_file_chooser_set_do_overwrite_confirmation", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_extra_widget, "gtk_file_chooser_set_extra_widget", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_file, "gtk_file_chooser_set_file", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_filename, "gtk_file_chooser_set_filename", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_filter, "gtk_file_chooser_set_filter", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_local_only, "gtk_file_chooser_set_local_only", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_preview_widget, "gtk_file_chooser_set_preview_widget", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_preview_widget_active, "gtk_file_chooser_set_preview_widget_active", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_select_multiple, "gtk_file_chooser_set_select_multiple", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_show_hidden, "gtk_file_chooser_set_show_hidden", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_uri, "gtk_file_chooser_set_uri", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_set_use_preview_label, "gtk_file_chooser_set_use_preview_label", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_unselect_all, "gtk_file_chooser_unselect_all", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_unselect_file, "gtk_file_chooser_unselect_file", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_unselect_filename, "gtk_file_chooser_unselect_filename", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_unselect_uri, "gtk_file_chooser_unselect_uri", LIBS);

  // FileChooserButton
  gidLink(cast(void**)&gtk_file_chooser_button_get_type, "gtk_file_chooser_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_button_new, "gtk_file_chooser_button_new", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_button_new_with_dialog, "gtk_file_chooser_button_new_with_dialog", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_button_get_focus_on_click, "gtk_file_chooser_button_get_focus_on_click", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_button_get_title, "gtk_file_chooser_button_get_title", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_button_get_width_chars, "gtk_file_chooser_button_get_width_chars", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_button_set_focus_on_click, "gtk_file_chooser_button_set_focus_on_click", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_button_set_title, "gtk_file_chooser_button_set_title", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_button_set_width_chars, "gtk_file_chooser_button_set_width_chars", LIBS);

  // FileChooserDialog
  gidLink(cast(void**)&gtk_file_chooser_dialog_get_type, "gtk_file_chooser_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_dialog_new, "gtk_file_chooser_dialog_new", LIBS);

  // FileChooserNative
  gidLink(cast(void**)&gtk_file_chooser_native_get_type, "gtk_file_chooser_native_get_type", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_native_new, "gtk_file_chooser_native_new", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_native_get_accept_label, "gtk_file_chooser_native_get_accept_label", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_native_get_cancel_label, "gtk_file_chooser_native_get_cancel_label", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_native_set_accept_label, "gtk_file_chooser_native_set_accept_label", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_native_set_cancel_label, "gtk_file_chooser_native_set_cancel_label", LIBS);

  // FileChooserWidget
  gidLink(cast(void**)&gtk_file_chooser_widget_get_type, "gtk_file_chooser_widget_get_type", LIBS);
  gidLink(cast(void**)&gtk_file_chooser_widget_new, "gtk_file_chooser_widget_new", LIBS);

  // FileChooserWidgetAccessible
  gidLink(cast(void**)&gtk_file_chooser_widget_accessible_get_type, "gtk_file_chooser_widget_accessible_get_type", LIBS);

  // FileFilter
  gidLink(cast(void**)&gtk_file_filter_get_type, "gtk_file_filter_get_type", LIBS);
  gidLink(cast(void**)&gtk_file_filter_new, "gtk_file_filter_new", LIBS);
  gidLink(cast(void**)&gtk_file_filter_new_from_gvariant, "gtk_file_filter_new_from_gvariant", LIBS);
  gidLink(cast(void**)&gtk_file_filter_add_custom, "gtk_file_filter_add_custom", LIBS);
  gidLink(cast(void**)&gtk_file_filter_add_mime_type, "gtk_file_filter_add_mime_type", LIBS);
  gidLink(cast(void**)&gtk_file_filter_add_pattern, "gtk_file_filter_add_pattern", LIBS);
  gidLink(cast(void**)&gtk_file_filter_add_pixbuf_formats, "gtk_file_filter_add_pixbuf_formats", LIBS);
  gidLink(cast(void**)&gtk_file_filter_filter, "gtk_file_filter_filter", LIBS);
  gidLink(cast(void**)&gtk_file_filter_get_name, "gtk_file_filter_get_name", LIBS);
  gidLink(cast(void**)&gtk_file_filter_get_needed, "gtk_file_filter_get_needed", LIBS);
  gidLink(cast(void**)&gtk_file_filter_set_name, "gtk_file_filter_set_name", LIBS);
  gidLink(cast(void**)&gtk_file_filter_to_gvariant, "gtk_file_filter_to_gvariant", LIBS);

  // Fixed
  gidLink(cast(void**)&gtk_fixed_get_type, "gtk_fixed_get_type", LIBS);
  gidLink(cast(void**)&gtk_fixed_new, "gtk_fixed_new", LIBS);
  gidLink(cast(void**)&gtk_fixed_move, "gtk_fixed_move", LIBS);
  gidLink(cast(void**)&gtk_fixed_put, "gtk_fixed_put", LIBS);

  // FlowBox
  gidLink(cast(void**)&gtk_flow_box_get_type, "gtk_flow_box_get_type", LIBS);
  gidLink(cast(void**)&gtk_flow_box_new, "gtk_flow_box_new", LIBS);
  gidLink(cast(void**)&gtk_flow_box_bind_model, "gtk_flow_box_bind_model", LIBS);
  gidLink(cast(void**)&gtk_flow_box_get_activate_on_single_click, "gtk_flow_box_get_activate_on_single_click", LIBS);
  gidLink(cast(void**)&gtk_flow_box_get_child_at_index, "gtk_flow_box_get_child_at_index", LIBS);
  gidLink(cast(void**)&gtk_flow_box_get_child_at_pos, "gtk_flow_box_get_child_at_pos", LIBS);
  gidLink(cast(void**)&gtk_flow_box_get_column_spacing, "gtk_flow_box_get_column_spacing", LIBS);
  gidLink(cast(void**)&gtk_flow_box_get_homogeneous, "gtk_flow_box_get_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_flow_box_get_max_children_per_line, "gtk_flow_box_get_max_children_per_line", LIBS);
  gidLink(cast(void**)&gtk_flow_box_get_min_children_per_line, "gtk_flow_box_get_min_children_per_line", LIBS);
  gidLink(cast(void**)&gtk_flow_box_get_row_spacing, "gtk_flow_box_get_row_spacing", LIBS);
  gidLink(cast(void**)&gtk_flow_box_get_selected_children, "gtk_flow_box_get_selected_children", LIBS);
  gidLink(cast(void**)&gtk_flow_box_get_selection_mode, "gtk_flow_box_get_selection_mode", LIBS);
  gidLink(cast(void**)&gtk_flow_box_insert, "gtk_flow_box_insert", LIBS);
  gidLink(cast(void**)&gtk_flow_box_invalidate_filter, "gtk_flow_box_invalidate_filter", LIBS);
  gidLink(cast(void**)&gtk_flow_box_invalidate_sort, "gtk_flow_box_invalidate_sort", LIBS);
  gidLink(cast(void**)&gtk_flow_box_select_all, "gtk_flow_box_select_all", LIBS);
  gidLink(cast(void**)&gtk_flow_box_select_child, "gtk_flow_box_select_child", LIBS);
  gidLink(cast(void**)&gtk_flow_box_selected_foreach, "gtk_flow_box_selected_foreach", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_activate_on_single_click, "gtk_flow_box_set_activate_on_single_click", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_column_spacing, "gtk_flow_box_set_column_spacing", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_filter_func, "gtk_flow_box_set_filter_func", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_hadjustment, "gtk_flow_box_set_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_homogeneous, "gtk_flow_box_set_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_max_children_per_line, "gtk_flow_box_set_max_children_per_line", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_min_children_per_line, "gtk_flow_box_set_min_children_per_line", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_row_spacing, "gtk_flow_box_set_row_spacing", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_selection_mode, "gtk_flow_box_set_selection_mode", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_sort_func, "gtk_flow_box_set_sort_func", LIBS);
  gidLink(cast(void**)&gtk_flow_box_set_vadjustment, "gtk_flow_box_set_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_flow_box_unselect_all, "gtk_flow_box_unselect_all", LIBS);
  gidLink(cast(void**)&gtk_flow_box_unselect_child, "gtk_flow_box_unselect_child", LIBS);

  // FlowBoxAccessible
  gidLink(cast(void**)&gtk_flow_box_accessible_get_type, "gtk_flow_box_accessible_get_type", LIBS);

  // FlowBoxChild
  gidLink(cast(void**)&gtk_flow_box_child_get_type, "gtk_flow_box_child_get_type", LIBS);
  gidLink(cast(void**)&gtk_flow_box_child_new, "gtk_flow_box_child_new", LIBS);
  gidLink(cast(void**)&gtk_flow_box_child_changed, "gtk_flow_box_child_changed", LIBS);
  gidLink(cast(void**)&gtk_flow_box_child_get_index, "gtk_flow_box_child_get_index", LIBS);
  gidLink(cast(void**)&gtk_flow_box_child_is_selected, "gtk_flow_box_child_is_selected", LIBS);

  // FlowBoxChildAccessible
  gidLink(cast(void**)&gtk_flow_box_child_accessible_get_type, "gtk_flow_box_child_accessible_get_type", LIBS);

  // FontButton
  gidLink(cast(void**)&gtk_font_button_get_type, "gtk_font_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_font_button_new, "gtk_font_button_new", LIBS);
  gidLink(cast(void**)&gtk_font_button_new_with_font, "gtk_font_button_new_with_font", LIBS);
  gidLink(cast(void**)&gtk_font_button_get_font_name, "gtk_font_button_get_font_name", LIBS);
  gidLink(cast(void**)&gtk_font_button_get_show_size, "gtk_font_button_get_show_size", LIBS);
  gidLink(cast(void**)&gtk_font_button_get_show_style, "gtk_font_button_get_show_style", LIBS);
  gidLink(cast(void**)&gtk_font_button_get_title, "gtk_font_button_get_title", LIBS);
  gidLink(cast(void**)&gtk_font_button_get_use_font, "gtk_font_button_get_use_font", LIBS);
  gidLink(cast(void**)&gtk_font_button_get_use_size, "gtk_font_button_get_use_size", LIBS);
  gidLink(cast(void**)&gtk_font_button_set_font_name, "gtk_font_button_set_font_name", LIBS);
  gidLink(cast(void**)&gtk_font_button_set_show_size, "gtk_font_button_set_show_size", LIBS);
  gidLink(cast(void**)&gtk_font_button_set_show_style, "gtk_font_button_set_show_style", LIBS);
  gidLink(cast(void**)&gtk_font_button_set_title, "gtk_font_button_set_title", LIBS);
  gidLink(cast(void**)&gtk_font_button_set_use_font, "gtk_font_button_set_use_font", LIBS);
  gidLink(cast(void**)&gtk_font_button_set_use_size, "gtk_font_button_set_use_size", LIBS);

  // FontChooser
  gidLink(cast(void**)&gtk_font_chooser_get_type, "gtk_font_chooser_get_type", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_font, "gtk_font_chooser_get_font", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_font_desc, "gtk_font_chooser_get_font_desc", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_font_face, "gtk_font_chooser_get_font_face", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_font_family, "gtk_font_chooser_get_font_family", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_font_features, "gtk_font_chooser_get_font_features", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_font_map, "gtk_font_chooser_get_font_map", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_font_size, "gtk_font_chooser_get_font_size", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_language, "gtk_font_chooser_get_language", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_level, "gtk_font_chooser_get_level", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_preview_text, "gtk_font_chooser_get_preview_text", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_get_show_preview_entry, "gtk_font_chooser_get_show_preview_entry", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_set_filter_func, "gtk_font_chooser_set_filter_func", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_set_font, "gtk_font_chooser_set_font", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_set_font_desc, "gtk_font_chooser_set_font_desc", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_set_font_map, "gtk_font_chooser_set_font_map", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_set_language, "gtk_font_chooser_set_language", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_set_level, "gtk_font_chooser_set_level", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_set_preview_text, "gtk_font_chooser_set_preview_text", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_set_show_preview_entry, "gtk_font_chooser_set_show_preview_entry", LIBS);

  // FontChooserDialog
  gidLink(cast(void**)&gtk_font_chooser_dialog_get_type, "gtk_font_chooser_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_dialog_new, "gtk_font_chooser_dialog_new", LIBS);

  // FontChooserWidget
  gidLink(cast(void**)&gtk_font_chooser_widget_get_type, "gtk_font_chooser_widget_get_type", LIBS);
  gidLink(cast(void**)&gtk_font_chooser_widget_new, "gtk_font_chooser_widget_new", LIBS);

  // FontSelection
  gidLink(cast(void**)&gtk_font_selection_get_type, "gtk_font_selection_get_type", LIBS);
  gidLink(cast(void**)&gtk_font_selection_new, "gtk_font_selection_new", LIBS);
  gidLink(cast(void**)&gtk_font_selection_get_face, "gtk_font_selection_get_face", LIBS);
  gidLink(cast(void**)&gtk_font_selection_get_face_list, "gtk_font_selection_get_face_list", LIBS);
  gidLink(cast(void**)&gtk_font_selection_get_family, "gtk_font_selection_get_family", LIBS);
  gidLink(cast(void**)&gtk_font_selection_get_family_list, "gtk_font_selection_get_family_list", LIBS);
  gidLink(cast(void**)&gtk_font_selection_get_font_name, "gtk_font_selection_get_font_name", LIBS);
  gidLink(cast(void**)&gtk_font_selection_get_preview_entry, "gtk_font_selection_get_preview_entry", LIBS);
  gidLink(cast(void**)&gtk_font_selection_get_preview_text, "gtk_font_selection_get_preview_text", LIBS);
  gidLink(cast(void**)&gtk_font_selection_get_size, "gtk_font_selection_get_size", LIBS);
  gidLink(cast(void**)&gtk_font_selection_get_size_entry, "gtk_font_selection_get_size_entry", LIBS);
  gidLink(cast(void**)&gtk_font_selection_get_size_list, "gtk_font_selection_get_size_list", LIBS);
  gidLink(cast(void**)&gtk_font_selection_set_font_name, "gtk_font_selection_set_font_name", LIBS);
  gidLink(cast(void**)&gtk_font_selection_set_preview_text, "gtk_font_selection_set_preview_text", LIBS);

  // FontSelectionDialog
  gidLink(cast(void**)&gtk_font_selection_dialog_get_type, "gtk_font_selection_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_font_selection_dialog_new, "gtk_font_selection_dialog_new", LIBS);
  gidLink(cast(void**)&gtk_font_selection_dialog_get_cancel_button, "gtk_font_selection_dialog_get_cancel_button", LIBS);
  gidLink(cast(void**)&gtk_font_selection_dialog_get_font_name, "gtk_font_selection_dialog_get_font_name", LIBS);
  gidLink(cast(void**)&gtk_font_selection_dialog_get_font_selection, "gtk_font_selection_dialog_get_font_selection", LIBS);
  gidLink(cast(void**)&gtk_font_selection_dialog_get_ok_button, "gtk_font_selection_dialog_get_ok_button", LIBS);
  gidLink(cast(void**)&gtk_font_selection_dialog_get_preview_text, "gtk_font_selection_dialog_get_preview_text", LIBS);
  gidLink(cast(void**)&gtk_font_selection_dialog_set_font_name, "gtk_font_selection_dialog_set_font_name", LIBS);
  gidLink(cast(void**)&gtk_font_selection_dialog_set_preview_text, "gtk_font_selection_dialog_set_preview_text", LIBS);

  // Frame
  gidLink(cast(void**)&gtk_frame_get_type, "gtk_frame_get_type", LIBS);
  gidLink(cast(void**)&gtk_frame_new, "gtk_frame_new", LIBS);
  gidLink(cast(void**)&gtk_frame_get_label, "gtk_frame_get_label", LIBS);
  gidLink(cast(void**)&gtk_frame_get_label_align, "gtk_frame_get_label_align", LIBS);
  gidLink(cast(void**)&gtk_frame_get_label_widget, "gtk_frame_get_label_widget", LIBS);
  gidLink(cast(void**)&gtk_frame_get_shadow_type, "gtk_frame_get_shadow_type", LIBS);
  gidLink(cast(void**)&gtk_frame_set_label, "gtk_frame_set_label", LIBS);
  gidLink(cast(void**)&gtk_frame_set_label_align, "gtk_frame_set_label_align", LIBS);
  gidLink(cast(void**)&gtk_frame_set_label_widget, "gtk_frame_set_label_widget", LIBS);
  gidLink(cast(void**)&gtk_frame_set_shadow_type, "gtk_frame_set_shadow_type", LIBS);

  // FrameAccessible
  gidLink(cast(void**)&gtk_frame_accessible_get_type, "gtk_frame_accessible_get_type", LIBS);

  // GLArea
  gidLink(cast(void**)&gtk_gl_area_get_type, "gtk_gl_area_get_type", LIBS);
  gidLink(cast(void**)&gtk_gl_area_new, "gtk_gl_area_new", LIBS);
  gidLink(cast(void**)&gtk_gl_area_attach_buffers, "gtk_gl_area_attach_buffers", LIBS);
  gidLink(cast(void**)&gtk_gl_area_get_auto_render, "gtk_gl_area_get_auto_render", LIBS);
  gidLink(cast(void**)&gtk_gl_area_get_context, "gtk_gl_area_get_context", LIBS);
  gidLink(cast(void**)&gtk_gl_area_get_error, "gtk_gl_area_get_error", LIBS);
  gidLink(cast(void**)&gtk_gl_area_get_has_alpha, "gtk_gl_area_get_has_alpha", LIBS);
  gidLink(cast(void**)&gtk_gl_area_get_has_depth_buffer, "gtk_gl_area_get_has_depth_buffer", LIBS);
  gidLink(cast(void**)&gtk_gl_area_get_has_stencil_buffer, "gtk_gl_area_get_has_stencil_buffer", LIBS);
  gidLink(cast(void**)&gtk_gl_area_get_required_version, "gtk_gl_area_get_required_version", LIBS);
  gidLink(cast(void**)&gtk_gl_area_get_use_es, "gtk_gl_area_get_use_es", LIBS);
  gidLink(cast(void**)&gtk_gl_area_make_current, "gtk_gl_area_make_current", LIBS);
  gidLink(cast(void**)&gtk_gl_area_queue_render, "gtk_gl_area_queue_render", LIBS);
  gidLink(cast(void**)&gtk_gl_area_set_auto_render, "gtk_gl_area_set_auto_render", LIBS);
  gidLink(cast(void**)&gtk_gl_area_set_error, "gtk_gl_area_set_error", LIBS);
  gidLink(cast(void**)&gtk_gl_area_set_has_alpha, "gtk_gl_area_set_has_alpha", LIBS);
  gidLink(cast(void**)&gtk_gl_area_set_has_depth_buffer, "gtk_gl_area_set_has_depth_buffer", LIBS);
  gidLink(cast(void**)&gtk_gl_area_set_has_stencil_buffer, "gtk_gl_area_set_has_stencil_buffer", LIBS);
  gidLink(cast(void**)&gtk_gl_area_set_required_version, "gtk_gl_area_set_required_version", LIBS);
  gidLink(cast(void**)&gtk_gl_area_set_use_es, "gtk_gl_area_set_use_es", LIBS);

  // Gesture
  gidLink(cast(void**)&gtk_gesture_get_type, "gtk_gesture_get_type", LIBS);
  gidLink(cast(void**)&gtk_gesture_get_bounding_box, "gtk_gesture_get_bounding_box", LIBS);
  gidLink(cast(void**)&gtk_gesture_get_bounding_box_center, "gtk_gesture_get_bounding_box_center", LIBS);
  gidLink(cast(void**)&gtk_gesture_get_device, "gtk_gesture_get_device", LIBS);
  gidLink(cast(void**)&gtk_gesture_get_group, "gtk_gesture_get_group", LIBS);
  gidLink(cast(void**)&gtk_gesture_get_last_event, "gtk_gesture_get_last_event", LIBS);
  gidLink(cast(void**)&gtk_gesture_get_last_updated_sequence, "gtk_gesture_get_last_updated_sequence", LIBS);
  gidLink(cast(void**)&gtk_gesture_get_point, "gtk_gesture_get_point", LIBS);
  gidLink(cast(void**)&gtk_gesture_get_sequence_state, "gtk_gesture_get_sequence_state", LIBS);
  gidLink(cast(void**)&gtk_gesture_get_sequences, "gtk_gesture_get_sequences", LIBS);
  gidLink(cast(void**)&gtk_gesture_get_window, "gtk_gesture_get_window", LIBS);
  gidLink(cast(void**)&gtk_gesture_group, "gtk_gesture_group", LIBS);
  gidLink(cast(void**)&gtk_gesture_handles_sequence, "gtk_gesture_handles_sequence", LIBS);
  gidLink(cast(void**)&gtk_gesture_is_active, "gtk_gesture_is_active", LIBS);
  gidLink(cast(void**)&gtk_gesture_is_grouped_with, "gtk_gesture_is_grouped_with", LIBS);
  gidLink(cast(void**)&gtk_gesture_is_recognized, "gtk_gesture_is_recognized", LIBS);
  gidLink(cast(void**)&gtk_gesture_set_sequence_state, "gtk_gesture_set_sequence_state", LIBS);
  gidLink(cast(void**)&gtk_gesture_set_state, "gtk_gesture_set_state", LIBS);
  gidLink(cast(void**)&gtk_gesture_set_window, "gtk_gesture_set_window", LIBS);
  gidLink(cast(void**)&gtk_gesture_ungroup, "gtk_gesture_ungroup", LIBS);

  // GestureDrag
  gidLink(cast(void**)&gtk_gesture_drag_get_type, "gtk_gesture_drag_get_type", LIBS);
  gidLink(cast(void**)&gtk_gesture_drag_new, "gtk_gesture_drag_new", LIBS);
  gidLink(cast(void**)&gtk_gesture_drag_get_offset, "gtk_gesture_drag_get_offset", LIBS);
  gidLink(cast(void**)&gtk_gesture_drag_get_start_point, "gtk_gesture_drag_get_start_point", LIBS);

  // GestureLongPress
  gidLink(cast(void**)&gtk_gesture_long_press_get_type, "gtk_gesture_long_press_get_type", LIBS);
  gidLink(cast(void**)&gtk_gesture_long_press_new, "gtk_gesture_long_press_new", LIBS);

  // GestureMultiPress
  gidLink(cast(void**)&gtk_gesture_multi_press_get_type, "gtk_gesture_multi_press_get_type", LIBS);
  gidLink(cast(void**)&gtk_gesture_multi_press_new, "gtk_gesture_multi_press_new", LIBS);
  gidLink(cast(void**)&gtk_gesture_multi_press_get_area, "gtk_gesture_multi_press_get_area", LIBS);
  gidLink(cast(void**)&gtk_gesture_multi_press_set_area, "gtk_gesture_multi_press_set_area", LIBS);

  // GesturePan
  gidLink(cast(void**)&gtk_gesture_pan_get_type, "gtk_gesture_pan_get_type", LIBS);
  gidLink(cast(void**)&gtk_gesture_pan_new, "gtk_gesture_pan_new", LIBS);
  gidLink(cast(void**)&gtk_gesture_pan_get_orientation, "gtk_gesture_pan_get_orientation", LIBS);
  gidLink(cast(void**)&gtk_gesture_pan_set_orientation, "gtk_gesture_pan_set_orientation", LIBS);

  // GestureRotate
  gidLink(cast(void**)&gtk_gesture_rotate_get_type, "gtk_gesture_rotate_get_type", LIBS);
  gidLink(cast(void**)&gtk_gesture_rotate_new, "gtk_gesture_rotate_new", LIBS);
  gidLink(cast(void**)&gtk_gesture_rotate_get_angle_delta, "gtk_gesture_rotate_get_angle_delta", LIBS);

  // GestureSingle
  gidLink(cast(void**)&gtk_gesture_single_get_type, "gtk_gesture_single_get_type", LIBS);
  gidLink(cast(void**)&gtk_gesture_single_get_button, "gtk_gesture_single_get_button", LIBS);
  gidLink(cast(void**)&gtk_gesture_single_get_current_button, "gtk_gesture_single_get_current_button", LIBS);
  gidLink(cast(void**)&gtk_gesture_single_get_current_sequence, "gtk_gesture_single_get_current_sequence", LIBS);
  gidLink(cast(void**)&gtk_gesture_single_get_exclusive, "gtk_gesture_single_get_exclusive", LIBS);
  gidLink(cast(void**)&gtk_gesture_single_get_touch_only, "gtk_gesture_single_get_touch_only", LIBS);
  gidLink(cast(void**)&gtk_gesture_single_set_button, "gtk_gesture_single_set_button", LIBS);
  gidLink(cast(void**)&gtk_gesture_single_set_exclusive, "gtk_gesture_single_set_exclusive", LIBS);
  gidLink(cast(void**)&gtk_gesture_single_set_touch_only, "gtk_gesture_single_set_touch_only", LIBS);

  // GestureStylus
  gidLink(cast(void**)&gtk_gesture_stylus_get_type, "gtk_gesture_stylus_get_type", LIBS);
  gidLink(cast(void**)&gtk_gesture_stylus_new, "gtk_gesture_stylus_new", LIBS);
  gidLink(cast(void**)&gtk_gesture_stylus_get_axes, "gtk_gesture_stylus_get_axes", LIBS);
  gidLink(cast(void**)&gtk_gesture_stylus_get_axis, "gtk_gesture_stylus_get_axis", LIBS);
  gidLink(cast(void**)&gtk_gesture_stylus_get_device_tool, "gtk_gesture_stylus_get_device_tool", LIBS);

  // GestureSwipe
  gidLink(cast(void**)&gtk_gesture_swipe_get_type, "gtk_gesture_swipe_get_type", LIBS);
  gidLink(cast(void**)&gtk_gesture_swipe_new, "gtk_gesture_swipe_new", LIBS);
  gidLink(cast(void**)&gtk_gesture_swipe_get_velocity, "gtk_gesture_swipe_get_velocity", LIBS);

  // GestureZoom
  gidLink(cast(void**)&gtk_gesture_zoom_get_type, "gtk_gesture_zoom_get_type", LIBS);
  gidLink(cast(void**)&gtk_gesture_zoom_new, "gtk_gesture_zoom_new", LIBS);
  gidLink(cast(void**)&gtk_gesture_zoom_get_scale_delta, "gtk_gesture_zoom_get_scale_delta", LIBS);

  // Gradient
  gidLink(cast(void**)&gtk_gradient_get_type, "gtk_gradient_get_type", LIBS);
  gidLink(cast(void**)&gtk_gradient_new_linear, "gtk_gradient_new_linear", LIBS);
  gidLink(cast(void**)&gtk_gradient_new_radial, "gtk_gradient_new_radial", LIBS);
  gidLink(cast(void**)&gtk_gradient_add_color_stop, "gtk_gradient_add_color_stop", LIBS);
  gidLink(cast(void**)&gtk_gradient_ref, "gtk_gradient_ref", LIBS);
  gidLink(cast(void**)&gtk_gradient_resolve, "gtk_gradient_resolve", LIBS);
  gidLink(cast(void**)&gtk_gradient_resolve_for_context, "gtk_gradient_resolve_for_context", LIBS);
  gidLink(cast(void**)&gtk_gradient_to_string, "gtk_gradient_to_string", LIBS);
  gidLink(cast(void**)&gtk_gradient_unref, "gtk_gradient_unref", LIBS);

  // Grid
  gidLink(cast(void**)&gtk_grid_get_type, "gtk_grid_get_type", LIBS);
  gidLink(cast(void**)&gtk_grid_new, "gtk_grid_new", LIBS);
  gidLink(cast(void**)&gtk_grid_attach, "gtk_grid_attach", LIBS);
  gidLink(cast(void**)&gtk_grid_attach_next_to, "gtk_grid_attach_next_to", LIBS);
  gidLink(cast(void**)&gtk_grid_get_baseline_row, "gtk_grid_get_baseline_row", LIBS);
  gidLink(cast(void**)&gtk_grid_get_child_at, "gtk_grid_get_child_at", LIBS);
  gidLink(cast(void**)&gtk_grid_get_column_homogeneous, "gtk_grid_get_column_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_grid_get_column_spacing, "gtk_grid_get_column_spacing", LIBS);
  gidLink(cast(void**)&gtk_grid_get_row_baseline_position, "gtk_grid_get_row_baseline_position", LIBS);
  gidLink(cast(void**)&gtk_grid_get_row_homogeneous, "gtk_grid_get_row_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_grid_get_row_spacing, "gtk_grid_get_row_spacing", LIBS);
  gidLink(cast(void**)&gtk_grid_insert_column, "gtk_grid_insert_column", LIBS);
  gidLink(cast(void**)&gtk_grid_insert_next_to, "gtk_grid_insert_next_to", LIBS);
  gidLink(cast(void**)&gtk_grid_insert_row, "gtk_grid_insert_row", LIBS);
  gidLink(cast(void**)&gtk_grid_remove_column, "gtk_grid_remove_column", LIBS);
  gidLink(cast(void**)&gtk_grid_remove_row, "gtk_grid_remove_row", LIBS);
  gidLink(cast(void**)&gtk_grid_set_baseline_row, "gtk_grid_set_baseline_row", LIBS);
  gidLink(cast(void**)&gtk_grid_set_column_homogeneous, "gtk_grid_set_column_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_grid_set_column_spacing, "gtk_grid_set_column_spacing", LIBS);
  gidLink(cast(void**)&gtk_grid_set_row_baseline_position, "gtk_grid_set_row_baseline_position", LIBS);
  gidLink(cast(void**)&gtk_grid_set_row_homogeneous, "gtk_grid_set_row_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_grid_set_row_spacing, "gtk_grid_set_row_spacing", LIBS);

  // HBox
  gidLink(cast(void**)&gtk_hbox_get_type, "gtk_hbox_get_type", LIBS);
  gidLink(cast(void**)&gtk_hbox_new, "gtk_hbox_new", LIBS);

  // HButtonBox
  gidLink(cast(void**)&gtk_hbutton_box_get_type, "gtk_hbutton_box_get_type", LIBS);
  gidLink(cast(void**)&gtk_hbutton_box_new, "gtk_hbutton_box_new", LIBS);

  // HPaned
  gidLink(cast(void**)&gtk_hpaned_get_type, "gtk_hpaned_get_type", LIBS);
  gidLink(cast(void**)&gtk_hpaned_new, "gtk_hpaned_new", LIBS);

  // HSV
  gidLink(cast(void**)&gtk_hsv_get_type, "gtk_hsv_get_type", LIBS);
  gidLink(cast(void**)&gtk_hsv_new, "gtk_hsv_new", LIBS);
  gidLink(cast(void**)&gtk_hsv_to_rgb, "gtk_hsv_to_rgb", LIBS);
  gidLink(cast(void**)&gtk_hsv_get_color, "gtk_hsv_get_color", LIBS);
  gidLink(cast(void**)&gtk_hsv_get_metrics, "gtk_hsv_get_metrics", LIBS);
  gidLink(cast(void**)&gtk_hsv_is_adjusting, "gtk_hsv_is_adjusting", LIBS);
  gidLink(cast(void**)&gtk_hsv_set_color, "gtk_hsv_set_color", LIBS);
  gidLink(cast(void**)&gtk_hsv_set_metrics, "gtk_hsv_set_metrics", LIBS);

  // HScale
  gidLink(cast(void**)&gtk_hscale_get_type, "gtk_hscale_get_type", LIBS);
  gidLink(cast(void**)&gtk_hscale_new, "gtk_hscale_new", LIBS);
  gidLink(cast(void**)&gtk_hscale_new_with_range, "gtk_hscale_new_with_range", LIBS);

  // HScrollbar
  gidLink(cast(void**)&gtk_hscrollbar_get_type, "gtk_hscrollbar_get_type", LIBS);
  gidLink(cast(void**)&gtk_hscrollbar_new, "gtk_hscrollbar_new", LIBS);

  // HSeparator
  gidLink(cast(void**)&gtk_hseparator_get_type, "gtk_hseparator_get_type", LIBS);
  gidLink(cast(void**)&gtk_hseparator_new, "gtk_hseparator_new", LIBS);

  // HandleBox
  gidLink(cast(void**)&gtk_handle_box_get_type, "gtk_handle_box_get_type", LIBS);
  gidLink(cast(void**)&gtk_handle_box_new, "gtk_handle_box_new", LIBS);
  gidLink(cast(void**)&gtk_handle_box_get_child_detached, "gtk_handle_box_get_child_detached", LIBS);
  gidLink(cast(void**)&gtk_handle_box_get_handle_position, "gtk_handle_box_get_handle_position", LIBS);
  gidLink(cast(void**)&gtk_handle_box_get_shadow_type, "gtk_handle_box_get_shadow_type", LIBS);
  gidLink(cast(void**)&gtk_handle_box_get_snap_edge, "gtk_handle_box_get_snap_edge", LIBS);
  gidLink(cast(void**)&gtk_handle_box_set_handle_position, "gtk_handle_box_set_handle_position", LIBS);
  gidLink(cast(void**)&gtk_handle_box_set_shadow_type, "gtk_handle_box_set_shadow_type", LIBS);
  gidLink(cast(void**)&gtk_handle_box_set_snap_edge, "gtk_handle_box_set_snap_edge", LIBS);

  // HeaderBar
  gidLink(cast(void**)&gtk_header_bar_get_type, "gtk_header_bar_get_type", LIBS);
  gidLink(cast(void**)&gtk_header_bar_new, "gtk_header_bar_new", LIBS);
  gidLink(cast(void**)&gtk_header_bar_get_custom_title, "gtk_header_bar_get_custom_title", LIBS);
  gidLink(cast(void**)&gtk_header_bar_get_decoration_layout, "gtk_header_bar_get_decoration_layout", LIBS);
  gidLink(cast(void**)&gtk_header_bar_get_has_subtitle, "gtk_header_bar_get_has_subtitle", LIBS);
  gidLink(cast(void**)&gtk_header_bar_get_show_close_button, "gtk_header_bar_get_show_close_button", LIBS);
  gidLink(cast(void**)&gtk_header_bar_get_subtitle, "gtk_header_bar_get_subtitle", LIBS);
  gidLink(cast(void**)&gtk_header_bar_get_title, "gtk_header_bar_get_title", LIBS);
  gidLink(cast(void**)&gtk_header_bar_pack_end, "gtk_header_bar_pack_end", LIBS);
  gidLink(cast(void**)&gtk_header_bar_pack_start, "gtk_header_bar_pack_start", LIBS);
  gidLink(cast(void**)&gtk_header_bar_set_custom_title, "gtk_header_bar_set_custom_title", LIBS);
  gidLink(cast(void**)&gtk_header_bar_set_decoration_layout, "gtk_header_bar_set_decoration_layout", LIBS);
  gidLink(cast(void**)&gtk_header_bar_set_has_subtitle, "gtk_header_bar_set_has_subtitle", LIBS);
  gidLink(cast(void**)&gtk_header_bar_set_show_close_button, "gtk_header_bar_set_show_close_button", LIBS);
  gidLink(cast(void**)&gtk_header_bar_set_subtitle, "gtk_header_bar_set_subtitle", LIBS);
  gidLink(cast(void**)&gtk_header_bar_set_title, "gtk_header_bar_set_title", LIBS);

  // HeaderBarAccessible
  gidLink(cast(void**)&gtk_header_bar_accessible_get_type, "gtk_header_bar_accessible_get_type", LIBS);

  // IMContext
  gidLink(cast(void**)&gtk_im_context_get_type, "gtk_im_context_get_type", LIBS);
  gidLink(cast(void**)&gtk_im_context_delete_surrounding, "gtk_im_context_delete_surrounding", LIBS);
  gidLink(cast(void**)&gtk_im_context_filter_keypress, "gtk_im_context_filter_keypress", LIBS);
  gidLink(cast(void**)&gtk_im_context_focus_in, "gtk_im_context_focus_in", LIBS);
  gidLink(cast(void**)&gtk_im_context_focus_out, "gtk_im_context_focus_out", LIBS);
  gidLink(cast(void**)&gtk_im_context_get_preedit_string, "gtk_im_context_get_preedit_string", LIBS);
  gidLink(cast(void**)&gtk_im_context_get_surrounding, "gtk_im_context_get_surrounding", LIBS);
  gidLink(cast(void**)&gtk_im_context_reset, "gtk_im_context_reset", LIBS);
  gidLink(cast(void**)&gtk_im_context_set_client_window, "gtk_im_context_set_client_window", LIBS);
  gidLink(cast(void**)&gtk_im_context_set_cursor_location, "gtk_im_context_set_cursor_location", LIBS);
  gidLink(cast(void**)&gtk_im_context_set_surrounding, "gtk_im_context_set_surrounding", LIBS);
  gidLink(cast(void**)&gtk_im_context_set_use_preedit, "gtk_im_context_set_use_preedit", LIBS);

  // IMContextSimple
  gidLink(cast(void**)&gtk_im_context_simple_get_type, "gtk_im_context_simple_get_type", LIBS);
  gidLink(cast(void**)&gtk_im_context_simple_new, "gtk_im_context_simple_new", LIBS);
  gidLink(cast(void**)&gtk_im_context_simple_add_compose_file, "gtk_im_context_simple_add_compose_file", LIBS);
  gidLink(cast(void**)&gtk_im_context_simple_add_table, "gtk_im_context_simple_add_table", LIBS);

  // IMMulticontext
  gidLink(cast(void**)&gtk_im_multicontext_get_type, "gtk_im_multicontext_get_type", LIBS);
  gidLink(cast(void**)&gtk_im_multicontext_new, "gtk_im_multicontext_new", LIBS);
  gidLink(cast(void**)&gtk_im_multicontext_append_menuitems, "gtk_im_multicontext_append_menuitems", LIBS);
  gidLink(cast(void**)&gtk_im_multicontext_get_context_id, "gtk_im_multicontext_get_context_id", LIBS);
  gidLink(cast(void**)&gtk_im_multicontext_set_context_id, "gtk_im_multicontext_set_context_id", LIBS);

  // IconFactory
  gidLink(cast(void**)&gtk_icon_factory_get_type, "gtk_icon_factory_get_type", LIBS);
  gidLink(cast(void**)&gtk_icon_factory_new, "gtk_icon_factory_new", LIBS);
  gidLink(cast(void**)&gtk_icon_factory_lookup_default, "gtk_icon_factory_lookup_default", LIBS);
  gidLink(cast(void**)&gtk_icon_factory_add, "gtk_icon_factory_add", LIBS);
  gidLink(cast(void**)&gtk_icon_factory_add_default, "gtk_icon_factory_add_default", LIBS);
  gidLink(cast(void**)&gtk_icon_factory_lookup, "gtk_icon_factory_lookup", LIBS);
  gidLink(cast(void**)&gtk_icon_factory_remove_default, "gtk_icon_factory_remove_default", LIBS);

  // IconInfo
  gidLink(cast(void**)&gtk_icon_info_get_type, "gtk_icon_info_get_type", LIBS);
  gidLink(cast(void**)&gtk_icon_info_new_for_pixbuf, "gtk_icon_info_new_for_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_icon_info_copy, "gtk_icon_info_copy", LIBS);
  gidLink(cast(void**)&gtk_icon_info_free, "gtk_icon_info_free", LIBS);
  gidLink(cast(void**)&gtk_icon_info_get_attach_points, "gtk_icon_info_get_attach_points", LIBS);
  gidLink(cast(void**)&gtk_icon_info_get_base_scale, "gtk_icon_info_get_base_scale", LIBS);
  gidLink(cast(void**)&gtk_icon_info_get_base_size, "gtk_icon_info_get_base_size", LIBS);
  gidLink(cast(void**)&gtk_icon_info_get_builtin_pixbuf, "gtk_icon_info_get_builtin_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_icon_info_get_display_name, "gtk_icon_info_get_display_name", LIBS);
  gidLink(cast(void**)&gtk_icon_info_get_embedded_rect, "gtk_icon_info_get_embedded_rect", LIBS);
  gidLink(cast(void**)&gtk_icon_info_get_filename, "gtk_icon_info_get_filename", LIBS);
  gidLink(cast(void**)&gtk_icon_info_is_symbolic, "gtk_icon_info_is_symbolic", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_icon, "gtk_icon_info_load_icon", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_icon_async, "gtk_icon_info_load_icon_async", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_icon_finish, "gtk_icon_info_load_icon_finish", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_surface, "gtk_icon_info_load_surface", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_symbolic, "gtk_icon_info_load_symbolic", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_symbolic_async, "gtk_icon_info_load_symbolic_async", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_symbolic_finish, "gtk_icon_info_load_symbolic_finish", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_symbolic_for_context, "gtk_icon_info_load_symbolic_for_context", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_symbolic_for_context_async, "gtk_icon_info_load_symbolic_for_context_async", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_symbolic_for_context_finish, "gtk_icon_info_load_symbolic_for_context_finish", LIBS);
  gidLink(cast(void**)&gtk_icon_info_load_symbolic_for_style, "gtk_icon_info_load_symbolic_for_style", LIBS);
  gidLink(cast(void**)&gtk_icon_info_set_raw_coordinates, "gtk_icon_info_set_raw_coordinates", LIBS);

  // IconSet
  gidLink(cast(void**)&gtk_icon_set_get_type, "gtk_icon_set_get_type", LIBS);
  gidLink(cast(void**)&gtk_icon_set_new, "gtk_icon_set_new", LIBS);
  gidLink(cast(void**)&gtk_icon_set_new_from_pixbuf, "gtk_icon_set_new_from_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_icon_set_add_source, "gtk_icon_set_add_source", LIBS);
  gidLink(cast(void**)&gtk_icon_set_copy, "gtk_icon_set_copy", LIBS);
  gidLink(cast(void**)&gtk_icon_set_get_sizes, "gtk_icon_set_get_sizes", LIBS);
  gidLink(cast(void**)&gtk_icon_set_ref, "gtk_icon_set_ref", LIBS);
  gidLink(cast(void**)&gtk_icon_set_render_icon, "gtk_icon_set_render_icon", LIBS);
  gidLink(cast(void**)&gtk_icon_set_render_icon_pixbuf, "gtk_icon_set_render_icon_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_icon_set_render_icon_surface, "gtk_icon_set_render_icon_surface", LIBS);
  gidLink(cast(void**)&gtk_icon_set_unref, "gtk_icon_set_unref", LIBS);

  // IconSource
  gidLink(cast(void**)&gtk_icon_source_get_type, "gtk_icon_source_get_type", LIBS);
  gidLink(cast(void**)&gtk_icon_source_new, "gtk_icon_source_new", LIBS);
  gidLink(cast(void**)&gtk_icon_source_copy, "gtk_icon_source_copy", LIBS);
  gidLink(cast(void**)&gtk_icon_source_free, "gtk_icon_source_free", LIBS);
  gidLink(cast(void**)&gtk_icon_source_get_direction, "gtk_icon_source_get_direction", LIBS);
  gidLink(cast(void**)&gtk_icon_source_get_direction_wildcarded, "gtk_icon_source_get_direction_wildcarded", LIBS);
  gidLink(cast(void**)&gtk_icon_source_get_filename, "gtk_icon_source_get_filename", LIBS);
  gidLink(cast(void**)&gtk_icon_source_get_icon_name, "gtk_icon_source_get_icon_name", LIBS);
  gidLink(cast(void**)&gtk_icon_source_get_pixbuf, "gtk_icon_source_get_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_icon_source_get_size, "gtk_icon_source_get_size", LIBS);
  gidLink(cast(void**)&gtk_icon_source_get_size_wildcarded, "gtk_icon_source_get_size_wildcarded", LIBS);
  gidLink(cast(void**)&gtk_icon_source_get_state, "gtk_icon_source_get_state", LIBS);
  gidLink(cast(void**)&gtk_icon_source_get_state_wildcarded, "gtk_icon_source_get_state_wildcarded", LIBS);
  gidLink(cast(void**)&gtk_icon_source_set_direction, "gtk_icon_source_set_direction", LIBS);
  gidLink(cast(void**)&gtk_icon_source_set_direction_wildcarded, "gtk_icon_source_set_direction_wildcarded", LIBS);
  gidLink(cast(void**)&gtk_icon_source_set_filename, "gtk_icon_source_set_filename", LIBS);
  gidLink(cast(void**)&gtk_icon_source_set_icon_name, "gtk_icon_source_set_icon_name", LIBS);
  gidLink(cast(void**)&gtk_icon_source_set_pixbuf, "gtk_icon_source_set_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_icon_source_set_size, "gtk_icon_source_set_size", LIBS);
  gidLink(cast(void**)&gtk_icon_source_set_size_wildcarded, "gtk_icon_source_set_size_wildcarded", LIBS);
  gidLink(cast(void**)&gtk_icon_source_set_state, "gtk_icon_source_set_state", LIBS);
  gidLink(cast(void**)&gtk_icon_source_set_state_wildcarded, "gtk_icon_source_set_state_wildcarded", LIBS);

  // IconTheme
  gidLink(cast(void**)&gtk_icon_theme_get_type, "gtk_icon_theme_get_type", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_new, "gtk_icon_theme_new", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_add_builtin_icon, "gtk_icon_theme_add_builtin_icon", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_get_default, "gtk_icon_theme_get_default", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_get_for_screen, "gtk_icon_theme_get_for_screen", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_add_resource_path, "gtk_icon_theme_add_resource_path", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_append_search_path, "gtk_icon_theme_append_search_path", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_choose_icon, "gtk_icon_theme_choose_icon", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_choose_icon_for_scale, "gtk_icon_theme_choose_icon_for_scale", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_get_example_icon_name, "gtk_icon_theme_get_example_icon_name", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_get_icon_sizes, "gtk_icon_theme_get_icon_sizes", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_get_search_path, "gtk_icon_theme_get_search_path", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_has_icon, "gtk_icon_theme_has_icon", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_list_contexts, "gtk_icon_theme_list_contexts", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_list_icons, "gtk_icon_theme_list_icons", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_load_icon, "gtk_icon_theme_load_icon", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_load_icon_for_scale, "gtk_icon_theme_load_icon_for_scale", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_load_surface, "gtk_icon_theme_load_surface", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_lookup_by_gicon, "gtk_icon_theme_lookup_by_gicon", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_lookup_by_gicon_for_scale, "gtk_icon_theme_lookup_by_gicon_for_scale", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_lookup_icon, "gtk_icon_theme_lookup_icon", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_lookup_icon_for_scale, "gtk_icon_theme_lookup_icon_for_scale", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_prepend_search_path, "gtk_icon_theme_prepend_search_path", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_rescan_if_needed, "gtk_icon_theme_rescan_if_needed", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_set_custom_theme, "gtk_icon_theme_set_custom_theme", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_set_screen, "gtk_icon_theme_set_screen", LIBS);
  gidLink(cast(void**)&gtk_icon_theme_set_search_path, "gtk_icon_theme_set_search_path", LIBS);

  // IconView
  gidLink(cast(void**)&gtk_icon_view_get_type, "gtk_icon_view_get_type", LIBS);
  gidLink(cast(void**)&gtk_icon_view_new, "gtk_icon_view_new", LIBS);
  gidLink(cast(void**)&gtk_icon_view_new_with_area, "gtk_icon_view_new_with_area", LIBS);
  gidLink(cast(void**)&gtk_icon_view_new_with_model, "gtk_icon_view_new_with_model", LIBS);
  gidLink(cast(void**)&gtk_icon_view_convert_widget_to_bin_window_coords, "gtk_icon_view_convert_widget_to_bin_window_coords", LIBS);
  gidLink(cast(void**)&gtk_icon_view_create_drag_icon, "gtk_icon_view_create_drag_icon", LIBS);
  gidLink(cast(void**)&gtk_icon_view_enable_model_drag_dest, "gtk_icon_view_enable_model_drag_dest", LIBS);
  gidLink(cast(void**)&gtk_icon_view_enable_model_drag_source, "gtk_icon_view_enable_model_drag_source", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_activate_on_single_click, "gtk_icon_view_get_activate_on_single_click", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_cell_rect, "gtk_icon_view_get_cell_rect", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_column_spacing, "gtk_icon_view_get_column_spacing", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_columns, "gtk_icon_view_get_columns", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_cursor, "gtk_icon_view_get_cursor", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_dest_item_at_pos, "gtk_icon_view_get_dest_item_at_pos", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_drag_dest_item, "gtk_icon_view_get_drag_dest_item", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_item_at_pos, "gtk_icon_view_get_item_at_pos", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_item_column, "gtk_icon_view_get_item_column", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_item_orientation, "gtk_icon_view_get_item_orientation", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_item_padding, "gtk_icon_view_get_item_padding", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_item_row, "gtk_icon_view_get_item_row", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_item_width, "gtk_icon_view_get_item_width", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_margin, "gtk_icon_view_get_margin", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_markup_column, "gtk_icon_view_get_markup_column", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_model, "gtk_icon_view_get_model", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_path_at_pos, "gtk_icon_view_get_path_at_pos", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_pixbuf_column, "gtk_icon_view_get_pixbuf_column", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_reorderable, "gtk_icon_view_get_reorderable", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_row_spacing, "gtk_icon_view_get_row_spacing", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_selected_items, "gtk_icon_view_get_selected_items", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_selection_mode, "gtk_icon_view_get_selection_mode", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_spacing, "gtk_icon_view_get_spacing", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_text_column, "gtk_icon_view_get_text_column", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_tooltip_column, "gtk_icon_view_get_tooltip_column", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_tooltip_context, "gtk_icon_view_get_tooltip_context", LIBS);
  gidLink(cast(void**)&gtk_icon_view_get_visible_range, "gtk_icon_view_get_visible_range", LIBS);
  gidLink(cast(void**)&gtk_icon_view_item_activated, "gtk_icon_view_item_activated", LIBS);
  gidLink(cast(void**)&gtk_icon_view_path_is_selected, "gtk_icon_view_path_is_selected", LIBS);
  gidLink(cast(void**)&gtk_icon_view_scroll_to_path, "gtk_icon_view_scroll_to_path", LIBS);
  gidLink(cast(void**)&gtk_icon_view_select_all, "gtk_icon_view_select_all", LIBS);
  gidLink(cast(void**)&gtk_icon_view_select_path, "gtk_icon_view_select_path", LIBS);
  gidLink(cast(void**)&gtk_icon_view_selected_foreach, "gtk_icon_view_selected_foreach", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_activate_on_single_click, "gtk_icon_view_set_activate_on_single_click", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_column_spacing, "gtk_icon_view_set_column_spacing", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_columns, "gtk_icon_view_set_columns", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_cursor, "gtk_icon_view_set_cursor", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_drag_dest_item, "gtk_icon_view_set_drag_dest_item", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_item_orientation, "gtk_icon_view_set_item_orientation", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_item_padding, "gtk_icon_view_set_item_padding", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_item_width, "gtk_icon_view_set_item_width", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_margin, "gtk_icon_view_set_margin", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_markup_column, "gtk_icon_view_set_markup_column", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_model, "gtk_icon_view_set_model", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_pixbuf_column, "gtk_icon_view_set_pixbuf_column", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_reorderable, "gtk_icon_view_set_reorderable", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_row_spacing, "gtk_icon_view_set_row_spacing", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_selection_mode, "gtk_icon_view_set_selection_mode", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_spacing, "gtk_icon_view_set_spacing", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_text_column, "gtk_icon_view_set_text_column", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_tooltip_cell, "gtk_icon_view_set_tooltip_cell", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_tooltip_column, "gtk_icon_view_set_tooltip_column", LIBS);
  gidLink(cast(void**)&gtk_icon_view_set_tooltip_item, "gtk_icon_view_set_tooltip_item", LIBS);
  gidLink(cast(void**)&gtk_icon_view_unselect_all, "gtk_icon_view_unselect_all", LIBS);
  gidLink(cast(void**)&gtk_icon_view_unselect_path, "gtk_icon_view_unselect_path", LIBS);
  gidLink(cast(void**)&gtk_icon_view_unset_model_drag_dest, "gtk_icon_view_unset_model_drag_dest", LIBS);
  gidLink(cast(void**)&gtk_icon_view_unset_model_drag_source, "gtk_icon_view_unset_model_drag_source", LIBS);

  // IconViewAccessible
  gidLink(cast(void**)&gtk_icon_view_accessible_get_type, "gtk_icon_view_accessible_get_type", LIBS);

  // Image
  gidLink(cast(void**)&gtk_image_get_type, "gtk_image_get_type", LIBS);
  gidLink(cast(void**)&gtk_image_new, "gtk_image_new", LIBS);
  gidLink(cast(void**)&gtk_image_new_from_animation, "gtk_image_new_from_animation", LIBS);
  gidLink(cast(void**)&gtk_image_new_from_file, "gtk_image_new_from_file", LIBS);
  gidLink(cast(void**)&gtk_image_new_from_gicon, "gtk_image_new_from_gicon", LIBS);
  gidLink(cast(void**)&gtk_image_new_from_icon_name, "gtk_image_new_from_icon_name", LIBS);
  gidLink(cast(void**)&gtk_image_new_from_icon_set, "gtk_image_new_from_icon_set", LIBS);
  gidLink(cast(void**)&gtk_image_new_from_pixbuf, "gtk_image_new_from_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_image_new_from_resource, "gtk_image_new_from_resource", LIBS);
  gidLink(cast(void**)&gtk_image_new_from_stock, "gtk_image_new_from_stock", LIBS);
  gidLink(cast(void**)&gtk_image_new_from_surface, "gtk_image_new_from_surface", LIBS);
  gidLink(cast(void**)&gtk_image_clear, "gtk_image_clear", LIBS);
  gidLink(cast(void**)&gtk_image_get_animation, "gtk_image_get_animation", LIBS);
  gidLink(cast(void**)&gtk_image_get_gicon, "gtk_image_get_gicon", LIBS);
  gidLink(cast(void**)&gtk_image_get_icon_name, "gtk_image_get_icon_name", LIBS);
  gidLink(cast(void**)&gtk_image_get_icon_set, "gtk_image_get_icon_set", LIBS);
  gidLink(cast(void**)&gtk_image_get_pixbuf, "gtk_image_get_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_image_get_pixel_size, "gtk_image_get_pixel_size", LIBS);
  gidLink(cast(void**)&gtk_image_get_stock, "gtk_image_get_stock", LIBS);
  gidLink(cast(void**)&gtk_image_get_storage_type, "gtk_image_get_storage_type", LIBS);
  gidLink(cast(void**)&gtk_image_set_from_animation, "gtk_image_set_from_animation", LIBS);
  gidLink(cast(void**)&gtk_image_set_from_file, "gtk_image_set_from_file", LIBS);
  gidLink(cast(void**)&gtk_image_set_from_gicon, "gtk_image_set_from_gicon", LIBS);
  gidLink(cast(void**)&gtk_image_set_from_icon_name, "gtk_image_set_from_icon_name", LIBS);
  gidLink(cast(void**)&gtk_image_set_from_icon_set, "gtk_image_set_from_icon_set", LIBS);
  gidLink(cast(void**)&gtk_image_set_from_pixbuf, "gtk_image_set_from_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_image_set_from_resource, "gtk_image_set_from_resource", LIBS);
  gidLink(cast(void**)&gtk_image_set_from_stock, "gtk_image_set_from_stock", LIBS);
  gidLink(cast(void**)&gtk_image_set_from_surface, "gtk_image_set_from_surface", LIBS);
  gidLink(cast(void**)&gtk_image_set_pixel_size, "gtk_image_set_pixel_size", LIBS);

  // ImageAccessible
  gidLink(cast(void**)&gtk_image_accessible_get_type, "gtk_image_accessible_get_type", LIBS);

  // ImageCellAccessible
  gidLink(cast(void**)&gtk_image_cell_accessible_get_type, "gtk_image_cell_accessible_get_type", LIBS);

  // ImageMenuItem
  gidLink(cast(void**)&gtk_image_menu_item_get_type, "gtk_image_menu_item_get_type", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_new, "gtk_image_menu_item_new", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_new_from_stock, "gtk_image_menu_item_new_from_stock", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_new_with_label, "gtk_image_menu_item_new_with_label", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_new_with_mnemonic, "gtk_image_menu_item_new_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_get_always_show_image, "gtk_image_menu_item_get_always_show_image", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_get_image, "gtk_image_menu_item_get_image", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_get_use_stock, "gtk_image_menu_item_get_use_stock", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_set_accel_group, "gtk_image_menu_item_set_accel_group", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_set_always_show_image, "gtk_image_menu_item_set_always_show_image", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_set_image, "gtk_image_menu_item_set_image", LIBS);
  gidLink(cast(void**)&gtk_image_menu_item_set_use_stock, "gtk_image_menu_item_set_use_stock", LIBS);

  // InfoBar
  gidLink(cast(void**)&gtk_info_bar_get_type, "gtk_info_bar_get_type", LIBS);
  gidLink(cast(void**)&gtk_info_bar_new, "gtk_info_bar_new", LIBS);
  gidLink(cast(void**)&gtk_info_bar_new_with_buttons, "gtk_info_bar_new_with_buttons", LIBS);
  gidLink(cast(void**)&gtk_info_bar_add_action_widget, "gtk_info_bar_add_action_widget", LIBS);
  gidLink(cast(void**)&gtk_info_bar_add_button, "gtk_info_bar_add_button", LIBS);
  gidLink(cast(void**)&gtk_info_bar_add_buttons, "gtk_info_bar_add_buttons", LIBS);
  gidLink(cast(void**)&gtk_info_bar_get_action_area, "gtk_info_bar_get_action_area", LIBS);
  gidLink(cast(void**)&gtk_info_bar_get_content_area, "gtk_info_bar_get_content_area", LIBS);
  gidLink(cast(void**)&gtk_info_bar_get_message_type, "gtk_info_bar_get_message_type", LIBS);
  gidLink(cast(void**)&gtk_info_bar_get_revealed, "gtk_info_bar_get_revealed", LIBS);
  gidLink(cast(void**)&gtk_info_bar_get_show_close_button, "gtk_info_bar_get_show_close_button", LIBS);
  gidLink(cast(void**)&gtk_info_bar_response, "gtk_info_bar_response", LIBS);
  gidLink(cast(void**)&gtk_info_bar_set_default_response, "gtk_info_bar_set_default_response", LIBS);
  gidLink(cast(void**)&gtk_info_bar_set_message_type, "gtk_info_bar_set_message_type", LIBS);
  gidLink(cast(void**)&gtk_info_bar_set_response_sensitive, "gtk_info_bar_set_response_sensitive", LIBS);
  gidLink(cast(void**)&gtk_info_bar_set_revealed, "gtk_info_bar_set_revealed", LIBS);
  gidLink(cast(void**)&gtk_info_bar_set_show_close_button, "gtk_info_bar_set_show_close_button", LIBS);

  // Invisible
  gidLink(cast(void**)&gtk_invisible_get_type, "gtk_invisible_get_type", LIBS);
  gidLink(cast(void**)&gtk_invisible_new, "gtk_invisible_new", LIBS);
  gidLink(cast(void**)&gtk_invisible_new_for_screen, "gtk_invisible_new_for_screen", LIBS);
  gidLink(cast(void**)&gtk_invisible_get_screen, "gtk_invisible_get_screen", LIBS);
  gidLink(cast(void**)&gtk_invisible_set_screen, "gtk_invisible_set_screen", LIBS);

  // Label
  gidLink(cast(void**)&gtk_label_get_type, "gtk_label_get_type", LIBS);
  gidLink(cast(void**)&gtk_label_new, "gtk_label_new", LIBS);
  gidLink(cast(void**)&gtk_label_new_with_mnemonic, "gtk_label_new_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_label_get_angle, "gtk_label_get_angle", LIBS);
  gidLink(cast(void**)&gtk_label_get_attributes, "gtk_label_get_attributes", LIBS);
  gidLink(cast(void**)&gtk_label_get_current_uri, "gtk_label_get_current_uri", LIBS);
  gidLink(cast(void**)&gtk_label_get_ellipsize, "gtk_label_get_ellipsize", LIBS);
  gidLink(cast(void**)&gtk_label_get_justify, "gtk_label_get_justify", LIBS);
  gidLink(cast(void**)&gtk_label_get_label, "gtk_label_get_label", LIBS);
  gidLink(cast(void**)&gtk_label_get_layout, "gtk_label_get_layout", LIBS);
  gidLink(cast(void**)&gtk_label_get_layout_offsets, "gtk_label_get_layout_offsets", LIBS);
  gidLink(cast(void**)&gtk_label_get_line_wrap, "gtk_label_get_line_wrap", LIBS);
  gidLink(cast(void**)&gtk_label_get_line_wrap_mode, "gtk_label_get_line_wrap_mode", LIBS);
  gidLink(cast(void**)&gtk_label_get_lines, "gtk_label_get_lines", LIBS);
  gidLink(cast(void**)&gtk_label_get_max_width_chars, "gtk_label_get_max_width_chars", LIBS);
  gidLink(cast(void**)&gtk_label_get_mnemonic_keyval, "gtk_label_get_mnemonic_keyval", LIBS);
  gidLink(cast(void**)&gtk_label_get_mnemonic_widget, "gtk_label_get_mnemonic_widget", LIBS);
  gidLink(cast(void**)&gtk_label_get_selectable, "gtk_label_get_selectable", LIBS);
  gidLink(cast(void**)&gtk_label_get_selection_bounds, "gtk_label_get_selection_bounds", LIBS);
  gidLink(cast(void**)&gtk_label_get_single_line_mode, "gtk_label_get_single_line_mode", LIBS);
  gidLink(cast(void**)&gtk_label_get_text, "gtk_label_get_text", LIBS);
  gidLink(cast(void**)&gtk_label_get_track_visited_links, "gtk_label_get_track_visited_links", LIBS);
  gidLink(cast(void**)&gtk_label_get_use_markup, "gtk_label_get_use_markup", LIBS);
  gidLink(cast(void**)&gtk_label_get_use_underline, "gtk_label_get_use_underline", LIBS);
  gidLink(cast(void**)&gtk_label_get_width_chars, "gtk_label_get_width_chars", LIBS);
  gidLink(cast(void**)&gtk_label_get_xalign, "gtk_label_get_xalign", LIBS);
  gidLink(cast(void**)&gtk_label_get_yalign, "gtk_label_get_yalign", LIBS);
  gidLink(cast(void**)&gtk_label_select_region, "gtk_label_select_region", LIBS);
  gidLink(cast(void**)&gtk_label_set_angle, "gtk_label_set_angle", LIBS);
  gidLink(cast(void**)&gtk_label_set_attributes, "gtk_label_set_attributes", LIBS);
  gidLink(cast(void**)&gtk_label_set_ellipsize, "gtk_label_set_ellipsize", LIBS);
  gidLink(cast(void**)&gtk_label_set_justify, "gtk_label_set_justify", LIBS);
  gidLink(cast(void**)&gtk_label_set_label, "gtk_label_set_label", LIBS);
  gidLink(cast(void**)&gtk_label_set_line_wrap, "gtk_label_set_line_wrap", LIBS);
  gidLink(cast(void**)&gtk_label_set_line_wrap_mode, "gtk_label_set_line_wrap_mode", LIBS);
  gidLink(cast(void**)&gtk_label_set_lines, "gtk_label_set_lines", LIBS);
  gidLink(cast(void**)&gtk_label_set_markup, "gtk_label_set_markup", LIBS);
  gidLink(cast(void**)&gtk_label_set_markup_with_mnemonic, "gtk_label_set_markup_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_label_set_max_width_chars, "gtk_label_set_max_width_chars", LIBS);
  gidLink(cast(void**)&gtk_label_set_mnemonic_widget, "gtk_label_set_mnemonic_widget", LIBS);
  gidLink(cast(void**)&gtk_label_set_pattern, "gtk_label_set_pattern", LIBS);
  gidLink(cast(void**)&gtk_label_set_selectable, "gtk_label_set_selectable", LIBS);
  gidLink(cast(void**)&gtk_label_set_single_line_mode, "gtk_label_set_single_line_mode", LIBS);
  gidLink(cast(void**)&gtk_label_set_text, "gtk_label_set_text", LIBS);
  gidLink(cast(void**)&gtk_label_set_text_with_mnemonic, "gtk_label_set_text_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_label_set_track_visited_links, "gtk_label_set_track_visited_links", LIBS);
  gidLink(cast(void**)&gtk_label_set_use_markup, "gtk_label_set_use_markup", LIBS);
  gidLink(cast(void**)&gtk_label_set_use_underline, "gtk_label_set_use_underline", LIBS);
  gidLink(cast(void**)&gtk_label_set_width_chars, "gtk_label_set_width_chars", LIBS);
  gidLink(cast(void**)&gtk_label_set_xalign, "gtk_label_set_xalign", LIBS);
  gidLink(cast(void**)&gtk_label_set_yalign, "gtk_label_set_yalign", LIBS);

  // LabelAccessible
  gidLink(cast(void**)&gtk_label_accessible_get_type, "gtk_label_accessible_get_type", LIBS);

  // Layout
  gidLink(cast(void**)&gtk_layout_get_type, "gtk_layout_get_type", LIBS);
  gidLink(cast(void**)&gtk_layout_new, "gtk_layout_new", LIBS);
  gidLink(cast(void**)&gtk_layout_get_bin_window, "gtk_layout_get_bin_window", LIBS);
  gidLink(cast(void**)&gtk_layout_get_hadjustment, "gtk_layout_get_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_layout_get_size, "gtk_layout_get_size", LIBS);
  gidLink(cast(void**)&gtk_layout_get_vadjustment, "gtk_layout_get_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_layout_move, "gtk_layout_move", LIBS);
  gidLink(cast(void**)&gtk_layout_put, "gtk_layout_put", LIBS);
  gidLink(cast(void**)&gtk_layout_set_hadjustment, "gtk_layout_set_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_layout_set_size, "gtk_layout_set_size", LIBS);
  gidLink(cast(void**)&gtk_layout_set_vadjustment, "gtk_layout_set_vadjustment", LIBS);

  // LevelBar
  gidLink(cast(void**)&gtk_level_bar_get_type, "gtk_level_bar_get_type", LIBS);
  gidLink(cast(void**)&gtk_level_bar_new, "gtk_level_bar_new", LIBS);
  gidLink(cast(void**)&gtk_level_bar_new_for_interval, "gtk_level_bar_new_for_interval", LIBS);
  gidLink(cast(void**)&gtk_level_bar_add_offset_value, "gtk_level_bar_add_offset_value", LIBS);
  gidLink(cast(void**)&gtk_level_bar_get_inverted, "gtk_level_bar_get_inverted", LIBS);
  gidLink(cast(void**)&gtk_level_bar_get_max_value, "gtk_level_bar_get_max_value", LIBS);
  gidLink(cast(void**)&gtk_level_bar_get_min_value, "gtk_level_bar_get_min_value", LIBS);
  gidLink(cast(void**)&gtk_level_bar_get_mode, "gtk_level_bar_get_mode", LIBS);
  gidLink(cast(void**)&gtk_level_bar_get_offset_value, "gtk_level_bar_get_offset_value", LIBS);
  gidLink(cast(void**)&gtk_level_bar_get_value, "gtk_level_bar_get_value", LIBS);
  gidLink(cast(void**)&gtk_level_bar_remove_offset_value, "gtk_level_bar_remove_offset_value", LIBS);
  gidLink(cast(void**)&gtk_level_bar_set_inverted, "gtk_level_bar_set_inverted", LIBS);
  gidLink(cast(void**)&gtk_level_bar_set_max_value, "gtk_level_bar_set_max_value", LIBS);
  gidLink(cast(void**)&gtk_level_bar_set_min_value, "gtk_level_bar_set_min_value", LIBS);
  gidLink(cast(void**)&gtk_level_bar_set_mode, "gtk_level_bar_set_mode", LIBS);
  gidLink(cast(void**)&gtk_level_bar_set_value, "gtk_level_bar_set_value", LIBS);

  // LevelBarAccessible
  gidLink(cast(void**)&gtk_level_bar_accessible_get_type, "gtk_level_bar_accessible_get_type", LIBS);

  // LinkButton
  gidLink(cast(void**)&gtk_link_button_get_type, "gtk_link_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_link_button_new, "gtk_link_button_new", LIBS);
  gidLink(cast(void**)&gtk_link_button_new_with_label, "gtk_link_button_new_with_label", LIBS);
  gidLink(cast(void**)&gtk_link_button_get_uri, "gtk_link_button_get_uri", LIBS);
  gidLink(cast(void**)&gtk_link_button_get_visited, "gtk_link_button_get_visited", LIBS);
  gidLink(cast(void**)&gtk_link_button_set_uri, "gtk_link_button_set_uri", LIBS);
  gidLink(cast(void**)&gtk_link_button_set_visited, "gtk_link_button_set_visited", LIBS);

  // LinkButtonAccessible
  gidLink(cast(void**)&gtk_link_button_accessible_get_type, "gtk_link_button_accessible_get_type", LIBS);

  // ListBox
  gidLink(cast(void**)&gtk_list_box_get_type, "gtk_list_box_get_type", LIBS);
  gidLink(cast(void**)&gtk_list_box_new, "gtk_list_box_new", LIBS);
  gidLink(cast(void**)&gtk_list_box_bind_model, "gtk_list_box_bind_model", LIBS);
  gidLink(cast(void**)&gtk_list_box_drag_highlight_row, "gtk_list_box_drag_highlight_row", LIBS);
  gidLink(cast(void**)&gtk_list_box_drag_unhighlight_row, "gtk_list_box_drag_unhighlight_row", LIBS);
  gidLink(cast(void**)&gtk_list_box_get_activate_on_single_click, "gtk_list_box_get_activate_on_single_click", LIBS);
  gidLink(cast(void**)&gtk_list_box_get_adjustment, "gtk_list_box_get_adjustment", LIBS);
  gidLink(cast(void**)&gtk_list_box_get_row_at_index, "gtk_list_box_get_row_at_index", LIBS);
  gidLink(cast(void**)&gtk_list_box_get_row_at_y, "gtk_list_box_get_row_at_y", LIBS);
  gidLink(cast(void**)&gtk_list_box_get_selected_row, "gtk_list_box_get_selected_row", LIBS);
  gidLink(cast(void**)&gtk_list_box_get_selected_rows, "gtk_list_box_get_selected_rows", LIBS);
  gidLink(cast(void**)&gtk_list_box_get_selection_mode, "gtk_list_box_get_selection_mode", LIBS);
  gidLink(cast(void**)&gtk_list_box_insert, "gtk_list_box_insert", LIBS);
  gidLink(cast(void**)&gtk_list_box_invalidate_filter, "gtk_list_box_invalidate_filter", LIBS);
  gidLink(cast(void**)&gtk_list_box_invalidate_headers, "gtk_list_box_invalidate_headers", LIBS);
  gidLink(cast(void**)&gtk_list_box_invalidate_sort, "gtk_list_box_invalidate_sort", LIBS);
  gidLink(cast(void**)&gtk_list_box_prepend, "gtk_list_box_prepend", LIBS);
  gidLink(cast(void**)&gtk_list_box_select_all, "gtk_list_box_select_all", LIBS);
  gidLink(cast(void**)&gtk_list_box_select_row, "gtk_list_box_select_row", LIBS);
  gidLink(cast(void**)&gtk_list_box_selected_foreach, "gtk_list_box_selected_foreach", LIBS);
  gidLink(cast(void**)&gtk_list_box_set_activate_on_single_click, "gtk_list_box_set_activate_on_single_click", LIBS);
  gidLink(cast(void**)&gtk_list_box_set_adjustment, "gtk_list_box_set_adjustment", LIBS);
  gidLink(cast(void**)&gtk_list_box_set_filter_func, "gtk_list_box_set_filter_func", LIBS);
  gidLink(cast(void**)&gtk_list_box_set_header_func, "gtk_list_box_set_header_func", LIBS);
  gidLink(cast(void**)&gtk_list_box_set_placeholder, "gtk_list_box_set_placeholder", LIBS);
  gidLink(cast(void**)&gtk_list_box_set_selection_mode, "gtk_list_box_set_selection_mode", LIBS);
  gidLink(cast(void**)&gtk_list_box_set_sort_func, "gtk_list_box_set_sort_func", LIBS);
  gidLink(cast(void**)&gtk_list_box_unselect_all, "gtk_list_box_unselect_all", LIBS);
  gidLink(cast(void**)&gtk_list_box_unselect_row, "gtk_list_box_unselect_row", LIBS);

  // ListBoxAccessible
  gidLink(cast(void**)&gtk_list_box_accessible_get_type, "gtk_list_box_accessible_get_type", LIBS);

  // ListBoxRow
  gidLink(cast(void**)&gtk_list_box_row_get_type, "gtk_list_box_row_get_type", LIBS);
  gidLink(cast(void**)&gtk_list_box_row_new, "gtk_list_box_row_new", LIBS);
  gidLink(cast(void**)&gtk_list_box_row_changed, "gtk_list_box_row_changed", LIBS);
  gidLink(cast(void**)&gtk_list_box_row_get_activatable, "gtk_list_box_row_get_activatable", LIBS);
  gidLink(cast(void**)&gtk_list_box_row_get_header, "gtk_list_box_row_get_header", LIBS);
  gidLink(cast(void**)&gtk_list_box_row_get_index, "gtk_list_box_row_get_index", LIBS);
  gidLink(cast(void**)&gtk_list_box_row_get_selectable, "gtk_list_box_row_get_selectable", LIBS);
  gidLink(cast(void**)&gtk_list_box_row_is_selected, "gtk_list_box_row_is_selected", LIBS);
  gidLink(cast(void**)&gtk_list_box_row_set_activatable, "gtk_list_box_row_set_activatable", LIBS);
  gidLink(cast(void**)&gtk_list_box_row_set_header, "gtk_list_box_row_set_header", LIBS);
  gidLink(cast(void**)&gtk_list_box_row_set_selectable, "gtk_list_box_row_set_selectable", LIBS);

  // ListBoxRowAccessible
  gidLink(cast(void**)&gtk_list_box_row_accessible_get_type, "gtk_list_box_row_accessible_get_type", LIBS);

  // ListStore
  gidLink(cast(void**)&gtk_list_store_get_type, "gtk_list_store_get_type", LIBS);
  gidLink(cast(void**)&gtk_list_store_new, "gtk_list_store_new", LIBS);
  gidLink(cast(void**)&gtk_list_store_newv, "gtk_list_store_newv", LIBS);
  gidLink(cast(void**)&gtk_list_store_append, "gtk_list_store_append", LIBS);
  gidLink(cast(void**)&gtk_list_store_clear, "gtk_list_store_clear", LIBS);
  gidLink(cast(void**)&gtk_list_store_insert, "gtk_list_store_insert", LIBS);
  gidLink(cast(void**)&gtk_list_store_insert_after, "gtk_list_store_insert_after", LIBS);
  gidLink(cast(void**)&gtk_list_store_insert_before, "gtk_list_store_insert_before", LIBS);
  gidLink(cast(void**)&gtk_list_store_insert_with_values, "gtk_list_store_insert_with_values", LIBS);
  gidLink(cast(void**)&gtk_list_store_insert_with_valuesv, "gtk_list_store_insert_with_valuesv", LIBS);
  gidLink(cast(void**)&gtk_list_store_iter_is_valid, "gtk_list_store_iter_is_valid", LIBS);
  gidLink(cast(void**)&gtk_list_store_move_after, "gtk_list_store_move_after", LIBS);
  gidLink(cast(void**)&gtk_list_store_move_before, "gtk_list_store_move_before", LIBS);
  gidLink(cast(void**)&gtk_list_store_prepend, "gtk_list_store_prepend", LIBS);
  gidLink(cast(void**)&gtk_list_store_remove, "gtk_list_store_remove", LIBS);
  gidLink(cast(void**)&gtk_list_store_reorder, "gtk_list_store_reorder", LIBS);
  gidLink(cast(void**)&gtk_list_store_set, "gtk_list_store_set", LIBS);
  gidLink(cast(void**)&gtk_list_store_set_column_types, "gtk_list_store_set_column_types", LIBS);
  gidLink(cast(void**)&gtk_list_store_set_valist, "gtk_list_store_set_valist", LIBS);
  gidLink(cast(void**)&gtk_list_store_set_value, "gtk_list_store_set_value", LIBS);
  gidLink(cast(void**)&gtk_list_store_set_valuesv, "gtk_list_store_set_valuesv", LIBS);
  gidLink(cast(void**)&gtk_list_store_swap, "gtk_list_store_swap", LIBS);

  // LockButton
  gidLink(cast(void**)&gtk_lock_button_get_type, "gtk_lock_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_lock_button_new, "gtk_lock_button_new", LIBS);
  gidLink(cast(void**)&gtk_lock_button_get_permission, "gtk_lock_button_get_permission", LIBS);
  gidLink(cast(void**)&gtk_lock_button_set_permission, "gtk_lock_button_set_permission", LIBS);

  // LockButtonAccessible
  gidLink(cast(void**)&gtk_lock_button_accessible_get_type, "gtk_lock_button_accessible_get_type", LIBS);

  // Menu
  gidLink(cast(void**)&gtk_menu_get_type, "gtk_menu_get_type", LIBS);
  gidLink(cast(void**)&gtk_menu_new, "gtk_menu_new", LIBS);
  gidLink(cast(void**)&gtk_menu_new_from_model, "gtk_menu_new_from_model", LIBS);
  gidLink(cast(void**)&gtk_menu_get_for_attach_widget, "gtk_menu_get_for_attach_widget", LIBS);
  gidLink(cast(void**)&gtk_menu_attach, "gtk_menu_attach", LIBS);
  gidLink(cast(void**)&gtk_menu_attach_to_widget, "gtk_menu_attach_to_widget", LIBS);
  gidLink(cast(void**)&gtk_menu_detach, "gtk_menu_detach", LIBS);
  gidLink(cast(void**)&gtk_menu_get_accel_group, "gtk_menu_get_accel_group", LIBS);
  gidLink(cast(void**)&gtk_menu_get_accel_path, "gtk_menu_get_accel_path", LIBS);
  gidLink(cast(void**)&gtk_menu_get_active, "gtk_menu_get_active", LIBS);
  gidLink(cast(void**)&gtk_menu_get_attach_widget, "gtk_menu_get_attach_widget", LIBS);
  gidLink(cast(void**)&gtk_menu_get_monitor, "gtk_menu_get_monitor", LIBS);
  gidLink(cast(void**)&gtk_menu_get_reserve_toggle_size, "gtk_menu_get_reserve_toggle_size", LIBS);
  gidLink(cast(void**)&gtk_menu_get_tearoff_state, "gtk_menu_get_tearoff_state", LIBS);
  gidLink(cast(void**)&gtk_menu_get_title, "gtk_menu_get_title", LIBS);
  gidLink(cast(void**)&gtk_menu_place_on_monitor, "gtk_menu_place_on_monitor", LIBS);
  gidLink(cast(void**)&gtk_menu_popdown, "gtk_menu_popdown", LIBS);
  gidLink(cast(void**)&gtk_menu_popup, "gtk_menu_popup", LIBS);
  gidLink(cast(void**)&gtk_menu_popup_at_pointer, "gtk_menu_popup_at_pointer", LIBS);
  gidLink(cast(void**)&gtk_menu_popup_at_rect, "gtk_menu_popup_at_rect", LIBS);
  gidLink(cast(void**)&gtk_menu_popup_at_widget, "gtk_menu_popup_at_widget", LIBS);
  gidLink(cast(void**)&gtk_menu_popup_for_device, "gtk_menu_popup_for_device", LIBS);
  gidLink(cast(void**)&gtk_menu_reorder_child, "gtk_menu_reorder_child", LIBS);
  gidLink(cast(void**)&gtk_menu_reposition, "gtk_menu_reposition", LIBS);
  gidLink(cast(void**)&gtk_menu_set_accel_group, "gtk_menu_set_accel_group", LIBS);
  gidLink(cast(void**)&gtk_menu_set_accel_path, "gtk_menu_set_accel_path", LIBS);
  gidLink(cast(void**)&gtk_menu_set_active, "gtk_menu_set_active", LIBS);
  gidLink(cast(void**)&gtk_menu_set_monitor, "gtk_menu_set_monitor", LIBS);
  gidLink(cast(void**)&gtk_menu_set_reserve_toggle_size, "gtk_menu_set_reserve_toggle_size", LIBS);
  gidLink(cast(void**)&gtk_menu_set_screen, "gtk_menu_set_screen", LIBS);
  gidLink(cast(void**)&gtk_menu_set_tearoff_state, "gtk_menu_set_tearoff_state", LIBS);
  gidLink(cast(void**)&gtk_menu_set_title, "gtk_menu_set_title", LIBS);

  // MenuAccessible
  gidLink(cast(void**)&gtk_menu_accessible_get_type, "gtk_menu_accessible_get_type", LIBS);

  // MenuBar
  gidLink(cast(void**)&gtk_menu_bar_get_type, "gtk_menu_bar_get_type", LIBS);
  gidLink(cast(void**)&gtk_menu_bar_new, "gtk_menu_bar_new", LIBS);
  gidLink(cast(void**)&gtk_menu_bar_new_from_model, "gtk_menu_bar_new_from_model", LIBS);
  gidLink(cast(void**)&gtk_menu_bar_get_child_pack_direction, "gtk_menu_bar_get_child_pack_direction", LIBS);
  gidLink(cast(void**)&gtk_menu_bar_get_pack_direction, "gtk_menu_bar_get_pack_direction", LIBS);
  gidLink(cast(void**)&gtk_menu_bar_set_child_pack_direction, "gtk_menu_bar_set_child_pack_direction", LIBS);
  gidLink(cast(void**)&gtk_menu_bar_set_pack_direction, "gtk_menu_bar_set_pack_direction", LIBS);

  // MenuButton
  gidLink(cast(void**)&gtk_menu_button_get_type, "gtk_menu_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_menu_button_new, "gtk_menu_button_new", LIBS);
  gidLink(cast(void**)&gtk_menu_button_get_align_widget, "gtk_menu_button_get_align_widget", LIBS);
  gidLink(cast(void**)&gtk_menu_button_get_direction, "gtk_menu_button_get_direction", LIBS);
  gidLink(cast(void**)&gtk_menu_button_get_menu_model, "gtk_menu_button_get_menu_model", LIBS);
  gidLink(cast(void**)&gtk_menu_button_get_popover, "gtk_menu_button_get_popover", LIBS);
  gidLink(cast(void**)&gtk_menu_button_get_popup, "gtk_menu_button_get_popup", LIBS);
  gidLink(cast(void**)&gtk_menu_button_get_use_popover, "gtk_menu_button_get_use_popover", LIBS);
  gidLink(cast(void**)&gtk_menu_button_set_align_widget, "gtk_menu_button_set_align_widget", LIBS);
  gidLink(cast(void**)&gtk_menu_button_set_direction, "gtk_menu_button_set_direction", LIBS);
  gidLink(cast(void**)&gtk_menu_button_set_menu_model, "gtk_menu_button_set_menu_model", LIBS);
  gidLink(cast(void**)&gtk_menu_button_set_popover, "gtk_menu_button_set_popover", LIBS);
  gidLink(cast(void**)&gtk_menu_button_set_popup, "gtk_menu_button_set_popup", LIBS);
  gidLink(cast(void**)&gtk_menu_button_set_use_popover, "gtk_menu_button_set_use_popover", LIBS);

  // MenuButtonAccessible
  gidLink(cast(void**)&gtk_menu_button_accessible_get_type, "gtk_menu_button_accessible_get_type", LIBS);

  // MenuItem
  gidLink(cast(void**)&gtk_menu_item_get_type, "gtk_menu_item_get_type", LIBS);
  gidLink(cast(void**)&gtk_menu_item_new, "gtk_menu_item_new", LIBS);
  gidLink(cast(void**)&gtk_menu_item_new_with_label, "gtk_menu_item_new_with_label", LIBS);
  gidLink(cast(void**)&gtk_menu_item_new_with_mnemonic, "gtk_menu_item_new_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_menu_item_activate, "gtk_menu_item_activate", LIBS);
  gidLink(cast(void**)&gtk_menu_item_deselect, "gtk_menu_item_deselect", LIBS);
  gidLink(cast(void**)&gtk_menu_item_get_accel_path, "gtk_menu_item_get_accel_path", LIBS);
  gidLink(cast(void**)&gtk_menu_item_get_label, "gtk_menu_item_get_label", LIBS);
  gidLink(cast(void**)&gtk_menu_item_get_reserve_indicator, "gtk_menu_item_get_reserve_indicator", LIBS);
  gidLink(cast(void**)&gtk_menu_item_get_right_justified, "gtk_menu_item_get_right_justified", LIBS);
  gidLink(cast(void**)&gtk_menu_item_get_submenu, "gtk_menu_item_get_submenu", LIBS);
  gidLink(cast(void**)&gtk_menu_item_get_use_underline, "gtk_menu_item_get_use_underline", LIBS);
  gidLink(cast(void**)&gtk_menu_item_select, "gtk_menu_item_select", LIBS);
  gidLink(cast(void**)&gtk_menu_item_set_accel_path, "gtk_menu_item_set_accel_path", LIBS);
  gidLink(cast(void**)&gtk_menu_item_set_label, "gtk_menu_item_set_label", LIBS);
  gidLink(cast(void**)&gtk_menu_item_set_reserve_indicator, "gtk_menu_item_set_reserve_indicator", LIBS);
  gidLink(cast(void**)&gtk_menu_item_set_right_justified, "gtk_menu_item_set_right_justified", LIBS);
  gidLink(cast(void**)&gtk_menu_item_set_submenu, "gtk_menu_item_set_submenu", LIBS);
  gidLink(cast(void**)&gtk_menu_item_set_use_underline, "gtk_menu_item_set_use_underline", LIBS);
  gidLink(cast(void**)&gtk_menu_item_toggle_size_allocate, "gtk_menu_item_toggle_size_allocate", LIBS);
  gidLink(cast(void**)&gtk_menu_item_toggle_size_request, "gtk_menu_item_toggle_size_request", LIBS);

  // MenuItemAccessible
  gidLink(cast(void**)&gtk_menu_item_accessible_get_type, "gtk_menu_item_accessible_get_type", LIBS);

  // MenuShell
  gidLink(cast(void**)&gtk_menu_shell_get_type, "gtk_menu_shell_get_type", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_activate_item, "gtk_menu_shell_activate_item", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_append, "gtk_menu_shell_append", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_bind_model, "gtk_menu_shell_bind_model", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_cancel, "gtk_menu_shell_cancel", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_deactivate, "gtk_menu_shell_deactivate", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_deselect, "gtk_menu_shell_deselect", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_get_parent_shell, "gtk_menu_shell_get_parent_shell", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_get_selected_item, "gtk_menu_shell_get_selected_item", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_get_take_focus, "gtk_menu_shell_get_take_focus", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_insert, "gtk_menu_shell_insert", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_prepend, "gtk_menu_shell_prepend", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_select_first, "gtk_menu_shell_select_first", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_select_item, "gtk_menu_shell_select_item", LIBS);
  gidLink(cast(void**)&gtk_menu_shell_set_take_focus, "gtk_menu_shell_set_take_focus", LIBS);

  // MenuShellAccessible
  gidLink(cast(void**)&gtk_menu_shell_accessible_get_type, "gtk_menu_shell_accessible_get_type", LIBS);

  // MenuToolButton
  gidLink(cast(void**)&gtk_menu_tool_button_get_type, "gtk_menu_tool_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_menu_tool_button_new, "gtk_menu_tool_button_new", LIBS);
  gidLink(cast(void**)&gtk_menu_tool_button_new_from_stock, "gtk_menu_tool_button_new_from_stock", LIBS);
  gidLink(cast(void**)&gtk_menu_tool_button_get_menu, "gtk_menu_tool_button_get_menu", LIBS);
  gidLink(cast(void**)&gtk_menu_tool_button_set_arrow_tooltip_markup, "gtk_menu_tool_button_set_arrow_tooltip_markup", LIBS);
  gidLink(cast(void**)&gtk_menu_tool_button_set_arrow_tooltip_text, "gtk_menu_tool_button_set_arrow_tooltip_text", LIBS);
  gidLink(cast(void**)&gtk_menu_tool_button_set_menu, "gtk_menu_tool_button_set_menu", LIBS);

  // MessageDialog
  gidLink(cast(void**)&gtk_message_dialog_get_type, "gtk_message_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_message_dialog_new, "gtk_message_dialog_new", LIBS);
  gidLink(cast(void**)&gtk_message_dialog_new_with_markup, "gtk_message_dialog_new_with_markup", LIBS);
  gidLink(cast(void**)&gtk_message_dialog_format_secondary_markup, "gtk_message_dialog_format_secondary_markup", LIBS);
  gidLink(cast(void**)&gtk_message_dialog_format_secondary_text, "gtk_message_dialog_format_secondary_text", LIBS);
  gidLink(cast(void**)&gtk_message_dialog_get_image, "gtk_message_dialog_get_image", LIBS);
  gidLink(cast(void**)&gtk_message_dialog_get_message_area, "gtk_message_dialog_get_message_area", LIBS);
  gidLink(cast(void**)&gtk_message_dialog_set_image, "gtk_message_dialog_set_image", LIBS);
  gidLink(cast(void**)&gtk_message_dialog_set_markup, "gtk_message_dialog_set_markup", LIBS);

  // Misc
  gidLink(cast(void**)&gtk_misc_get_type, "gtk_misc_get_type", LIBS);
  gidLink(cast(void**)&gtk_misc_get_alignment, "gtk_misc_get_alignment", LIBS);
  gidLink(cast(void**)&gtk_misc_get_padding, "gtk_misc_get_padding", LIBS);
  gidLink(cast(void**)&gtk_misc_set_alignment, "gtk_misc_set_alignment", LIBS);
  gidLink(cast(void**)&gtk_misc_set_padding, "gtk_misc_set_padding", LIBS);

  // ModelButton
  gidLink(cast(void**)&gtk_model_button_get_type, "gtk_model_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_model_button_new, "gtk_model_button_new", LIBS);

  // MountOperation
  gidLink(cast(void**)&gtk_mount_operation_get_type, "gtk_mount_operation_get_type", LIBS);
  gidLink(cast(void**)&gtk_mount_operation_new, "gtk_mount_operation_new", LIBS);
  gidLink(cast(void**)&gtk_mount_operation_get_parent, "gtk_mount_operation_get_parent", LIBS);
  gidLink(cast(void**)&gtk_mount_operation_get_screen, "gtk_mount_operation_get_screen", LIBS);
  gidLink(cast(void**)&gtk_mount_operation_is_showing, "gtk_mount_operation_is_showing", LIBS);
  gidLink(cast(void**)&gtk_mount_operation_set_parent, "gtk_mount_operation_set_parent", LIBS);
  gidLink(cast(void**)&gtk_mount_operation_set_screen, "gtk_mount_operation_set_screen", LIBS);

  // NativeDialog
  gidLink(cast(void**)&gtk_native_dialog_get_type, "gtk_native_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_destroy, "gtk_native_dialog_destroy", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_get_modal, "gtk_native_dialog_get_modal", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_get_title, "gtk_native_dialog_get_title", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_get_transient_for, "gtk_native_dialog_get_transient_for", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_get_visible, "gtk_native_dialog_get_visible", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_hide, "gtk_native_dialog_hide", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_run, "gtk_native_dialog_run", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_set_modal, "gtk_native_dialog_set_modal", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_set_title, "gtk_native_dialog_set_title", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_set_transient_for, "gtk_native_dialog_set_transient_for", LIBS);
  gidLink(cast(void**)&gtk_native_dialog_show, "gtk_native_dialog_show", LIBS);

  // Notebook
  gidLink(cast(void**)&gtk_notebook_get_type, "gtk_notebook_get_type", LIBS);
  gidLink(cast(void**)&gtk_notebook_new, "gtk_notebook_new", LIBS);
  gidLink(cast(void**)&gtk_notebook_append_page, "gtk_notebook_append_page", LIBS);
  gidLink(cast(void**)&gtk_notebook_append_page_menu, "gtk_notebook_append_page_menu", LIBS);
  gidLink(cast(void**)&gtk_notebook_detach_tab, "gtk_notebook_detach_tab", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_action_widget, "gtk_notebook_get_action_widget", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_current_page, "gtk_notebook_get_current_page", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_group_name, "gtk_notebook_get_group_name", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_menu_label, "gtk_notebook_get_menu_label", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_menu_label_text, "gtk_notebook_get_menu_label_text", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_n_pages, "gtk_notebook_get_n_pages", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_nth_page, "gtk_notebook_get_nth_page", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_scrollable, "gtk_notebook_get_scrollable", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_show_border, "gtk_notebook_get_show_border", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_show_tabs, "gtk_notebook_get_show_tabs", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_tab_detachable, "gtk_notebook_get_tab_detachable", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_tab_hborder, "gtk_notebook_get_tab_hborder", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_tab_label, "gtk_notebook_get_tab_label", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_tab_label_text, "gtk_notebook_get_tab_label_text", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_tab_pos, "gtk_notebook_get_tab_pos", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_tab_reorderable, "gtk_notebook_get_tab_reorderable", LIBS);
  gidLink(cast(void**)&gtk_notebook_get_tab_vborder, "gtk_notebook_get_tab_vborder", LIBS);
  gidLink(cast(void**)&gtk_notebook_insert_page, "gtk_notebook_insert_page", LIBS);
  gidLink(cast(void**)&gtk_notebook_insert_page_menu, "gtk_notebook_insert_page_menu", LIBS);
  gidLink(cast(void**)&gtk_notebook_next_page, "gtk_notebook_next_page", LIBS);
  gidLink(cast(void**)&gtk_notebook_page_num, "gtk_notebook_page_num", LIBS);
  gidLink(cast(void**)&gtk_notebook_popup_disable, "gtk_notebook_popup_disable", LIBS);
  gidLink(cast(void**)&gtk_notebook_popup_enable, "gtk_notebook_popup_enable", LIBS);
  gidLink(cast(void**)&gtk_notebook_prepend_page, "gtk_notebook_prepend_page", LIBS);
  gidLink(cast(void**)&gtk_notebook_prepend_page_menu, "gtk_notebook_prepend_page_menu", LIBS);
  gidLink(cast(void**)&gtk_notebook_prev_page, "gtk_notebook_prev_page", LIBS);
  gidLink(cast(void**)&gtk_notebook_remove_page, "gtk_notebook_remove_page", LIBS);
  gidLink(cast(void**)&gtk_notebook_reorder_child, "gtk_notebook_reorder_child", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_action_widget, "gtk_notebook_set_action_widget", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_current_page, "gtk_notebook_set_current_page", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_group_name, "gtk_notebook_set_group_name", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_menu_label, "gtk_notebook_set_menu_label", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_menu_label_text, "gtk_notebook_set_menu_label_text", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_scrollable, "gtk_notebook_set_scrollable", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_show_border, "gtk_notebook_set_show_border", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_show_tabs, "gtk_notebook_set_show_tabs", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_tab_detachable, "gtk_notebook_set_tab_detachable", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_tab_label, "gtk_notebook_set_tab_label", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_tab_label_text, "gtk_notebook_set_tab_label_text", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_tab_pos, "gtk_notebook_set_tab_pos", LIBS);
  gidLink(cast(void**)&gtk_notebook_set_tab_reorderable, "gtk_notebook_set_tab_reorderable", LIBS);

  // NotebookAccessible
  gidLink(cast(void**)&gtk_notebook_accessible_get_type, "gtk_notebook_accessible_get_type", LIBS);

  // NotebookPageAccessible
  gidLink(cast(void**)&gtk_notebook_page_accessible_get_type, "gtk_notebook_page_accessible_get_type", LIBS);
  gidLink(cast(void**)&gtk_notebook_page_accessible_new, "gtk_notebook_page_accessible_new", LIBS);
  gidLink(cast(void**)&gtk_notebook_page_accessible_invalidate, "gtk_notebook_page_accessible_invalidate", LIBS);

  // NumerableIcon
  gidLink(cast(void**)&gtk_numerable_icon_get_type, "gtk_numerable_icon_get_type", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_new, "gtk_numerable_icon_new", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_new_with_style_context, "gtk_numerable_icon_new_with_style_context", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_get_background_gicon, "gtk_numerable_icon_get_background_gicon", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_get_background_icon_name, "gtk_numerable_icon_get_background_icon_name", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_get_count, "gtk_numerable_icon_get_count", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_get_label, "gtk_numerable_icon_get_label", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_get_style_context, "gtk_numerable_icon_get_style_context", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_set_background_gicon, "gtk_numerable_icon_set_background_gicon", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_set_background_icon_name, "gtk_numerable_icon_set_background_icon_name", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_set_count, "gtk_numerable_icon_set_count", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_set_label, "gtk_numerable_icon_set_label", LIBS);
  gidLink(cast(void**)&gtk_numerable_icon_set_style_context, "gtk_numerable_icon_set_style_context", LIBS);

  // OffscreenWindow
  gidLink(cast(void**)&gtk_offscreen_window_get_type, "gtk_offscreen_window_get_type", LIBS);
  gidLink(cast(void**)&gtk_offscreen_window_new, "gtk_offscreen_window_new", LIBS);
  gidLink(cast(void**)&gtk_offscreen_window_get_pixbuf, "gtk_offscreen_window_get_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_offscreen_window_get_surface, "gtk_offscreen_window_get_surface", LIBS);

  // Orientable
  gidLink(cast(void**)&gtk_orientable_get_type, "gtk_orientable_get_type", LIBS);
  gidLink(cast(void**)&gtk_orientable_get_orientation, "gtk_orientable_get_orientation", LIBS);
  gidLink(cast(void**)&gtk_orientable_set_orientation, "gtk_orientable_set_orientation", LIBS);

  // Overlay
  gidLink(cast(void**)&gtk_overlay_get_type, "gtk_overlay_get_type", LIBS);
  gidLink(cast(void**)&gtk_overlay_new, "gtk_overlay_new", LIBS);
  gidLink(cast(void**)&gtk_overlay_add_overlay, "gtk_overlay_add_overlay", LIBS);
  gidLink(cast(void**)&gtk_overlay_get_overlay_pass_through, "gtk_overlay_get_overlay_pass_through", LIBS);
  gidLink(cast(void**)&gtk_overlay_reorder_overlay, "gtk_overlay_reorder_overlay", LIBS);
  gidLink(cast(void**)&gtk_overlay_set_overlay_pass_through, "gtk_overlay_set_overlay_pass_through", LIBS);

  // PadController
  gidLink(cast(void**)&gtk_pad_controller_get_type, "gtk_pad_controller_get_type", LIBS);
  gidLink(cast(void**)&gtk_pad_controller_new, "gtk_pad_controller_new", LIBS);
  gidLink(cast(void**)&gtk_pad_controller_set_action, "gtk_pad_controller_set_action", LIBS);
  gidLink(cast(void**)&gtk_pad_controller_set_action_entries, "gtk_pad_controller_set_action_entries", LIBS);

  // PageSetup
  gidLink(cast(void**)&gtk_page_setup_get_type, "gtk_page_setup_get_type", LIBS);
  gidLink(cast(void**)&gtk_page_setup_new, "gtk_page_setup_new", LIBS);
  gidLink(cast(void**)&gtk_page_setup_new_from_file, "gtk_page_setup_new_from_file", LIBS);
  gidLink(cast(void**)&gtk_page_setup_new_from_gvariant, "gtk_page_setup_new_from_gvariant", LIBS);
  gidLink(cast(void**)&gtk_page_setup_new_from_key_file, "gtk_page_setup_new_from_key_file", LIBS);
  gidLink(cast(void**)&gtk_page_setup_copy, "gtk_page_setup_copy", LIBS);
  gidLink(cast(void**)&gtk_page_setup_get_bottom_margin, "gtk_page_setup_get_bottom_margin", LIBS);
  gidLink(cast(void**)&gtk_page_setup_get_left_margin, "gtk_page_setup_get_left_margin", LIBS);
  gidLink(cast(void**)&gtk_page_setup_get_orientation, "gtk_page_setup_get_orientation", LIBS);
  gidLink(cast(void**)&gtk_page_setup_get_page_height, "gtk_page_setup_get_page_height", LIBS);
  gidLink(cast(void**)&gtk_page_setup_get_page_width, "gtk_page_setup_get_page_width", LIBS);
  gidLink(cast(void**)&gtk_page_setup_get_paper_height, "gtk_page_setup_get_paper_height", LIBS);
  gidLink(cast(void**)&gtk_page_setup_get_paper_size, "gtk_page_setup_get_paper_size", LIBS);
  gidLink(cast(void**)&gtk_page_setup_get_paper_width, "gtk_page_setup_get_paper_width", LIBS);
  gidLink(cast(void**)&gtk_page_setup_get_right_margin, "gtk_page_setup_get_right_margin", LIBS);
  gidLink(cast(void**)&gtk_page_setup_get_top_margin, "gtk_page_setup_get_top_margin", LIBS);
  gidLink(cast(void**)&gtk_page_setup_load_file, "gtk_page_setup_load_file", LIBS);
  gidLink(cast(void**)&gtk_page_setup_load_key_file, "gtk_page_setup_load_key_file", LIBS);
  gidLink(cast(void**)&gtk_page_setup_set_bottom_margin, "gtk_page_setup_set_bottom_margin", LIBS);
  gidLink(cast(void**)&gtk_page_setup_set_left_margin, "gtk_page_setup_set_left_margin", LIBS);
  gidLink(cast(void**)&gtk_page_setup_set_orientation, "gtk_page_setup_set_orientation", LIBS);
  gidLink(cast(void**)&gtk_page_setup_set_paper_size, "gtk_page_setup_set_paper_size", LIBS);
  gidLink(cast(void**)&gtk_page_setup_set_paper_size_and_default_margins, "gtk_page_setup_set_paper_size_and_default_margins", LIBS);
  gidLink(cast(void**)&gtk_page_setup_set_right_margin, "gtk_page_setup_set_right_margin", LIBS);
  gidLink(cast(void**)&gtk_page_setup_set_top_margin, "gtk_page_setup_set_top_margin", LIBS);
  gidLink(cast(void**)&gtk_page_setup_to_file, "gtk_page_setup_to_file", LIBS);
  gidLink(cast(void**)&gtk_page_setup_to_gvariant, "gtk_page_setup_to_gvariant", LIBS);
  gidLink(cast(void**)&gtk_page_setup_to_key_file, "gtk_page_setup_to_key_file", LIBS);

  // Paned
  gidLink(cast(void**)&gtk_paned_get_type, "gtk_paned_get_type", LIBS);
  gidLink(cast(void**)&gtk_paned_new, "gtk_paned_new", LIBS);
  gidLink(cast(void**)&gtk_paned_add1, "gtk_paned_add1", LIBS);
  gidLink(cast(void**)&gtk_paned_add2, "gtk_paned_add2", LIBS);
  gidLink(cast(void**)&gtk_paned_get_child1, "gtk_paned_get_child1", LIBS);
  gidLink(cast(void**)&gtk_paned_get_child2, "gtk_paned_get_child2", LIBS);
  gidLink(cast(void**)&gtk_paned_get_handle_window, "gtk_paned_get_handle_window", LIBS);
  gidLink(cast(void**)&gtk_paned_get_position, "gtk_paned_get_position", LIBS);
  gidLink(cast(void**)&gtk_paned_get_wide_handle, "gtk_paned_get_wide_handle", LIBS);
  gidLink(cast(void**)&gtk_paned_pack1, "gtk_paned_pack1", LIBS);
  gidLink(cast(void**)&gtk_paned_pack2, "gtk_paned_pack2", LIBS);
  gidLink(cast(void**)&gtk_paned_set_position, "gtk_paned_set_position", LIBS);
  gidLink(cast(void**)&gtk_paned_set_wide_handle, "gtk_paned_set_wide_handle", LIBS);

  // PanedAccessible
  gidLink(cast(void**)&gtk_paned_accessible_get_type, "gtk_paned_accessible_get_type", LIBS);

  // PaperSize
  gidLink(cast(void**)&gtk_paper_size_get_type, "gtk_paper_size_get_type", LIBS);
  gidLink(cast(void**)&gtk_paper_size_new, "gtk_paper_size_new", LIBS);
  gidLink(cast(void**)&gtk_paper_size_new_custom, "gtk_paper_size_new_custom", LIBS);
  gidLink(cast(void**)&gtk_paper_size_new_from_gvariant, "gtk_paper_size_new_from_gvariant", LIBS);
  gidLink(cast(void**)&gtk_paper_size_new_from_ipp, "gtk_paper_size_new_from_ipp", LIBS);
  gidLink(cast(void**)&gtk_paper_size_new_from_key_file, "gtk_paper_size_new_from_key_file", LIBS);
  gidLink(cast(void**)&gtk_paper_size_new_from_ppd, "gtk_paper_size_new_from_ppd", LIBS);
  gidLink(cast(void**)&gtk_paper_size_copy, "gtk_paper_size_copy", LIBS);
  gidLink(cast(void**)&gtk_paper_size_free, "gtk_paper_size_free", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_default_bottom_margin, "gtk_paper_size_get_default_bottom_margin", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_default_left_margin, "gtk_paper_size_get_default_left_margin", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_default_right_margin, "gtk_paper_size_get_default_right_margin", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_default_top_margin, "gtk_paper_size_get_default_top_margin", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_display_name, "gtk_paper_size_get_display_name", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_height, "gtk_paper_size_get_height", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_name, "gtk_paper_size_get_name", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_ppd_name, "gtk_paper_size_get_ppd_name", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_width, "gtk_paper_size_get_width", LIBS);
  gidLink(cast(void**)&gtk_paper_size_is_custom, "gtk_paper_size_is_custom", LIBS);
  gidLink(cast(void**)&gtk_paper_size_is_equal, "gtk_paper_size_is_equal", LIBS);
  gidLink(cast(void**)&gtk_paper_size_is_ipp, "gtk_paper_size_is_ipp", LIBS);
  gidLink(cast(void**)&gtk_paper_size_set_size, "gtk_paper_size_set_size", LIBS);
  gidLink(cast(void**)&gtk_paper_size_to_gvariant, "gtk_paper_size_to_gvariant", LIBS);
  gidLink(cast(void**)&gtk_paper_size_to_key_file, "gtk_paper_size_to_key_file", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_default, "gtk_paper_size_get_default", LIBS);
  gidLink(cast(void**)&gtk_paper_size_get_paper_sizes, "gtk_paper_size_get_paper_sizes", LIBS);

  // PlacesSidebar
  gidLink(cast(void**)&gtk_places_sidebar_get_type, "gtk_places_sidebar_get_type", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_new, "gtk_places_sidebar_new", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_add_shortcut, "gtk_places_sidebar_add_shortcut", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_local_only, "gtk_places_sidebar_get_local_only", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_location, "gtk_places_sidebar_get_location", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_nth_bookmark, "gtk_places_sidebar_get_nth_bookmark", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_open_flags, "gtk_places_sidebar_get_open_flags", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_show_connect_to_server, "gtk_places_sidebar_get_show_connect_to_server", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_show_desktop, "gtk_places_sidebar_get_show_desktop", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_show_enter_location, "gtk_places_sidebar_get_show_enter_location", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_show_other_locations, "gtk_places_sidebar_get_show_other_locations", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_show_recent, "gtk_places_sidebar_get_show_recent", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_show_starred_location, "gtk_places_sidebar_get_show_starred_location", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_get_show_trash, "gtk_places_sidebar_get_show_trash", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_list_shortcuts, "gtk_places_sidebar_list_shortcuts", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_remove_shortcut, "gtk_places_sidebar_remove_shortcut", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_drop_targets_visible, "gtk_places_sidebar_set_drop_targets_visible", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_local_only, "gtk_places_sidebar_set_local_only", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_location, "gtk_places_sidebar_set_location", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_open_flags, "gtk_places_sidebar_set_open_flags", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_show_connect_to_server, "gtk_places_sidebar_set_show_connect_to_server", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_show_desktop, "gtk_places_sidebar_set_show_desktop", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_show_enter_location, "gtk_places_sidebar_set_show_enter_location", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_show_other_locations, "gtk_places_sidebar_set_show_other_locations", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_show_recent, "gtk_places_sidebar_set_show_recent", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_show_starred_location, "gtk_places_sidebar_set_show_starred_location", LIBS);
  gidLink(cast(void**)&gtk_places_sidebar_set_show_trash, "gtk_places_sidebar_set_show_trash", LIBS);

  // Plug
  gidLink(cast(void**)&gtk_plug_get_type, "gtk_plug_get_type", LIBS);
  gidLink(cast(void**)&gtk_plug_new, "gtk_plug_new", LIBS);
  gidLink(cast(void**)&gtk_plug_new_for_display, "gtk_plug_new_for_display", LIBS);
  gidLink(cast(void**)&gtk_plug_construct, "gtk_plug_construct", LIBS);
  gidLink(cast(void**)&gtk_plug_construct_for_display, "gtk_plug_construct_for_display", LIBS);
  gidLink(cast(void**)&gtk_plug_get_embedded, "gtk_plug_get_embedded", LIBS);
  gidLink(cast(void**)&gtk_plug_get_id, "gtk_plug_get_id", LIBS);
  gidLink(cast(void**)&gtk_plug_get_socket_window, "gtk_plug_get_socket_window", LIBS);

  // PlugAccessible
  gidLink(cast(void**)&gtk_plug_accessible_get_type, "gtk_plug_accessible_get_type", LIBS);
  gidLink(cast(void**)&gtk_plug_accessible_get_id, "gtk_plug_accessible_get_id", LIBS);

  // Popover
  gidLink(cast(void**)&gtk_popover_get_type, "gtk_popover_get_type", LIBS);
  gidLink(cast(void**)&gtk_popover_new, "gtk_popover_new", LIBS);
  gidLink(cast(void**)&gtk_popover_new_from_model, "gtk_popover_new_from_model", LIBS);
  gidLink(cast(void**)&gtk_popover_bind_model, "gtk_popover_bind_model", LIBS);
  gidLink(cast(void**)&gtk_popover_get_constrain_to, "gtk_popover_get_constrain_to", LIBS);
  gidLink(cast(void**)&gtk_popover_get_default_widget, "gtk_popover_get_default_widget", LIBS);
  gidLink(cast(void**)&gtk_popover_get_modal, "gtk_popover_get_modal", LIBS);
  gidLink(cast(void**)&gtk_popover_get_pointing_to, "gtk_popover_get_pointing_to", LIBS);
  gidLink(cast(void**)&gtk_popover_get_position, "gtk_popover_get_position", LIBS);
  gidLink(cast(void**)&gtk_popover_get_relative_to, "gtk_popover_get_relative_to", LIBS);
  gidLink(cast(void**)&gtk_popover_get_transitions_enabled, "gtk_popover_get_transitions_enabled", LIBS);
  gidLink(cast(void**)&gtk_popover_popdown, "gtk_popover_popdown", LIBS);
  gidLink(cast(void**)&gtk_popover_popup, "gtk_popover_popup", LIBS);
  gidLink(cast(void**)&gtk_popover_set_constrain_to, "gtk_popover_set_constrain_to", LIBS);
  gidLink(cast(void**)&gtk_popover_set_default_widget, "gtk_popover_set_default_widget", LIBS);
  gidLink(cast(void**)&gtk_popover_set_modal, "gtk_popover_set_modal", LIBS);
  gidLink(cast(void**)&gtk_popover_set_pointing_to, "gtk_popover_set_pointing_to", LIBS);
  gidLink(cast(void**)&gtk_popover_set_position, "gtk_popover_set_position", LIBS);
  gidLink(cast(void**)&gtk_popover_set_relative_to, "gtk_popover_set_relative_to", LIBS);
  gidLink(cast(void**)&gtk_popover_set_transitions_enabled, "gtk_popover_set_transitions_enabled", LIBS);

  // PopoverAccessible
  gidLink(cast(void**)&gtk_popover_accessible_get_type, "gtk_popover_accessible_get_type", LIBS);

  // PopoverMenu
  gidLink(cast(void**)&gtk_popover_menu_get_type, "gtk_popover_menu_get_type", LIBS);
  gidLink(cast(void**)&gtk_popover_menu_new, "gtk_popover_menu_new", LIBS);
  gidLink(cast(void**)&gtk_popover_menu_open_submenu, "gtk_popover_menu_open_submenu", LIBS);

  // PrintContext
  gidLink(cast(void**)&gtk_print_context_get_type, "gtk_print_context_get_type", LIBS);
  gidLink(cast(void**)&gtk_print_context_create_pango_context, "gtk_print_context_create_pango_context", LIBS);
  gidLink(cast(void**)&gtk_print_context_create_pango_layout, "gtk_print_context_create_pango_layout", LIBS);
  gidLink(cast(void**)&gtk_print_context_get_cairo_context, "gtk_print_context_get_cairo_context", LIBS);
  gidLink(cast(void**)&gtk_print_context_get_dpi_x, "gtk_print_context_get_dpi_x", LIBS);
  gidLink(cast(void**)&gtk_print_context_get_dpi_y, "gtk_print_context_get_dpi_y", LIBS);
  gidLink(cast(void**)&gtk_print_context_get_hard_margins, "gtk_print_context_get_hard_margins", LIBS);
  gidLink(cast(void**)&gtk_print_context_get_height, "gtk_print_context_get_height", LIBS);
  gidLink(cast(void**)&gtk_print_context_get_page_setup, "gtk_print_context_get_page_setup", LIBS);
  gidLink(cast(void**)&gtk_print_context_get_pango_fontmap, "gtk_print_context_get_pango_fontmap", LIBS);
  gidLink(cast(void**)&gtk_print_context_get_width, "gtk_print_context_get_width", LIBS);
  gidLink(cast(void**)&gtk_print_context_set_cairo_context, "gtk_print_context_set_cairo_context", LIBS);

  // PrintOperation
  gidLink(cast(void**)&gtk_print_operation_get_type, "gtk_print_operation_get_type", LIBS);
  gidLink(cast(void**)&gtk_print_operation_new, "gtk_print_operation_new", LIBS);
  gidLink(cast(void**)&gtk_print_operation_cancel, "gtk_print_operation_cancel", LIBS);
  gidLink(cast(void**)&gtk_print_operation_draw_page_finish, "gtk_print_operation_draw_page_finish", LIBS);
  gidLink(cast(void**)&gtk_print_operation_get_default_page_setup, "gtk_print_operation_get_default_page_setup", LIBS);
  gidLink(cast(void**)&gtk_print_operation_get_embed_page_setup, "gtk_print_operation_get_embed_page_setup", LIBS);
  gidLink(cast(void**)&gtk_print_operation_get_error, "gtk_print_operation_get_error", LIBS);
  gidLink(cast(void**)&gtk_print_operation_get_has_selection, "gtk_print_operation_get_has_selection", LIBS);
  gidLink(cast(void**)&gtk_print_operation_get_n_pages_to_print, "gtk_print_operation_get_n_pages_to_print", LIBS);
  gidLink(cast(void**)&gtk_print_operation_get_print_settings, "gtk_print_operation_get_print_settings", LIBS);
  gidLink(cast(void**)&gtk_print_operation_get_status, "gtk_print_operation_get_status", LIBS);
  gidLink(cast(void**)&gtk_print_operation_get_status_string, "gtk_print_operation_get_status_string", LIBS);
  gidLink(cast(void**)&gtk_print_operation_get_support_selection, "gtk_print_operation_get_support_selection", LIBS);
  gidLink(cast(void**)&gtk_print_operation_is_finished, "gtk_print_operation_is_finished", LIBS);
  gidLink(cast(void**)&gtk_print_operation_run, "gtk_print_operation_run", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_allow_async, "gtk_print_operation_set_allow_async", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_current_page, "gtk_print_operation_set_current_page", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_custom_tab_label, "gtk_print_operation_set_custom_tab_label", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_default_page_setup, "gtk_print_operation_set_default_page_setup", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_defer_drawing, "gtk_print_operation_set_defer_drawing", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_embed_page_setup, "gtk_print_operation_set_embed_page_setup", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_export_filename, "gtk_print_operation_set_export_filename", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_has_selection, "gtk_print_operation_set_has_selection", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_job_name, "gtk_print_operation_set_job_name", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_n_pages, "gtk_print_operation_set_n_pages", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_print_settings, "gtk_print_operation_set_print_settings", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_show_progress, "gtk_print_operation_set_show_progress", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_support_selection, "gtk_print_operation_set_support_selection", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_track_print_status, "gtk_print_operation_set_track_print_status", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_unit, "gtk_print_operation_set_unit", LIBS);
  gidLink(cast(void**)&gtk_print_operation_set_use_full_page, "gtk_print_operation_set_use_full_page", LIBS);

  // PrintOperationPreview
  gidLink(cast(void**)&gtk_print_operation_preview_get_type, "gtk_print_operation_preview_get_type", LIBS);
  gidLink(cast(void**)&gtk_print_operation_preview_end_preview, "gtk_print_operation_preview_end_preview", LIBS);
  gidLink(cast(void**)&gtk_print_operation_preview_is_selected, "gtk_print_operation_preview_is_selected", LIBS);
  gidLink(cast(void**)&gtk_print_operation_preview_render_page, "gtk_print_operation_preview_render_page", LIBS);

  // PrintSettings
  gidLink(cast(void**)&gtk_print_settings_get_type, "gtk_print_settings_get_type", LIBS);
  gidLink(cast(void**)&gtk_print_settings_new, "gtk_print_settings_new", LIBS);
  gidLink(cast(void**)&gtk_print_settings_new_from_file, "gtk_print_settings_new_from_file", LIBS);
  gidLink(cast(void**)&gtk_print_settings_new_from_gvariant, "gtk_print_settings_new_from_gvariant", LIBS);
  gidLink(cast(void**)&gtk_print_settings_new_from_key_file, "gtk_print_settings_new_from_key_file", LIBS);
  gidLink(cast(void**)&gtk_print_settings_copy, "gtk_print_settings_copy", LIBS);
  gidLink(cast(void**)&gtk_print_settings_foreach, "gtk_print_settings_foreach", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get, "gtk_print_settings_get", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_bool, "gtk_print_settings_get_bool", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_collate, "gtk_print_settings_get_collate", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_default_source, "gtk_print_settings_get_default_source", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_dither, "gtk_print_settings_get_dither", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_double, "gtk_print_settings_get_double", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_double_with_default, "gtk_print_settings_get_double_with_default", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_duplex, "gtk_print_settings_get_duplex", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_finishings, "gtk_print_settings_get_finishings", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_int, "gtk_print_settings_get_int", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_int_with_default, "gtk_print_settings_get_int_with_default", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_length, "gtk_print_settings_get_length", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_media_type, "gtk_print_settings_get_media_type", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_n_copies, "gtk_print_settings_get_n_copies", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_number_up, "gtk_print_settings_get_number_up", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_number_up_layout, "gtk_print_settings_get_number_up_layout", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_orientation, "gtk_print_settings_get_orientation", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_output_bin, "gtk_print_settings_get_output_bin", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_page_ranges, "gtk_print_settings_get_page_ranges", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_page_set, "gtk_print_settings_get_page_set", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_paper_height, "gtk_print_settings_get_paper_height", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_paper_size, "gtk_print_settings_get_paper_size", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_paper_width, "gtk_print_settings_get_paper_width", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_print_pages, "gtk_print_settings_get_print_pages", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_printer, "gtk_print_settings_get_printer", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_printer_lpi, "gtk_print_settings_get_printer_lpi", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_quality, "gtk_print_settings_get_quality", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_resolution, "gtk_print_settings_get_resolution", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_resolution_x, "gtk_print_settings_get_resolution_x", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_resolution_y, "gtk_print_settings_get_resolution_y", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_reverse, "gtk_print_settings_get_reverse", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_scale, "gtk_print_settings_get_scale", LIBS);
  gidLink(cast(void**)&gtk_print_settings_get_use_color, "gtk_print_settings_get_use_color", LIBS);
  gidLink(cast(void**)&gtk_print_settings_has_key, "gtk_print_settings_has_key", LIBS);
  gidLink(cast(void**)&gtk_print_settings_load_file, "gtk_print_settings_load_file", LIBS);
  gidLink(cast(void**)&gtk_print_settings_load_key_file, "gtk_print_settings_load_key_file", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set, "gtk_print_settings_set", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_bool, "gtk_print_settings_set_bool", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_collate, "gtk_print_settings_set_collate", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_default_source, "gtk_print_settings_set_default_source", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_dither, "gtk_print_settings_set_dither", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_double, "gtk_print_settings_set_double", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_duplex, "gtk_print_settings_set_duplex", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_finishings, "gtk_print_settings_set_finishings", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_int, "gtk_print_settings_set_int", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_length, "gtk_print_settings_set_length", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_media_type, "gtk_print_settings_set_media_type", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_n_copies, "gtk_print_settings_set_n_copies", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_number_up, "gtk_print_settings_set_number_up", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_number_up_layout, "gtk_print_settings_set_number_up_layout", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_orientation, "gtk_print_settings_set_orientation", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_output_bin, "gtk_print_settings_set_output_bin", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_page_ranges, "gtk_print_settings_set_page_ranges", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_page_set, "gtk_print_settings_set_page_set", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_paper_height, "gtk_print_settings_set_paper_height", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_paper_size, "gtk_print_settings_set_paper_size", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_paper_width, "gtk_print_settings_set_paper_width", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_print_pages, "gtk_print_settings_set_print_pages", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_printer, "gtk_print_settings_set_printer", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_printer_lpi, "gtk_print_settings_set_printer_lpi", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_quality, "gtk_print_settings_set_quality", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_resolution, "gtk_print_settings_set_resolution", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_resolution_xy, "gtk_print_settings_set_resolution_xy", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_reverse, "gtk_print_settings_set_reverse", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_scale, "gtk_print_settings_set_scale", LIBS);
  gidLink(cast(void**)&gtk_print_settings_set_use_color, "gtk_print_settings_set_use_color", LIBS);
  gidLink(cast(void**)&gtk_print_settings_to_file, "gtk_print_settings_to_file", LIBS);
  gidLink(cast(void**)&gtk_print_settings_to_gvariant, "gtk_print_settings_to_gvariant", LIBS);
  gidLink(cast(void**)&gtk_print_settings_to_key_file, "gtk_print_settings_to_key_file", LIBS);
  gidLink(cast(void**)&gtk_print_settings_unset, "gtk_print_settings_unset", LIBS);

  // ProgressBar
  gidLink(cast(void**)&gtk_progress_bar_get_type, "gtk_progress_bar_get_type", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_new, "gtk_progress_bar_new", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_get_ellipsize, "gtk_progress_bar_get_ellipsize", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_get_fraction, "gtk_progress_bar_get_fraction", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_get_inverted, "gtk_progress_bar_get_inverted", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_get_pulse_step, "gtk_progress_bar_get_pulse_step", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_get_show_text, "gtk_progress_bar_get_show_text", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_get_text, "gtk_progress_bar_get_text", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_pulse, "gtk_progress_bar_pulse", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_set_ellipsize, "gtk_progress_bar_set_ellipsize", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_set_fraction, "gtk_progress_bar_set_fraction", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_set_inverted, "gtk_progress_bar_set_inverted", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_set_pulse_step, "gtk_progress_bar_set_pulse_step", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_set_show_text, "gtk_progress_bar_set_show_text", LIBS);
  gidLink(cast(void**)&gtk_progress_bar_set_text, "gtk_progress_bar_set_text", LIBS);

  // ProgressBarAccessible
  gidLink(cast(void**)&gtk_progress_bar_accessible_get_type, "gtk_progress_bar_accessible_get_type", LIBS);

  // RadioAction
  gidLink(cast(void**)&gtk_radio_action_get_type, "gtk_radio_action_get_type", LIBS);
  gidLink(cast(void**)&gtk_radio_action_new, "gtk_radio_action_new", LIBS);
  gidLink(cast(void**)&gtk_radio_action_get_current_value, "gtk_radio_action_get_current_value", LIBS);
  gidLink(cast(void**)&gtk_radio_action_get_group, "gtk_radio_action_get_group", LIBS);
  gidLink(cast(void**)&gtk_radio_action_join_group, "gtk_radio_action_join_group", LIBS);
  gidLink(cast(void**)&gtk_radio_action_set_current_value, "gtk_radio_action_set_current_value", LIBS);
  gidLink(cast(void**)&gtk_radio_action_set_group, "gtk_radio_action_set_group", LIBS);

  // RadioButton
  gidLink(cast(void**)&gtk_radio_button_get_type, "gtk_radio_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_radio_button_new, "gtk_radio_button_new", LIBS);
  gidLink(cast(void**)&gtk_radio_button_new_from_widget, "gtk_radio_button_new_from_widget", LIBS);
  gidLink(cast(void**)&gtk_radio_button_new_with_label, "gtk_radio_button_new_with_label", LIBS);
  gidLink(cast(void**)&gtk_radio_button_new_with_label_from_widget, "gtk_radio_button_new_with_label_from_widget", LIBS);
  gidLink(cast(void**)&gtk_radio_button_new_with_mnemonic, "gtk_radio_button_new_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_radio_button_new_with_mnemonic_from_widget, "gtk_radio_button_new_with_mnemonic_from_widget", LIBS);
  gidLink(cast(void**)&gtk_radio_button_get_group, "gtk_radio_button_get_group", LIBS);
  gidLink(cast(void**)&gtk_radio_button_join_group, "gtk_radio_button_join_group", LIBS);
  gidLink(cast(void**)&gtk_radio_button_set_group, "gtk_radio_button_set_group", LIBS);

  // RadioButtonAccessible
  gidLink(cast(void**)&gtk_radio_button_accessible_get_type, "gtk_radio_button_accessible_get_type", LIBS);

  // RadioMenuItem
  gidLink(cast(void**)&gtk_radio_menu_item_get_type, "gtk_radio_menu_item_get_type", LIBS);
  gidLink(cast(void**)&gtk_radio_menu_item_new, "gtk_radio_menu_item_new", LIBS);
  gidLink(cast(void**)&gtk_radio_menu_item_new_from_widget, "gtk_radio_menu_item_new_from_widget", LIBS);
  gidLink(cast(void**)&gtk_radio_menu_item_new_with_label, "gtk_radio_menu_item_new_with_label", LIBS);
  gidLink(cast(void**)&gtk_radio_menu_item_new_with_label_from_widget, "gtk_radio_menu_item_new_with_label_from_widget", LIBS);
  gidLink(cast(void**)&gtk_radio_menu_item_new_with_mnemonic, "gtk_radio_menu_item_new_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_radio_menu_item_new_with_mnemonic_from_widget, "gtk_radio_menu_item_new_with_mnemonic_from_widget", LIBS);
  gidLink(cast(void**)&gtk_radio_menu_item_get_group, "gtk_radio_menu_item_get_group", LIBS);
  gidLink(cast(void**)&gtk_radio_menu_item_join_group, "gtk_radio_menu_item_join_group", LIBS);
  gidLink(cast(void**)&gtk_radio_menu_item_set_group, "gtk_radio_menu_item_set_group", LIBS);

  // RadioMenuItemAccessible
  gidLink(cast(void**)&gtk_radio_menu_item_accessible_get_type, "gtk_radio_menu_item_accessible_get_type", LIBS);

  // RadioToolButton
  gidLink(cast(void**)&gtk_radio_tool_button_get_type, "gtk_radio_tool_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_radio_tool_button_new, "gtk_radio_tool_button_new", LIBS);
  gidLink(cast(void**)&gtk_radio_tool_button_new_from_stock, "gtk_radio_tool_button_new_from_stock", LIBS);
  gidLink(cast(void**)&gtk_radio_tool_button_new_from_widget, "gtk_radio_tool_button_new_from_widget", LIBS);
  gidLink(cast(void**)&gtk_radio_tool_button_new_with_stock_from_widget, "gtk_radio_tool_button_new_with_stock_from_widget", LIBS);
  gidLink(cast(void**)&gtk_radio_tool_button_get_group, "gtk_radio_tool_button_get_group", LIBS);
  gidLink(cast(void**)&gtk_radio_tool_button_set_group, "gtk_radio_tool_button_set_group", LIBS);

  // Range
  gidLink(cast(void**)&gtk_range_get_type, "gtk_range_get_type", LIBS);
  gidLink(cast(void**)&gtk_range_get_adjustment, "gtk_range_get_adjustment", LIBS);
  gidLink(cast(void**)&gtk_range_get_fill_level, "gtk_range_get_fill_level", LIBS);
  gidLink(cast(void**)&gtk_range_get_flippable, "gtk_range_get_flippable", LIBS);
  gidLink(cast(void**)&gtk_range_get_inverted, "gtk_range_get_inverted", LIBS);
  gidLink(cast(void**)&gtk_range_get_lower_stepper_sensitivity, "gtk_range_get_lower_stepper_sensitivity", LIBS);
  gidLink(cast(void**)&gtk_range_get_min_slider_size, "gtk_range_get_min_slider_size", LIBS);
  gidLink(cast(void**)&gtk_range_get_range_rect, "gtk_range_get_range_rect", LIBS);
  gidLink(cast(void**)&gtk_range_get_restrict_to_fill_level, "gtk_range_get_restrict_to_fill_level", LIBS);
  gidLink(cast(void**)&gtk_range_get_round_digits, "gtk_range_get_round_digits", LIBS);
  gidLink(cast(void**)&gtk_range_get_show_fill_level, "gtk_range_get_show_fill_level", LIBS);
  gidLink(cast(void**)&gtk_range_get_slider_range, "gtk_range_get_slider_range", LIBS);
  gidLink(cast(void**)&gtk_range_get_slider_size_fixed, "gtk_range_get_slider_size_fixed", LIBS);
  gidLink(cast(void**)&gtk_range_get_upper_stepper_sensitivity, "gtk_range_get_upper_stepper_sensitivity", LIBS);
  gidLink(cast(void**)&gtk_range_get_value, "gtk_range_get_value", LIBS);
  gidLink(cast(void**)&gtk_range_set_adjustment, "gtk_range_set_adjustment", LIBS);
  gidLink(cast(void**)&gtk_range_set_fill_level, "gtk_range_set_fill_level", LIBS);
  gidLink(cast(void**)&gtk_range_set_flippable, "gtk_range_set_flippable", LIBS);
  gidLink(cast(void**)&gtk_range_set_increments, "gtk_range_set_increments", LIBS);
  gidLink(cast(void**)&gtk_range_set_inverted, "gtk_range_set_inverted", LIBS);
  gidLink(cast(void**)&gtk_range_set_lower_stepper_sensitivity, "gtk_range_set_lower_stepper_sensitivity", LIBS);
  gidLink(cast(void**)&gtk_range_set_min_slider_size, "gtk_range_set_min_slider_size", LIBS);
  gidLink(cast(void**)&gtk_range_set_range, "gtk_range_set_range", LIBS);
  gidLink(cast(void**)&gtk_range_set_restrict_to_fill_level, "gtk_range_set_restrict_to_fill_level", LIBS);
  gidLink(cast(void**)&gtk_range_set_round_digits, "gtk_range_set_round_digits", LIBS);
  gidLink(cast(void**)&gtk_range_set_show_fill_level, "gtk_range_set_show_fill_level", LIBS);
  gidLink(cast(void**)&gtk_range_set_slider_size_fixed, "gtk_range_set_slider_size_fixed", LIBS);
  gidLink(cast(void**)&gtk_range_set_upper_stepper_sensitivity, "gtk_range_set_upper_stepper_sensitivity", LIBS);
  gidLink(cast(void**)&gtk_range_set_value, "gtk_range_set_value", LIBS);

  // RangeAccessible
  gidLink(cast(void**)&gtk_range_accessible_get_type, "gtk_range_accessible_get_type", LIBS);

  // RcProperty
  gidLink(cast(void**)&gtk_rc_property_parse_border, "gtk_rc_property_parse_border", LIBS);
  gidLink(cast(void**)&gtk_rc_property_parse_color, "gtk_rc_property_parse_color", LIBS);
  gidLink(cast(void**)&gtk_rc_property_parse_enum, "gtk_rc_property_parse_enum", LIBS);
  gidLink(cast(void**)&gtk_rc_property_parse_flags, "gtk_rc_property_parse_flags", LIBS);
  gidLink(cast(void**)&gtk_rc_property_parse_requisition, "gtk_rc_property_parse_requisition", LIBS);

  // RcStyle
  gidLink(cast(void**)&gtk_rc_style_get_type, "gtk_rc_style_get_type", LIBS);
  gidLink(cast(void**)&gtk_rc_style_new, "gtk_rc_style_new", LIBS);
  gidLink(cast(void**)&gtk_rc_style_copy, "gtk_rc_style_copy", LIBS);

  // RecentAction
  gidLink(cast(void**)&gtk_recent_action_get_type, "gtk_recent_action_get_type", LIBS);
  gidLink(cast(void**)&gtk_recent_action_new, "gtk_recent_action_new", LIBS);
  gidLink(cast(void**)&gtk_recent_action_new_for_manager, "gtk_recent_action_new_for_manager", LIBS);
  gidLink(cast(void**)&gtk_recent_action_get_show_numbers, "gtk_recent_action_get_show_numbers", LIBS);
  gidLink(cast(void**)&gtk_recent_action_set_show_numbers, "gtk_recent_action_set_show_numbers", LIBS);

  // RecentChooser
  gidLink(cast(void**)&gtk_recent_chooser_get_type, "gtk_recent_chooser_get_type", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_add_filter, "gtk_recent_chooser_add_filter", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_current_item, "gtk_recent_chooser_get_current_item", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_current_uri, "gtk_recent_chooser_get_current_uri", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_filter, "gtk_recent_chooser_get_filter", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_items, "gtk_recent_chooser_get_items", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_limit, "gtk_recent_chooser_get_limit", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_local_only, "gtk_recent_chooser_get_local_only", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_select_multiple, "gtk_recent_chooser_get_select_multiple", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_show_icons, "gtk_recent_chooser_get_show_icons", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_show_not_found, "gtk_recent_chooser_get_show_not_found", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_show_private, "gtk_recent_chooser_get_show_private", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_show_tips, "gtk_recent_chooser_get_show_tips", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_sort_type, "gtk_recent_chooser_get_sort_type", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_get_uris, "gtk_recent_chooser_get_uris", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_list_filters, "gtk_recent_chooser_list_filters", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_remove_filter, "gtk_recent_chooser_remove_filter", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_select_all, "gtk_recent_chooser_select_all", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_select_uri, "gtk_recent_chooser_select_uri", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_current_uri, "gtk_recent_chooser_set_current_uri", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_filter, "gtk_recent_chooser_set_filter", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_limit, "gtk_recent_chooser_set_limit", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_local_only, "gtk_recent_chooser_set_local_only", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_select_multiple, "gtk_recent_chooser_set_select_multiple", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_show_icons, "gtk_recent_chooser_set_show_icons", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_show_not_found, "gtk_recent_chooser_set_show_not_found", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_show_private, "gtk_recent_chooser_set_show_private", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_show_tips, "gtk_recent_chooser_set_show_tips", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_sort_func, "gtk_recent_chooser_set_sort_func", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_set_sort_type, "gtk_recent_chooser_set_sort_type", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_unselect_all, "gtk_recent_chooser_unselect_all", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_unselect_uri, "gtk_recent_chooser_unselect_uri", LIBS);

  // RecentChooserDialog
  gidLink(cast(void**)&gtk_recent_chooser_dialog_get_type, "gtk_recent_chooser_dialog_get_type", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_dialog_new, "gtk_recent_chooser_dialog_new", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_dialog_new_for_manager, "gtk_recent_chooser_dialog_new_for_manager", LIBS);

  // RecentChooserMenu
  gidLink(cast(void**)&gtk_recent_chooser_menu_get_type, "gtk_recent_chooser_menu_get_type", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_menu_new, "gtk_recent_chooser_menu_new", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_menu_new_for_manager, "gtk_recent_chooser_menu_new_for_manager", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_menu_get_show_numbers, "gtk_recent_chooser_menu_get_show_numbers", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_menu_set_show_numbers, "gtk_recent_chooser_menu_set_show_numbers", LIBS);

  // RecentChooserWidget
  gidLink(cast(void**)&gtk_recent_chooser_widget_get_type, "gtk_recent_chooser_widget_get_type", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_widget_new, "gtk_recent_chooser_widget_new", LIBS);
  gidLink(cast(void**)&gtk_recent_chooser_widget_new_for_manager, "gtk_recent_chooser_widget_new_for_manager", LIBS);

  // RecentFilter
  gidLink(cast(void**)&gtk_recent_filter_get_type, "gtk_recent_filter_get_type", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_new, "gtk_recent_filter_new", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_add_age, "gtk_recent_filter_add_age", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_add_application, "gtk_recent_filter_add_application", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_add_custom, "gtk_recent_filter_add_custom", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_add_group, "gtk_recent_filter_add_group", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_add_mime_type, "gtk_recent_filter_add_mime_type", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_add_pattern, "gtk_recent_filter_add_pattern", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_add_pixbuf_formats, "gtk_recent_filter_add_pixbuf_formats", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_filter, "gtk_recent_filter_filter", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_get_name, "gtk_recent_filter_get_name", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_get_needed, "gtk_recent_filter_get_needed", LIBS);
  gidLink(cast(void**)&gtk_recent_filter_set_name, "gtk_recent_filter_set_name", LIBS);

  // RecentInfo
  gidLink(cast(void**)&gtk_recent_info_get_type, "gtk_recent_info_get_type", LIBS);
  gidLink(cast(void**)&gtk_recent_info_create_app_info, "gtk_recent_info_create_app_info", LIBS);
  gidLink(cast(void**)&gtk_recent_info_exists, "gtk_recent_info_exists", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_added, "gtk_recent_info_get_added", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_age, "gtk_recent_info_get_age", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_application_info, "gtk_recent_info_get_application_info", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_applications, "gtk_recent_info_get_applications", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_description, "gtk_recent_info_get_description", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_display_name, "gtk_recent_info_get_display_name", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_gicon, "gtk_recent_info_get_gicon", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_groups, "gtk_recent_info_get_groups", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_icon, "gtk_recent_info_get_icon", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_mime_type, "gtk_recent_info_get_mime_type", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_modified, "gtk_recent_info_get_modified", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_private_hint, "gtk_recent_info_get_private_hint", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_short_name, "gtk_recent_info_get_short_name", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_uri, "gtk_recent_info_get_uri", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_uri_display, "gtk_recent_info_get_uri_display", LIBS);
  gidLink(cast(void**)&gtk_recent_info_get_visited, "gtk_recent_info_get_visited", LIBS);
  gidLink(cast(void**)&gtk_recent_info_has_application, "gtk_recent_info_has_application", LIBS);
  gidLink(cast(void**)&gtk_recent_info_has_group, "gtk_recent_info_has_group", LIBS);
  gidLink(cast(void**)&gtk_recent_info_is_local, "gtk_recent_info_is_local", LIBS);
  gidLink(cast(void**)&gtk_recent_info_last_application, "gtk_recent_info_last_application", LIBS);
  gidLink(cast(void**)&gtk_recent_info_match, "gtk_recent_info_match", LIBS);
  gidLink(cast(void**)&gtk_recent_info_ref, "gtk_recent_info_ref", LIBS);
  gidLink(cast(void**)&gtk_recent_info_unref, "gtk_recent_info_unref", LIBS);

  // RecentManager
  gidLink(cast(void**)&gtk_recent_manager_get_type, "gtk_recent_manager_get_type", LIBS);
  gidLink(cast(void**)&gtk_recent_manager_new, "gtk_recent_manager_new", LIBS);
  gidLink(cast(void**)&gtk_recent_manager_get_default, "gtk_recent_manager_get_default", LIBS);
  gidLink(cast(void**)&gtk_recent_manager_add_full, "gtk_recent_manager_add_full", LIBS);
  gidLink(cast(void**)&gtk_recent_manager_add_item, "gtk_recent_manager_add_item", LIBS);
  gidLink(cast(void**)&gtk_recent_manager_get_items, "gtk_recent_manager_get_items", LIBS);
  gidLink(cast(void**)&gtk_recent_manager_has_item, "gtk_recent_manager_has_item", LIBS);
  gidLink(cast(void**)&gtk_recent_manager_lookup_item, "gtk_recent_manager_lookup_item", LIBS);
  gidLink(cast(void**)&gtk_recent_manager_move_item, "gtk_recent_manager_move_item", LIBS);
  gidLink(cast(void**)&gtk_recent_manager_purge_items, "gtk_recent_manager_purge_items", LIBS);
  gidLink(cast(void**)&gtk_recent_manager_remove_item, "gtk_recent_manager_remove_item", LIBS);

  // RendererCellAccessible
  gidLink(cast(void**)&gtk_renderer_cell_accessible_get_type, "gtk_renderer_cell_accessible_get_type", LIBS);
  gidLink(cast(void**)&gtk_renderer_cell_accessible_new, "gtk_renderer_cell_accessible_new", LIBS);

  // Requisition
  gidLink(cast(void**)&gtk_requisition_get_type, "gtk_requisition_get_type", LIBS);
  gidLink(cast(void**)&gtk_requisition_new, "gtk_requisition_new", LIBS);
  gidLink(cast(void**)&gtk_requisition_copy, "gtk_requisition_copy", LIBS);
  gidLink(cast(void**)&gtk_requisition_free, "gtk_requisition_free", LIBS);

  // Revealer
  gidLink(cast(void**)&gtk_revealer_get_type, "gtk_revealer_get_type", LIBS);
  gidLink(cast(void**)&gtk_revealer_new, "gtk_revealer_new", LIBS);
  gidLink(cast(void**)&gtk_revealer_get_child_revealed, "gtk_revealer_get_child_revealed", LIBS);
  gidLink(cast(void**)&gtk_revealer_get_reveal_child, "gtk_revealer_get_reveal_child", LIBS);
  gidLink(cast(void**)&gtk_revealer_get_transition_duration, "gtk_revealer_get_transition_duration", LIBS);
  gidLink(cast(void**)&gtk_revealer_get_transition_type, "gtk_revealer_get_transition_type", LIBS);
  gidLink(cast(void**)&gtk_revealer_set_reveal_child, "gtk_revealer_set_reveal_child", LIBS);
  gidLink(cast(void**)&gtk_revealer_set_transition_duration, "gtk_revealer_set_transition_duration", LIBS);
  gidLink(cast(void**)&gtk_revealer_set_transition_type, "gtk_revealer_set_transition_type", LIBS);

  // Scale
  gidLink(cast(void**)&gtk_scale_get_type, "gtk_scale_get_type", LIBS);
  gidLink(cast(void**)&gtk_scale_new, "gtk_scale_new", LIBS);
  gidLink(cast(void**)&gtk_scale_new_with_range, "gtk_scale_new_with_range", LIBS);
  gidLink(cast(void**)&gtk_scale_add_mark, "gtk_scale_add_mark", LIBS);
  gidLink(cast(void**)&gtk_scale_clear_marks, "gtk_scale_clear_marks", LIBS);
  gidLink(cast(void**)&gtk_scale_get_digits, "gtk_scale_get_digits", LIBS);
  gidLink(cast(void**)&gtk_scale_get_draw_value, "gtk_scale_get_draw_value", LIBS);
  gidLink(cast(void**)&gtk_scale_get_has_origin, "gtk_scale_get_has_origin", LIBS);
  gidLink(cast(void**)&gtk_scale_get_layout, "gtk_scale_get_layout", LIBS);
  gidLink(cast(void**)&gtk_scale_get_layout_offsets, "gtk_scale_get_layout_offsets", LIBS);
  gidLink(cast(void**)&gtk_scale_get_value_pos, "gtk_scale_get_value_pos", LIBS);
  gidLink(cast(void**)&gtk_scale_set_digits, "gtk_scale_set_digits", LIBS);
  gidLink(cast(void**)&gtk_scale_set_draw_value, "gtk_scale_set_draw_value", LIBS);
  gidLink(cast(void**)&gtk_scale_set_has_origin, "gtk_scale_set_has_origin", LIBS);
  gidLink(cast(void**)&gtk_scale_set_value_pos, "gtk_scale_set_value_pos", LIBS);

  // ScaleAccessible
  gidLink(cast(void**)&gtk_scale_accessible_get_type, "gtk_scale_accessible_get_type", LIBS);

  // ScaleButton
  gidLink(cast(void**)&gtk_scale_button_get_type, "gtk_scale_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_scale_button_new, "gtk_scale_button_new", LIBS);
  gidLink(cast(void**)&gtk_scale_button_get_adjustment, "gtk_scale_button_get_adjustment", LIBS);
  gidLink(cast(void**)&gtk_scale_button_get_minus_button, "gtk_scale_button_get_minus_button", LIBS);
  gidLink(cast(void**)&gtk_scale_button_get_plus_button, "gtk_scale_button_get_plus_button", LIBS);
  gidLink(cast(void**)&gtk_scale_button_get_popup, "gtk_scale_button_get_popup", LIBS);
  gidLink(cast(void**)&gtk_scale_button_get_value, "gtk_scale_button_get_value", LIBS);
  gidLink(cast(void**)&gtk_scale_button_set_adjustment, "gtk_scale_button_set_adjustment", LIBS);
  gidLink(cast(void**)&gtk_scale_button_set_icons, "gtk_scale_button_set_icons", LIBS);
  gidLink(cast(void**)&gtk_scale_button_set_value, "gtk_scale_button_set_value", LIBS);

  // ScaleButtonAccessible
  gidLink(cast(void**)&gtk_scale_button_accessible_get_type, "gtk_scale_button_accessible_get_type", LIBS);

  // Scrollable
  gidLink(cast(void**)&gtk_scrollable_get_type, "gtk_scrollable_get_type", LIBS);
  gidLink(cast(void**)&gtk_scrollable_get_border, "gtk_scrollable_get_border", LIBS);
  gidLink(cast(void**)&gtk_scrollable_get_hadjustment, "gtk_scrollable_get_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_scrollable_get_hscroll_policy, "gtk_scrollable_get_hscroll_policy", LIBS);
  gidLink(cast(void**)&gtk_scrollable_get_vadjustment, "gtk_scrollable_get_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_scrollable_get_vscroll_policy, "gtk_scrollable_get_vscroll_policy", LIBS);
  gidLink(cast(void**)&gtk_scrollable_set_hadjustment, "gtk_scrollable_set_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_scrollable_set_hscroll_policy, "gtk_scrollable_set_hscroll_policy", LIBS);
  gidLink(cast(void**)&gtk_scrollable_set_vadjustment, "gtk_scrollable_set_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_scrollable_set_vscroll_policy, "gtk_scrollable_set_vscroll_policy", LIBS);

  // Scrollbar
  gidLink(cast(void**)&gtk_scrollbar_get_type, "gtk_scrollbar_get_type", LIBS);
  gidLink(cast(void**)&gtk_scrollbar_new, "gtk_scrollbar_new", LIBS);

  // ScrolledWindow
  gidLink(cast(void**)&gtk_scrolled_window_get_type, "gtk_scrolled_window_get_type", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_new, "gtk_scrolled_window_new", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_add_with_viewport, "gtk_scrolled_window_add_with_viewport", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_capture_button_press, "gtk_scrolled_window_get_capture_button_press", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_hadjustment, "gtk_scrolled_window_get_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_hscrollbar, "gtk_scrolled_window_get_hscrollbar", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_kinetic_scrolling, "gtk_scrolled_window_get_kinetic_scrolling", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_max_content_height, "gtk_scrolled_window_get_max_content_height", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_max_content_width, "gtk_scrolled_window_get_max_content_width", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_min_content_height, "gtk_scrolled_window_get_min_content_height", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_min_content_width, "gtk_scrolled_window_get_min_content_width", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_overlay_scrolling, "gtk_scrolled_window_get_overlay_scrolling", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_placement, "gtk_scrolled_window_get_placement", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_policy, "gtk_scrolled_window_get_policy", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_propagate_natural_height, "gtk_scrolled_window_get_propagate_natural_height", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_propagate_natural_width, "gtk_scrolled_window_get_propagate_natural_width", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_shadow_type, "gtk_scrolled_window_get_shadow_type", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_vadjustment, "gtk_scrolled_window_get_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_get_vscrollbar, "gtk_scrolled_window_get_vscrollbar", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_capture_button_press, "gtk_scrolled_window_set_capture_button_press", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_hadjustment, "gtk_scrolled_window_set_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_kinetic_scrolling, "gtk_scrolled_window_set_kinetic_scrolling", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_max_content_height, "gtk_scrolled_window_set_max_content_height", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_max_content_width, "gtk_scrolled_window_set_max_content_width", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_min_content_height, "gtk_scrolled_window_set_min_content_height", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_min_content_width, "gtk_scrolled_window_set_min_content_width", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_overlay_scrolling, "gtk_scrolled_window_set_overlay_scrolling", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_placement, "gtk_scrolled_window_set_placement", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_policy, "gtk_scrolled_window_set_policy", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_propagate_natural_height, "gtk_scrolled_window_set_propagate_natural_height", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_propagate_natural_width, "gtk_scrolled_window_set_propagate_natural_width", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_shadow_type, "gtk_scrolled_window_set_shadow_type", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_set_vadjustment, "gtk_scrolled_window_set_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_scrolled_window_unset_placement, "gtk_scrolled_window_unset_placement", LIBS);

  // ScrolledWindowAccessible
  gidLink(cast(void**)&gtk_scrolled_window_accessible_get_type, "gtk_scrolled_window_accessible_get_type", LIBS);

  // SearchBar
  gidLink(cast(void**)&gtk_search_bar_get_type, "gtk_search_bar_get_type", LIBS);
  gidLink(cast(void**)&gtk_search_bar_new, "gtk_search_bar_new", LIBS);
  gidLink(cast(void**)&gtk_search_bar_connect_entry, "gtk_search_bar_connect_entry", LIBS);
  gidLink(cast(void**)&gtk_search_bar_get_search_mode, "gtk_search_bar_get_search_mode", LIBS);
  gidLink(cast(void**)&gtk_search_bar_get_show_close_button, "gtk_search_bar_get_show_close_button", LIBS);
  gidLink(cast(void**)&gtk_search_bar_handle_event, "gtk_search_bar_handle_event", LIBS);
  gidLink(cast(void**)&gtk_search_bar_set_search_mode, "gtk_search_bar_set_search_mode", LIBS);
  gidLink(cast(void**)&gtk_search_bar_set_show_close_button, "gtk_search_bar_set_show_close_button", LIBS);

  // SearchEntry
  gidLink(cast(void**)&gtk_search_entry_get_type, "gtk_search_entry_get_type", LIBS);
  gidLink(cast(void**)&gtk_search_entry_new, "gtk_search_entry_new", LIBS);
  gidLink(cast(void**)&gtk_search_entry_handle_event, "gtk_search_entry_handle_event", LIBS);

  // SelectionData
  gidLink(cast(void**)&gtk_selection_data_get_type, "gtk_selection_data_get_type", LIBS);
  gidLink(cast(void**)&gtk_selection_data_copy, "gtk_selection_data_copy", LIBS);
  gidLink(cast(void**)&gtk_selection_data_free, "gtk_selection_data_free", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_data, "gtk_selection_data_get_data", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_data_type, "gtk_selection_data_get_data_type", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_data_with_length, "gtk_selection_data_get_data_with_length", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_display, "gtk_selection_data_get_display", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_format, "gtk_selection_data_get_format", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_length, "gtk_selection_data_get_length", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_pixbuf, "gtk_selection_data_get_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_selection, "gtk_selection_data_get_selection", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_target, "gtk_selection_data_get_target", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_targets, "gtk_selection_data_get_targets", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_text, "gtk_selection_data_get_text", LIBS);
  gidLink(cast(void**)&gtk_selection_data_get_uris, "gtk_selection_data_get_uris", LIBS);
  gidLink(cast(void**)&gtk_selection_data_set, "gtk_selection_data_set", LIBS);
  gidLink(cast(void**)&gtk_selection_data_set_pixbuf, "gtk_selection_data_set_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_selection_data_set_text, "gtk_selection_data_set_text", LIBS);
  gidLink(cast(void**)&gtk_selection_data_set_uris, "gtk_selection_data_set_uris", LIBS);
  gidLink(cast(void**)&gtk_selection_data_targets_include_image, "gtk_selection_data_targets_include_image", LIBS);
  gidLink(cast(void**)&gtk_selection_data_targets_include_rich_text, "gtk_selection_data_targets_include_rich_text", LIBS);
  gidLink(cast(void**)&gtk_selection_data_targets_include_text, "gtk_selection_data_targets_include_text", LIBS);
  gidLink(cast(void**)&gtk_selection_data_targets_include_uri, "gtk_selection_data_targets_include_uri", LIBS);

  // Separator
  gidLink(cast(void**)&gtk_separator_get_type, "gtk_separator_get_type", LIBS);
  gidLink(cast(void**)&gtk_separator_new, "gtk_separator_new", LIBS);

  // SeparatorMenuItem
  gidLink(cast(void**)&gtk_separator_menu_item_get_type, "gtk_separator_menu_item_get_type", LIBS);
  gidLink(cast(void**)&gtk_separator_menu_item_new, "gtk_separator_menu_item_new", LIBS);

  // SeparatorToolItem
  gidLink(cast(void**)&gtk_separator_tool_item_get_type, "gtk_separator_tool_item_get_type", LIBS);
  gidLink(cast(void**)&gtk_separator_tool_item_new, "gtk_separator_tool_item_new", LIBS);
  gidLink(cast(void**)&gtk_separator_tool_item_get_draw, "gtk_separator_tool_item_get_draw", LIBS);
  gidLink(cast(void**)&gtk_separator_tool_item_set_draw, "gtk_separator_tool_item_set_draw", LIBS);

  // Settings
  gidLink(cast(void**)&gtk_settings_get_type, "gtk_settings_get_type", LIBS);
  gidLink(cast(void**)&gtk_settings_get_default, "gtk_settings_get_default", LIBS);
  gidLink(cast(void**)&gtk_settings_get_for_screen, "gtk_settings_get_for_screen", LIBS);
  gidLink(cast(void**)&gtk_settings_install_property, "gtk_settings_install_property", LIBS);
  gidLink(cast(void**)&gtk_settings_install_property_parser, "gtk_settings_install_property_parser", LIBS);
  gidLink(cast(void**)&gtk_settings_reset_property, "gtk_settings_reset_property", LIBS);
  gidLink(cast(void**)&gtk_settings_set_double_property, "gtk_settings_set_double_property", LIBS);
  gidLink(cast(void**)&gtk_settings_set_long_property, "gtk_settings_set_long_property", LIBS);
  gidLink(cast(void**)&gtk_settings_set_property_value, "gtk_settings_set_property_value", LIBS);
  gidLink(cast(void**)&gtk_settings_set_string_property, "gtk_settings_set_string_property", LIBS);

  // ShortcutLabel
  gidLink(cast(void**)&gtk_shortcut_label_get_type, "gtk_shortcut_label_get_type", LIBS);
  gidLink(cast(void**)&gtk_shortcut_label_new, "gtk_shortcut_label_new", LIBS);
  gidLink(cast(void**)&gtk_shortcut_label_get_accelerator, "gtk_shortcut_label_get_accelerator", LIBS);
  gidLink(cast(void**)&gtk_shortcut_label_get_disabled_text, "gtk_shortcut_label_get_disabled_text", LIBS);
  gidLink(cast(void**)&gtk_shortcut_label_set_accelerator, "gtk_shortcut_label_set_accelerator", LIBS);
  gidLink(cast(void**)&gtk_shortcut_label_set_disabled_text, "gtk_shortcut_label_set_disabled_text", LIBS);

  // ShortcutsGroup
  gidLink(cast(void**)&gtk_shortcuts_group_get_type, "gtk_shortcuts_group_get_type", LIBS);

  // ShortcutsSection
  gidLink(cast(void**)&gtk_shortcuts_section_get_type, "gtk_shortcuts_section_get_type", LIBS);

  // ShortcutsShortcut
  gidLink(cast(void**)&gtk_shortcuts_shortcut_get_type, "gtk_shortcuts_shortcut_get_type", LIBS);

  // ShortcutsWindow
  gidLink(cast(void**)&gtk_shortcuts_window_get_type, "gtk_shortcuts_window_get_type", LIBS);

  // SizeGroup
  gidLink(cast(void**)&gtk_size_group_get_type, "gtk_size_group_get_type", LIBS);
  gidLink(cast(void**)&gtk_size_group_new, "gtk_size_group_new", LIBS);
  gidLink(cast(void**)&gtk_size_group_add_widget, "gtk_size_group_add_widget", LIBS);
  gidLink(cast(void**)&gtk_size_group_get_ignore_hidden, "gtk_size_group_get_ignore_hidden", LIBS);
  gidLink(cast(void**)&gtk_size_group_get_mode, "gtk_size_group_get_mode", LIBS);
  gidLink(cast(void**)&gtk_size_group_get_widgets, "gtk_size_group_get_widgets", LIBS);
  gidLink(cast(void**)&gtk_size_group_remove_widget, "gtk_size_group_remove_widget", LIBS);
  gidLink(cast(void**)&gtk_size_group_set_ignore_hidden, "gtk_size_group_set_ignore_hidden", LIBS);
  gidLink(cast(void**)&gtk_size_group_set_mode, "gtk_size_group_set_mode", LIBS);

  // Socket
  gidLink(cast(void**)&gtk_socket_get_type, "gtk_socket_get_type", LIBS);
  gidLink(cast(void**)&gtk_socket_new, "gtk_socket_new", LIBS);
  gidLink(cast(void**)&gtk_socket_add_id, "gtk_socket_add_id", LIBS);
  gidLink(cast(void**)&gtk_socket_get_id, "gtk_socket_get_id", LIBS);
  gidLink(cast(void**)&gtk_socket_get_plug_window, "gtk_socket_get_plug_window", LIBS);

  // SocketAccessible
  gidLink(cast(void**)&gtk_socket_accessible_get_type, "gtk_socket_accessible_get_type", LIBS);
  gidLink(cast(void**)&gtk_socket_accessible_embed, "gtk_socket_accessible_embed", LIBS);

  // SpinButton
  gidLink(cast(void**)&gtk_spin_button_get_type, "gtk_spin_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_spin_button_new, "gtk_spin_button_new", LIBS);
  gidLink(cast(void**)&gtk_spin_button_new_with_range, "gtk_spin_button_new_with_range", LIBS);
  gidLink(cast(void**)&gtk_spin_button_configure, "gtk_spin_button_configure", LIBS);
  gidLink(cast(void**)&gtk_spin_button_get_adjustment, "gtk_spin_button_get_adjustment", LIBS);
  gidLink(cast(void**)&gtk_spin_button_get_digits, "gtk_spin_button_get_digits", LIBS);
  gidLink(cast(void**)&gtk_spin_button_get_increments, "gtk_spin_button_get_increments", LIBS);
  gidLink(cast(void**)&gtk_spin_button_get_numeric, "gtk_spin_button_get_numeric", LIBS);
  gidLink(cast(void**)&gtk_spin_button_get_range, "gtk_spin_button_get_range", LIBS);
  gidLink(cast(void**)&gtk_spin_button_get_snap_to_ticks, "gtk_spin_button_get_snap_to_ticks", LIBS);
  gidLink(cast(void**)&gtk_spin_button_get_update_policy, "gtk_spin_button_get_update_policy", LIBS);
  gidLink(cast(void**)&gtk_spin_button_get_value, "gtk_spin_button_get_value", LIBS);
  gidLink(cast(void**)&gtk_spin_button_get_value_as_int, "gtk_spin_button_get_value_as_int", LIBS);
  gidLink(cast(void**)&gtk_spin_button_get_wrap, "gtk_spin_button_get_wrap", LIBS);
  gidLink(cast(void**)&gtk_spin_button_set_adjustment, "gtk_spin_button_set_adjustment", LIBS);
  gidLink(cast(void**)&gtk_spin_button_set_digits, "gtk_spin_button_set_digits", LIBS);
  gidLink(cast(void**)&gtk_spin_button_set_increments, "gtk_spin_button_set_increments", LIBS);
  gidLink(cast(void**)&gtk_spin_button_set_numeric, "gtk_spin_button_set_numeric", LIBS);
  gidLink(cast(void**)&gtk_spin_button_set_range, "gtk_spin_button_set_range", LIBS);
  gidLink(cast(void**)&gtk_spin_button_set_snap_to_ticks, "gtk_spin_button_set_snap_to_ticks", LIBS);
  gidLink(cast(void**)&gtk_spin_button_set_update_policy, "gtk_spin_button_set_update_policy", LIBS);
  gidLink(cast(void**)&gtk_spin_button_set_value, "gtk_spin_button_set_value", LIBS);
  gidLink(cast(void**)&gtk_spin_button_set_wrap, "gtk_spin_button_set_wrap", LIBS);
  gidLink(cast(void**)&gtk_spin_button_spin, "gtk_spin_button_spin", LIBS);
  gidLink(cast(void**)&gtk_spin_button_update, "gtk_spin_button_update", LIBS);

  // SpinButtonAccessible
  gidLink(cast(void**)&gtk_spin_button_accessible_get_type, "gtk_spin_button_accessible_get_type", LIBS);

  // Spinner
  gidLink(cast(void**)&gtk_spinner_get_type, "gtk_spinner_get_type", LIBS);
  gidLink(cast(void**)&gtk_spinner_new, "gtk_spinner_new", LIBS);
  gidLink(cast(void**)&gtk_spinner_start, "gtk_spinner_start", LIBS);
  gidLink(cast(void**)&gtk_spinner_stop, "gtk_spinner_stop", LIBS);

  // SpinnerAccessible
  gidLink(cast(void**)&gtk_spinner_accessible_get_type, "gtk_spinner_accessible_get_type", LIBS);

  // Stack
  gidLink(cast(void**)&gtk_stack_get_type, "gtk_stack_get_type", LIBS);
  gidLink(cast(void**)&gtk_stack_new, "gtk_stack_new", LIBS);
  gidLink(cast(void**)&gtk_stack_add_named, "gtk_stack_add_named", LIBS);
  gidLink(cast(void**)&gtk_stack_add_titled, "gtk_stack_add_titled", LIBS);
  gidLink(cast(void**)&gtk_stack_get_child_by_name, "gtk_stack_get_child_by_name", LIBS);
  gidLink(cast(void**)&gtk_stack_get_hhomogeneous, "gtk_stack_get_hhomogeneous", LIBS);
  gidLink(cast(void**)&gtk_stack_get_homogeneous, "gtk_stack_get_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_stack_get_interpolate_size, "gtk_stack_get_interpolate_size", LIBS);
  gidLink(cast(void**)&gtk_stack_get_transition_duration, "gtk_stack_get_transition_duration", LIBS);
  gidLink(cast(void**)&gtk_stack_get_transition_running, "gtk_stack_get_transition_running", LIBS);
  gidLink(cast(void**)&gtk_stack_get_transition_type, "gtk_stack_get_transition_type", LIBS);
  gidLink(cast(void**)&gtk_stack_get_vhomogeneous, "gtk_stack_get_vhomogeneous", LIBS);
  gidLink(cast(void**)&gtk_stack_get_visible_child, "gtk_stack_get_visible_child", LIBS);
  gidLink(cast(void**)&gtk_stack_get_visible_child_name, "gtk_stack_get_visible_child_name", LIBS);
  gidLink(cast(void**)&gtk_stack_set_hhomogeneous, "gtk_stack_set_hhomogeneous", LIBS);
  gidLink(cast(void**)&gtk_stack_set_homogeneous, "gtk_stack_set_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_stack_set_interpolate_size, "gtk_stack_set_interpolate_size", LIBS);
  gidLink(cast(void**)&gtk_stack_set_transition_duration, "gtk_stack_set_transition_duration", LIBS);
  gidLink(cast(void**)&gtk_stack_set_transition_type, "gtk_stack_set_transition_type", LIBS);
  gidLink(cast(void**)&gtk_stack_set_vhomogeneous, "gtk_stack_set_vhomogeneous", LIBS);
  gidLink(cast(void**)&gtk_stack_set_visible_child, "gtk_stack_set_visible_child", LIBS);
  gidLink(cast(void**)&gtk_stack_set_visible_child_full, "gtk_stack_set_visible_child_full", LIBS);
  gidLink(cast(void**)&gtk_stack_set_visible_child_name, "gtk_stack_set_visible_child_name", LIBS);

  // StackAccessible
  gidLink(cast(void**)&gtk_stack_accessible_get_type, "gtk_stack_accessible_get_type", LIBS);

  // StackSidebar
  gidLink(cast(void**)&gtk_stack_sidebar_get_type, "gtk_stack_sidebar_get_type", LIBS);
  gidLink(cast(void**)&gtk_stack_sidebar_new, "gtk_stack_sidebar_new", LIBS);
  gidLink(cast(void**)&gtk_stack_sidebar_get_stack, "gtk_stack_sidebar_get_stack", LIBS);
  gidLink(cast(void**)&gtk_stack_sidebar_set_stack, "gtk_stack_sidebar_set_stack", LIBS);

  // StackSwitcher
  gidLink(cast(void**)&gtk_stack_switcher_get_type, "gtk_stack_switcher_get_type", LIBS);
  gidLink(cast(void**)&gtk_stack_switcher_new, "gtk_stack_switcher_new", LIBS);
  gidLink(cast(void**)&gtk_stack_switcher_get_stack, "gtk_stack_switcher_get_stack", LIBS);
  gidLink(cast(void**)&gtk_stack_switcher_set_stack, "gtk_stack_switcher_set_stack", LIBS);

  // StatusIcon
  gidLink(cast(void**)&gtk_status_icon_get_type, "gtk_status_icon_get_type", LIBS);
  gidLink(cast(void**)&gtk_status_icon_new, "gtk_status_icon_new", LIBS);
  gidLink(cast(void**)&gtk_status_icon_new_from_file, "gtk_status_icon_new_from_file", LIBS);
  gidLink(cast(void**)&gtk_status_icon_new_from_gicon, "gtk_status_icon_new_from_gicon", LIBS);
  gidLink(cast(void**)&gtk_status_icon_new_from_icon_name, "gtk_status_icon_new_from_icon_name", LIBS);
  gidLink(cast(void**)&gtk_status_icon_new_from_pixbuf, "gtk_status_icon_new_from_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_status_icon_new_from_stock, "gtk_status_icon_new_from_stock", LIBS);
  gidLink(cast(void**)&gtk_status_icon_position_menu, "gtk_status_icon_position_menu", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_geometry, "gtk_status_icon_get_geometry", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_gicon, "gtk_status_icon_get_gicon", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_has_tooltip, "gtk_status_icon_get_has_tooltip", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_icon_name, "gtk_status_icon_get_icon_name", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_pixbuf, "gtk_status_icon_get_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_screen, "gtk_status_icon_get_screen", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_size, "gtk_status_icon_get_size", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_stock, "gtk_status_icon_get_stock", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_storage_type, "gtk_status_icon_get_storage_type", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_title, "gtk_status_icon_get_title", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_tooltip_markup, "gtk_status_icon_get_tooltip_markup", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_tooltip_text, "gtk_status_icon_get_tooltip_text", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_visible, "gtk_status_icon_get_visible", LIBS);
  gidLink(cast(void**)&gtk_status_icon_get_x11_window_id, "gtk_status_icon_get_x11_window_id", LIBS);
  gidLink(cast(void**)&gtk_status_icon_is_embedded, "gtk_status_icon_is_embedded", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_from_file, "gtk_status_icon_set_from_file", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_from_gicon, "gtk_status_icon_set_from_gicon", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_from_icon_name, "gtk_status_icon_set_from_icon_name", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_from_pixbuf, "gtk_status_icon_set_from_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_from_stock, "gtk_status_icon_set_from_stock", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_has_tooltip, "gtk_status_icon_set_has_tooltip", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_name, "gtk_status_icon_set_name", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_screen, "gtk_status_icon_set_screen", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_title, "gtk_status_icon_set_title", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_tooltip_markup, "gtk_status_icon_set_tooltip_markup", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_tooltip_text, "gtk_status_icon_set_tooltip_text", LIBS);
  gidLink(cast(void**)&gtk_status_icon_set_visible, "gtk_status_icon_set_visible", LIBS);

  // Statusbar
  gidLink(cast(void**)&gtk_statusbar_get_type, "gtk_statusbar_get_type", LIBS);
  gidLink(cast(void**)&gtk_statusbar_new, "gtk_statusbar_new", LIBS);
  gidLink(cast(void**)&gtk_statusbar_get_context_id, "gtk_statusbar_get_context_id", LIBS);
  gidLink(cast(void**)&gtk_statusbar_get_message_area, "gtk_statusbar_get_message_area", LIBS);
  gidLink(cast(void**)&gtk_statusbar_pop, "gtk_statusbar_pop", LIBS);
  gidLink(cast(void**)&gtk_statusbar_push, "gtk_statusbar_push", LIBS);
  gidLink(cast(void**)&gtk_statusbar_remove, "gtk_statusbar_remove", LIBS);
  gidLink(cast(void**)&gtk_statusbar_remove_all, "gtk_statusbar_remove_all", LIBS);

  // StatusbarAccessible
  gidLink(cast(void**)&gtk_statusbar_accessible_get_type, "gtk_statusbar_accessible_get_type", LIBS);

  // StockItem
  gidLink(cast(void**)&gtk_stock_item_copy, "gtk_stock_item_copy", LIBS);
  gidLink(cast(void**)&gtk_stock_item_free, "gtk_stock_item_free", LIBS);

  // Style
  gidLink(cast(void**)&gtk_style_get_type, "gtk_style_get_type", LIBS);
  gidLink(cast(void**)&gtk_style_new, "gtk_style_new", LIBS);
  gidLink(cast(void**)&gtk_style_apply_default_background, "gtk_style_apply_default_background", LIBS);
  gidLink(cast(void**)&gtk_style_attach, "gtk_style_attach", LIBS);
  gidLink(cast(void**)&gtk_style_copy, "gtk_style_copy", LIBS);
  gidLink(cast(void**)&gtk_style_detach, "gtk_style_detach", LIBS);
  gidLink(cast(void**)&gtk_style_get, "gtk_style_get", LIBS);
  gidLink(cast(void**)&gtk_style_get_style_property, "gtk_style_get_style_property", LIBS);
  gidLink(cast(void**)&gtk_style_get_valist, "gtk_style_get_valist", LIBS);
  gidLink(cast(void**)&gtk_style_has_context, "gtk_style_has_context", LIBS);
  gidLink(cast(void**)&gtk_style_lookup_color, "gtk_style_lookup_color", LIBS);
  gidLink(cast(void**)&gtk_style_lookup_icon_set, "gtk_style_lookup_icon_set", LIBS);
  gidLink(cast(void**)&gtk_style_render_icon, "gtk_style_render_icon", LIBS);
  gidLink(cast(void**)&gtk_style_set_background, "gtk_style_set_background", LIBS);

  // StyleContext
  gidLink(cast(void**)&gtk_style_context_get_type, "gtk_style_context_get_type", LIBS);
  gidLink(cast(void**)&gtk_style_context_new, "gtk_style_context_new", LIBS);
  gidLink(cast(void**)&gtk_style_context_add_provider_for_screen, "gtk_style_context_add_provider_for_screen", LIBS);
  gidLink(cast(void**)&gtk_style_context_remove_provider_for_screen, "gtk_style_context_remove_provider_for_screen", LIBS);
  gidLink(cast(void**)&gtk_style_context_reset_widgets, "gtk_style_context_reset_widgets", LIBS);
  gidLink(cast(void**)&gtk_style_context_add_class, "gtk_style_context_add_class", LIBS);
  gidLink(cast(void**)&gtk_style_context_add_provider, "gtk_style_context_add_provider", LIBS);
  gidLink(cast(void**)&gtk_style_context_add_region, "gtk_style_context_add_region", LIBS);
  gidLink(cast(void**)&gtk_style_context_cancel_animations, "gtk_style_context_cancel_animations", LIBS);
  gidLink(cast(void**)&gtk_style_context_get, "gtk_style_context_get", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_background_color, "gtk_style_context_get_background_color", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_border, "gtk_style_context_get_border", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_border_color, "gtk_style_context_get_border_color", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_color, "gtk_style_context_get_color", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_direction, "gtk_style_context_get_direction", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_font, "gtk_style_context_get_font", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_frame_clock, "gtk_style_context_get_frame_clock", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_junction_sides, "gtk_style_context_get_junction_sides", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_margin, "gtk_style_context_get_margin", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_padding, "gtk_style_context_get_padding", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_parent, "gtk_style_context_get_parent", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_path, "gtk_style_context_get_path", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_property, "gtk_style_context_get_property", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_scale, "gtk_style_context_get_scale", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_screen, "gtk_style_context_get_screen", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_section, "gtk_style_context_get_section", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_state, "gtk_style_context_get_state", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_style, "gtk_style_context_get_style", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_style_property, "gtk_style_context_get_style_property", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_style_valist, "gtk_style_context_get_style_valist", LIBS);
  gidLink(cast(void**)&gtk_style_context_get_valist, "gtk_style_context_get_valist", LIBS);
  gidLink(cast(void**)&gtk_style_context_has_class, "gtk_style_context_has_class", LIBS);
  gidLink(cast(void**)&gtk_style_context_has_region, "gtk_style_context_has_region", LIBS);
  gidLink(cast(void**)&gtk_style_context_invalidate, "gtk_style_context_invalidate", LIBS);
  gidLink(cast(void**)&gtk_style_context_list_classes, "gtk_style_context_list_classes", LIBS);
  gidLink(cast(void**)&gtk_style_context_list_regions, "gtk_style_context_list_regions", LIBS);
  gidLink(cast(void**)&gtk_style_context_lookup_color, "gtk_style_context_lookup_color", LIBS);
  gidLink(cast(void**)&gtk_style_context_lookup_icon_set, "gtk_style_context_lookup_icon_set", LIBS);
  gidLink(cast(void**)&gtk_style_context_notify_state_change, "gtk_style_context_notify_state_change", LIBS);
  gidLink(cast(void**)&gtk_style_context_pop_animatable_region, "gtk_style_context_pop_animatable_region", LIBS);
  gidLink(cast(void**)&gtk_style_context_push_animatable_region, "gtk_style_context_push_animatable_region", LIBS);
  gidLink(cast(void**)&gtk_style_context_remove_class, "gtk_style_context_remove_class", LIBS);
  gidLink(cast(void**)&gtk_style_context_remove_provider, "gtk_style_context_remove_provider", LIBS);
  gidLink(cast(void**)&gtk_style_context_remove_region, "gtk_style_context_remove_region", LIBS);
  gidLink(cast(void**)&gtk_style_context_restore, "gtk_style_context_restore", LIBS);
  gidLink(cast(void**)&gtk_style_context_save, "gtk_style_context_save", LIBS);
  gidLink(cast(void**)&gtk_style_context_scroll_animations, "gtk_style_context_scroll_animations", LIBS);
  gidLink(cast(void**)&gtk_style_context_set_background, "gtk_style_context_set_background", LIBS);
  gidLink(cast(void**)&gtk_style_context_set_direction, "gtk_style_context_set_direction", LIBS);
  gidLink(cast(void**)&gtk_style_context_set_frame_clock, "gtk_style_context_set_frame_clock", LIBS);
  gidLink(cast(void**)&gtk_style_context_set_junction_sides, "gtk_style_context_set_junction_sides", LIBS);
  gidLink(cast(void**)&gtk_style_context_set_parent, "gtk_style_context_set_parent", LIBS);
  gidLink(cast(void**)&gtk_style_context_set_path, "gtk_style_context_set_path", LIBS);
  gidLink(cast(void**)&gtk_style_context_set_scale, "gtk_style_context_set_scale", LIBS);
  gidLink(cast(void**)&gtk_style_context_set_screen, "gtk_style_context_set_screen", LIBS);
  gidLink(cast(void**)&gtk_style_context_set_state, "gtk_style_context_set_state", LIBS);
  gidLink(cast(void**)&gtk_style_context_state_is_running, "gtk_style_context_state_is_running", LIBS);
  gidLink(cast(void**)&gtk_style_context_to_string, "gtk_style_context_to_string", LIBS);

  // StyleProperties
  gidLink(cast(void**)&gtk_style_properties_get_type, "gtk_style_properties_get_type", LIBS);
  gidLink(cast(void**)&gtk_style_properties_new, "gtk_style_properties_new", LIBS);
  gidLink(cast(void**)&gtk_style_properties_lookup_property, "gtk_style_properties_lookup_property", LIBS);
  gidLink(cast(void**)&gtk_style_properties_register_property, "gtk_style_properties_register_property", LIBS);
  gidLink(cast(void**)&gtk_style_properties_clear, "gtk_style_properties_clear", LIBS);
  gidLink(cast(void**)&gtk_style_properties_get, "gtk_style_properties_get", LIBS);
  gidLink(cast(void**)&gtk_style_properties_get_property, "gtk_style_properties_get_property", LIBS);
  gidLink(cast(void**)&gtk_style_properties_get_valist, "gtk_style_properties_get_valist", LIBS);
  gidLink(cast(void**)&gtk_style_properties_lookup_color, "gtk_style_properties_lookup_color", LIBS);
  gidLink(cast(void**)&gtk_style_properties_map_color, "gtk_style_properties_map_color", LIBS);
  gidLink(cast(void**)&gtk_style_properties_merge, "gtk_style_properties_merge", LIBS);
  gidLink(cast(void**)&gtk_style_properties_set, "gtk_style_properties_set", LIBS);
  gidLink(cast(void**)&gtk_style_properties_set_property, "gtk_style_properties_set_property", LIBS);
  gidLink(cast(void**)&gtk_style_properties_set_valist, "gtk_style_properties_set_valist", LIBS);
  gidLink(cast(void**)&gtk_style_properties_unset_property, "gtk_style_properties_unset_property", LIBS);

  // StyleProvider
  gidLink(cast(void**)&gtk_style_provider_get_type, "gtk_style_provider_get_type", LIBS);
  gidLink(cast(void**)&gtk_style_provider_get_icon_factory, "gtk_style_provider_get_icon_factory", LIBS);
  gidLink(cast(void**)&gtk_style_provider_get_style, "gtk_style_provider_get_style", LIBS);
  gidLink(cast(void**)&gtk_style_provider_get_style_property, "gtk_style_provider_get_style_property", LIBS);

  // Switch
  gidLink(cast(void**)&gtk_switch_get_type, "gtk_switch_get_type", LIBS);
  gidLink(cast(void**)&gtk_switch_new, "gtk_switch_new", LIBS);
  gidLink(cast(void**)&gtk_switch_get_active, "gtk_switch_get_active", LIBS);
  gidLink(cast(void**)&gtk_switch_get_state, "gtk_switch_get_state", LIBS);
  gidLink(cast(void**)&gtk_switch_set_active, "gtk_switch_set_active", LIBS);
  gidLink(cast(void**)&gtk_switch_set_state, "gtk_switch_set_state", LIBS);

  // SwitchAccessible
  gidLink(cast(void**)&gtk_switch_accessible_get_type, "gtk_switch_accessible_get_type", LIBS);

  // SymbolicColor
  gidLink(cast(void**)&gtk_symbolic_color_get_type, "gtk_symbolic_color_get_type", LIBS);
  gidLink(cast(void**)&gtk_symbolic_color_new_alpha, "gtk_symbolic_color_new_alpha", LIBS);
  gidLink(cast(void**)&gtk_symbolic_color_new_literal, "gtk_symbolic_color_new_literal", LIBS);
  gidLink(cast(void**)&gtk_symbolic_color_new_mix, "gtk_symbolic_color_new_mix", LIBS);
  gidLink(cast(void**)&gtk_symbolic_color_new_name, "gtk_symbolic_color_new_name", LIBS);
  gidLink(cast(void**)&gtk_symbolic_color_new_shade, "gtk_symbolic_color_new_shade", LIBS);
  gidLink(cast(void**)&gtk_symbolic_color_new_win32, "gtk_symbolic_color_new_win32", LIBS);
  gidLink(cast(void**)&gtk_symbolic_color_ref, "gtk_symbolic_color_ref", LIBS);
  gidLink(cast(void**)&gtk_symbolic_color_resolve, "gtk_symbolic_color_resolve", LIBS);
  gidLink(cast(void**)&gtk_symbolic_color_to_string, "gtk_symbolic_color_to_string", LIBS);
  gidLink(cast(void**)&gtk_symbolic_color_unref, "gtk_symbolic_color_unref", LIBS);

  // Table
  gidLink(cast(void**)&gtk_table_get_type, "gtk_table_get_type", LIBS);
  gidLink(cast(void**)&gtk_table_new, "gtk_table_new", LIBS);
  gidLink(cast(void**)&gtk_table_attach, "gtk_table_attach", LIBS);
  gidLink(cast(void**)&gtk_table_attach_defaults, "gtk_table_attach_defaults", LIBS);
  gidLink(cast(void**)&gtk_table_get_col_spacing, "gtk_table_get_col_spacing", LIBS);
  gidLink(cast(void**)&gtk_table_get_default_col_spacing, "gtk_table_get_default_col_spacing", LIBS);
  gidLink(cast(void**)&gtk_table_get_default_row_spacing, "gtk_table_get_default_row_spacing", LIBS);
  gidLink(cast(void**)&gtk_table_get_homogeneous, "gtk_table_get_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_table_get_row_spacing, "gtk_table_get_row_spacing", LIBS);
  gidLink(cast(void**)&gtk_table_get_size, "gtk_table_get_size", LIBS);
  gidLink(cast(void**)&gtk_table_resize, "gtk_table_resize", LIBS);
  gidLink(cast(void**)&gtk_table_set_col_spacing, "gtk_table_set_col_spacing", LIBS);
  gidLink(cast(void**)&gtk_table_set_col_spacings, "gtk_table_set_col_spacings", LIBS);
  gidLink(cast(void**)&gtk_table_set_homogeneous, "gtk_table_set_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_table_set_row_spacing, "gtk_table_set_row_spacing", LIBS);
  gidLink(cast(void**)&gtk_table_set_row_spacings, "gtk_table_set_row_spacings", LIBS);

  // TargetEntry
  gidLink(cast(void**)&gtk_target_entry_get_type, "gtk_target_entry_get_type", LIBS);
  gidLink(cast(void**)&gtk_target_entry_new, "gtk_target_entry_new", LIBS);
  gidLink(cast(void**)&gtk_target_entry_copy, "gtk_target_entry_copy", LIBS);
  gidLink(cast(void**)&gtk_target_entry_free, "gtk_target_entry_free", LIBS);

  // TargetList
  gidLink(cast(void**)&gtk_target_list_get_type, "gtk_target_list_get_type", LIBS);
  gidLink(cast(void**)&gtk_target_list_new, "gtk_target_list_new", LIBS);
  gidLink(cast(void**)&gtk_target_list_add, "gtk_target_list_add", LIBS);
  gidLink(cast(void**)&gtk_target_list_add_image_targets, "gtk_target_list_add_image_targets", LIBS);
  gidLink(cast(void**)&gtk_target_list_add_rich_text_targets, "gtk_target_list_add_rich_text_targets", LIBS);
  gidLink(cast(void**)&gtk_target_list_add_table, "gtk_target_list_add_table", LIBS);
  gidLink(cast(void**)&gtk_target_list_add_text_targets, "gtk_target_list_add_text_targets", LIBS);
  gidLink(cast(void**)&gtk_target_list_add_uri_targets, "gtk_target_list_add_uri_targets", LIBS);
  gidLink(cast(void**)&gtk_target_list_find, "gtk_target_list_find", LIBS);
  gidLink(cast(void**)&gtk_target_list_ref, "gtk_target_list_ref", LIBS);
  gidLink(cast(void**)&gtk_target_list_remove, "gtk_target_list_remove", LIBS);
  gidLink(cast(void**)&gtk_target_list_unref, "gtk_target_list_unref", LIBS);

  // TearoffMenuItem
  gidLink(cast(void**)&gtk_tearoff_menu_item_get_type, "gtk_tearoff_menu_item_get_type", LIBS);
  gidLink(cast(void**)&gtk_tearoff_menu_item_new, "gtk_tearoff_menu_item_new", LIBS);

  // TextAttributes
  gidLink(cast(void**)&gtk_text_attributes_get_type, "gtk_text_attributes_get_type", LIBS);
  gidLink(cast(void**)&gtk_text_attributes_new, "gtk_text_attributes_new", LIBS);
  gidLink(cast(void**)&gtk_text_attributes_copy, "gtk_text_attributes_copy", LIBS);
  gidLink(cast(void**)&gtk_text_attributes_copy_values, "gtk_text_attributes_copy_values", LIBS);
  gidLink(cast(void**)&gtk_text_attributes_ref, "gtk_text_attributes_ref", LIBS);
  gidLink(cast(void**)&gtk_text_attributes_unref, "gtk_text_attributes_unref", LIBS);

  // TextBuffer
  gidLink(cast(void**)&gtk_text_buffer_get_type, "gtk_text_buffer_get_type", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_new, "gtk_text_buffer_new", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_add_mark, "gtk_text_buffer_add_mark", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_add_selection_clipboard, "gtk_text_buffer_add_selection_clipboard", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_apply_tag, "gtk_text_buffer_apply_tag", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_apply_tag_by_name, "gtk_text_buffer_apply_tag_by_name", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_backspace, "gtk_text_buffer_backspace", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_begin_user_action, "gtk_text_buffer_begin_user_action", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_copy_clipboard, "gtk_text_buffer_copy_clipboard", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_create_child_anchor, "gtk_text_buffer_create_child_anchor", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_create_mark, "gtk_text_buffer_create_mark", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_create_tag, "gtk_text_buffer_create_tag", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_cut_clipboard, "gtk_text_buffer_cut_clipboard", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_delete, "gtk_text_buffer_delete", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_delete_interactive, "gtk_text_buffer_delete_interactive", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_delete_mark, "gtk_text_buffer_delete_mark", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_delete_mark_by_name, "gtk_text_buffer_delete_mark_by_name", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_delete_selection, "gtk_text_buffer_delete_selection", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_deserialize, "gtk_text_buffer_deserialize", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_deserialize_get_can_create_tags, "gtk_text_buffer_deserialize_get_can_create_tags", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_deserialize_set_can_create_tags, "gtk_text_buffer_deserialize_set_can_create_tags", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_end_user_action, "gtk_text_buffer_end_user_action", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_bounds, "gtk_text_buffer_get_bounds", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_char_count, "gtk_text_buffer_get_char_count", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_copy_target_list, "gtk_text_buffer_get_copy_target_list", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_deserialize_formats, "gtk_text_buffer_get_deserialize_formats", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_end_iter, "gtk_text_buffer_get_end_iter", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_has_selection, "gtk_text_buffer_get_has_selection", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_insert, "gtk_text_buffer_get_insert", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_iter_at_child_anchor, "gtk_text_buffer_get_iter_at_child_anchor", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_iter_at_line, "gtk_text_buffer_get_iter_at_line", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_iter_at_line_index, "gtk_text_buffer_get_iter_at_line_index", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_iter_at_line_offset, "gtk_text_buffer_get_iter_at_line_offset", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_iter_at_mark, "gtk_text_buffer_get_iter_at_mark", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_iter_at_offset, "gtk_text_buffer_get_iter_at_offset", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_line_count, "gtk_text_buffer_get_line_count", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_mark, "gtk_text_buffer_get_mark", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_modified, "gtk_text_buffer_get_modified", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_paste_target_list, "gtk_text_buffer_get_paste_target_list", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_selection_bound, "gtk_text_buffer_get_selection_bound", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_selection_bounds, "gtk_text_buffer_get_selection_bounds", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_serialize_formats, "gtk_text_buffer_get_serialize_formats", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_slice, "gtk_text_buffer_get_slice", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_start_iter, "gtk_text_buffer_get_start_iter", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_tag_table, "gtk_text_buffer_get_tag_table", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_get_text, "gtk_text_buffer_get_text", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert, "gtk_text_buffer_insert", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert_at_cursor, "gtk_text_buffer_insert_at_cursor", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert_child_anchor, "gtk_text_buffer_insert_child_anchor", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert_interactive, "gtk_text_buffer_insert_interactive", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert_interactive_at_cursor, "gtk_text_buffer_insert_interactive_at_cursor", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert_markup, "gtk_text_buffer_insert_markup", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert_pixbuf, "gtk_text_buffer_insert_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert_range, "gtk_text_buffer_insert_range", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert_range_interactive, "gtk_text_buffer_insert_range_interactive", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert_with_tags, "gtk_text_buffer_insert_with_tags", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_insert_with_tags_by_name, "gtk_text_buffer_insert_with_tags_by_name", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_move_mark, "gtk_text_buffer_move_mark", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_move_mark_by_name, "gtk_text_buffer_move_mark_by_name", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_paste_clipboard, "gtk_text_buffer_paste_clipboard", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_place_cursor, "gtk_text_buffer_place_cursor", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_register_deserialize_format, "gtk_text_buffer_register_deserialize_format", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_register_deserialize_tagset, "gtk_text_buffer_register_deserialize_tagset", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_register_serialize_format, "gtk_text_buffer_register_serialize_format", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_register_serialize_tagset, "gtk_text_buffer_register_serialize_tagset", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_remove_all_tags, "gtk_text_buffer_remove_all_tags", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_remove_selection_clipboard, "gtk_text_buffer_remove_selection_clipboard", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_remove_tag, "gtk_text_buffer_remove_tag", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_remove_tag_by_name, "gtk_text_buffer_remove_tag_by_name", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_select_range, "gtk_text_buffer_select_range", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_serialize, "gtk_text_buffer_serialize", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_set_modified, "gtk_text_buffer_set_modified", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_set_text, "gtk_text_buffer_set_text", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_unregister_deserialize_format, "gtk_text_buffer_unregister_deserialize_format", LIBS);
  gidLink(cast(void**)&gtk_text_buffer_unregister_serialize_format, "gtk_text_buffer_unregister_serialize_format", LIBS);

  // TextCellAccessible
  gidLink(cast(void**)&gtk_text_cell_accessible_get_type, "gtk_text_cell_accessible_get_type", LIBS);

  // TextChildAnchor
  gidLink(cast(void**)&gtk_text_child_anchor_get_type, "gtk_text_child_anchor_get_type", LIBS);
  gidLink(cast(void**)&gtk_text_child_anchor_new, "gtk_text_child_anchor_new", LIBS);
  gidLink(cast(void**)&gtk_text_child_anchor_get_deleted, "gtk_text_child_anchor_get_deleted", LIBS);
  gidLink(cast(void**)&gtk_text_child_anchor_get_widgets, "gtk_text_child_anchor_get_widgets", LIBS);

  // TextIter
  gidLink(cast(void**)&gtk_text_iter_get_type, "gtk_text_iter_get_type", LIBS);
  gidLink(cast(void**)&gtk_text_iter_assign, "gtk_text_iter_assign", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_char, "gtk_text_iter_backward_char", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_chars, "gtk_text_iter_backward_chars", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_cursor_position, "gtk_text_iter_backward_cursor_position", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_cursor_positions, "gtk_text_iter_backward_cursor_positions", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_find_char, "gtk_text_iter_backward_find_char", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_line, "gtk_text_iter_backward_line", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_lines, "gtk_text_iter_backward_lines", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_search, "gtk_text_iter_backward_search", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_sentence_start, "gtk_text_iter_backward_sentence_start", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_sentence_starts, "gtk_text_iter_backward_sentence_starts", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_to_tag_toggle, "gtk_text_iter_backward_to_tag_toggle", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_visible_cursor_position, "gtk_text_iter_backward_visible_cursor_position", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_visible_cursor_positions, "gtk_text_iter_backward_visible_cursor_positions", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_visible_line, "gtk_text_iter_backward_visible_line", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_visible_lines, "gtk_text_iter_backward_visible_lines", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_visible_word_start, "gtk_text_iter_backward_visible_word_start", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_visible_word_starts, "gtk_text_iter_backward_visible_word_starts", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_word_start, "gtk_text_iter_backward_word_start", LIBS);
  gidLink(cast(void**)&gtk_text_iter_backward_word_starts, "gtk_text_iter_backward_word_starts", LIBS);
  gidLink(cast(void**)&gtk_text_iter_begins_tag, "gtk_text_iter_begins_tag", LIBS);
  gidLink(cast(void**)&gtk_text_iter_can_insert, "gtk_text_iter_can_insert", LIBS);
  gidLink(cast(void**)&gtk_text_iter_compare, "gtk_text_iter_compare", LIBS);
  gidLink(cast(void**)&gtk_text_iter_copy, "gtk_text_iter_copy", LIBS);
  gidLink(cast(void**)&gtk_text_iter_editable, "gtk_text_iter_editable", LIBS);
  gidLink(cast(void**)&gtk_text_iter_ends_line, "gtk_text_iter_ends_line", LIBS);
  gidLink(cast(void**)&gtk_text_iter_ends_sentence, "gtk_text_iter_ends_sentence", LIBS);
  gidLink(cast(void**)&gtk_text_iter_ends_tag, "gtk_text_iter_ends_tag", LIBS);
  gidLink(cast(void**)&gtk_text_iter_ends_word, "gtk_text_iter_ends_word", LIBS);
  gidLink(cast(void**)&gtk_text_iter_equal, "gtk_text_iter_equal", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_char, "gtk_text_iter_forward_char", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_chars, "gtk_text_iter_forward_chars", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_cursor_position, "gtk_text_iter_forward_cursor_position", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_cursor_positions, "gtk_text_iter_forward_cursor_positions", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_find_char, "gtk_text_iter_forward_find_char", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_line, "gtk_text_iter_forward_line", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_lines, "gtk_text_iter_forward_lines", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_search, "gtk_text_iter_forward_search", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_sentence_end, "gtk_text_iter_forward_sentence_end", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_sentence_ends, "gtk_text_iter_forward_sentence_ends", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_to_end, "gtk_text_iter_forward_to_end", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_to_line_end, "gtk_text_iter_forward_to_line_end", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_to_tag_toggle, "gtk_text_iter_forward_to_tag_toggle", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_visible_cursor_position, "gtk_text_iter_forward_visible_cursor_position", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_visible_cursor_positions, "gtk_text_iter_forward_visible_cursor_positions", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_visible_line, "gtk_text_iter_forward_visible_line", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_visible_lines, "gtk_text_iter_forward_visible_lines", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_visible_word_end, "gtk_text_iter_forward_visible_word_end", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_visible_word_ends, "gtk_text_iter_forward_visible_word_ends", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_word_end, "gtk_text_iter_forward_word_end", LIBS);
  gidLink(cast(void**)&gtk_text_iter_forward_word_ends, "gtk_text_iter_forward_word_ends", LIBS);
  gidLink(cast(void**)&gtk_text_iter_free, "gtk_text_iter_free", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_attributes, "gtk_text_iter_get_attributes", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_buffer, "gtk_text_iter_get_buffer", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_bytes_in_line, "gtk_text_iter_get_bytes_in_line", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_char, "gtk_text_iter_get_char", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_chars_in_line, "gtk_text_iter_get_chars_in_line", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_child_anchor, "gtk_text_iter_get_child_anchor", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_language, "gtk_text_iter_get_language", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_line, "gtk_text_iter_get_line", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_line_index, "gtk_text_iter_get_line_index", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_line_offset, "gtk_text_iter_get_line_offset", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_marks, "gtk_text_iter_get_marks", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_offset, "gtk_text_iter_get_offset", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_pixbuf, "gtk_text_iter_get_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_slice, "gtk_text_iter_get_slice", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_tags, "gtk_text_iter_get_tags", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_text, "gtk_text_iter_get_text", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_toggled_tags, "gtk_text_iter_get_toggled_tags", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_visible_line_index, "gtk_text_iter_get_visible_line_index", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_visible_line_offset, "gtk_text_iter_get_visible_line_offset", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_visible_slice, "gtk_text_iter_get_visible_slice", LIBS);
  gidLink(cast(void**)&gtk_text_iter_get_visible_text, "gtk_text_iter_get_visible_text", LIBS);
  gidLink(cast(void**)&gtk_text_iter_has_tag, "gtk_text_iter_has_tag", LIBS);
  gidLink(cast(void**)&gtk_text_iter_in_range, "gtk_text_iter_in_range", LIBS);
  gidLink(cast(void**)&gtk_text_iter_inside_sentence, "gtk_text_iter_inside_sentence", LIBS);
  gidLink(cast(void**)&gtk_text_iter_inside_word, "gtk_text_iter_inside_word", LIBS);
  gidLink(cast(void**)&gtk_text_iter_is_cursor_position, "gtk_text_iter_is_cursor_position", LIBS);
  gidLink(cast(void**)&gtk_text_iter_is_end, "gtk_text_iter_is_end", LIBS);
  gidLink(cast(void**)&gtk_text_iter_is_start, "gtk_text_iter_is_start", LIBS);
  gidLink(cast(void**)&gtk_text_iter_order, "gtk_text_iter_order", LIBS);
  gidLink(cast(void**)&gtk_text_iter_set_line, "gtk_text_iter_set_line", LIBS);
  gidLink(cast(void**)&gtk_text_iter_set_line_index, "gtk_text_iter_set_line_index", LIBS);
  gidLink(cast(void**)&gtk_text_iter_set_line_offset, "gtk_text_iter_set_line_offset", LIBS);
  gidLink(cast(void**)&gtk_text_iter_set_offset, "gtk_text_iter_set_offset", LIBS);
  gidLink(cast(void**)&gtk_text_iter_set_visible_line_index, "gtk_text_iter_set_visible_line_index", LIBS);
  gidLink(cast(void**)&gtk_text_iter_set_visible_line_offset, "gtk_text_iter_set_visible_line_offset", LIBS);
  gidLink(cast(void**)&gtk_text_iter_starts_line, "gtk_text_iter_starts_line", LIBS);
  gidLink(cast(void**)&gtk_text_iter_starts_sentence, "gtk_text_iter_starts_sentence", LIBS);
  gidLink(cast(void**)&gtk_text_iter_starts_tag, "gtk_text_iter_starts_tag", LIBS);
  gidLink(cast(void**)&gtk_text_iter_starts_word, "gtk_text_iter_starts_word", LIBS);
  gidLink(cast(void**)&gtk_text_iter_toggles_tag, "gtk_text_iter_toggles_tag", LIBS);

  // TextMark
  gidLink(cast(void**)&gtk_text_mark_get_type, "gtk_text_mark_get_type", LIBS);
  gidLink(cast(void**)&gtk_text_mark_new, "gtk_text_mark_new", LIBS);
  gidLink(cast(void**)&gtk_text_mark_get_buffer, "gtk_text_mark_get_buffer", LIBS);
  gidLink(cast(void**)&gtk_text_mark_get_deleted, "gtk_text_mark_get_deleted", LIBS);
  gidLink(cast(void**)&gtk_text_mark_get_left_gravity, "gtk_text_mark_get_left_gravity", LIBS);
  gidLink(cast(void**)&gtk_text_mark_get_name, "gtk_text_mark_get_name", LIBS);
  gidLink(cast(void**)&gtk_text_mark_get_visible, "gtk_text_mark_get_visible", LIBS);
  gidLink(cast(void**)&gtk_text_mark_set_visible, "gtk_text_mark_set_visible", LIBS);

  // TextTag
  gidLink(cast(void**)&gtk_text_tag_get_type, "gtk_text_tag_get_type", LIBS);
  gidLink(cast(void**)&gtk_text_tag_new, "gtk_text_tag_new", LIBS);
  gidLink(cast(void**)&gtk_text_tag_changed, "gtk_text_tag_changed", LIBS);
  gidLink(cast(void**)&gtk_text_tag_event, "gtk_text_tag_event", LIBS);
  gidLink(cast(void**)&gtk_text_tag_get_priority, "gtk_text_tag_get_priority", LIBS);
  gidLink(cast(void**)&gtk_text_tag_set_priority, "gtk_text_tag_set_priority", LIBS);

  // TextTagTable
  gidLink(cast(void**)&gtk_text_tag_table_get_type, "gtk_text_tag_table_get_type", LIBS);
  gidLink(cast(void**)&gtk_text_tag_table_new, "gtk_text_tag_table_new", LIBS);
  gidLink(cast(void**)&gtk_text_tag_table_add, "gtk_text_tag_table_add", LIBS);
  gidLink(cast(void**)&gtk_text_tag_table_foreach, "gtk_text_tag_table_foreach", LIBS);
  gidLink(cast(void**)&gtk_text_tag_table_get_size, "gtk_text_tag_table_get_size", LIBS);
  gidLink(cast(void**)&gtk_text_tag_table_lookup, "gtk_text_tag_table_lookup", LIBS);
  gidLink(cast(void**)&gtk_text_tag_table_remove, "gtk_text_tag_table_remove", LIBS);

  // TextView
  gidLink(cast(void**)&gtk_text_view_get_type, "gtk_text_view_get_type", LIBS);
  gidLink(cast(void**)&gtk_text_view_new, "gtk_text_view_new", LIBS);
  gidLink(cast(void**)&gtk_text_view_new_with_buffer, "gtk_text_view_new_with_buffer", LIBS);
  gidLink(cast(void**)&gtk_text_view_add_child_at_anchor, "gtk_text_view_add_child_at_anchor", LIBS);
  gidLink(cast(void**)&gtk_text_view_add_child_in_window, "gtk_text_view_add_child_in_window", LIBS);
  gidLink(cast(void**)&gtk_text_view_backward_display_line, "gtk_text_view_backward_display_line", LIBS);
  gidLink(cast(void**)&gtk_text_view_backward_display_line_start, "gtk_text_view_backward_display_line_start", LIBS);
  gidLink(cast(void**)&gtk_text_view_buffer_to_window_coords, "gtk_text_view_buffer_to_window_coords", LIBS);
  gidLink(cast(void**)&gtk_text_view_forward_display_line, "gtk_text_view_forward_display_line", LIBS);
  gidLink(cast(void**)&gtk_text_view_forward_display_line_end, "gtk_text_view_forward_display_line_end", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_accepts_tab, "gtk_text_view_get_accepts_tab", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_border_window_size, "gtk_text_view_get_border_window_size", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_bottom_margin, "gtk_text_view_get_bottom_margin", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_buffer, "gtk_text_view_get_buffer", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_cursor_locations, "gtk_text_view_get_cursor_locations", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_cursor_visible, "gtk_text_view_get_cursor_visible", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_default_attributes, "gtk_text_view_get_default_attributes", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_editable, "gtk_text_view_get_editable", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_hadjustment, "gtk_text_view_get_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_indent, "gtk_text_view_get_indent", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_input_hints, "gtk_text_view_get_input_hints", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_input_purpose, "gtk_text_view_get_input_purpose", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_iter_at_location, "gtk_text_view_get_iter_at_location", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_iter_at_position, "gtk_text_view_get_iter_at_position", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_iter_location, "gtk_text_view_get_iter_location", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_justification, "gtk_text_view_get_justification", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_left_margin, "gtk_text_view_get_left_margin", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_line_at_y, "gtk_text_view_get_line_at_y", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_line_yrange, "gtk_text_view_get_line_yrange", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_monospace, "gtk_text_view_get_monospace", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_overwrite, "gtk_text_view_get_overwrite", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_pixels_above_lines, "gtk_text_view_get_pixels_above_lines", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_pixels_below_lines, "gtk_text_view_get_pixels_below_lines", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_pixels_inside_wrap, "gtk_text_view_get_pixels_inside_wrap", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_right_margin, "gtk_text_view_get_right_margin", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_tabs, "gtk_text_view_get_tabs", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_top_margin, "gtk_text_view_get_top_margin", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_vadjustment, "gtk_text_view_get_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_visible_rect, "gtk_text_view_get_visible_rect", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_window, "gtk_text_view_get_window", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_window_type, "gtk_text_view_get_window_type", LIBS);
  gidLink(cast(void**)&gtk_text_view_get_wrap_mode, "gtk_text_view_get_wrap_mode", LIBS);
  gidLink(cast(void**)&gtk_text_view_im_context_filter_keypress, "gtk_text_view_im_context_filter_keypress", LIBS);
  gidLink(cast(void**)&gtk_text_view_move_child, "gtk_text_view_move_child", LIBS);
  gidLink(cast(void**)&gtk_text_view_move_mark_onscreen, "gtk_text_view_move_mark_onscreen", LIBS);
  gidLink(cast(void**)&gtk_text_view_move_visually, "gtk_text_view_move_visually", LIBS);
  gidLink(cast(void**)&gtk_text_view_place_cursor_onscreen, "gtk_text_view_place_cursor_onscreen", LIBS);
  gidLink(cast(void**)&gtk_text_view_reset_cursor_blink, "gtk_text_view_reset_cursor_blink", LIBS);
  gidLink(cast(void**)&gtk_text_view_reset_im_context, "gtk_text_view_reset_im_context", LIBS);
  gidLink(cast(void**)&gtk_text_view_scroll_mark_onscreen, "gtk_text_view_scroll_mark_onscreen", LIBS);
  gidLink(cast(void**)&gtk_text_view_scroll_to_iter, "gtk_text_view_scroll_to_iter", LIBS);
  gidLink(cast(void**)&gtk_text_view_scroll_to_mark, "gtk_text_view_scroll_to_mark", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_accepts_tab, "gtk_text_view_set_accepts_tab", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_border_window_size, "gtk_text_view_set_border_window_size", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_bottom_margin, "gtk_text_view_set_bottom_margin", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_buffer, "gtk_text_view_set_buffer", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_cursor_visible, "gtk_text_view_set_cursor_visible", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_editable, "gtk_text_view_set_editable", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_indent, "gtk_text_view_set_indent", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_input_hints, "gtk_text_view_set_input_hints", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_input_purpose, "gtk_text_view_set_input_purpose", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_justification, "gtk_text_view_set_justification", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_left_margin, "gtk_text_view_set_left_margin", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_monospace, "gtk_text_view_set_monospace", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_overwrite, "gtk_text_view_set_overwrite", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_pixels_above_lines, "gtk_text_view_set_pixels_above_lines", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_pixels_below_lines, "gtk_text_view_set_pixels_below_lines", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_pixels_inside_wrap, "gtk_text_view_set_pixels_inside_wrap", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_right_margin, "gtk_text_view_set_right_margin", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_tabs, "gtk_text_view_set_tabs", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_top_margin, "gtk_text_view_set_top_margin", LIBS);
  gidLink(cast(void**)&gtk_text_view_set_wrap_mode, "gtk_text_view_set_wrap_mode", LIBS);
  gidLink(cast(void**)&gtk_text_view_starts_display_line, "gtk_text_view_starts_display_line", LIBS);
  gidLink(cast(void**)&gtk_text_view_window_to_buffer_coords, "gtk_text_view_window_to_buffer_coords", LIBS);

  // TextViewAccessible
  gidLink(cast(void**)&gtk_text_view_accessible_get_type, "gtk_text_view_accessible_get_type", LIBS);

  // ThemingEngine
  gidLink(cast(void**)&gtk_theming_engine_get_type, "gtk_theming_engine_get_type", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_load, "gtk_theming_engine_load", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_register_property, "gtk_theming_engine_register_property", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get, "gtk_theming_engine_get", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_background_color, "gtk_theming_engine_get_background_color", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_border, "gtk_theming_engine_get_border", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_border_color, "gtk_theming_engine_get_border_color", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_color, "gtk_theming_engine_get_color", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_direction, "gtk_theming_engine_get_direction", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_font, "gtk_theming_engine_get_font", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_junction_sides, "gtk_theming_engine_get_junction_sides", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_margin, "gtk_theming_engine_get_margin", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_padding, "gtk_theming_engine_get_padding", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_path, "gtk_theming_engine_get_path", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_property, "gtk_theming_engine_get_property", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_screen, "gtk_theming_engine_get_screen", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_state, "gtk_theming_engine_get_state", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_style, "gtk_theming_engine_get_style", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_style_property, "gtk_theming_engine_get_style_property", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_style_valist, "gtk_theming_engine_get_style_valist", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_get_valist, "gtk_theming_engine_get_valist", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_has_class, "gtk_theming_engine_has_class", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_has_region, "gtk_theming_engine_has_region", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_lookup_color, "gtk_theming_engine_lookup_color", LIBS);
  gidLink(cast(void**)&gtk_theming_engine_state_is_running, "gtk_theming_engine_state_is_running", LIBS);

  // ToggleAction
  gidLink(cast(void**)&gtk_toggle_action_get_type, "gtk_toggle_action_get_type", LIBS);
  gidLink(cast(void**)&gtk_toggle_action_new, "gtk_toggle_action_new", LIBS);
  gidLink(cast(void**)&gtk_toggle_action_get_active, "gtk_toggle_action_get_active", LIBS);
  gidLink(cast(void**)&gtk_toggle_action_get_draw_as_radio, "gtk_toggle_action_get_draw_as_radio", LIBS);
  gidLink(cast(void**)&gtk_toggle_action_set_active, "gtk_toggle_action_set_active", LIBS);
  gidLink(cast(void**)&gtk_toggle_action_set_draw_as_radio, "gtk_toggle_action_set_draw_as_radio", LIBS);
  gidLink(cast(void**)&gtk_toggle_action_toggled, "gtk_toggle_action_toggled", LIBS);

  // ToggleButton
  gidLink(cast(void**)&gtk_toggle_button_get_type, "gtk_toggle_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_toggle_button_new, "gtk_toggle_button_new", LIBS);
  gidLink(cast(void**)&gtk_toggle_button_new_with_label, "gtk_toggle_button_new_with_label", LIBS);
  gidLink(cast(void**)&gtk_toggle_button_new_with_mnemonic, "gtk_toggle_button_new_with_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_toggle_button_get_active, "gtk_toggle_button_get_active", LIBS);
  gidLink(cast(void**)&gtk_toggle_button_get_inconsistent, "gtk_toggle_button_get_inconsistent", LIBS);
  gidLink(cast(void**)&gtk_toggle_button_get_mode, "gtk_toggle_button_get_mode", LIBS);
  gidLink(cast(void**)&gtk_toggle_button_set_active, "gtk_toggle_button_set_active", LIBS);
  gidLink(cast(void**)&gtk_toggle_button_set_inconsistent, "gtk_toggle_button_set_inconsistent", LIBS);
  gidLink(cast(void**)&gtk_toggle_button_set_mode, "gtk_toggle_button_set_mode", LIBS);
  gidLink(cast(void**)&gtk_toggle_button_toggled, "gtk_toggle_button_toggled", LIBS);

  // ToggleButtonAccessible
  gidLink(cast(void**)&gtk_toggle_button_accessible_get_type, "gtk_toggle_button_accessible_get_type", LIBS);

  // ToggleToolButton
  gidLink(cast(void**)&gtk_toggle_tool_button_get_type, "gtk_toggle_tool_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_toggle_tool_button_new, "gtk_toggle_tool_button_new", LIBS);
  gidLink(cast(void**)&gtk_toggle_tool_button_new_from_stock, "gtk_toggle_tool_button_new_from_stock", LIBS);
  gidLink(cast(void**)&gtk_toggle_tool_button_get_active, "gtk_toggle_tool_button_get_active", LIBS);
  gidLink(cast(void**)&gtk_toggle_tool_button_set_active, "gtk_toggle_tool_button_set_active", LIBS);

  // ToolButton
  gidLink(cast(void**)&gtk_tool_button_get_type, "gtk_tool_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_tool_button_new, "gtk_tool_button_new", LIBS);
  gidLink(cast(void**)&gtk_tool_button_new_from_stock, "gtk_tool_button_new_from_stock", LIBS);
  gidLink(cast(void**)&gtk_tool_button_get_icon_name, "gtk_tool_button_get_icon_name", LIBS);
  gidLink(cast(void**)&gtk_tool_button_get_icon_widget, "gtk_tool_button_get_icon_widget", LIBS);
  gidLink(cast(void**)&gtk_tool_button_get_label, "gtk_tool_button_get_label", LIBS);
  gidLink(cast(void**)&gtk_tool_button_get_label_widget, "gtk_tool_button_get_label_widget", LIBS);
  gidLink(cast(void**)&gtk_tool_button_get_stock_id, "gtk_tool_button_get_stock_id", LIBS);
  gidLink(cast(void**)&gtk_tool_button_get_use_underline, "gtk_tool_button_get_use_underline", LIBS);
  gidLink(cast(void**)&gtk_tool_button_set_icon_name, "gtk_tool_button_set_icon_name", LIBS);
  gidLink(cast(void**)&gtk_tool_button_set_icon_widget, "gtk_tool_button_set_icon_widget", LIBS);
  gidLink(cast(void**)&gtk_tool_button_set_label, "gtk_tool_button_set_label", LIBS);
  gidLink(cast(void**)&gtk_tool_button_set_label_widget, "gtk_tool_button_set_label_widget", LIBS);
  gidLink(cast(void**)&gtk_tool_button_set_stock_id, "gtk_tool_button_set_stock_id", LIBS);
  gidLink(cast(void**)&gtk_tool_button_set_use_underline, "gtk_tool_button_set_use_underline", LIBS);

  // ToolItem
  gidLink(cast(void**)&gtk_tool_item_get_type, "gtk_tool_item_get_type", LIBS);
  gidLink(cast(void**)&gtk_tool_item_new, "gtk_tool_item_new", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_ellipsize_mode, "gtk_tool_item_get_ellipsize_mode", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_expand, "gtk_tool_item_get_expand", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_homogeneous, "gtk_tool_item_get_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_icon_size, "gtk_tool_item_get_icon_size", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_is_important, "gtk_tool_item_get_is_important", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_orientation, "gtk_tool_item_get_orientation", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_proxy_menu_item, "gtk_tool_item_get_proxy_menu_item", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_relief_style, "gtk_tool_item_get_relief_style", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_text_alignment, "gtk_tool_item_get_text_alignment", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_text_orientation, "gtk_tool_item_get_text_orientation", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_text_size_group, "gtk_tool_item_get_text_size_group", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_toolbar_style, "gtk_tool_item_get_toolbar_style", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_use_drag_window, "gtk_tool_item_get_use_drag_window", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_visible_horizontal, "gtk_tool_item_get_visible_horizontal", LIBS);
  gidLink(cast(void**)&gtk_tool_item_get_visible_vertical, "gtk_tool_item_get_visible_vertical", LIBS);
  gidLink(cast(void**)&gtk_tool_item_rebuild_menu, "gtk_tool_item_rebuild_menu", LIBS);
  gidLink(cast(void**)&gtk_tool_item_retrieve_proxy_menu_item, "gtk_tool_item_retrieve_proxy_menu_item", LIBS);
  gidLink(cast(void**)&gtk_tool_item_set_expand, "gtk_tool_item_set_expand", LIBS);
  gidLink(cast(void**)&gtk_tool_item_set_homogeneous, "gtk_tool_item_set_homogeneous", LIBS);
  gidLink(cast(void**)&gtk_tool_item_set_is_important, "gtk_tool_item_set_is_important", LIBS);
  gidLink(cast(void**)&gtk_tool_item_set_proxy_menu_item, "gtk_tool_item_set_proxy_menu_item", LIBS);
  gidLink(cast(void**)&gtk_tool_item_set_tooltip_markup, "gtk_tool_item_set_tooltip_markup", LIBS);
  gidLink(cast(void**)&gtk_tool_item_set_tooltip_text, "gtk_tool_item_set_tooltip_text", LIBS);
  gidLink(cast(void**)&gtk_tool_item_set_use_drag_window, "gtk_tool_item_set_use_drag_window", LIBS);
  gidLink(cast(void**)&gtk_tool_item_set_visible_horizontal, "gtk_tool_item_set_visible_horizontal", LIBS);
  gidLink(cast(void**)&gtk_tool_item_set_visible_vertical, "gtk_tool_item_set_visible_vertical", LIBS);
  gidLink(cast(void**)&gtk_tool_item_toolbar_reconfigured, "gtk_tool_item_toolbar_reconfigured", LIBS);

  // ToolItemGroup
  gidLink(cast(void**)&gtk_tool_item_group_get_type, "gtk_tool_item_group_get_type", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_new, "gtk_tool_item_group_new", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_get_collapsed, "gtk_tool_item_group_get_collapsed", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_get_drop_item, "gtk_tool_item_group_get_drop_item", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_get_ellipsize, "gtk_tool_item_group_get_ellipsize", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_get_header_relief, "gtk_tool_item_group_get_header_relief", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_get_item_position, "gtk_tool_item_group_get_item_position", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_get_label, "gtk_tool_item_group_get_label", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_get_label_widget, "gtk_tool_item_group_get_label_widget", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_get_n_items, "gtk_tool_item_group_get_n_items", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_get_nth_item, "gtk_tool_item_group_get_nth_item", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_insert, "gtk_tool_item_group_insert", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_set_collapsed, "gtk_tool_item_group_set_collapsed", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_set_ellipsize, "gtk_tool_item_group_set_ellipsize", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_set_header_relief, "gtk_tool_item_group_set_header_relief", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_set_item_position, "gtk_tool_item_group_set_item_position", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_set_label, "gtk_tool_item_group_set_label", LIBS);
  gidLink(cast(void**)&gtk_tool_item_group_set_label_widget, "gtk_tool_item_group_set_label_widget", LIBS);

  // ToolPalette
  gidLink(cast(void**)&gtk_tool_palette_get_type, "gtk_tool_palette_get_type", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_new, "gtk_tool_palette_new", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_drag_target_group, "gtk_tool_palette_get_drag_target_group", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_drag_target_item, "gtk_tool_palette_get_drag_target_item", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_add_drag_dest, "gtk_tool_palette_add_drag_dest", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_drag_item, "gtk_tool_palette_get_drag_item", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_drop_group, "gtk_tool_palette_get_drop_group", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_drop_item, "gtk_tool_palette_get_drop_item", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_exclusive, "gtk_tool_palette_get_exclusive", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_expand, "gtk_tool_palette_get_expand", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_group_position, "gtk_tool_palette_get_group_position", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_hadjustment, "gtk_tool_palette_get_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_icon_size, "gtk_tool_palette_get_icon_size", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_style, "gtk_tool_palette_get_style", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_get_vadjustment, "gtk_tool_palette_get_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_set_drag_source, "gtk_tool_palette_set_drag_source", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_set_exclusive, "gtk_tool_palette_set_exclusive", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_set_expand, "gtk_tool_palette_set_expand", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_set_group_position, "gtk_tool_palette_set_group_position", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_set_icon_size, "gtk_tool_palette_set_icon_size", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_set_style, "gtk_tool_palette_set_style", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_unset_icon_size, "gtk_tool_palette_unset_icon_size", LIBS);
  gidLink(cast(void**)&gtk_tool_palette_unset_style, "gtk_tool_palette_unset_style", LIBS);

  // ToolShell
  gidLink(cast(void**)&gtk_tool_shell_get_type, "gtk_tool_shell_get_type", LIBS);
  gidLink(cast(void**)&gtk_tool_shell_get_ellipsize_mode, "gtk_tool_shell_get_ellipsize_mode", LIBS);
  gidLink(cast(void**)&gtk_tool_shell_get_icon_size, "gtk_tool_shell_get_icon_size", LIBS);
  gidLink(cast(void**)&gtk_tool_shell_get_orientation, "gtk_tool_shell_get_orientation", LIBS);
  gidLink(cast(void**)&gtk_tool_shell_get_relief_style, "gtk_tool_shell_get_relief_style", LIBS);
  gidLink(cast(void**)&gtk_tool_shell_get_style, "gtk_tool_shell_get_style", LIBS);
  gidLink(cast(void**)&gtk_tool_shell_get_text_alignment, "gtk_tool_shell_get_text_alignment", LIBS);
  gidLink(cast(void**)&gtk_tool_shell_get_text_orientation, "gtk_tool_shell_get_text_orientation", LIBS);
  gidLink(cast(void**)&gtk_tool_shell_get_text_size_group, "gtk_tool_shell_get_text_size_group", LIBS);
  gidLink(cast(void**)&gtk_tool_shell_rebuild_menu, "gtk_tool_shell_rebuild_menu", LIBS);

  // Toolbar
  gidLink(cast(void**)&gtk_toolbar_get_type, "gtk_toolbar_get_type", LIBS);
  gidLink(cast(void**)&gtk_toolbar_new, "gtk_toolbar_new", LIBS);
  gidLink(cast(void**)&gtk_toolbar_get_drop_index, "gtk_toolbar_get_drop_index", LIBS);
  gidLink(cast(void**)&gtk_toolbar_get_icon_size, "gtk_toolbar_get_icon_size", LIBS);
  gidLink(cast(void**)&gtk_toolbar_get_item_index, "gtk_toolbar_get_item_index", LIBS);
  gidLink(cast(void**)&gtk_toolbar_get_n_items, "gtk_toolbar_get_n_items", LIBS);
  gidLink(cast(void**)&gtk_toolbar_get_nth_item, "gtk_toolbar_get_nth_item", LIBS);
  gidLink(cast(void**)&gtk_toolbar_get_relief_style, "gtk_toolbar_get_relief_style", LIBS);
  gidLink(cast(void**)&gtk_toolbar_get_show_arrow, "gtk_toolbar_get_show_arrow", LIBS);
  gidLink(cast(void**)&gtk_toolbar_get_style, "gtk_toolbar_get_style", LIBS);
  gidLink(cast(void**)&gtk_toolbar_insert, "gtk_toolbar_insert", LIBS);
  gidLink(cast(void**)&gtk_toolbar_set_drop_highlight_item, "gtk_toolbar_set_drop_highlight_item", LIBS);
  gidLink(cast(void**)&gtk_toolbar_set_icon_size, "gtk_toolbar_set_icon_size", LIBS);
  gidLink(cast(void**)&gtk_toolbar_set_show_arrow, "gtk_toolbar_set_show_arrow", LIBS);
  gidLink(cast(void**)&gtk_toolbar_set_style, "gtk_toolbar_set_style", LIBS);
  gidLink(cast(void**)&gtk_toolbar_unset_icon_size, "gtk_toolbar_unset_icon_size", LIBS);
  gidLink(cast(void**)&gtk_toolbar_unset_style, "gtk_toolbar_unset_style", LIBS);

  // Tooltip
  gidLink(cast(void**)&gtk_tooltip_get_type, "gtk_tooltip_get_type", LIBS);
  gidLink(cast(void**)&gtk_tooltip_trigger_tooltip_query, "gtk_tooltip_trigger_tooltip_query", LIBS);
  gidLink(cast(void**)&gtk_tooltip_set_custom, "gtk_tooltip_set_custom", LIBS);
  gidLink(cast(void**)&gtk_tooltip_set_icon, "gtk_tooltip_set_icon", LIBS);
  gidLink(cast(void**)&gtk_tooltip_set_icon_from_gicon, "gtk_tooltip_set_icon_from_gicon", LIBS);
  gidLink(cast(void**)&gtk_tooltip_set_icon_from_icon_name, "gtk_tooltip_set_icon_from_icon_name", LIBS);
  gidLink(cast(void**)&gtk_tooltip_set_icon_from_stock, "gtk_tooltip_set_icon_from_stock", LIBS);
  gidLink(cast(void**)&gtk_tooltip_set_markup, "gtk_tooltip_set_markup", LIBS);
  gidLink(cast(void**)&gtk_tooltip_set_text, "gtk_tooltip_set_text", LIBS);
  gidLink(cast(void**)&gtk_tooltip_set_tip_area, "gtk_tooltip_set_tip_area", LIBS);

  // ToplevelAccessible
  gidLink(cast(void**)&gtk_toplevel_accessible_get_type, "gtk_toplevel_accessible_get_type", LIBS);
  gidLink(cast(void**)&gtk_toplevel_accessible_get_children, "gtk_toplevel_accessible_get_children", LIBS);

  // TreeDragDest
  gidLink(cast(void**)&gtk_tree_drag_dest_get_type, "gtk_tree_drag_dest_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_drag_dest_drag_data_received, "gtk_tree_drag_dest_drag_data_received", LIBS);
  gidLink(cast(void**)&gtk_tree_drag_dest_row_drop_possible, "gtk_tree_drag_dest_row_drop_possible", LIBS);

  // TreeDragSource
  gidLink(cast(void**)&gtk_tree_drag_source_get_type, "gtk_tree_drag_source_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_drag_source_drag_data_delete, "gtk_tree_drag_source_drag_data_delete", LIBS);
  gidLink(cast(void**)&gtk_tree_drag_source_drag_data_get, "gtk_tree_drag_source_drag_data_get", LIBS);
  gidLink(cast(void**)&gtk_tree_drag_source_row_draggable, "gtk_tree_drag_source_row_draggable", LIBS);

  // TreeIter
  gidLink(cast(void**)&gtk_tree_iter_get_type, "gtk_tree_iter_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_iter_copy, "gtk_tree_iter_copy", LIBS);
  gidLink(cast(void**)&gtk_tree_iter_free, "gtk_tree_iter_free", LIBS);

  // TreeModel
  gidLink(cast(void**)&gtk_tree_model_get_type, "gtk_tree_model_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_new, "gtk_tree_model_filter_new", LIBS);
  gidLink(cast(void**)&gtk_tree_model_foreach, "gtk_tree_model_foreach", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get, "gtk_tree_model_get", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get_column_type, "gtk_tree_model_get_column_type", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get_flags, "gtk_tree_model_get_flags", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get_iter, "gtk_tree_model_get_iter", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get_iter_first, "gtk_tree_model_get_iter_first", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get_iter_from_string, "gtk_tree_model_get_iter_from_string", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get_n_columns, "gtk_tree_model_get_n_columns", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get_path, "gtk_tree_model_get_path", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get_string_from_iter, "gtk_tree_model_get_string_from_iter", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get_valist, "gtk_tree_model_get_valist", LIBS);
  gidLink(cast(void**)&gtk_tree_model_get_value, "gtk_tree_model_get_value", LIBS);
  gidLink(cast(void**)&gtk_tree_model_iter_children, "gtk_tree_model_iter_children", LIBS);
  gidLink(cast(void**)&gtk_tree_model_iter_has_child, "gtk_tree_model_iter_has_child", LIBS);
  gidLink(cast(void**)&gtk_tree_model_iter_n_children, "gtk_tree_model_iter_n_children", LIBS);
  gidLink(cast(void**)&gtk_tree_model_iter_next, "gtk_tree_model_iter_next", LIBS);
  gidLink(cast(void**)&gtk_tree_model_iter_nth_child, "gtk_tree_model_iter_nth_child", LIBS);
  gidLink(cast(void**)&gtk_tree_model_iter_parent, "gtk_tree_model_iter_parent", LIBS);
  gidLink(cast(void**)&gtk_tree_model_iter_previous, "gtk_tree_model_iter_previous", LIBS);
  gidLink(cast(void**)&gtk_tree_model_ref_node, "gtk_tree_model_ref_node", LIBS);
  gidLink(cast(void**)&gtk_tree_model_row_changed, "gtk_tree_model_row_changed", LIBS);
  gidLink(cast(void**)&gtk_tree_model_row_deleted, "gtk_tree_model_row_deleted", LIBS);
  gidLink(cast(void**)&gtk_tree_model_row_has_child_toggled, "gtk_tree_model_row_has_child_toggled", LIBS);
  gidLink(cast(void**)&gtk_tree_model_row_inserted, "gtk_tree_model_row_inserted", LIBS);
  gidLink(cast(void**)&gtk_tree_model_rows_reordered, "gtk_tree_model_rows_reordered", LIBS);
  gidLink(cast(void**)&gtk_tree_model_rows_reordered_with_length, "gtk_tree_model_rows_reordered_with_length", LIBS);
  gidLink(cast(void**)&gtk_tree_model_unref_node, "gtk_tree_model_unref_node", LIBS);

  // TreeModelFilter
  gidLink(cast(void**)&gtk_tree_model_filter_get_type, "gtk_tree_model_filter_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_clear_cache, "gtk_tree_model_filter_clear_cache", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_convert_child_iter_to_iter, "gtk_tree_model_filter_convert_child_iter_to_iter", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_convert_child_path_to_path, "gtk_tree_model_filter_convert_child_path_to_path", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_convert_iter_to_child_iter, "gtk_tree_model_filter_convert_iter_to_child_iter", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_convert_path_to_child_path, "gtk_tree_model_filter_convert_path_to_child_path", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_get_model, "gtk_tree_model_filter_get_model", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_refilter, "gtk_tree_model_filter_refilter", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_set_modify_func, "gtk_tree_model_filter_set_modify_func", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_set_visible_column, "gtk_tree_model_filter_set_visible_column", LIBS);
  gidLink(cast(void**)&gtk_tree_model_filter_set_visible_func, "gtk_tree_model_filter_set_visible_func", LIBS);

  // TreeModelSort
  gidLink(cast(void**)&gtk_tree_model_sort_get_type, "gtk_tree_model_sort_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_model_sort_new_with_model, "gtk_tree_model_sort_new_with_model", LIBS);
  gidLink(cast(void**)&gtk_tree_model_sort_clear_cache, "gtk_tree_model_sort_clear_cache", LIBS);
  gidLink(cast(void**)&gtk_tree_model_sort_convert_child_iter_to_iter, "gtk_tree_model_sort_convert_child_iter_to_iter", LIBS);
  gidLink(cast(void**)&gtk_tree_model_sort_convert_child_path_to_path, "gtk_tree_model_sort_convert_child_path_to_path", LIBS);
  gidLink(cast(void**)&gtk_tree_model_sort_convert_iter_to_child_iter, "gtk_tree_model_sort_convert_iter_to_child_iter", LIBS);
  gidLink(cast(void**)&gtk_tree_model_sort_convert_path_to_child_path, "gtk_tree_model_sort_convert_path_to_child_path", LIBS);
  gidLink(cast(void**)&gtk_tree_model_sort_get_model, "gtk_tree_model_sort_get_model", LIBS);
  gidLink(cast(void**)&gtk_tree_model_sort_iter_is_valid, "gtk_tree_model_sort_iter_is_valid", LIBS);
  gidLink(cast(void**)&gtk_tree_model_sort_reset_default_sort_func, "gtk_tree_model_sort_reset_default_sort_func", LIBS);

  // TreePath
  gidLink(cast(void**)&gtk_tree_path_get_type, "gtk_tree_path_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_path_new, "gtk_tree_path_new", LIBS);
  gidLink(cast(void**)&gtk_tree_path_new_first, "gtk_tree_path_new_first", LIBS);
  gidLink(cast(void**)&gtk_tree_path_new_from_indices, "gtk_tree_path_new_from_indices", LIBS);
  gidLink(cast(void**)&gtk_tree_path_new_from_indicesv, "gtk_tree_path_new_from_indicesv", LIBS);
  gidLink(cast(void**)&gtk_tree_path_new_from_string, "gtk_tree_path_new_from_string", LIBS);
  gidLink(cast(void**)&gtk_tree_path_append_index, "gtk_tree_path_append_index", LIBS);
  gidLink(cast(void**)&gtk_tree_path_compare, "gtk_tree_path_compare", LIBS);
  gidLink(cast(void**)&gtk_tree_path_copy, "gtk_tree_path_copy", LIBS);
  gidLink(cast(void**)&gtk_tree_path_down, "gtk_tree_path_down", LIBS);
  gidLink(cast(void**)&gtk_tree_path_free, "gtk_tree_path_free", LIBS);
  gidLink(cast(void**)&gtk_tree_path_get_depth, "gtk_tree_path_get_depth", LIBS);
  gidLink(cast(void**)&gtk_tree_path_get_indices, "gtk_tree_path_get_indices", LIBS);
  gidLink(cast(void**)&gtk_tree_path_get_indices_with_depth, "gtk_tree_path_get_indices_with_depth", LIBS);
  gidLink(cast(void**)&gtk_tree_path_is_ancestor, "gtk_tree_path_is_ancestor", LIBS);
  gidLink(cast(void**)&gtk_tree_path_is_descendant, "gtk_tree_path_is_descendant", LIBS);
  gidLink(cast(void**)&gtk_tree_path_next, "gtk_tree_path_next", LIBS);
  gidLink(cast(void**)&gtk_tree_path_prepend_index, "gtk_tree_path_prepend_index", LIBS);
  gidLink(cast(void**)&gtk_tree_path_prev, "gtk_tree_path_prev", LIBS);
  gidLink(cast(void**)&gtk_tree_path_to_string, "gtk_tree_path_to_string", LIBS);
  gidLink(cast(void**)&gtk_tree_path_up, "gtk_tree_path_up", LIBS);

  // TreeRowReference
  gidLink(cast(void**)&gtk_tree_row_reference_get_type, "gtk_tree_row_reference_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_row_reference_new, "gtk_tree_row_reference_new", LIBS);
  gidLink(cast(void**)&gtk_tree_row_reference_new_proxy, "gtk_tree_row_reference_new_proxy", LIBS);
  gidLink(cast(void**)&gtk_tree_row_reference_copy, "gtk_tree_row_reference_copy", LIBS);
  gidLink(cast(void**)&gtk_tree_row_reference_free, "gtk_tree_row_reference_free", LIBS);
  gidLink(cast(void**)&gtk_tree_row_reference_get_model, "gtk_tree_row_reference_get_model", LIBS);
  gidLink(cast(void**)&gtk_tree_row_reference_get_path, "gtk_tree_row_reference_get_path", LIBS);
  gidLink(cast(void**)&gtk_tree_row_reference_valid, "gtk_tree_row_reference_valid", LIBS);
  gidLink(cast(void**)&gtk_tree_row_reference_deleted, "gtk_tree_row_reference_deleted", LIBS);
  gidLink(cast(void**)&gtk_tree_row_reference_inserted, "gtk_tree_row_reference_inserted", LIBS);
  gidLink(cast(void**)&gtk_tree_row_reference_reordered, "gtk_tree_row_reference_reordered", LIBS);

  // TreeSelection
  gidLink(cast(void**)&gtk_tree_selection_get_type, "gtk_tree_selection_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_count_selected_rows, "gtk_tree_selection_count_selected_rows", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_get_mode, "gtk_tree_selection_get_mode", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_get_select_function, "gtk_tree_selection_get_select_function", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_get_selected, "gtk_tree_selection_get_selected", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_get_selected_rows, "gtk_tree_selection_get_selected_rows", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_get_tree_view, "gtk_tree_selection_get_tree_view", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_get_user_data, "gtk_tree_selection_get_user_data", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_iter_is_selected, "gtk_tree_selection_iter_is_selected", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_path_is_selected, "gtk_tree_selection_path_is_selected", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_select_all, "gtk_tree_selection_select_all", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_select_iter, "gtk_tree_selection_select_iter", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_select_path, "gtk_tree_selection_select_path", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_select_range, "gtk_tree_selection_select_range", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_selected_foreach, "gtk_tree_selection_selected_foreach", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_set_mode, "gtk_tree_selection_set_mode", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_set_select_function, "gtk_tree_selection_set_select_function", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_unselect_all, "gtk_tree_selection_unselect_all", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_unselect_iter, "gtk_tree_selection_unselect_iter", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_unselect_path, "gtk_tree_selection_unselect_path", LIBS);
  gidLink(cast(void**)&gtk_tree_selection_unselect_range, "gtk_tree_selection_unselect_range", LIBS);

  // TreeSortable
  gidLink(cast(void**)&gtk_tree_sortable_get_type, "gtk_tree_sortable_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_sortable_get_sort_column_id, "gtk_tree_sortable_get_sort_column_id", LIBS);
  gidLink(cast(void**)&gtk_tree_sortable_has_default_sort_func, "gtk_tree_sortable_has_default_sort_func", LIBS);
  gidLink(cast(void**)&gtk_tree_sortable_set_default_sort_func, "gtk_tree_sortable_set_default_sort_func", LIBS);
  gidLink(cast(void**)&gtk_tree_sortable_set_sort_column_id, "gtk_tree_sortable_set_sort_column_id", LIBS);
  gidLink(cast(void**)&gtk_tree_sortable_set_sort_func, "gtk_tree_sortable_set_sort_func", LIBS);
  gidLink(cast(void**)&gtk_tree_sortable_sort_column_changed, "gtk_tree_sortable_sort_column_changed", LIBS);

  // TreeStore
  gidLink(cast(void**)&gtk_tree_store_get_type, "gtk_tree_store_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_store_new, "gtk_tree_store_new", LIBS);
  gidLink(cast(void**)&gtk_tree_store_newv, "gtk_tree_store_newv", LIBS);
  gidLink(cast(void**)&gtk_tree_store_append, "gtk_tree_store_append", LIBS);
  gidLink(cast(void**)&gtk_tree_store_clear, "gtk_tree_store_clear", LIBS);
  gidLink(cast(void**)&gtk_tree_store_insert, "gtk_tree_store_insert", LIBS);
  gidLink(cast(void**)&gtk_tree_store_insert_after, "gtk_tree_store_insert_after", LIBS);
  gidLink(cast(void**)&gtk_tree_store_insert_before, "gtk_tree_store_insert_before", LIBS);
  gidLink(cast(void**)&gtk_tree_store_insert_with_values, "gtk_tree_store_insert_with_values", LIBS);
  gidLink(cast(void**)&gtk_tree_store_insert_with_valuesv, "gtk_tree_store_insert_with_valuesv", LIBS);
  gidLink(cast(void**)&gtk_tree_store_is_ancestor, "gtk_tree_store_is_ancestor", LIBS);
  gidLink(cast(void**)&gtk_tree_store_iter_depth, "gtk_tree_store_iter_depth", LIBS);
  gidLink(cast(void**)&gtk_tree_store_iter_is_valid, "gtk_tree_store_iter_is_valid", LIBS);
  gidLink(cast(void**)&gtk_tree_store_move_after, "gtk_tree_store_move_after", LIBS);
  gidLink(cast(void**)&gtk_tree_store_move_before, "gtk_tree_store_move_before", LIBS);
  gidLink(cast(void**)&gtk_tree_store_prepend, "gtk_tree_store_prepend", LIBS);
  gidLink(cast(void**)&gtk_tree_store_remove, "gtk_tree_store_remove", LIBS);
  gidLink(cast(void**)&gtk_tree_store_reorder, "gtk_tree_store_reorder", LIBS);
  gidLink(cast(void**)&gtk_tree_store_set, "gtk_tree_store_set", LIBS);
  gidLink(cast(void**)&gtk_tree_store_set_column_types, "gtk_tree_store_set_column_types", LIBS);
  gidLink(cast(void**)&gtk_tree_store_set_valist, "gtk_tree_store_set_valist", LIBS);
  gidLink(cast(void**)&gtk_tree_store_set_value, "gtk_tree_store_set_value", LIBS);
  gidLink(cast(void**)&gtk_tree_store_set_valuesv, "gtk_tree_store_set_valuesv", LIBS);
  gidLink(cast(void**)&gtk_tree_store_swap, "gtk_tree_store_swap", LIBS);

  // TreeView
  gidLink(cast(void**)&gtk_tree_view_get_type, "gtk_tree_view_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_view_new, "gtk_tree_view_new", LIBS);
  gidLink(cast(void**)&gtk_tree_view_new_with_model, "gtk_tree_view_new_with_model", LIBS);
  gidLink(cast(void**)&gtk_tree_view_append_column, "gtk_tree_view_append_column", LIBS);
  gidLink(cast(void**)&gtk_tree_view_collapse_all, "gtk_tree_view_collapse_all", LIBS);
  gidLink(cast(void**)&gtk_tree_view_collapse_row, "gtk_tree_view_collapse_row", LIBS);
  gidLink(cast(void**)&gtk_tree_view_columns_autosize, "gtk_tree_view_columns_autosize", LIBS);
  gidLink(cast(void**)&gtk_tree_view_convert_bin_window_to_tree_coords, "gtk_tree_view_convert_bin_window_to_tree_coords", LIBS);
  gidLink(cast(void**)&gtk_tree_view_convert_bin_window_to_widget_coords, "gtk_tree_view_convert_bin_window_to_widget_coords", LIBS);
  gidLink(cast(void**)&gtk_tree_view_convert_tree_to_bin_window_coords, "gtk_tree_view_convert_tree_to_bin_window_coords", LIBS);
  gidLink(cast(void**)&gtk_tree_view_convert_tree_to_widget_coords, "gtk_tree_view_convert_tree_to_widget_coords", LIBS);
  gidLink(cast(void**)&gtk_tree_view_convert_widget_to_bin_window_coords, "gtk_tree_view_convert_widget_to_bin_window_coords", LIBS);
  gidLink(cast(void**)&gtk_tree_view_convert_widget_to_tree_coords, "gtk_tree_view_convert_widget_to_tree_coords", LIBS);
  gidLink(cast(void**)&gtk_tree_view_create_row_drag_icon, "gtk_tree_view_create_row_drag_icon", LIBS);
  gidLink(cast(void**)&gtk_tree_view_enable_model_drag_dest, "gtk_tree_view_enable_model_drag_dest", LIBS);
  gidLink(cast(void**)&gtk_tree_view_enable_model_drag_source, "gtk_tree_view_enable_model_drag_source", LIBS);
  gidLink(cast(void**)&gtk_tree_view_expand_all, "gtk_tree_view_expand_all", LIBS);
  gidLink(cast(void**)&gtk_tree_view_expand_row, "gtk_tree_view_expand_row", LIBS);
  gidLink(cast(void**)&gtk_tree_view_expand_to_path, "gtk_tree_view_expand_to_path", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_activate_on_single_click, "gtk_tree_view_get_activate_on_single_click", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_background_area, "gtk_tree_view_get_background_area", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_bin_window, "gtk_tree_view_get_bin_window", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_cell_area, "gtk_tree_view_get_cell_area", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_column, "gtk_tree_view_get_column", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_columns, "gtk_tree_view_get_columns", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_cursor, "gtk_tree_view_get_cursor", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_dest_row_at_pos, "gtk_tree_view_get_dest_row_at_pos", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_drag_dest_row, "gtk_tree_view_get_drag_dest_row", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_enable_search, "gtk_tree_view_get_enable_search", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_enable_tree_lines, "gtk_tree_view_get_enable_tree_lines", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_expander_column, "gtk_tree_view_get_expander_column", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_fixed_height_mode, "gtk_tree_view_get_fixed_height_mode", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_grid_lines, "gtk_tree_view_get_grid_lines", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_hadjustment, "gtk_tree_view_get_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_headers_clickable, "gtk_tree_view_get_headers_clickable", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_headers_visible, "gtk_tree_view_get_headers_visible", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_hover_expand, "gtk_tree_view_get_hover_expand", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_hover_selection, "gtk_tree_view_get_hover_selection", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_level_indentation, "gtk_tree_view_get_level_indentation", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_model, "gtk_tree_view_get_model", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_n_columns, "gtk_tree_view_get_n_columns", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_path_at_pos, "gtk_tree_view_get_path_at_pos", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_reorderable, "gtk_tree_view_get_reorderable", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_row_separator_func, "gtk_tree_view_get_row_separator_func", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_rubber_banding, "gtk_tree_view_get_rubber_banding", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_rules_hint, "gtk_tree_view_get_rules_hint", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_search_column, "gtk_tree_view_get_search_column", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_search_entry, "gtk_tree_view_get_search_entry", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_search_equal_func, "gtk_tree_view_get_search_equal_func", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_search_position_func, "gtk_tree_view_get_search_position_func", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_selection, "gtk_tree_view_get_selection", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_show_expanders, "gtk_tree_view_get_show_expanders", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_tooltip_column, "gtk_tree_view_get_tooltip_column", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_tooltip_context, "gtk_tree_view_get_tooltip_context", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_vadjustment, "gtk_tree_view_get_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_visible_range, "gtk_tree_view_get_visible_range", LIBS);
  gidLink(cast(void**)&gtk_tree_view_get_visible_rect, "gtk_tree_view_get_visible_rect", LIBS);
  gidLink(cast(void**)&gtk_tree_view_insert_column, "gtk_tree_view_insert_column", LIBS);
  gidLink(cast(void**)&gtk_tree_view_insert_column_with_attributes, "gtk_tree_view_insert_column_with_attributes", LIBS);
  gidLink(cast(void**)&gtk_tree_view_insert_column_with_data_func, "gtk_tree_view_insert_column_with_data_func", LIBS);
  gidLink(cast(void**)&gtk_tree_view_is_blank_at_pos, "gtk_tree_view_is_blank_at_pos", LIBS);
  gidLink(cast(void**)&gtk_tree_view_is_rubber_banding_active, "gtk_tree_view_is_rubber_banding_active", LIBS);
  gidLink(cast(void**)&gtk_tree_view_map_expanded_rows, "gtk_tree_view_map_expanded_rows", LIBS);
  gidLink(cast(void**)&gtk_tree_view_move_column_after, "gtk_tree_view_move_column_after", LIBS);
  gidLink(cast(void**)&gtk_tree_view_remove_column, "gtk_tree_view_remove_column", LIBS);
  gidLink(cast(void**)&gtk_tree_view_row_activated, "gtk_tree_view_row_activated", LIBS);
  gidLink(cast(void**)&gtk_tree_view_row_expanded, "gtk_tree_view_row_expanded", LIBS);
  gidLink(cast(void**)&gtk_tree_view_scroll_to_cell, "gtk_tree_view_scroll_to_cell", LIBS);
  gidLink(cast(void**)&gtk_tree_view_scroll_to_point, "gtk_tree_view_scroll_to_point", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_activate_on_single_click, "gtk_tree_view_set_activate_on_single_click", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_column_drag_function, "gtk_tree_view_set_column_drag_function", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_cursor, "gtk_tree_view_set_cursor", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_cursor_on_cell, "gtk_tree_view_set_cursor_on_cell", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_destroy_count_func, "gtk_tree_view_set_destroy_count_func", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_drag_dest_row, "gtk_tree_view_set_drag_dest_row", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_enable_search, "gtk_tree_view_set_enable_search", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_enable_tree_lines, "gtk_tree_view_set_enable_tree_lines", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_expander_column, "gtk_tree_view_set_expander_column", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_fixed_height_mode, "gtk_tree_view_set_fixed_height_mode", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_grid_lines, "gtk_tree_view_set_grid_lines", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_hadjustment, "gtk_tree_view_set_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_headers_clickable, "gtk_tree_view_set_headers_clickable", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_headers_visible, "gtk_tree_view_set_headers_visible", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_hover_expand, "gtk_tree_view_set_hover_expand", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_hover_selection, "gtk_tree_view_set_hover_selection", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_level_indentation, "gtk_tree_view_set_level_indentation", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_model, "gtk_tree_view_set_model", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_reorderable, "gtk_tree_view_set_reorderable", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_row_separator_func, "gtk_tree_view_set_row_separator_func", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_rubber_banding, "gtk_tree_view_set_rubber_banding", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_rules_hint, "gtk_tree_view_set_rules_hint", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_search_column, "gtk_tree_view_set_search_column", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_search_entry, "gtk_tree_view_set_search_entry", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_search_equal_func, "gtk_tree_view_set_search_equal_func", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_search_position_func, "gtk_tree_view_set_search_position_func", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_show_expanders, "gtk_tree_view_set_show_expanders", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_tooltip_cell, "gtk_tree_view_set_tooltip_cell", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_tooltip_column, "gtk_tree_view_set_tooltip_column", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_tooltip_row, "gtk_tree_view_set_tooltip_row", LIBS);
  gidLink(cast(void**)&gtk_tree_view_set_vadjustment, "gtk_tree_view_set_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_tree_view_unset_rows_drag_dest, "gtk_tree_view_unset_rows_drag_dest", LIBS);
  gidLink(cast(void**)&gtk_tree_view_unset_rows_drag_source, "gtk_tree_view_unset_rows_drag_source", LIBS);

  // TreeViewAccessible
  gidLink(cast(void**)&gtk_tree_view_accessible_get_type, "gtk_tree_view_accessible_get_type", LIBS);

  // TreeViewColumn
  gidLink(cast(void**)&gtk_tree_view_column_get_type, "gtk_tree_view_column_get_type", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_new, "gtk_tree_view_column_new", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_new_with_area, "gtk_tree_view_column_new_with_area", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_new_with_attributes, "gtk_tree_view_column_new_with_attributes", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_add_attribute, "gtk_tree_view_column_add_attribute", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_cell_get_position, "gtk_tree_view_column_cell_get_position", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_cell_get_size, "gtk_tree_view_column_cell_get_size", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_cell_is_visible, "gtk_tree_view_column_cell_is_visible", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_cell_set_cell_data, "gtk_tree_view_column_cell_set_cell_data", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_clear, "gtk_tree_view_column_clear", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_clear_attributes, "gtk_tree_view_column_clear_attributes", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_clicked, "gtk_tree_view_column_clicked", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_focus_cell, "gtk_tree_view_column_focus_cell", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_alignment, "gtk_tree_view_column_get_alignment", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_button, "gtk_tree_view_column_get_button", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_clickable, "gtk_tree_view_column_get_clickable", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_expand, "gtk_tree_view_column_get_expand", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_fixed_width, "gtk_tree_view_column_get_fixed_width", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_max_width, "gtk_tree_view_column_get_max_width", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_min_width, "gtk_tree_view_column_get_min_width", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_reorderable, "gtk_tree_view_column_get_reorderable", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_resizable, "gtk_tree_view_column_get_resizable", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_sizing, "gtk_tree_view_column_get_sizing", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_sort_column_id, "gtk_tree_view_column_get_sort_column_id", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_sort_indicator, "gtk_tree_view_column_get_sort_indicator", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_sort_order, "gtk_tree_view_column_get_sort_order", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_spacing, "gtk_tree_view_column_get_spacing", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_title, "gtk_tree_view_column_get_title", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_tree_view, "gtk_tree_view_column_get_tree_view", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_visible, "gtk_tree_view_column_get_visible", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_widget, "gtk_tree_view_column_get_widget", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_width, "gtk_tree_view_column_get_width", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_get_x_offset, "gtk_tree_view_column_get_x_offset", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_pack_end, "gtk_tree_view_column_pack_end", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_pack_start, "gtk_tree_view_column_pack_start", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_queue_resize, "gtk_tree_view_column_queue_resize", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_alignment, "gtk_tree_view_column_set_alignment", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_attributes, "gtk_tree_view_column_set_attributes", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_cell_data_func, "gtk_tree_view_column_set_cell_data_func", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_clickable, "gtk_tree_view_column_set_clickable", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_expand, "gtk_tree_view_column_set_expand", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_fixed_width, "gtk_tree_view_column_set_fixed_width", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_max_width, "gtk_tree_view_column_set_max_width", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_min_width, "gtk_tree_view_column_set_min_width", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_reorderable, "gtk_tree_view_column_set_reorderable", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_resizable, "gtk_tree_view_column_set_resizable", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_sizing, "gtk_tree_view_column_set_sizing", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_sort_column_id, "gtk_tree_view_column_set_sort_column_id", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_sort_indicator, "gtk_tree_view_column_set_sort_indicator", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_sort_order, "gtk_tree_view_column_set_sort_order", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_spacing, "gtk_tree_view_column_set_spacing", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_title, "gtk_tree_view_column_set_title", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_visible, "gtk_tree_view_column_set_visible", LIBS);
  gidLink(cast(void**)&gtk_tree_view_column_set_widget, "gtk_tree_view_column_set_widget", LIBS);

  // UIManager
  gidLink(cast(void**)&gtk_ui_manager_get_type, "gtk_ui_manager_get_type", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_new, "gtk_ui_manager_new", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_add_ui, "gtk_ui_manager_add_ui", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_add_ui_from_file, "gtk_ui_manager_add_ui_from_file", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_add_ui_from_resource, "gtk_ui_manager_add_ui_from_resource", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_add_ui_from_string, "gtk_ui_manager_add_ui_from_string", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_ensure_update, "gtk_ui_manager_ensure_update", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_get_accel_group, "gtk_ui_manager_get_accel_group", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_get_action, "gtk_ui_manager_get_action", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_get_action_groups, "gtk_ui_manager_get_action_groups", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_get_add_tearoffs, "gtk_ui_manager_get_add_tearoffs", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_get_toplevels, "gtk_ui_manager_get_toplevels", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_get_ui, "gtk_ui_manager_get_ui", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_get_widget, "gtk_ui_manager_get_widget", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_insert_action_group, "gtk_ui_manager_insert_action_group", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_new_merge_id, "gtk_ui_manager_new_merge_id", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_remove_action_group, "gtk_ui_manager_remove_action_group", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_remove_ui, "gtk_ui_manager_remove_ui", LIBS);
  gidLink(cast(void**)&gtk_ui_manager_set_add_tearoffs, "gtk_ui_manager_set_add_tearoffs", LIBS);

  // VBox
  gidLink(cast(void**)&gtk_vbox_get_type, "gtk_vbox_get_type", LIBS);
  gidLink(cast(void**)&gtk_vbox_new, "gtk_vbox_new", LIBS);

  // VButtonBox
  gidLink(cast(void**)&gtk_vbutton_box_get_type, "gtk_vbutton_box_get_type", LIBS);
  gidLink(cast(void**)&gtk_vbutton_box_new, "gtk_vbutton_box_new", LIBS);

  // VPaned
  gidLink(cast(void**)&gtk_vpaned_get_type, "gtk_vpaned_get_type", LIBS);
  gidLink(cast(void**)&gtk_vpaned_new, "gtk_vpaned_new", LIBS);

  // VScale
  gidLink(cast(void**)&gtk_vscale_get_type, "gtk_vscale_get_type", LIBS);
  gidLink(cast(void**)&gtk_vscale_new, "gtk_vscale_new", LIBS);
  gidLink(cast(void**)&gtk_vscale_new_with_range, "gtk_vscale_new_with_range", LIBS);

  // VScrollbar
  gidLink(cast(void**)&gtk_vscrollbar_get_type, "gtk_vscrollbar_get_type", LIBS);
  gidLink(cast(void**)&gtk_vscrollbar_new, "gtk_vscrollbar_new", LIBS);

  // VSeparator
  gidLink(cast(void**)&gtk_vseparator_get_type, "gtk_vseparator_get_type", LIBS);
  gidLink(cast(void**)&gtk_vseparator_new, "gtk_vseparator_new", LIBS);

  // Viewport
  gidLink(cast(void**)&gtk_viewport_get_type, "gtk_viewport_get_type", LIBS);
  gidLink(cast(void**)&gtk_viewport_new, "gtk_viewport_new", LIBS);
  gidLink(cast(void**)&gtk_viewport_get_bin_window, "gtk_viewport_get_bin_window", LIBS);
  gidLink(cast(void**)&gtk_viewport_get_hadjustment, "gtk_viewport_get_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_viewport_get_shadow_type, "gtk_viewport_get_shadow_type", LIBS);
  gidLink(cast(void**)&gtk_viewport_get_vadjustment, "gtk_viewport_get_vadjustment", LIBS);
  gidLink(cast(void**)&gtk_viewport_get_view_window, "gtk_viewport_get_view_window", LIBS);
  gidLink(cast(void**)&gtk_viewport_set_hadjustment, "gtk_viewport_set_hadjustment", LIBS);
  gidLink(cast(void**)&gtk_viewport_set_shadow_type, "gtk_viewport_set_shadow_type", LIBS);
  gidLink(cast(void**)&gtk_viewport_set_vadjustment, "gtk_viewport_set_vadjustment", LIBS);

  // VolumeButton
  gidLink(cast(void**)&gtk_volume_button_get_type, "gtk_volume_button_get_type", LIBS);
  gidLink(cast(void**)&gtk_volume_button_new, "gtk_volume_button_new", LIBS);

  // Widget
  gidLink(cast(void**)&gtk_widget_get_type, "gtk_widget_get_type", LIBS);
  gidLink(cast(void**)&gtk_widget_new, "gtk_widget_new", LIBS);
  gidLink(cast(void**)&gtk_widget_get_default_direction, "gtk_widget_get_default_direction", LIBS);
  gidLink(cast(void**)&gtk_widget_get_default_style, "gtk_widget_get_default_style", LIBS);
  gidLink(cast(void**)&gtk_widget_pop_composite_child, "gtk_widget_pop_composite_child", LIBS);
  gidLink(cast(void**)&gtk_widget_push_composite_child, "gtk_widget_push_composite_child", LIBS);
  gidLink(cast(void**)&gtk_widget_set_default_direction, "gtk_widget_set_default_direction", LIBS);
  gidLink(cast(void**)&gtk_widget_activate, "gtk_widget_activate", LIBS);
  gidLink(cast(void**)&gtk_widget_add_accelerator, "gtk_widget_add_accelerator", LIBS);
  gidLink(cast(void**)&gtk_widget_add_device_events, "gtk_widget_add_device_events", LIBS);
  gidLink(cast(void**)&gtk_widget_add_events, "gtk_widget_add_events", LIBS);
  gidLink(cast(void**)&gtk_widget_add_mnemonic_label, "gtk_widget_add_mnemonic_label", LIBS);
  gidLink(cast(void**)&gtk_widget_add_tick_callback, "gtk_widget_add_tick_callback", LIBS);
  gidLink(cast(void**)&gtk_widget_can_activate_accel, "gtk_widget_can_activate_accel", LIBS);
  gidLink(cast(void**)&gtk_widget_child_focus, "gtk_widget_child_focus", LIBS);
  gidLink(cast(void**)&gtk_widget_child_notify, "gtk_widget_child_notify", LIBS);
  gidLink(cast(void**)&gtk_widget_class_path, "gtk_widget_class_path", LIBS);
  gidLink(cast(void**)&gtk_widget_compute_expand, "gtk_widget_compute_expand", LIBS);
  gidLink(cast(void**)&gtk_widget_create_pango_context, "gtk_widget_create_pango_context", LIBS);
  gidLink(cast(void**)&gtk_widget_create_pango_layout, "gtk_widget_create_pango_layout", LIBS);
  gidLink(cast(void**)&gtk_widget_destroy, "gtk_widget_destroy", LIBS);
  gidLink(cast(void**)&gtk_widget_destroyed, "gtk_widget_destroyed", LIBS);
  gidLink(cast(void**)&gtk_widget_device_is_shadowed, "gtk_widget_device_is_shadowed", LIBS);
  gidLink(cast(void**)&gtk_drag_begin, "gtk_drag_begin", LIBS);
  gidLink(cast(void**)&gtk_drag_begin_with_coordinates, "gtk_drag_begin_with_coordinates", LIBS);
  gidLink(cast(void**)&gtk_drag_check_threshold, "gtk_drag_check_threshold", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_add_image_targets, "gtk_drag_dest_add_image_targets", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_add_text_targets, "gtk_drag_dest_add_text_targets", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_add_uri_targets, "gtk_drag_dest_add_uri_targets", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_find_target, "gtk_drag_dest_find_target", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_get_target_list, "gtk_drag_dest_get_target_list", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_get_track_motion, "gtk_drag_dest_get_track_motion", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_set, "gtk_drag_dest_set", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_set_proxy, "gtk_drag_dest_set_proxy", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_set_target_list, "gtk_drag_dest_set_target_list", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_set_track_motion, "gtk_drag_dest_set_track_motion", LIBS);
  gidLink(cast(void**)&gtk_drag_dest_unset, "gtk_drag_dest_unset", LIBS);
  gidLink(cast(void**)&gtk_drag_get_data, "gtk_drag_get_data", LIBS);
  gidLink(cast(void**)&gtk_drag_highlight, "gtk_drag_highlight", LIBS);
  gidLink(cast(void**)&gtk_drag_source_add_image_targets, "gtk_drag_source_add_image_targets", LIBS);
  gidLink(cast(void**)&gtk_drag_source_add_text_targets, "gtk_drag_source_add_text_targets", LIBS);
  gidLink(cast(void**)&gtk_drag_source_add_uri_targets, "gtk_drag_source_add_uri_targets", LIBS);
  gidLink(cast(void**)&gtk_drag_source_get_target_list, "gtk_drag_source_get_target_list", LIBS);
  gidLink(cast(void**)&gtk_drag_source_set, "gtk_drag_source_set", LIBS);
  gidLink(cast(void**)&gtk_drag_source_set_icon_gicon, "gtk_drag_source_set_icon_gicon", LIBS);
  gidLink(cast(void**)&gtk_drag_source_set_icon_name, "gtk_drag_source_set_icon_name", LIBS);
  gidLink(cast(void**)&gtk_drag_source_set_icon_pixbuf, "gtk_drag_source_set_icon_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_drag_source_set_icon_stock, "gtk_drag_source_set_icon_stock", LIBS);
  gidLink(cast(void**)&gtk_drag_source_set_target_list, "gtk_drag_source_set_target_list", LIBS);
  gidLink(cast(void**)&gtk_drag_source_unset, "gtk_drag_source_unset", LIBS);
  gidLink(cast(void**)&gtk_drag_unhighlight, "gtk_drag_unhighlight", LIBS);
  gidLink(cast(void**)&gtk_widget_draw, "gtk_widget_draw", LIBS);
  gidLink(cast(void**)&gtk_widget_ensure_style, "gtk_widget_ensure_style", LIBS);
  gidLink(cast(void**)&gtk_widget_error_bell, "gtk_widget_error_bell", LIBS);
  gidLink(cast(void**)&gtk_widget_event, "gtk_widget_event", LIBS);
  gidLink(cast(void**)&gtk_widget_freeze_child_notify, "gtk_widget_freeze_child_notify", LIBS);
  gidLink(cast(void**)&gtk_widget_get_accessible, "gtk_widget_get_accessible", LIBS);
  gidLink(cast(void**)&gtk_widget_get_action_group, "gtk_widget_get_action_group", LIBS);
  gidLink(cast(void**)&gtk_widget_get_allocated_baseline, "gtk_widget_get_allocated_baseline", LIBS);
  gidLink(cast(void**)&gtk_widget_get_allocated_height, "gtk_widget_get_allocated_height", LIBS);
  gidLink(cast(void**)&gtk_widget_get_allocated_size, "gtk_widget_get_allocated_size", LIBS);
  gidLink(cast(void**)&gtk_widget_get_allocated_width, "gtk_widget_get_allocated_width", LIBS);
  gidLink(cast(void**)&gtk_widget_get_allocation, "gtk_widget_get_allocation", LIBS);
  gidLink(cast(void**)&gtk_widget_get_ancestor, "gtk_widget_get_ancestor", LIBS);
  gidLink(cast(void**)&gtk_widget_get_app_paintable, "gtk_widget_get_app_paintable", LIBS);
  gidLink(cast(void**)&gtk_widget_get_can_default, "gtk_widget_get_can_default", LIBS);
  gidLink(cast(void**)&gtk_widget_get_can_focus, "gtk_widget_get_can_focus", LIBS);
  gidLink(cast(void**)&gtk_widget_get_child_requisition, "gtk_widget_get_child_requisition", LIBS);
  gidLink(cast(void**)&gtk_widget_get_child_visible, "gtk_widget_get_child_visible", LIBS);
  gidLink(cast(void**)&gtk_widget_get_clip, "gtk_widget_get_clip", LIBS);
  gidLink(cast(void**)&gtk_widget_get_clipboard, "gtk_widget_get_clipboard", LIBS);
  gidLink(cast(void**)&gtk_widget_get_composite_name, "gtk_widget_get_composite_name", LIBS);
  gidLink(cast(void**)&gtk_widget_get_device_enabled, "gtk_widget_get_device_enabled", LIBS);
  gidLink(cast(void**)&gtk_widget_get_device_events, "gtk_widget_get_device_events", LIBS);
  gidLink(cast(void**)&gtk_widget_get_direction, "gtk_widget_get_direction", LIBS);
  gidLink(cast(void**)&gtk_widget_get_display, "gtk_widget_get_display", LIBS);
  gidLink(cast(void**)&gtk_widget_get_double_buffered, "gtk_widget_get_double_buffered", LIBS);
  gidLink(cast(void**)&gtk_widget_get_events, "gtk_widget_get_events", LIBS);
  gidLink(cast(void**)&gtk_widget_get_focus_on_click, "gtk_widget_get_focus_on_click", LIBS);
  gidLink(cast(void**)&gtk_widget_get_font_map, "gtk_widget_get_font_map", LIBS);
  gidLink(cast(void**)&gtk_widget_get_font_options, "gtk_widget_get_font_options", LIBS);
  gidLink(cast(void**)&gtk_widget_get_frame_clock, "gtk_widget_get_frame_clock", LIBS);
  gidLink(cast(void**)&gtk_widget_get_halign, "gtk_widget_get_halign", LIBS);
  gidLink(cast(void**)&gtk_widget_get_has_tooltip, "gtk_widget_get_has_tooltip", LIBS);
  gidLink(cast(void**)&gtk_widget_get_has_window, "gtk_widget_get_has_window", LIBS);
  gidLink(cast(void**)&gtk_widget_get_hexpand, "gtk_widget_get_hexpand", LIBS);
  gidLink(cast(void**)&gtk_widget_get_hexpand_set, "gtk_widget_get_hexpand_set", LIBS);
  gidLink(cast(void**)&gtk_widget_get_mapped, "gtk_widget_get_mapped", LIBS);
  gidLink(cast(void**)&gtk_widget_get_margin_bottom, "gtk_widget_get_margin_bottom", LIBS);
  gidLink(cast(void**)&gtk_widget_get_margin_end, "gtk_widget_get_margin_end", LIBS);
  gidLink(cast(void**)&gtk_widget_get_margin_left, "gtk_widget_get_margin_left", LIBS);
  gidLink(cast(void**)&gtk_widget_get_margin_right, "gtk_widget_get_margin_right", LIBS);
  gidLink(cast(void**)&gtk_widget_get_margin_start, "gtk_widget_get_margin_start", LIBS);
  gidLink(cast(void**)&gtk_widget_get_margin_top, "gtk_widget_get_margin_top", LIBS);
  gidLink(cast(void**)&gtk_widget_get_modifier_mask, "gtk_widget_get_modifier_mask", LIBS);
  gidLink(cast(void**)&gtk_widget_get_modifier_style, "gtk_widget_get_modifier_style", LIBS);
  gidLink(cast(void**)&gtk_widget_get_name, "gtk_widget_get_name", LIBS);
  gidLink(cast(void**)&gtk_widget_get_no_show_all, "gtk_widget_get_no_show_all", LIBS);
  gidLink(cast(void**)&gtk_widget_get_opacity, "gtk_widget_get_opacity", LIBS);
  gidLink(cast(void**)&gtk_widget_get_pango_context, "gtk_widget_get_pango_context", LIBS);
  gidLink(cast(void**)&gtk_widget_get_parent, "gtk_widget_get_parent", LIBS);
  gidLink(cast(void**)&gtk_widget_get_parent_window, "gtk_widget_get_parent_window", LIBS);
  gidLink(cast(void**)&gtk_widget_get_path, "gtk_widget_get_path", LIBS);
  gidLink(cast(void**)&gtk_widget_get_pointer, "gtk_widget_get_pointer", LIBS);
  gidLink(cast(void**)&gtk_widget_get_preferred_height, "gtk_widget_get_preferred_height", LIBS);
  gidLink(cast(void**)&gtk_widget_get_preferred_height_and_baseline_for_width, "gtk_widget_get_preferred_height_and_baseline_for_width", LIBS);
  gidLink(cast(void**)&gtk_widget_get_preferred_height_for_width, "gtk_widget_get_preferred_height_for_width", LIBS);
  gidLink(cast(void**)&gtk_widget_get_preferred_size, "gtk_widget_get_preferred_size", LIBS);
  gidLink(cast(void**)&gtk_widget_get_preferred_width, "gtk_widget_get_preferred_width", LIBS);
  gidLink(cast(void**)&gtk_widget_get_preferred_width_for_height, "gtk_widget_get_preferred_width_for_height", LIBS);
  gidLink(cast(void**)&gtk_widget_get_realized, "gtk_widget_get_realized", LIBS);
  gidLink(cast(void**)&gtk_widget_get_receives_default, "gtk_widget_get_receives_default", LIBS);
  gidLink(cast(void**)&gtk_widget_get_request_mode, "gtk_widget_get_request_mode", LIBS);
  gidLink(cast(void**)&gtk_widget_get_requisition, "gtk_widget_get_requisition", LIBS);
  gidLink(cast(void**)&gtk_widget_get_root_window, "gtk_widget_get_root_window", LIBS);
  gidLink(cast(void**)&gtk_widget_get_scale_factor, "gtk_widget_get_scale_factor", LIBS);
  gidLink(cast(void**)&gtk_widget_get_screen, "gtk_widget_get_screen", LIBS);
  gidLink(cast(void**)&gtk_widget_get_sensitive, "gtk_widget_get_sensitive", LIBS);
  gidLink(cast(void**)&gtk_widget_get_settings, "gtk_widget_get_settings", LIBS);
  gidLink(cast(void**)&gtk_widget_get_size_request, "gtk_widget_get_size_request", LIBS);
  gidLink(cast(void**)&gtk_widget_get_state, "gtk_widget_get_state", LIBS);
  gidLink(cast(void**)&gtk_widget_get_state_flags, "gtk_widget_get_state_flags", LIBS);
  gidLink(cast(void**)&gtk_widget_get_style, "gtk_widget_get_style", LIBS);
  gidLink(cast(void**)&gtk_widget_get_style_context, "gtk_widget_get_style_context", LIBS);
  gidLink(cast(void**)&gtk_widget_get_support_multidevice, "gtk_widget_get_support_multidevice", LIBS);
  gidLink(cast(void**)&gtk_widget_get_template_child, "gtk_widget_get_template_child", LIBS);
  gidLink(cast(void**)&gtk_widget_get_tooltip_markup, "gtk_widget_get_tooltip_markup", LIBS);
  gidLink(cast(void**)&gtk_widget_get_tooltip_text, "gtk_widget_get_tooltip_text", LIBS);
  gidLink(cast(void**)&gtk_widget_get_tooltip_window, "gtk_widget_get_tooltip_window", LIBS);
  gidLink(cast(void**)&gtk_widget_get_toplevel, "gtk_widget_get_toplevel", LIBS);
  gidLink(cast(void**)&gtk_widget_get_valign, "gtk_widget_get_valign", LIBS);
  gidLink(cast(void**)&gtk_widget_get_valign_with_baseline, "gtk_widget_get_valign_with_baseline", LIBS);
  gidLink(cast(void**)&gtk_widget_get_vexpand, "gtk_widget_get_vexpand", LIBS);
  gidLink(cast(void**)&gtk_widget_get_vexpand_set, "gtk_widget_get_vexpand_set", LIBS);
  gidLink(cast(void**)&gtk_widget_get_visible, "gtk_widget_get_visible", LIBS);
  gidLink(cast(void**)&gtk_widget_get_visual, "gtk_widget_get_visual", LIBS);
  gidLink(cast(void**)&gtk_widget_get_window, "gtk_widget_get_window", LIBS);
  gidLink(cast(void**)&gtk_grab_add, "gtk_grab_add", LIBS);
  gidLink(cast(void**)&gtk_widget_grab_default, "gtk_widget_grab_default", LIBS);
  gidLink(cast(void**)&gtk_widget_grab_focus, "gtk_widget_grab_focus", LIBS);
  gidLink(cast(void**)&gtk_grab_remove, "gtk_grab_remove", LIBS);
  gidLink(cast(void**)&gtk_widget_has_default, "gtk_widget_has_default", LIBS);
  gidLink(cast(void**)&gtk_widget_has_focus, "gtk_widget_has_focus", LIBS);
  gidLink(cast(void**)&gtk_widget_has_grab, "gtk_widget_has_grab", LIBS);
  gidLink(cast(void**)&gtk_widget_has_rc_style, "gtk_widget_has_rc_style", LIBS);
  gidLink(cast(void**)&gtk_widget_has_screen, "gtk_widget_has_screen", LIBS);
  gidLink(cast(void**)&gtk_widget_has_visible_focus, "gtk_widget_has_visible_focus", LIBS);
  gidLink(cast(void**)&gtk_widget_hide, "gtk_widget_hide", LIBS);
  gidLink(cast(void**)&gtk_widget_hide_on_delete, "gtk_widget_hide_on_delete", LIBS);
  gidLink(cast(void**)&gtk_widget_in_destruction, "gtk_widget_in_destruction", LIBS);
  gidLink(cast(void**)&gtk_widget_init_template, "gtk_widget_init_template", LIBS);
  gidLink(cast(void**)&gtk_widget_input_shape_combine_region, "gtk_widget_input_shape_combine_region", LIBS);
  gidLink(cast(void**)&gtk_widget_insert_action_group, "gtk_widget_insert_action_group", LIBS);
  gidLink(cast(void**)&gtk_widget_intersect, "gtk_widget_intersect", LIBS);
  gidLink(cast(void**)&gtk_widget_is_ancestor, "gtk_widget_is_ancestor", LIBS);
  gidLink(cast(void**)&gtk_widget_is_composited, "gtk_widget_is_composited", LIBS);
  gidLink(cast(void**)&gtk_widget_is_drawable, "gtk_widget_is_drawable", LIBS);
  gidLink(cast(void**)&gtk_widget_is_focus, "gtk_widget_is_focus", LIBS);
  gidLink(cast(void**)&gtk_widget_is_sensitive, "gtk_widget_is_sensitive", LIBS);
  gidLink(cast(void**)&gtk_widget_is_toplevel, "gtk_widget_is_toplevel", LIBS);
  gidLink(cast(void**)&gtk_widget_is_visible, "gtk_widget_is_visible", LIBS);
  gidLink(cast(void**)&gtk_widget_keynav_failed, "gtk_widget_keynav_failed", LIBS);
  gidLink(cast(void**)&gtk_widget_list_accel_closures, "gtk_widget_list_accel_closures", LIBS);
  gidLink(cast(void**)&gtk_widget_list_action_prefixes, "gtk_widget_list_action_prefixes", LIBS);
  gidLink(cast(void**)&gtk_widget_list_mnemonic_labels, "gtk_widget_list_mnemonic_labels", LIBS);
  gidLink(cast(void**)&gtk_widget_map, "gtk_widget_map", LIBS);
  gidLink(cast(void**)&gtk_widget_mnemonic_activate, "gtk_widget_mnemonic_activate", LIBS);
  gidLink(cast(void**)&gtk_widget_modify_base, "gtk_widget_modify_base", LIBS);
  gidLink(cast(void**)&gtk_widget_modify_bg, "gtk_widget_modify_bg", LIBS);
  gidLink(cast(void**)&gtk_widget_modify_cursor, "gtk_widget_modify_cursor", LIBS);
  gidLink(cast(void**)&gtk_widget_modify_fg, "gtk_widget_modify_fg", LIBS);
  gidLink(cast(void**)&gtk_widget_modify_font, "gtk_widget_modify_font", LIBS);
  gidLink(cast(void**)&gtk_widget_modify_style, "gtk_widget_modify_style", LIBS);
  gidLink(cast(void**)&gtk_widget_modify_text, "gtk_widget_modify_text", LIBS);
  gidLink(cast(void**)&gtk_widget_override_background_color, "gtk_widget_override_background_color", LIBS);
  gidLink(cast(void**)&gtk_widget_override_color, "gtk_widget_override_color", LIBS);
  gidLink(cast(void**)&gtk_widget_override_cursor, "gtk_widget_override_cursor", LIBS);
  gidLink(cast(void**)&gtk_widget_override_font, "gtk_widget_override_font", LIBS);
  gidLink(cast(void**)&gtk_widget_override_symbolic_color, "gtk_widget_override_symbolic_color", LIBS);
  gidLink(cast(void**)&gtk_widget_path, "gtk_widget_path", LIBS);
  gidLink(cast(void**)&gtk_widget_queue_allocate, "gtk_widget_queue_allocate", LIBS);
  gidLink(cast(void**)&gtk_widget_queue_compute_expand, "gtk_widget_queue_compute_expand", LIBS);
  gidLink(cast(void**)&gtk_widget_queue_draw, "gtk_widget_queue_draw", LIBS);
  gidLink(cast(void**)&gtk_widget_queue_draw_area, "gtk_widget_queue_draw_area", LIBS);
  gidLink(cast(void**)&gtk_widget_queue_draw_region, "gtk_widget_queue_draw_region", LIBS);
  gidLink(cast(void**)&gtk_widget_queue_resize, "gtk_widget_queue_resize", LIBS);
  gidLink(cast(void**)&gtk_widget_queue_resize_no_redraw, "gtk_widget_queue_resize_no_redraw", LIBS);
  gidLink(cast(void**)&gtk_widget_realize, "gtk_widget_realize", LIBS);
  gidLink(cast(void**)&gtk_widget_region_intersect, "gtk_widget_region_intersect", LIBS);
  gidLink(cast(void**)&gtk_widget_register_window, "gtk_widget_register_window", LIBS);
  gidLink(cast(void**)&gtk_widget_remove_accelerator, "gtk_widget_remove_accelerator", LIBS);
  gidLink(cast(void**)&gtk_widget_remove_mnemonic_label, "gtk_widget_remove_mnemonic_label", LIBS);
  gidLink(cast(void**)&gtk_widget_remove_tick_callback, "gtk_widget_remove_tick_callback", LIBS);
  gidLink(cast(void**)&gtk_widget_render_icon, "gtk_widget_render_icon", LIBS);
  gidLink(cast(void**)&gtk_widget_render_icon_pixbuf, "gtk_widget_render_icon_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_widget_reparent, "gtk_widget_reparent", LIBS);
  gidLink(cast(void**)&gtk_widget_reset_rc_styles, "gtk_widget_reset_rc_styles", LIBS);
  gidLink(cast(void**)&gtk_widget_reset_style, "gtk_widget_reset_style", LIBS);
  gidLink(cast(void**)&gtk_widget_send_expose, "gtk_widget_send_expose", LIBS);
  gidLink(cast(void**)&gtk_widget_send_focus_change, "gtk_widget_send_focus_change", LIBS);
  gidLink(cast(void**)&gtk_widget_set_accel_path, "gtk_widget_set_accel_path", LIBS);
  gidLink(cast(void**)&gtk_widget_set_allocation, "gtk_widget_set_allocation", LIBS);
  gidLink(cast(void**)&gtk_widget_set_app_paintable, "gtk_widget_set_app_paintable", LIBS);
  gidLink(cast(void**)&gtk_widget_set_can_default, "gtk_widget_set_can_default", LIBS);
  gidLink(cast(void**)&gtk_widget_set_can_focus, "gtk_widget_set_can_focus", LIBS);
  gidLink(cast(void**)&gtk_widget_set_child_visible, "gtk_widget_set_child_visible", LIBS);
  gidLink(cast(void**)&gtk_widget_set_clip, "gtk_widget_set_clip", LIBS);
  gidLink(cast(void**)&gtk_widget_set_composite_name, "gtk_widget_set_composite_name", LIBS);
  gidLink(cast(void**)&gtk_widget_set_device_enabled, "gtk_widget_set_device_enabled", LIBS);
  gidLink(cast(void**)&gtk_widget_set_device_events, "gtk_widget_set_device_events", LIBS);
  gidLink(cast(void**)&gtk_widget_set_direction, "gtk_widget_set_direction", LIBS);
  gidLink(cast(void**)&gtk_widget_set_double_buffered, "gtk_widget_set_double_buffered", LIBS);
  gidLink(cast(void**)&gtk_widget_set_events, "gtk_widget_set_events", LIBS);
  gidLink(cast(void**)&gtk_widget_set_focus_on_click, "gtk_widget_set_focus_on_click", LIBS);
  gidLink(cast(void**)&gtk_widget_set_font_map, "gtk_widget_set_font_map", LIBS);
  gidLink(cast(void**)&gtk_widget_set_font_options, "gtk_widget_set_font_options", LIBS);
  gidLink(cast(void**)&gtk_widget_set_halign, "gtk_widget_set_halign", LIBS);
  gidLink(cast(void**)&gtk_widget_set_has_tooltip, "gtk_widget_set_has_tooltip", LIBS);
  gidLink(cast(void**)&gtk_widget_set_has_window, "gtk_widget_set_has_window", LIBS);
  gidLink(cast(void**)&gtk_widget_set_hexpand, "gtk_widget_set_hexpand", LIBS);
  gidLink(cast(void**)&gtk_widget_set_hexpand_set, "gtk_widget_set_hexpand_set", LIBS);
  gidLink(cast(void**)&gtk_widget_set_mapped, "gtk_widget_set_mapped", LIBS);
  gidLink(cast(void**)&gtk_widget_set_margin_bottom, "gtk_widget_set_margin_bottom", LIBS);
  gidLink(cast(void**)&gtk_widget_set_margin_end, "gtk_widget_set_margin_end", LIBS);
  gidLink(cast(void**)&gtk_widget_set_margin_left, "gtk_widget_set_margin_left", LIBS);
  gidLink(cast(void**)&gtk_widget_set_margin_right, "gtk_widget_set_margin_right", LIBS);
  gidLink(cast(void**)&gtk_widget_set_margin_start, "gtk_widget_set_margin_start", LIBS);
  gidLink(cast(void**)&gtk_widget_set_margin_top, "gtk_widget_set_margin_top", LIBS);
  gidLink(cast(void**)&gtk_widget_set_name, "gtk_widget_set_name", LIBS);
  gidLink(cast(void**)&gtk_widget_set_no_show_all, "gtk_widget_set_no_show_all", LIBS);
  gidLink(cast(void**)&gtk_widget_set_opacity, "gtk_widget_set_opacity", LIBS);
  gidLink(cast(void**)&gtk_widget_set_parent, "gtk_widget_set_parent", LIBS);
  gidLink(cast(void**)&gtk_widget_set_parent_window, "gtk_widget_set_parent_window", LIBS);
  gidLink(cast(void**)&gtk_widget_set_realized, "gtk_widget_set_realized", LIBS);
  gidLink(cast(void**)&gtk_widget_set_receives_default, "gtk_widget_set_receives_default", LIBS);
  gidLink(cast(void**)&gtk_widget_set_redraw_on_allocate, "gtk_widget_set_redraw_on_allocate", LIBS);
  gidLink(cast(void**)&gtk_widget_set_sensitive, "gtk_widget_set_sensitive", LIBS);
  gidLink(cast(void**)&gtk_widget_set_size_request, "gtk_widget_set_size_request", LIBS);
  gidLink(cast(void**)&gtk_widget_set_state, "gtk_widget_set_state", LIBS);
  gidLink(cast(void**)&gtk_widget_set_state_flags, "gtk_widget_set_state_flags", LIBS);
  gidLink(cast(void**)&gtk_widget_set_style, "gtk_widget_set_style", LIBS);
  gidLink(cast(void**)&gtk_widget_set_support_multidevice, "gtk_widget_set_support_multidevice", LIBS);
  gidLink(cast(void**)&gtk_widget_set_tooltip_markup, "gtk_widget_set_tooltip_markup", LIBS);
  gidLink(cast(void**)&gtk_widget_set_tooltip_text, "gtk_widget_set_tooltip_text", LIBS);
  gidLink(cast(void**)&gtk_widget_set_tooltip_window, "gtk_widget_set_tooltip_window", LIBS);
  gidLink(cast(void**)&gtk_widget_set_valign, "gtk_widget_set_valign", LIBS);
  gidLink(cast(void**)&gtk_widget_set_vexpand, "gtk_widget_set_vexpand", LIBS);
  gidLink(cast(void**)&gtk_widget_set_vexpand_set, "gtk_widget_set_vexpand_set", LIBS);
  gidLink(cast(void**)&gtk_widget_set_visible, "gtk_widget_set_visible", LIBS);
  gidLink(cast(void**)&gtk_widget_set_visual, "gtk_widget_set_visual", LIBS);
  gidLink(cast(void**)&gtk_widget_set_window, "gtk_widget_set_window", LIBS);
  gidLink(cast(void**)&gtk_widget_shape_combine_region, "gtk_widget_shape_combine_region", LIBS);
  gidLink(cast(void**)&gtk_widget_show, "gtk_widget_show", LIBS);
  gidLink(cast(void**)&gtk_widget_show_all, "gtk_widget_show_all", LIBS);
  gidLink(cast(void**)&gtk_widget_show_now, "gtk_widget_show_now", LIBS);
  gidLink(cast(void**)&gtk_widget_size_allocate, "gtk_widget_size_allocate", LIBS);
  gidLink(cast(void**)&gtk_widget_size_allocate_with_baseline, "gtk_widget_size_allocate_with_baseline", LIBS);
  gidLink(cast(void**)&gtk_widget_size_request, "gtk_widget_size_request", LIBS);
  gidLink(cast(void**)&gtk_widget_style_attach, "gtk_widget_style_attach", LIBS);
  gidLink(cast(void**)&gtk_widget_style_get, "gtk_widget_style_get", LIBS);
  gidLink(cast(void**)&gtk_widget_style_get_property, "gtk_widget_style_get_property", LIBS);
  gidLink(cast(void**)&gtk_widget_style_get_valist, "gtk_widget_style_get_valist", LIBS);
  gidLink(cast(void**)&gtk_widget_thaw_child_notify, "gtk_widget_thaw_child_notify", LIBS);
  gidLink(cast(void**)&gtk_widget_translate_coordinates, "gtk_widget_translate_coordinates", LIBS);
  gidLink(cast(void**)&gtk_widget_trigger_tooltip_query, "gtk_widget_trigger_tooltip_query", LIBS);
  gidLink(cast(void**)&gtk_widget_unmap, "gtk_widget_unmap", LIBS);
  gidLink(cast(void**)&gtk_widget_unparent, "gtk_widget_unparent", LIBS);
  gidLink(cast(void**)&gtk_widget_unrealize, "gtk_widget_unrealize", LIBS);
  gidLink(cast(void**)&gtk_widget_unregister_window, "gtk_widget_unregister_window", LIBS);
  gidLink(cast(void**)&gtk_widget_unset_state_flags, "gtk_widget_unset_state_flags", LIBS);

  // WidgetAccessible
  gidLink(cast(void**)&gtk_widget_accessible_get_type, "gtk_widget_accessible_get_type", LIBS);

  // WidgetClass
  gidLink(cast(void**)&gtk_widget_class_bind_template_callback_full, "gtk_widget_class_bind_template_callback_full", LIBS);
  gidLink(cast(void**)&gtk_widget_class_bind_template_child_full, "gtk_widget_class_bind_template_child_full", LIBS);
  gidLink(cast(void**)&gtk_widget_class_find_style_property, "gtk_widget_class_find_style_property", LIBS);
  gidLink(cast(void**)&gtk_widget_class_get_css_name, "gtk_widget_class_get_css_name", LIBS);
  gidLink(cast(void**)&gtk_widget_class_install_style_property, "gtk_widget_class_install_style_property", LIBS);
  gidLink(cast(void**)&gtk_widget_class_install_style_property_parser, "gtk_widget_class_install_style_property_parser", LIBS);
  gidLink(cast(void**)&gtk_widget_class_list_style_properties, "gtk_widget_class_list_style_properties", LIBS);
  gidLink(cast(void**)&gtk_widget_class_set_accessible_role, "gtk_widget_class_set_accessible_role", LIBS);
  gidLink(cast(void**)&gtk_widget_class_set_accessible_type, "gtk_widget_class_set_accessible_type", LIBS);
  gidLink(cast(void**)&gtk_widget_class_set_connect_func, "gtk_widget_class_set_connect_func", LIBS);
  gidLink(cast(void**)&gtk_widget_class_set_css_name, "gtk_widget_class_set_css_name", LIBS);
  gidLink(cast(void**)&gtk_widget_class_set_template, "gtk_widget_class_set_template", LIBS);
  gidLink(cast(void**)&gtk_widget_class_set_template_from_resource, "gtk_widget_class_set_template_from_resource", LIBS);

  // WidgetPath
  gidLink(cast(void**)&gtk_widget_path_get_type, "gtk_widget_path_get_type", LIBS);
  gidLink(cast(void**)&gtk_widget_path_new, "gtk_widget_path_new", LIBS);
  gidLink(cast(void**)&gtk_widget_path_append_for_widget, "gtk_widget_path_append_for_widget", LIBS);
  gidLink(cast(void**)&gtk_widget_path_append_type, "gtk_widget_path_append_type", LIBS);
  gidLink(cast(void**)&gtk_widget_path_append_with_siblings, "gtk_widget_path_append_with_siblings", LIBS);
  gidLink(cast(void**)&gtk_widget_path_copy, "gtk_widget_path_copy", LIBS);
  gidLink(cast(void**)&gtk_widget_path_free, "gtk_widget_path_free", LIBS);
  gidLink(cast(void**)&gtk_widget_path_get_object_type, "gtk_widget_path_get_object_type", LIBS);
  gidLink(cast(void**)&gtk_widget_path_has_parent, "gtk_widget_path_has_parent", LIBS);
  gidLink(cast(void**)&gtk_widget_path_is_type, "gtk_widget_path_is_type", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_add_class, "gtk_widget_path_iter_add_class", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_add_region, "gtk_widget_path_iter_add_region", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_clear_classes, "gtk_widget_path_iter_clear_classes", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_clear_regions, "gtk_widget_path_iter_clear_regions", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_get_name, "gtk_widget_path_iter_get_name", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_get_object_name, "gtk_widget_path_iter_get_object_name", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_get_object_type, "gtk_widget_path_iter_get_object_type", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_get_sibling_index, "gtk_widget_path_iter_get_sibling_index", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_get_siblings, "gtk_widget_path_iter_get_siblings", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_get_state, "gtk_widget_path_iter_get_state", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_has_class, "gtk_widget_path_iter_has_class", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_has_name, "gtk_widget_path_iter_has_name", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_has_qclass, "gtk_widget_path_iter_has_qclass", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_has_qname, "gtk_widget_path_iter_has_qname", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_has_qregion, "gtk_widget_path_iter_has_qregion", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_has_region, "gtk_widget_path_iter_has_region", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_list_classes, "gtk_widget_path_iter_list_classes", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_list_regions, "gtk_widget_path_iter_list_regions", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_remove_class, "gtk_widget_path_iter_remove_class", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_remove_region, "gtk_widget_path_iter_remove_region", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_set_name, "gtk_widget_path_iter_set_name", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_set_object_name, "gtk_widget_path_iter_set_object_name", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_set_object_type, "gtk_widget_path_iter_set_object_type", LIBS);
  gidLink(cast(void**)&gtk_widget_path_iter_set_state, "gtk_widget_path_iter_set_state", LIBS);
  gidLink(cast(void**)&gtk_widget_path_length, "gtk_widget_path_length", LIBS);
  gidLink(cast(void**)&gtk_widget_path_prepend_type, "gtk_widget_path_prepend_type", LIBS);
  gidLink(cast(void**)&gtk_widget_path_ref, "gtk_widget_path_ref", LIBS);
  gidLink(cast(void**)&gtk_widget_path_to_string, "gtk_widget_path_to_string", LIBS);
  gidLink(cast(void**)&gtk_widget_path_unref, "gtk_widget_path_unref", LIBS);

  // Window
  gidLink(cast(void**)&gtk_window_get_type, "gtk_window_get_type", LIBS);
  gidLink(cast(void**)&gtk_window_new, "gtk_window_new", LIBS);
  gidLink(cast(void**)&gtk_window_get_default_icon_list, "gtk_window_get_default_icon_list", LIBS);
  gidLink(cast(void**)&gtk_window_get_default_icon_name, "gtk_window_get_default_icon_name", LIBS);
  gidLink(cast(void**)&gtk_window_list_toplevels, "gtk_window_list_toplevels", LIBS);
  gidLink(cast(void**)&gtk_window_set_auto_startup_notification, "gtk_window_set_auto_startup_notification", LIBS);
  gidLink(cast(void**)&gtk_window_set_default_icon, "gtk_window_set_default_icon", LIBS);
  gidLink(cast(void**)&gtk_window_set_default_icon_from_file, "gtk_window_set_default_icon_from_file", LIBS);
  gidLink(cast(void**)&gtk_window_set_default_icon_list, "gtk_window_set_default_icon_list", LIBS);
  gidLink(cast(void**)&gtk_window_set_default_icon_name, "gtk_window_set_default_icon_name", LIBS);
  gidLink(cast(void**)&gtk_window_set_interactive_debugging, "gtk_window_set_interactive_debugging", LIBS);
  gidLink(cast(void**)&gtk_window_activate_default, "gtk_window_activate_default", LIBS);
  gidLink(cast(void**)&gtk_window_activate_focus, "gtk_window_activate_focus", LIBS);
  gidLink(cast(void**)&gtk_window_activate_key, "gtk_window_activate_key", LIBS);
  gidLink(cast(void**)&gtk_window_add_accel_group, "gtk_window_add_accel_group", LIBS);
  gidLink(cast(void**)&gtk_window_add_mnemonic, "gtk_window_add_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_window_begin_move_drag, "gtk_window_begin_move_drag", LIBS);
  gidLink(cast(void**)&gtk_window_begin_resize_drag, "gtk_window_begin_resize_drag", LIBS);
  gidLink(cast(void**)&gtk_window_close, "gtk_window_close", LIBS);
  gidLink(cast(void**)&gtk_window_deiconify, "gtk_window_deiconify", LIBS);
  gidLink(cast(void**)&gtk_window_fullscreen, "gtk_window_fullscreen", LIBS);
  gidLink(cast(void**)&gtk_window_fullscreen_on_monitor, "gtk_window_fullscreen_on_monitor", LIBS);
  gidLink(cast(void**)&gtk_window_get_accept_focus, "gtk_window_get_accept_focus", LIBS);
  gidLink(cast(void**)&gtk_window_get_application, "gtk_window_get_application", LIBS);
  gidLink(cast(void**)&gtk_window_get_attached_to, "gtk_window_get_attached_to", LIBS);
  gidLink(cast(void**)&gtk_window_get_decorated, "gtk_window_get_decorated", LIBS);
  gidLink(cast(void**)&gtk_window_get_default_size, "gtk_window_get_default_size", LIBS);
  gidLink(cast(void**)&gtk_window_get_default_widget, "gtk_window_get_default_widget", LIBS);
  gidLink(cast(void**)&gtk_window_get_deletable, "gtk_window_get_deletable", LIBS);
  gidLink(cast(void**)&gtk_window_get_destroy_with_parent, "gtk_window_get_destroy_with_parent", LIBS);
  gidLink(cast(void**)&gtk_window_get_focus, "gtk_window_get_focus", LIBS);
  gidLink(cast(void**)&gtk_window_get_focus_on_map, "gtk_window_get_focus_on_map", LIBS);
  gidLink(cast(void**)&gtk_window_get_focus_visible, "gtk_window_get_focus_visible", LIBS);
  gidLink(cast(void**)&gtk_window_get_gravity, "gtk_window_get_gravity", LIBS);
  gidLink(cast(void**)&gtk_window_get_group, "gtk_window_get_group", LIBS);
  gidLink(cast(void**)&gtk_window_get_has_resize_grip, "gtk_window_get_has_resize_grip", LIBS);
  gidLink(cast(void**)&gtk_window_get_hide_titlebar_when_maximized, "gtk_window_get_hide_titlebar_when_maximized", LIBS);
  gidLink(cast(void**)&gtk_window_get_icon, "gtk_window_get_icon", LIBS);
  gidLink(cast(void**)&gtk_window_get_icon_list, "gtk_window_get_icon_list", LIBS);
  gidLink(cast(void**)&gtk_window_get_icon_name, "gtk_window_get_icon_name", LIBS);
  gidLink(cast(void**)&gtk_window_get_mnemonic_modifier, "gtk_window_get_mnemonic_modifier", LIBS);
  gidLink(cast(void**)&gtk_window_get_mnemonics_visible, "gtk_window_get_mnemonics_visible", LIBS);
  gidLink(cast(void**)&gtk_window_get_modal, "gtk_window_get_modal", LIBS);
  gidLink(cast(void**)&gtk_window_get_opacity, "gtk_window_get_opacity", LIBS);
  gidLink(cast(void**)&gtk_window_get_position, "gtk_window_get_position", LIBS);
  gidLink(cast(void**)&gtk_window_get_resizable, "gtk_window_get_resizable", LIBS);
  gidLink(cast(void**)&gtk_window_get_resize_grip_area, "gtk_window_get_resize_grip_area", LIBS);
  gidLink(cast(void**)&gtk_window_get_role, "gtk_window_get_role", LIBS);
  gidLink(cast(void**)&gtk_window_get_screen, "gtk_window_get_screen", LIBS);
  gidLink(cast(void**)&gtk_window_get_size, "gtk_window_get_size", LIBS);
  gidLink(cast(void**)&gtk_window_get_skip_pager_hint, "gtk_window_get_skip_pager_hint", LIBS);
  gidLink(cast(void**)&gtk_window_get_skip_taskbar_hint, "gtk_window_get_skip_taskbar_hint", LIBS);
  gidLink(cast(void**)&gtk_window_get_title, "gtk_window_get_title", LIBS);
  gidLink(cast(void**)&gtk_window_get_titlebar, "gtk_window_get_titlebar", LIBS);
  gidLink(cast(void**)&gtk_window_get_transient_for, "gtk_window_get_transient_for", LIBS);
  gidLink(cast(void**)&gtk_window_get_type_hint, "gtk_window_get_type_hint", LIBS);
  gidLink(cast(void**)&gtk_window_get_urgency_hint, "gtk_window_get_urgency_hint", LIBS);
  gidLink(cast(void**)&gtk_window_get_window_type, "gtk_window_get_window_type", LIBS);
  gidLink(cast(void**)&gtk_window_has_group, "gtk_window_has_group", LIBS);
  gidLink(cast(void**)&gtk_window_has_toplevel_focus, "gtk_window_has_toplevel_focus", LIBS);
  gidLink(cast(void**)&gtk_window_iconify, "gtk_window_iconify", LIBS);
  gidLink(cast(void**)&gtk_window_is_active, "gtk_window_is_active", LIBS);
  gidLink(cast(void**)&gtk_window_is_maximized, "gtk_window_is_maximized", LIBS);
  gidLink(cast(void**)&gtk_window_maximize, "gtk_window_maximize", LIBS);
  gidLink(cast(void**)&gtk_window_mnemonic_activate, "gtk_window_mnemonic_activate", LIBS);
  gidLink(cast(void**)&gtk_window_move, "gtk_window_move", LIBS);
  gidLink(cast(void**)&gtk_window_parse_geometry, "gtk_window_parse_geometry", LIBS);
  gidLink(cast(void**)&gtk_window_present, "gtk_window_present", LIBS);
  gidLink(cast(void**)&gtk_window_present_with_time, "gtk_window_present_with_time", LIBS);
  gidLink(cast(void**)&gtk_window_propagate_key_event, "gtk_window_propagate_key_event", LIBS);
  gidLink(cast(void**)&gtk_window_remove_accel_group, "gtk_window_remove_accel_group", LIBS);
  gidLink(cast(void**)&gtk_window_remove_mnemonic, "gtk_window_remove_mnemonic", LIBS);
  gidLink(cast(void**)&gtk_window_reshow_with_initial_size, "gtk_window_reshow_with_initial_size", LIBS);
  gidLink(cast(void**)&gtk_window_resize, "gtk_window_resize", LIBS);
  gidLink(cast(void**)&gtk_window_resize_grip_is_visible, "gtk_window_resize_grip_is_visible", LIBS);
  gidLink(cast(void**)&gtk_window_resize_to_geometry, "gtk_window_resize_to_geometry", LIBS);
  gidLink(cast(void**)&gtk_window_set_accept_focus, "gtk_window_set_accept_focus", LIBS);
  gidLink(cast(void**)&gtk_window_set_application, "gtk_window_set_application", LIBS);
  gidLink(cast(void**)&gtk_window_set_attached_to, "gtk_window_set_attached_to", LIBS);
  gidLink(cast(void**)&gtk_window_set_decorated, "gtk_window_set_decorated", LIBS);
  gidLink(cast(void**)&gtk_window_set_default, "gtk_window_set_default", LIBS);
  gidLink(cast(void**)&gtk_window_set_default_geometry, "gtk_window_set_default_geometry", LIBS);
  gidLink(cast(void**)&gtk_window_set_default_size, "gtk_window_set_default_size", LIBS);
  gidLink(cast(void**)&gtk_window_set_deletable, "gtk_window_set_deletable", LIBS);
  gidLink(cast(void**)&gtk_window_set_destroy_with_parent, "gtk_window_set_destroy_with_parent", LIBS);
  gidLink(cast(void**)&gtk_window_set_focus, "gtk_window_set_focus", LIBS);
  gidLink(cast(void**)&gtk_window_set_focus_on_map, "gtk_window_set_focus_on_map", LIBS);
  gidLink(cast(void**)&gtk_window_set_focus_visible, "gtk_window_set_focus_visible", LIBS);
  gidLink(cast(void**)&gtk_window_set_geometry_hints, "gtk_window_set_geometry_hints", LIBS);
  gidLink(cast(void**)&gtk_window_set_gravity, "gtk_window_set_gravity", LIBS);
  gidLink(cast(void**)&gtk_window_set_has_resize_grip, "gtk_window_set_has_resize_grip", LIBS);
  gidLink(cast(void**)&gtk_window_set_has_user_ref_count, "gtk_window_set_has_user_ref_count", LIBS);
  gidLink(cast(void**)&gtk_window_set_hide_titlebar_when_maximized, "gtk_window_set_hide_titlebar_when_maximized", LIBS);
  gidLink(cast(void**)&gtk_window_set_icon, "gtk_window_set_icon", LIBS);
  gidLink(cast(void**)&gtk_window_set_icon_from_file, "gtk_window_set_icon_from_file", LIBS);
  gidLink(cast(void**)&gtk_window_set_icon_list, "gtk_window_set_icon_list", LIBS);
  gidLink(cast(void**)&gtk_window_set_icon_name, "gtk_window_set_icon_name", LIBS);
  gidLink(cast(void**)&gtk_window_set_keep_above, "gtk_window_set_keep_above", LIBS);
  gidLink(cast(void**)&gtk_window_set_keep_below, "gtk_window_set_keep_below", LIBS);
  gidLink(cast(void**)&gtk_window_set_mnemonic_modifier, "gtk_window_set_mnemonic_modifier", LIBS);
  gidLink(cast(void**)&gtk_window_set_mnemonics_visible, "gtk_window_set_mnemonics_visible", LIBS);
  gidLink(cast(void**)&gtk_window_set_modal, "gtk_window_set_modal", LIBS);
  gidLink(cast(void**)&gtk_window_set_opacity, "gtk_window_set_opacity", LIBS);
  gidLink(cast(void**)&gtk_window_set_position, "gtk_window_set_position", LIBS);
  gidLink(cast(void**)&gtk_window_set_resizable, "gtk_window_set_resizable", LIBS);
  gidLink(cast(void**)&gtk_window_set_role, "gtk_window_set_role", LIBS);
  gidLink(cast(void**)&gtk_window_set_screen, "gtk_window_set_screen", LIBS);
  gidLink(cast(void**)&gtk_window_set_skip_pager_hint, "gtk_window_set_skip_pager_hint", LIBS);
  gidLink(cast(void**)&gtk_window_set_skip_taskbar_hint, "gtk_window_set_skip_taskbar_hint", LIBS);
  gidLink(cast(void**)&gtk_window_set_startup_id, "gtk_window_set_startup_id", LIBS);
  gidLink(cast(void**)&gtk_window_set_title, "gtk_window_set_title", LIBS);
  gidLink(cast(void**)&gtk_window_set_titlebar, "gtk_window_set_titlebar", LIBS);
  gidLink(cast(void**)&gtk_window_set_transient_for, "gtk_window_set_transient_for", LIBS);
  gidLink(cast(void**)&gtk_window_set_type_hint, "gtk_window_set_type_hint", LIBS);
  gidLink(cast(void**)&gtk_window_set_urgency_hint, "gtk_window_set_urgency_hint", LIBS);
  gidLink(cast(void**)&gtk_window_set_wmclass, "gtk_window_set_wmclass", LIBS);
  gidLink(cast(void**)&gtk_window_stick, "gtk_window_stick", LIBS);
  gidLink(cast(void**)&gtk_window_unfullscreen, "gtk_window_unfullscreen", LIBS);
  gidLink(cast(void**)&gtk_window_unmaximize, "gtk_window_unmaximize", LIBS);
  gidLink(cast(void**)&gtk_window_unstick, "gtk_window_unstick", LIBS);

  // WindowAccessible
  gidLink(cast(void**)&gtk_window_accessible_get_type, "gtk_window_accessible_get_type", LIBS);

  // WindowGroup
  gidLink(cast(void**)&gtk_window_group_get_type, "gtk_window_group_get_type", LIBS);
  gidLink(cast(void**)&gtk_window_group_new, "gtk_window_group_new", LIBS);
  gidLink(cast(void**)&gtk_window_group_add_window, "gtk_window_group_add_window", LIBS);
  gidLink(cast(void**)&gtk_window_group_get_current_device_grab, "gtk_window_group_get_current_device_grab", LIBS);
  gidLink(cast(void**)&gtk_window_group_get_current_grab, "gtk_window_group_get_current_grab", LIBS);
  gidLink(cast(void**)&gtk_window_group_list_windows, "gtk_window_group_list_windows", LIBS);
  gidLink(cast(void**)&gtk_window_group_remove_window, "gtk_window_group_remove_window", LIBS);

  // global
  gidLink(cast(void**)&gtk_accel_groups_activate, "gtk_accel_groups_activate", LIBS);
  gidLink(cast(void**)&gtk_accel_groups_from_object, "gtk_accel_groups_from_object", LIBS);
  gidLink(cast(void**)&gtk_accelerator_get_default_mod_mask, "gtk_accelerator_get_default_mod_mask", LIBS);
  gidLink(cast(void**)&gtk_accelerator_get_label, "gtk_accelerator_get_label", LIBS);
  gidLink(cast(void**)&gtk_accelerator_get_label_with_keycode, "gtk_accelerator_get_label_with_keycode", LIBS);
  gidLink(cast(void**)&gtk_accelerator_name, "gtk_accelerator_name", LIBS);
  gidLink(cast(void**)&gtk_accelerator_name_with_keycode, "gtk_accelerator_name_with_keycode", LIBS);
  gidLink(cast(void**)&gtk_accelerator_parse, "gtk_accelerator_parse", LIBS);
  gidLink(cast(void**)&gtk_accelerator_parse_with_keycode, "gtk_accelerator_parse_with_keycode", LIBS);
  gidLink(cast(void**)&gtk_accelerator_set_default_mod_mask, "gtk_accelerator_set_default_mod_mask", LIBS);
  gidLink(cast(void**)&gtk_accelerator_valid, "gtk_accelerator_valid", LIBS);
  gidLink(cast(void**)&gtk_alternative_dialog_button_order, "gtk_alternative_dialog_button_order", LIBS);
  gidLink(cast(void**)&gtk_bindings_activate, "gtk_bindings_activate", LIBS);
  gidLink(cast(void**)&gtk_bindings_activate_event, "gtk_bindings_activate_event", LIBS);
  gidLink(cast(void**)&gtk_cairo_should_draw_window, "gtk_cairo_should_draw_window", LIBS);
  gidLink(cast(void**)&gtk_cairo_transform_to_window, "gtk_cairo_transform_to_window", LIBS);
  gidLink(cast(void**)&gtk_check_version, "gtk_check_version", LIBS);
  gidLink(cast(void**)&gtk_device_grab_add, "gtk_device_grab_add", LIBS);
  gidLink(cast(void**)&gtk_device_grab_remove, "gtk_device_grab_remove", LIBS);
  gidLink(cast(void**)&gtk_disable_setlocale, "gtk_disable_setlocale", LIBS);
  gidLink(cast(void**)&gtk_distribute_natural_allocation, "gtk_distribute_natural_allocation", LIBS);
  gidLink(cast(void**)&gtk_drag_cancel, "gtk_drag_cancel", LIBS);
  gidLink(cast(void**)&gtk_drag_finish, "gtk_drag_finish", LIBS);
  gidLink(cast(void**)&gtk_drag_get_source_widget, "gtk_drag_get_source_widget", LIBS);
  gidLink(cast(void**)&gtk_drag_set_icon_default, "gtk_drag_set_icon_default", LIBS);
  gidLink(cast(void**)&gtk_drag_set_icon_gicon, "gtk_drag_set_icon_gicon", LIBS);
  gidLink(cast(void**)&gtk_drag_set_icon_name, "gtk_drag_set_icon_name", LIBS);
  gidLink(cast(void**)&gtk_drag_set_icon_pixbuf, "gtk_drag_set_icon_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_drag_set_icon_stock, "gtk_drag_set_icon_stock", LIBS);
  gidLink(cast(void**)&gtk_drag_set_icon_surface, "gtk_drag_set_icon_surface", LIBS);
  gidLink(cast(void**)&gtk_drag_set_icon_widget, "gtk_drag_set_icon_widget", LIBS);
  gidLink(cast(void**)&gtk_draw_insertion_cursor, "gtk_draw_insertion_cursor", LIBS);
  gidLink(cast(void**)&gtk_events_pending, "gtk_events_pending", LIBS);
  gidLink(cast(void**)&gtk_false, "gtk_false", LIBS);
  gidLink(cast(void**)&gtk_get_binary_age, "gtk_get_binary_age", LIBS);
  gidLink(cast(void**)&gtk_get_current_event, "gtk_get_current_event", LIBS);
  gidLink(cast(void**)&gtk_get_current_event_device, "gtk_get_current_event_device", LIBS);
  gidLink(cast(void**)&gtk_get_current_event_state, "gtk_get_current_event_state", LIBS);
  gidLink(cast(void**)&gtk_get_current_event_time, "gtk_get_current_event_time", LIBS);
  gidLink(cast(void**)&gtk_get_debug_flags, "gtk_get_debug_flags", LIBS);
  gidLink(cast(void**)&gtk_get_default_language, "gtk_get_default_language", LIBS);
  gidLink(cast(void**)&gtk_get_event_widget, "gtk_get_event_widget", LIBS);
  gidLink(cast(void**)&gtk_get_interface_age, "gtk_get_interface_age", LIBS);
  gidLink(cast(void**)&gtk_get_locale_direction, "gtk_get_locale_direction", LIBS);
  gidLink(cast(void**)&gtk_get_major_version, "gtk_get_major_version", LIBS);
  gidLink(cast(void**)&gtk_get_micro_version, "gtk_get_micro_version", LIBS);
  gidLink(cast(void**)&gtk_get_minor_version, "gtk_get_minor_version", LIBS);
  gidLink(cast(void**)&gtk_get_option_group, "gtk_get_option_group", LIBS);
  gidLink(cast(void**)&gtk_grab_get_current, "gtk_grab_get_current", LIBS);
  gidLink(cast(void**)&gtk_init, "gtk_init", LIBS);
  gidLink(cast(void**)&gtk_init_check, "gtk_init_check", LIBS);
  gidLink(cast(void**)&gtk_init_with_args, "gtk_init_with_args", LIBS);
  gidLink(cast(void**)&gtk_key_snooper_install, "gtk_key_snooper_install", LIBS);
  gidLink(cast(void**)&gtk_key_snooper_remove, "gtk_key_snooper_remove", LIBS);
  gidLink(cast(void**)&gtk_main, "gtk_main", LIBS);
  gidLink(cast(void**)&gtk_main_do_event, "gtk_main_do_event", LIBS);
  gidLink(cast(void**)&gtk_main_iteration, "gtk_main_iteration", LIBS);
  gidLink(cast(void**)&gtk_main_iteration_do, "gtk_main_iteration_do", LIBS);
  gidLink(cast(void**)&gtk_main_level, "gtk_main_level", LIBS);
  gidLink(cast(void**)&gtk_main_quit, "gtk_main_quit", LIBS);
  gidLink(cast(void**)&gtk_paint_arrow, "gtk_paint_arrow", LIBS);
  gidLink(cast(void**)&gtk_paint_box, "gtk_paint_box", LIBS);
  gidLink(cast(void**)&gtk_paint_box_gap, "gtk_paint_box_gap", LIBS);
  gidLink(cast(void**)&gtk_paint_check, "gtk_paint_check", LIBS);
  gidLink(cast(void**)&gtk_paint_diamond, "gtk_paint_diamond", LIBS);
  gidLink(cast(void**)&gtk_paint_expander, "gtk_paint_expander", LIBS);
  gidLink(cast(void**)&gtk_paint_extension, "gtk_paint_extension", LIBS);
  gidLink(cast(void**)&gtk_paint_flat_box, "gtk_paint_flat_box", LIBS);
  gidLink(cast(void**)&gtk_paint_focus, "gtk_paint_focus", LIBS);
  gidLink(cast(void**)&gtk_paint_handle, "gtk_paint_handle", LIBS);
  gidLink(cast(void**)&gtk_paint_hline, "gtk_paint_hline", LIBS);
  gidLink(cast(void**)&gtk_paint_layout, "gtk_paint_layout", LIBS);
  gidLink(cast(void**)&gtk_paint_option, "gtk_paint_option", LIBS);
  gidLink(cast(void**)&gtk_paint_resize_grip, "gtk_paint_resize_grip", LIBS);
  gidLink(cast(void**)&gtk_paint_shadow, "gtk_paint_shadow", LIBS);
  gidLink(cast(void**)&gtk_paint_shadow_gap, "gtk_paint_shadow_gap", LIBS);
  gidLink(cast(void**)&gtk_paint_slider, "gtk_paint_slider", LIBS);
  gidLink(cast(void**)&gtk_paint_spinner, "gtk_paint_spinner", LIBS);
  gidLink(cast(void**)&gtk_paint_tab, "gtk_paint_tab", LIBS);
  gidLink(cast(void**)&gtk_paint_vline, "gtk_paint_vline", LIBS);
  gidLink(cast(void**)&gtk_parse_args, "gtk_parse_args", LIBS);
  gidLink(cast(void**)&gtk_print_run_page_setup_dialog, "gtk_print_run_page_setup_dialog", LIBS);
  gidLink(cast(void**)&gtk_print_run_page_setup_dialog_async, "gtk_print_run_page_setup_dialog_async", LIBS);
  gidLink(cast(void**)&gtk_propagate_event, "gtk_propagate_event", LIBS);
  gidLink(cast(void**)&gtk_rc_add_default_file, "gtk_rc_add_default_file", LIBS);
  gidLink(cast(void**)&gtk_rc_find_module_in_path, "gtk_rc_find_module_in_path", LIBS);
  gidLink(cast(void**)&gtk_rc_find_pixmap_in_path, "gtk_rc_find_pixmap_in_path", LIBS);
  gidLink(cast(void**)&gtk_rc_get_default_files, "gtk_rc_get_default_files", LIBS);
  gidLink(cast(void**)&gtk_rc_get_im_module_file, "gtk_rc_get_im_module_file", LIBS);
  gidLink(cast(void**)&gtk_rc_get_im_module_path, "gtk_rc_get_im_module_path", LIBS);
  gidLink(cast(void**)&gtk_rc_get_module_dir, "gtk_rc_get_module_dir", LIBS);
  gidLink(cast(void**)&gtk_rc_get_style, "gtk_rc_get_style", LIBS);
  gidLink(cast(void**)&gtk_rc_get_style_by_paths, "gtk_rc_get_style_by_paths", LIBS);
  gidLink(cast(void**)&gtk_rc_get_theme_dir, "gtk_rc_get_theme_dir", LIBS);
  gidLink(cast(void**)&gtk_rc_parse, "gtk_rc_parse", LIBS);
  gidLink(cast(void**)&gtk_rc_parse_color, "gtk_rc_parse_color", LIBS);
  gidLink(cast(void**)&gtk_rc_parse_color_full, "gtk_rc_parse_color_full", LIBS);
  gidLink(cast(void**)&gtk_rc_parse_priority, "gtk_rc_parse_priority", LIBS);
  gidLink(cast(void**)&gtk_rc_parse_state, "gtk_rc_parse_state", LIBS);
  gidLink(cast(void**)&gtk_rc_parse_string, "gtk_rc_parse_string", LIBS);
  gidLink(cast(void**)&gtk_rc_reparse_all, "gtk_rc_reparse_all", LIBS);
  gidLink(cast(void**)&gtk_rc_reparse_all_for_settings, "gtk_rc_reparse_all_for_settings", LIBS);
  gidLink(cast(void**)&gtk_rc_reset_styles, "gtk_rc_reset_styles", LIBS);
  gidLink(cast(void**)&gtk_rc_scanner_new, "gtk_rc_scanner_new", LIBS);
  gidLink(cast(void**)&gtk_rc_set_default_files, "gtk_rc_set_default_files", LIBS);
  gidLink(cast(void**)&gtk_render_activity, "gtk_render_activity", LIBS);
  gidLink(cast(void**)&gtk_render_arrow, "gtk_render_arrow", LIBS);
  gidLink(cast(void**)&gtk_render_background, "gtk_render_background", LIBS);
  gidLink(cast(void**)&gtk_render_background_get_clip, "gtk_render_background_get_clip", LIBS);
  gidLink(cast(void**)&gtk_render_check, "gtk_render_check", LIBS);
  gidLink(cast(void**)&gtk_render_expander, "gtk_render_expander", LIBS);
  gidLink(cast(void**)&gtk_render_extension, "gtk_render_extension", LIBS);
  gidLink(cast(void**)&gtk_render_focus, "gtk_render_focus", LIBS);
  gidLink(cast(void**)&gtk_render_frame, "gtk_render_frame", LIBS);
  gidLink(cast(void**)&gtk_render_frame_gap, "gtk_render_frame_gap", LIBS);
  gidLink(cast(void**)&gtk_render_handle, "gtk_render_handle", LIBS);
  gidLink(cast(void**)&gtk_render_icon, "gtk_render_icon", LIBS);
  gidLink(cast(void**)&gtk_render_icon_pixbuf, "gtk_render_icon_pixbuf", LIBS);
  gidLink(cast(void**)&gtk_render_icon_surface, "gtk_render_icon_surface", LIBS);
  gidLink(cast(void**)&gtk_render_insertion_cursor, "gtk_render_insertion_cursor", LIBS);
  gidLink(cast(void**)&gtk_render_layout, "gtk_render_layout", LIBS);
  gidLink(cast(void**)&gtk_render_line, "gtk_render_line", LIBS);
  gidLink(cast(void**)&gtk_render_option, "gtk_render_option", LIBS);
  gidLink(cast(void**)&gtk_render_slider, "gtk_render_slider", LIBS);
  gidLink(cast(void**)&gtk_rgb_to_hsv, "gtk_rgb_to_hsv", LIBS);
  gidLink(cast(void**)&gtk_selection_add_target, "gtk_selection_add_target", LIBS);
  gidLink(cast(void**)&gtk_selection_add_targets, "gtk_selection_add_targets", LIBS);
  gidLink(cast(void**)&gtk_selection_clear_targets, "gtk_selection_clear_targets", LIBS);
  gidLink(cast(void**)&gtk_selection_convert, "gtk_selection_convert", LIBS);
  gidLink(cast(void**)&gtk_selection_owner_set, "gtk_selection_owner_set", LIBS);
  gidLink(cast(void**)&gtk_selection_owner_set_for_display, "gtk_selection_owner_set_for_display", LIBS);
  gidLink(cast(void**)&gtk_selection_remove_all, "gtk_selection_remove_all", LIBS);
  gidLink(cast(void**)&gtk_set_debug_flags, "gtk_set_debug_flags", LIBS);
  gidLink(cast(void**)&gtk_show_about_dialog, "gtk_show_about_dialog", LIBS);
  gidLink(cast(void**)&gtk_show_uri, "gtk_show_uri", LIBS);
  gidLink(cast(void**)&gtk_show_uri_on_window, "gtk_show_uri_on_window", LIBS);
  gidLink(cast(void**)&gtk_stock_add, "gtk_stock_add", LIBS);
  gidLink(cast(void**)&gtk_stock_add_static, "gtk_stock_add_static", LIBS);
  gidLink(cast(void**)&gtk_stock_list_ids, "gtk_stock_list_ids", LIBS);
  gidLink(cast(void**)&gtk_stock_lookup, "gtk_stock_lookup", LIBS);
  gidLink(cast(void**)&gtk_stock_set_translate_func, "gtk_stock_set_translate_func", LIBS);
  gidLink(cast(void**)&gtk_target_table_free, "gtk_target_table_free", LIBS);
  gidLink(cast(void**)&gtk_target_table_new_from_list, "gtk_target_table_new_from_list", LIBS);
  gidLink(cast(void**)&gtk_targets_include_image, "gtk_targets_include_image", LIBS);
  gidLink(cast(void**)&gtk_targets_include_rich_text, "gtk_targets_include_rich_text", LIBS);
  gidLink(cast(void**)&gtk_targets_include_text, "gtk_targets_include_text", LIBS);
  gidLink(cast(void**)&gtk_targets_include_uri, "gtk_targets_include_uri", LIBS);
  gidLink(cast(void**)&gtk_test_create_simple_window, "gtk_test_create_simple_window", LIBS);
  gidLink(cast(void**)&gtk_test_create_widget, "gtk_test_create_widget", LIBS);
  gidLink(cast(void**)&gtk_test_display_button_window, "gtk_test_display_button_window", LIBS);
  gidLink(cast(void**)&gtk_test_find_label, "gtk_test_find_label", LIBS);
  gidLink(cast(void**)&gtk_test_find_sibling, "gtk_test_find_sibling", LIBS);
  gidLink(cast(void**)&gtk_test_find_widget, "gtk_test_find_widget", LIBS);
  gidLink(cast(void**)&gtk_test_init, "gtk_test_init", LIBS);
  gidLink(cast(void**)&gtk_test_list_all_types, "gtk_test_list_all_types", LIBS);
  gidLink(cast(void**)&gtk_test_register_all_types, "gtk_test_register_all_types", LIBS);
  gidLink(cast(void**)&gtk_test_slider_get_value, "gtk_test_slider_get_value", LIBS);
  gidLink(cast(void**)&gtk_test_slider_set_perc, "gtk_test_slider_set_perc", LIBS);
  gidLink(cast(void**)&gtk_test_spin_button_click, "gtk_test_spin_button_click", LIBS);
  gidLink(cast(void**)&gtk_test_text_get, "gtk_test_text_get", LIBS);
  gidLink(cast(void**)&gtk_test_text_set, "gtk_test_text_set", LIBS);
  gidLink(cast(void**)&gtk_test_widget_click, "gtk_test_widget_click", LIBS);
  gidLink(cast(void**)&gtk_test_widget_send_key, "gtk_test_widget_send_key", LIBS);
  gidLink(cast(void**)&gtk_test_widget_wait_for_draw, "gtk_test_widget_wait_for_draw", LIBS);
  gidLink(cast(void**)&gtk_tree_get_row_drag_data, "gtk_tree_get_row_drag_data", LIBS);
  gidLink(cast(void**)&gtk_tree_set_row_drag_data, "gtk_tree_set_row_drag_data", LIBS);
  gidLink(cast(void**)&gtk_true, "gtk_true", LIBS);
}
